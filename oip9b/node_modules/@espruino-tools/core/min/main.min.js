/*! For license information please see main.min.js.LICENSE.txt */
var ESPT_core;(()=>{var e={"./node_modules/@espruino-tools/transpiler/lib/defaults/transpile_default.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default_transpile_options=void 0,t.default_transpile_options={parse_type:"module",additional_callees:[]}},"./node_modules/@espruino-tools/transpiler/lib/generator.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.generator=void 0;const r=n("./node_modules/escodegen/escodegen.js");t.generator=(e,t)=>e.body.map((e=>r.generate(e))).join("\n").replaceAll(";;",";")},"./node_modules/@espruino-tools/transpiler/lib/index.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformer=t.generator=t.transpile=void 0;const r=n("./node_modules/@espruino-tools/transpiler/lib/transpile.js");Object.defineProperty(t,"transpile",{enumerable:!0,get:function(){return r.transpile}});const i=n("./node_modules/@espruino-tools/transpiler/lib/generator.js");Object.defineProperty(t,"generator",{enumerable:!0,get:function(){return i.generator}});const s=n("./node_modules/@espruino-tools/transpiler/lib/transformer.js");Object.defineProperty(t,"transformer",{enumerable:!0,get:function(){return s.transformer}})},"./node_modules/@espruino-tools/transpiler/lib/mappings.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mappings=void 0;const r=n("./node_modules/@espruino-tools/transpiler/lib/types/mappings.js");t.mappings={Puck:{NFC:{setUrl:e=>`NRF.nfcURL(${e})`,reset:()=>"NRF.nfcURL()"},mag:{enableMag:()=>"Puck.magOn()",enableField:()=>'require("puckjsv2-mag-level").on()',disableMag:()=>"Puck.magOff()",disableField:()=>'require("puckjsv2-mag-level").off()',onMag:e=>`Puck.on('mag', function(){\n        ${e}\n      })`,onField:e=>`Puck.on('field', function(){\n        ${e}\n      })`},accel:{enableAccelMovement:()=>'require("puckjsv2-accel-movement").on()',enableAccelBigMovement:()=>'require("puckjsv2-accel-bigmovement").on()',enableAccelTilt:()=>'require("puckjsv2-accel-tilt").on()',disableAccelMovement:()=>'require("puckjsv2-accel-movement").off()',disableAccelBigMovement:()=>'require("puckjsv2-accel-bigmovement").off()',disableAccelTilt:()=>'require("puckjsv2-accel-tilt").off()',val:()=>"Puck.accel()",onMove:e=>`Puck.on('accel', function(acc){\n        ${e}\n      })`,onTilt:e=>`Puck.on('accel', function(acc){\n        ${e}\n      })`},IR:{transmit:e=>`Puck.IR([${e.join(",")}])`},LED:{on:e=>Array.isArray(e)?`digitalWrite(${e},1)`:`LED${r.LEDColours.indexOf(e)+1}.set()`,off:e=>Array.isArray(e)?`digitalWrite(${e},0)`:`LED${r.LEDColours.indexOf(e)+1}.reset()`,toggle:e=>`LED${r.LEDColours.indexOf(e)+1}.toggle()`,flash:(e,t)=>`digitalPulse(LED${r.LEDColours.indexOf(e)+1},1,${t})`,val:e=>`digitalRead(LED${r.LEDColours.indexOf(e)+1}) == 1`},onPress:e=>`setWatch(function(){\n            ${e}\n        }, BTN, {edge:"rising", repeat:true, debounce:50})`,onTimedPress:(e,t,n=.3)=>`setWatch(function(){\n      var ms = (e.time - e.lastTime);\n\n      if(ms > ${n}){\n        ${e}\n      } else {\n        ${t}\n      }\n    }, BTN, {edge:'falling', repeat:true, debounce:50})`,getTemperature:()=>"E.getTemperature()",getLightVal:()=>"Puck.light()"},DeviceController:{connect:()=>"0",reset:()=>"reset(true)",dump:()=>"E.dumpStr()",getDeviceType:()=>"process.env.BOARD",getBattery:()=>"E.getBattery()",setInterval:(e,t)=>`setInterval(function(){\n      ${e};\n    }, ${t})`,Pin:{val:e=>`${e}.read()`,analogOn:(e,t)=>`analogWrite(${e},${t})`,digitalOn:(e,t)=>`digitalWrite(${e},${t})`,digitalToggle:e=>`${e}.toggle()`,reset:e=>`${e}.reset()`,getInfo:e=>`${e}.getInfo()`}},Pixl:{},Bangle:{}}},"./node_modules/@espruino-tools/transpiler/lib/transformer.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transformer=void 0;const r=n("./node_modules/@espruino-tools/transpiler/lib/mappings.js"),i=n("./node_modules/esprima/dist/esprima.js"),s=n("./node_modules/@espruino-tools/transpiler/lib/generator.js");t.transformer=(e,n)=>{let u=["Puck","Pixl","Bangle","DeviceController",...n.additional_initialisers?n.additional_initialisers:[]];const o=e=>[...e.body.filter((e=>"VariableDeclaration"==e.type)).filter((e=>{var t;return u.includes(null===(t=e.declarations[0].init.callee)||void 0===t?void 0:t.name)})).map((e=>({name:e.declarations[0].id.name,initialiser:e.declarations[0].init.callee.name}))),...n.additional_callees],a=(e,t)=>{let n=e.split(".").reduce(((e,t)=>e[t]),r.mappings);return i.parseScript(n(...t)).body[0]},l=n=>{var r,i,u,l,c,h;if("Identifier"===(null==n?void 0:n.type))return n;let p=o(e),d=null===(u=null===(i=null===(r=null==n?void 0:n.callee)||void 0===r?void 0:r.object)||void 0===i?void 0:i.object)||void 0===u?void 0:u.name,m=p.find((e=>e.name===d)),f=m.initialiser+".";(null===(l=n.callee.object.property)||void 0===l?void 0:l.name)&&(f+=(null===(c=n.callee.object.property)||void 0===c?void 0:c.name)&&(null===(h=n.callee.object.property)||void 0===h?void 0:h.name)+".");let D=n.arguments.map((r=>{if(r.hasOwnProperty("value"))return r.value;{let r=(0,t.transformer)(n.body,{additional_callees:o(e)});return(0,s.generator)(r,{additional_callees:[]})}}));return f+=n.callee.property.name,a(f,D)},c=n=>{var r,i,u,h,D,g,A,C,E,y,x,F,v;let S,b=o(e);switch(null==n?void 0:n.type){case"IfStatement":return p(n);case"ClassDeclaration":return f(n);case"FunctionDeclaration":case"WhileStatement":case"ForStatement":case"ForInStatement":case"DoWhileStatement":return d(n);case"SwitchStatement":return m(n);case"ContinueStatement":case"BreakStatement":return n}if("VariableDeclaration"===(null==n?void 0:n.type)){if("FunctionExpression"===(null===(r=n.declarations[0].init)||void 0===r?void 0:r.type)&&(n.declarations[0].init.body.body=n.declarations[0].init.body.body.map((e=>c(e)))),"AwaitExpression"===(null===(i=n.declarations[0].init)||void 0===i?void 0:i.type))return n;if("ObjectExpression"===(null===(u=n.declarations[0].init)||void 0===u?void 0:u.type))return n.declarations[0].init.properties=n.declarations[0].init.properties.map((e=>("FunctionExpression"===e.value.type?e.value=d(e.value):"CallExpression"===e.value.type?e.value=l(e.value):"ArrowFunctionExpression"===n.value.type&&(e.value.body=l(e.value.body)),e))),n}if("ReturnStatement"===(null==n?void 0:n.type))return"Literal"===n.argument.type||(n.argument=l(n.argument)),n;if("LogicalExpression"===(null==n?void 0:n.expression.type))return"Literal"!==n.expression.right.type&&(n.expression.right=l(n.expression.right)),"Literal"!==n.expression.left.type&&(n.expression.left=l(n.expression.left)),n;if("ConditionalExpression"===(null==n?void 0:n.expression.type))return n.expression.consequent=l(n.expression.consequent),n.expression.alternate=l(n.expression.alternate),n;if("AssignmentExpression"===(null==n?void 0:n.expression.type))return n;if(S="MemberExpression"===(null===(D=null===(h=null==n?void 0:n.expression)||void 0===h?void 0:h.callee)||void 0===D?void 0:D.object.type)?n.expression.callee.object.object.name:"Identifier"===(null===(C=null===(A=null===(g=null==n?void 0:n.expression)||void 0===g?void 0:g.callee)||void 0===A?void 0:A.object)||void 0===C?void 0:C.type)?n.expression.callee.object.name:"","ThisExpression"===(null===(y=null===(E=null==n?void 0:n.expression)||void 0===E?void 0:E.object)||void 0===y?void 0:y.type))return n;if(b.map((e=>e.name)).includes(S)){let r=b.find((e=>e.name===S)),i=r.initialiser+".";(null===(x=n.expression.callee.object.property)||void 0===x?void 0:x.name)&&(i+=(null===(F=n.expression.callee.object.property)||void 0===F?void 0:F.name)&&(null===(v=n.expression.callee.object.property)||void 0===v?void 0:v.name)+".");let u=n.expression.arguments.map((n=>{if(n.hasOwnProperty("value"))return n.value;{let r=(0,t.transformer)(n.body,{additional_callees:o(e)});return(0,s.generator)(r,{additional_callees:[]})}}));return i+=n.expression.callee.property.name,a(i,u)}return(null==n?void 0:n.expression.arguments)instanceof Array&&(n.expression.arguments=n.expression.arguments.map((e=>e.hasOwnProperty("value")?e.value:(e.body.hasOwnProperty("body")&&(e.body.body=e.body.body.map((e=>c(e)))),e)))),n},h=e=>{let t=Object.assign({},e);return"BlockStatement"===t.type&&(t.body=t.body.map((e=>c(e)))),"IfStatement"===t.type?p(t):t},p=e=>{let t=Object.assign({},e);return t.consequent=h(e.consequent),t.alternate&&(t.alternate=h(e.alternate)),t},d=e=>{let t=Object.assign({},e);return t.body.body=t.body.body.map((e=>c(e))),t},m=e=>{let t=Object.assign({},e);return t.cases=t.cases.map((e=>e.consequent=e.consequent.map((e=>c(e))))),e},f=e=>{let t=Object.assign({},e);return t.body.body=t.body.body.map((e=>(e.value=d(e.value),e))),t};return(e=>{let t=Object.assign({},e);return t.body=e.body.map((e=>{switch(e.type){case"ExpressionStatement":return c(e);case"TryStatement":return(e=>(e.block.body=e.block.body.map((e=>c(e))),e.handler.body.body=e.handler.body.body.map((e=>c(e))),e))(e);case"IfStatement":return p(e);case"ClassDeclaration":return f(e);case"FunctionDeclaration":case"WhileStatement":case"ForStatement":case"ForInStatement":case"AsyncFunctionDeclaration":case"DoWhileStatement":return d(e);case"SwitchStatement":return m(e);default:return(e=>{var t,n,r,i;let s;switch(e.type){case"ImportDeclaration":s=e.source.value.includes("espruino-tools")?"":e;break;case"VariableDeclaration":"FunctionExpression"===(null===(t=e.declarations[0].init)||void 0===t?void 0:t.type)&&(e.declarations[0].init.body.body=e.declarations[0].init.body.body.map((e=>c(e)))),"ObjectExpression"===(null===(n=e.declarations[0].init)||void 0===n?void 0:n.type)&&(e.declarations[0].init.properties=e.declarations[0].init.properties.map((e=>("FunctionExpression"===e.value.type?e.value=d(e.value):"CallExpression"===e.value.type?e.value=l(e.value):"ArrowFunctionExpression"===e.value.type&&(e.value.body=l(e.value.body)),e)))),"ArrowFunctionExpression"===(null===(r=e.declarations[0].init)||void 0===r?void 0:r.type)&&(e.declarations[0].init.body.body instanceof Array?e.declarations[0].init.body.body=e.declarations[0].init.body.body.map((e=>c(e))):e.declarations[0].init.body=l(e.declarations[0].init.body)),s=e.declarations[0].init.hasOwnProperty("callee")&&u.includes(null===(i=e.declarations[0].init.callee)||void 0===i?void 0:i.name)?"":e;break;default:return e}return s})(e)}})).filter((e=>""!==e)),t})(e)}},"./node_modules/@espruino-tools/transpiler/lib/transpile.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transpile=void 0;const r=n("./node_modules/esprima/dist/esprima.js"),i=n("./node_modules/@espruino-tools/transpiler/lib/generator.js"),s=n("./node_modules/@espruino-tools/transpiler/lib/defaults/transpile_default.js"),u=n("./node_modules/@espruino-tools/transpiler/lib/transformer.js");t.transpile=(e,t=s.default_transpile_options)=>{t=Object.assign(Object.assign({},s.default_transpile_options),t);try{let n="script"==t.parse_type?(0,r.parseScript)(e):(0,r.parseModule)(e),s=(0,u.transformer)(n,t);return(0,i.generator)(s,{object_name:t.object_name,additional_callees:t.additional_callees})}catch(t){throw e}}},"./node_modules/@espruino-tools/transpiler/lib/types/mappings.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LEDColours=void 0,t.LEDColours=["red","green","blue"]},"./node_modules/@espruino-tools/uart/lib/helpers/isIOS.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIOS=void 0;t.isIOS=()=>{var e,t=/iPad|iPhone|iPod/.test(navigator.userAgent),n=navigator.userAgent.includes("Macintosh"),r=navigator.maxTouchPoints>=1;return t||n&&(r||((e=new Audio).volume=.5,1===e.volume))}},"./node_modules/@espruino-tools/uart/lib/helpers/stringArrayBuffer.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.str2ab=t.ab2str=void 0,t.ab2str=function(e){return String.fromCharCode.apply(null,new Uint8Array(e))},t.str2ab=function(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),r=0,i=e.length;r<i;r++)n[r]=e.charCodeAt(r);return t}},"./node_modules/@espruino-tools/uart/lib/styles/modal.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.classes=void 0;const r=n("./node_modules/jss/dist/jss.esm.js"),i=n("./node_modules/jss-preset-default/dist/jss-preset-default.esm.js");r.default.setup((0,i.default)());t.classes=r.default.createStyleSheet({menu:{color:"#b2b2b2b",background:"white",padding:"10px 16px 10px 16px",fontWeight:"medium",borderTopLeftRadius:7,borderTopRightRadius:7,border:"0.5px solid lightgray","& .esp-tools-header-bar":{display:"flex",alignItems:"center",justifyContent:"space-between","& *":{margin:0},"& div":{cursor:"pointer",borderRadius:"50%",display:"flex",alignItems:"center",justifyContent:"center","&:hover":{background:"rgba(0,0,0,0.05)"}}}},items:{color:"#000",background:"white",padding:"4px 8px 4px 8px",display:"grid",gridTemplateColumns:"fit-content(0)",gridTemplateRows:"fit-content(0)",borderBottomRightRadius:7,borderBottomLeftRadius:7,border:"0.5px solid lightgray",borderTop:0,"& p":{content:"Select a connection method to pair your device",gridArea:"1 / 1 / 2 / 3",fontSize:12,paddingLeft:10,paddingTop:5,margin:0,color:"#7D7D7D"}},endpoints:{width:100,height:150,margin:"4px 0px 4px 0px",paddingLeft:30,paddingRight:30,borderRadius:10,cursor:"pointer",display:"flex",flexDirection:"column",textAlign:"center",alignItems:"center",justifyContent:"center","&:hover":{background:"rgba(0,0,0,0.05)"},"& .esp-tools-icons":{width:48,height:48},"& .esp-tools-name":{fontSize:14,fontWeight:500,paddingTop:8,paddingBottom:4},"& .esp-tools-description":{fontWeight:300,fontSize:12,color:"#666"}}}).attach().classes},"./node_modules/@espruino-tools/uart/lib/uart.js":function(e,t,n){"use strict";var r,i,s,u,o,a,l,c,h,p,d=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},m=this&&this.__classPrivateFieldSet||function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.uart=void 0;const f=n("./node_modules/@espruino-tools/uart/lib/helpers/stringArrayBuffer.js"),D=n("./node_modules/@espruino-tools/uart/lib/styles/modal.js"),g=n("./node_modules/@espruino-tools/uart/lib/helpers/isIOS.js");i=new WeakMap,s=new WeakMap,u=new WeakMap,o=new WeakMap,a=new WeakMap,l=new WeakMap,r=new WeakSet,c=function(){if(d(this,u,"f").length){var e=d(this,u,"f").shift();d(this,r,"m",h).call(this,3,"Executing "+JSON.stringify(e)+" from queue"),"eval"==e.type?this.eval(e.expr,e.cb):"write"==e.type?this.write(e.data,e.callback,e.callbackNewline):d(this,r,"m",h).call(this,1,"Unknown queue item "+JSON.stringify(e))}},h=function(e,t){e<=d(this,i,"f")&&console.log("<UART> "+t)},p=function(){var e=!1;return d(this,l,"f").forEach((t=>{var n=t.isSupported();!0===n?e=!0:d(this,r,"m",h).call(this,0,t.name+" not supported, "+n)})),e};let A=new class{constructor(e){r.add(this),i.set(this,3),this.isBusy=!1,s.set(this,!0),u.set(this,[]),o.set(this,[]),a.set(this,void 0),l.set(this,[{name:"Web Bluetooth",description:"Bluetooth LE devices",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M17.71 7.71L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z" fill="#d2d2d2"/></svg>',isSupported:()=>navigator.platform.indexOf("Win")>=0&&(navigator.userAgent.indexOf("Chrome/54")>=0||navigator.userAgent.indexOf("Chrome/55")>=0||navigator.userAgent.indexOf("Chrome/56")>=0)?"Chrome <56 in Windows has navigator.bluetooth but it's not implemented properly":window&&window.location&&"http:"==window.location.protocol&&"localhost"!=window.location.hostname?"Serving off HTTP (not HTTPS) - Web Bluetooth not enabled":!!navigator.bluetooth||((0,g.isIOS)()?"To use Web Bluetooth on iOS you'll need the WebBLE App.\nPlease go to https://itunes.apple.com/us/app/webble/id1193531073 to download it.":"This Web Browser doesn't support Web Bluetooth.\nPlease see https://www.espruino.com/Puck.js+Quick+Start"),connect:(e,t)=>{var n,i,a,l="6e400001-b5a3-f393-e0a9-e50e24dcca9e",c=void 0,p=[],D=!1,g=20;return e.close=t=>{e.isOpening=!1,e.isOpen?(e.isOpen=!1,e.emit("close")):t&&t(null),c&&(c.disconnect(),c=void 0,i=void 0,a=void 0)},e.write=(t,n)=>{t&&p.push({data:t,callback:n,maxLength:t.length});const s=()=>{var t;if(D)setTimeout(s,50);else if(p.length){var n=p[0];n.data.length<=g?(t=n.data,n.data=void 0):(t=n.data.substr(0,g),n.data=n.data.substr(g)),e.txInProgress=!0,d(this,r,"m",h).call(this,2,"Sending "+JSON.stringify(t)),d(this,o,"f").push(JSON.stringify(t)),i.writeValue((0,f.str2ab)(t)).then((()=>{d(this,r,"m",h).call(this,3,"Sent"),n.data||(p.shift(),n.callback&&n.callback()),e.txInProgress=!1,s()})).catch((t=>{d(this,r,"m",h).call(this,1,"SEND ERROR: "+t),p=[],e.close()}))}};e.isOpen&&!e.txInProgress&&s()},navigator.bluetooth.requestDevice({filters:[{namePrefix:"Puck.js"},{namePrefix:"Pixl.js"},{namePrefix:"MDBT42Q"},{namePrefix:"Bangle"},{namePrefix:"RuuviTag"},{namePrefix:"iTracker"},{namePrefix:"Thingy"},{namePrefix:"Espruino"},{services:[l]}],optionalServices:[l]}).then((t=>(d(this,r,"m",h).call(this,1,"Device Name:       "+t.name),d(this,r,"m",h).call(this,1,"Device ID:         "+t.id),t.addEventListener("gattserverdisconnected",(()=>{d(this,r,"m",h).call(this,1,"Disconnected (gattserverdisconnected)"),e.close()})),t.gatt.connect()))).then((e=>(d(this,r,"m",h).call(this,1,"Connected"),c=e,e.getPrimaryService(l)))).then((e=>(d(this,r,"m",h).call(this,2,"Got service"),(n=e).getCharacteristic("6e400003-b5a3-f393-e0a9-e50e24dcca9e")))).then((t=>(a=t,d(this,r,"m",h).call(this,2,"RX characteristic:"+JSON.stringify(a)),a.addEventListener("characteristicvaluechanged",(t=>{var n=t.target.value;if(n.byteLength>g&&(d(this,r,"m",h).call(this,2,"Received packet of length "+n.byteLength+", increasing chunk size"),g=n.byteLength),d(this,s,"f"))for(var i=0;i<n.byteLength;i++){var u=n.getUint8(i);17==u&&(d(this,r,"m",h).call(this,2,"XON received => resume upload"),D=!1),19==u&&(d(this,r,"m",h).call(this,2,"XOFF received => pause upload"),D=!0)}var o=(0,f.ab2str)(n.buffer);d(this,r,"m",h).call(this,3,"Received "+JSON.stringify(o)),e.emit("data",o)})),a.startNotifications()))).then((function(){return n.getCharacteristic("6e400002-b5a3-f393-e0a9-e50e24dcca9e")})).then((e=>{i=e,d(this,r,"m",h).call(this,2,"TX characteristic:"+JSON.stringify(i))})).then((()=>{e.txInProgress=!1,e.isOpen=!0,e.isOpening=!1,this.isBusy=!1,m(this,u,[],"f"),t(e),e.emit("open"),e.write()})).catch((t=>{d(this,r,"m",h).call(this,1,"ERROR: "+t),e.close()})),e}},{name:"Web Serial",description:"USB connected devices",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z" fill="#d2d2d2"/></svg>',isSupported:function(){return navigator.serial?!window||!window.location||"http:"!=window.location.protocol||"localhost"==window.location.hostname||"Serving off HTTP (not HTTPS) - Web Serial not enabled":"No navigator.serial - Web Serial not enabled"},connect:(e,t)=>{var n;const i=()=>{e.isOpening=!1,e.isOpen&&(d(this,r,"m",h).call(this,1,"Disconnected"),e.isOpen=!1,e.emit("close"))};return navigator.serial.requestPort().then((e=>(d(this,r,"m",h).call(this,1,"Connecting to serial port"),n=e,e.open({baudRate:115200})))).then((()=>{const s=()=>{var t=n.readable.getReader();t.read().then((({value:n,done:u})=>{if(t.releaseLock(),n){var o=(0,f.ab2str)(n.buffer);d(this,r,"m",h).call(this,3,"Received "+JSON.stringify(o)),e.emit("data",o)}u?i():s()}))};s(),d(this,r,"m",h).call(this,1,"Serial connected. Receiving data..."),e.txInProgress=!1,e.isOpen=!0,e.isOpening=!1,t(e)})).catch((e=>{d(this,r,"m",h).call(this,0,"ERROR: "+e),i()})),e.close=function(e){n&&(n.close(),n=void 0),i()},e.write=(e,t)=>{var i=n.writable.getWriter();i.write((0,f.str2ab)(e)).then((()=>{null==t||t(e)})).catch((e=>{d(this,r,"m",h).call(this,0,"SEND ERROR: "+e)})),i.releaseLock()},e}}]),this.DATA_WAIT_TIME=null==e?void 0:e.dataWaitTime}connect(e){m(this,a,{on:function(e,t){this["on"+e]=t},emit:function(e,t){this["on"+e]&&this["on"+e](t)},isOpen:!1,isOpening:!0,txInProgress:!1},"f");var t=document.createElement("div");t.setAttribute("style","position:absolute;top:0px;left:0px;right:0px;bottom:0px;opacity:0.5;z-index:100;background:black;");var n=document.createElement("div");n.setAttribute("style","position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-family: Sans-Serif;z-index:101;");var i=document.createElement("div");i.classList.add(D.classes.menu);var s=document.createElement("div");s.classList.add("esp-tools-header-bar");let u=document.createElement("p");u.innerText="Connect",s.appendChild(u);let o=document.createElement("div");o.innerHTML='<svg id="esp-tools-close-modal" stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="2" d="M7,7 L17,17 M7,17 L17,7"></path></svg>',s.appendChild(o),i.appendChild(s),n.appendChild(i);var c=document.createElement("div");c.classList.add(D.classes.items);let p=document.createElement("p");return p.innerText="Select a connection method to pair your device",c.appendChild(p),n.appendChild(c),d(this,l,"f").forEach((i=>{var s=i.isSupported();!0!==s&&d(this,r,"m",h).call(this,0,i.name+" not supported, "+s);var u=document.createElement("div");u.classList.add(D.classes.endpoints),u.innerHTML='<div class="esp-tools-icons">'+i.svg+'</div><div class="esp-tools-name">'+i.name+'</div><div class="esp-tools-description">'+i.description+"</div>",u.onclick=r=>{m(this,a,i.connect(d(this,a,"f"),e),"f"),r.preventDefault(),document.body.removeChild(n),document.body.removeChild(t)},c.appendChild(u)})),o.onclick=()=>{document.body.removeChild(n),document.body.removeChild(t),d(this,a,"f").isOpening=!1,d(this,a,"f").isOpen?d(this,a,"f").isOpen=!1:e&&e(null)},document.body.appendChild(t),document.body.appendChild(n),d(this,a,"f")}getWrittenData(){let e=d(this,o,"f").join("");return new Promise((t=>t(e)))}write(e,t,n){if(!d(this,r,"m",p).call(this))return;if(this.isBusy)return d(this,r,"m",h).call(this,3,"Busy - adding write to queue"),void d(this,u,"f").push({type:"write",data:e,callback:t,callbackNewline:n});var i;const s=()=>{n&&(d(this,a,"f").cb=()=>{var e=d(this,a,"f").received.indexOf("\n");if(e>=0){var n=d(this,a,"f").received.substr(0,e);d(this,a,"f").received=d(this,a,"f").received.substr(e+1),d(this,a,"f").cb=void 0,i&&clearTimeout(i),i=void 0,t&&t(n),this.isBusy=!1,d(this,r,"m",c).call(this)}});var e=300,s=n?100:0,u=s;const o=()=>{i=void 0,e&&e--,u&&u--,d(this,a,"f").hadData&&(u=s),u&&e?i=setTimeout(o,100):(d(this,a,"f").cb=void 0,n&&d(this,r,"m",h).call(this,2,"write waiting for newline timed out"),t&&t(d(this,a,"f").received),this.isBusy=!1,d(this,r,"m",c).call(this),d(this,a,"f").received=""),d(this,a,"f").hadData=!1};i=setTimeout(o,100)};if(d(this,a,"f")&&(d(this,a,"f").isOpen||d(this,a,"f").isOpening))return d(this,a,"f").txInProgress||(d(this,a,"f").received=""),this.isBusy=!0,d(this,a,"f").write(e,s);m(this,a,this.connect((n=>{if(!n)return m(this,a,void 0,"f"),void(t&&t(null));d(this,a,"f").received="",d(this,a,"f").on("data",(e=>{d(this,a,"f").received+=e,d(this,a,"f").hadData=!0,d(this,a,"f").cb&&d(this,a,"f").cb(e)})),d(this,a,"f").on("close",(e=>{m(this,a,void 0,"f")})),this.isBusy=!0,d(this,a,"f").write(e,s)})),"f")}eval(e,t){return!!d(this,r,"m",p).call(this)&&(this.isBusy?(d(this,r,"m",h).call(this,3,"Busy - adding eval to queue"),d(this,u,"f").push({type:"eval",expr:e,cb:t}),!1):(this.write("eval(process.env.CONSOLE).println(JSON.stringify("+e+"))\n",(e=>{try{var n=JSON.parse(e.trim());t(n,"success")}catch(n){d(this,r,"m",h).call(this,1,"Unable to decode "+JSON.stringify(e)+", got "+n.toString()),t(null,"failed")}}),!0),!0))}setTime(e){let t=new Date,n="setTime("+t.getTime()/1e3+");";n+="if (E.setTimeZone) E.setTimeZone("+t.getTimezoneOffset()/-60+");\n",this.write(n,e)}isConnected(){return void 0!==d(this,a,"f")}getConnection(){return d(this,a,"f")}close(){d(this,a,"f")&&d(this,a,"f").close()}};t.uart=A},"./node_modules/css-vendor/dist/css-vendor.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{prefix:()=>d,supportedKeyframes:()=>m,supportedProperty:()=>K,supportedValue:()=>Z});var r=n("./node_modules/is-in-browser/dist/module.js"),i=n("./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),s="",u="",o="",a="",l=r.default&&"ontouchstart"in document.documentElement;if(r.default){var c={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},h=document.createElement("p").style;for(var p in c)if(p+"Transform"in h){s=p,u=c[p];break}"Webkit"===s&&"msHyphens"in h&&(s="ms",u=c.ms,a="edge"),"Webkit"===s&&"-apple-trailing-word"in h&&(o="apple")}var d={js:s,css:u,vendor:o,browser:a,isTouch:l};function m(e){return"-"===e[1]||"ms"===d.js?e:"@"+d.css+"keyframes"+e.substr(10)}var f={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===d.js?"-webkit-"+e:d.css+e)}},D={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===d.js?d.css+"print-"+e:e)}},g=/[-\s]+(.)?/g;function A(e,t){return t?t.toUpperCase():""}function C(e){return e.replace(g,A)}function E(e){return C("-"+e)}var y,x={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===d.js){var n="mask-image";if(C(n)in t)return e;if(d.js+E(n)in t)return d.css+e}return e}},F={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==d.vendor||d.isTouch?e:d.css+e)}},v={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:d.css+e)}},S={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:d.css+e)}},b={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===d.js||"ms"===d.js&&"edge"!==d.browser?d.css+e:e)}},B={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===d.js||"ms"===d.js||"apple"===d.vendor?d.css+e:e)}},w={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===d.js?"WebkitColumn"+E(e)in t&&d.css+"column-"+e:"Moz"===d.js&&("page"+E(e)in t&&"page-"+e))}},k={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===d.js)return e;var n=e.replace("-inline","");return d.js+E(n)in t&&d.css+n}},T={supportedProperty:function(e,t){return C(e)in t&&e}},_={supportedProperty:function(e,t){var n=E(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:d.js+n in t?d.css+e:"Webkit"!==d.js&&"Webkit"+n in t&&"-webkit-"+e}},P={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===d.js?""+d.css+e:e)}},j={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===d.js?d.css+"scroll-chaining":e)}},M={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},I={supportedProperty:function(e,t){var n=M[e];return!!n&&(d.js+E(n)in t&&d.css+n)}},R={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},N=Object.keys(R),O=function(e){return d.css+e},L={supportedProperty:function(e,t,n){var r=n.multiple;if(N.indexOf(e)>-1){var i=R[e];if(!Array.isArray(i))return d.js+E(i)in t&&d.css+i;if(!r)return!1;for(var s=0;s<i.length;s++)if(!(d.js+E(i[0])in t))return!1;return i.map(O)}return!1}},U=[f,D,x,F,v,S,b,B,w,k,T,_,P,j,I,L],J=U.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),z=U.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,(0,i.default)(t.noPrefill)),e}),[]),X={};if(r.default){y=document.createElement("p");var W=window.getComputedStyle(document.documentElement,"");for(var q in W)isNaN(q)||(X[W[q]]=W[q]);z.forEach((function(e){return delete X[e]}))}function K(e,t){if(void 0===t&&(t={}),!y)return e;if(null!=X[e])return X[e];"transition"!==e&&"transform"!==e||(t[e]=e in y.style);for(var n=0;n<J.length&&(X[e]=J[n](e,y.style,t),!X[e]);n++);try{y.style[e]=""}catch(e){return!1}return X[e]}var G,V={},H={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},$=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Y(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?K(t):", "+K(n);return r||(t||n)}function Z(e,t){var n=t;if(!G||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=V[r])return V[r];try{G.style[e]=n}catch(e){return V[r]=!1,!1}if(H[e])n=n.replace($,Y);else if(""===G.style[e]&&("-ms-flex"===(n=d.css+n)&&(G.style[e]="-ms-flexbox"),G.style[e]=n,""===G.style[e]))return V[r]=!1,!1;return G.style[e]="",V[r]=n,V[r]}r.default&&(G=document.createElement("p"))},"./node_modules/escodegen/escodegen.js":(e,t,n)=>{!function(){"use strict";var e,r,i,s,u,o,a,l,c,h,p,d,m,f,D,g,A,C,E,y,x,F,v,S,b,B;function w(e){return H.Statement.hasOwnProperty(e.type)}u=n("./node_modules/escodegen/node_modules/estraverse/estraverse.js"),o=n("./node_modules/esutils/lib/utils.js"),e=u.Syntax,i={"||":(r={Sequence:0,Yield:1,Assignment:1,Conditional:2,ArrowFunction:2,LogicalOR:3,LogicalAND:4,BitwiseOR:5,BitwiseXOR:6,BitwiseAND:7,Equality:8,Relational:9,BitwiseSHIFT:10,Additive:11,Multiplicative:12,Exponentiation:13,Await:14,Unary:14,Postfix:15,OptionalChaining:16,Call:17,New:18,TaggedTemplate:19,Member:20,Primary:21}).LogicalOR,"&&":r.LogicalAND,"|":r.BitwiseOR,"^":r.BitwiseXOR,"&":r.BitwiseAND,"==":r.Equality,"!=":r.Equality,"===":r.Equality,"!==":r.Equality,is:r.Equality,isnt:r.Equality,"<":r.Relational,">":r.Relational,"<=":r.Relational,">=":r.Relational,in:r.Relational,instanceof:r.Relational,"<<":r.BitwiseSHIFT,">>":r.BitwiseSHIFT,">>>":r.BitwiseSHIFT,"+":r.Additive,"-":r.Additive,"*":r.Multiplicative,"%":r.Multiplicative,"/":r.Multiplicative,"**":r.Exponentiation};var k=32,T=33;function _(e,t){var n="";for(t|=0;t>0;t>>>=1,e+=e)1&t&&(n+=e);return n}function P(e){var t=e.length;return t&&o.code.isLineTerminator(e.charCodeAt(t-1))}function j(e,t){var n;for(n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function M(e,t){var n,r;function i(e){return"object"==typeof e&&e instanceof Object&&!(e instanceof RegExp)}for(n in t)t.hasOwnProperty(n)&&(i(r=t[n])?i(e[n])?M(e[n],r):e[n]=M({},r):e[n]=r);return e}function I(e,t){return 8232==(-2&e)?(t?"u":"\\u")+(8232===e?"2028":"2029"):10===e||13===e?(t?"":"\\")+(10===e?"n":"r"):String.fromCharCode(e)}function R(e,t){var n;return 8===e?"\\b":12===e?"\\f":9===e?"\\t":(n=e.toString(16).toUpperCase(),c||e>255?"\\u"+"0000".slice(n.length)+n:0!==e||o.code.isDecimalDigit(t)?11===e?"\\x0B":"\\x"+"00".slice(n.length)+n:"\\0")}function N(e){if(92===e)return"\\\\";if(10===e)return"\\n";if(13===e)return"\\r";if(8232===e)return"\\u2028";if(8233===e)return"\\u2029";throw new Error("Incorrectly classified character")}function O(e){var t,n,r,i="";for(t=0,n=e.length;t<n;++t)r=e[t],i+=Array.isArray(r)?O(r):r;return i}function L(e,t){if(!F)return Array.isArray(e)?O(e):e;if(null==t){if(e instanceof s)return e;t={}}return null==t.loc?new s(null,null,F,e,t.name||null):new s(t.loc.start.line,t.loc.start.column,!0===F?t.loc.source||null:F,e,t.name||null)}function U(){return D||" "}function J(e,t){var n,r,i,s;return 0===(n=L(e).toString()).length?[t]:0===(r=L(t).toString()).length?[e]:(i=n.charCodeAt(n.length-1),s=r.charCodeAt(0),(43===i||45===i)&&i===s||o.code.isIdentifierPartES5(i)&&o.code.isIdentifierPartES5(s)||47===i&&105===s?[e,U(),t]:o.code.isWhiteSpace(i)||o.code.isLineTerminator(i)||o.code.isWhiteSpace(s)||o.code.isLineTerminator(s)?[e,t]:[e,D,t])}function z(e){return[a,e]}function X(e){var t;t=a,e(a+=l),a=t}function W(e,t){if("Line"===e.type){if(P(e.value))return"//"+e.value;var n="//"+e.value;return S||(n+="\n"),n}return y.format.indent.adjustMultilineComment&&/[\n\r]/.test(e.value)?function(e,t){var n,r,i,s,u,l,c,h;for(n=e.split(/\r\n|[\r\n]/),l=Number.MAX_VALUE,r=1,i=n.length;r<i;++r){for(s=n[r],u=0;u<s.length&&o.code.isWhiteSpace(s.charCodeAt(u));)++u;l>u&&(l=u)}for(void 0!==t?(c=a,"*"===n[1][l]&&(t+=" "),a=t):(1&l&&--l,c=a),r=1,i=n.length;r<i;++r)h=L(z(n[r].slice(l))),n[r]=F?h.join(""):h;return a=c,n.join("\n")}("/*"+e.value+"*/",t):"/*"+e.value+"*/"}function q(t,n){var r,i,s,u,c,h,p,d,m,f,D,g;if(t.leadingComments&&t.leadingComments.length>0){if(u=n,S){for(n=[],d=(s=t.leadingComments[0]).extendedRange,m=s.range,(g=((D=v.substring(d[0],m[0])).match(/\n/g)||[]).length)>0?(n.push(_("\n",g)),n.push(z(W(s)))):(n.push(D),n.push(W(s))),f=m,r=1,i=t.leadingComments.length;r<i;r++)m=(s=t.leadingComments[r]).range,g=(v.substring(f[1],m[0]).match(/\n/g)||[]).length,n.push(_("\n",g)),n.push(z(W(s))),f=m;g=(v.substring(m[1],d[1]).match(/\n/g)||[]).length,n.push(_("\n",g))}else for(s=t.leadingComments[0],n=[],C&&t.type===e.Program&&0===t.body.length&&n.push("\n"),n.push(W(s)),P(L(n).toString())||n.push("\n"),r=1,i=t.leadingComments.length;r<i;++r)P(L(p=[W(s=t.leadingComments[r])]).toString())||p.push("\n"),n.push(z(p));n.push(z(u))}if(t.trailingComments)if(S)d=(s=t.trailingComments[0]).extendedRange,m=s.range,(g=((D=v.substring(d[0],m[0])).match(/\n/g)||[]).length)>0?(n.push(_("\n",g)),n.push(z(W(s)))):(n.push(D),n.push(W(s)));else for(c=!P(L(n).toString()),h=_(" ",function(e){var t;for(t=e.length-1;t>=0&&!o.code.isLineTerminator(e.charCodeAt(t));--t);return e.length-1-t}(L([a,n,l]).toString())),r=0,i=t.trailingComments.length;r<i;++r)s=t.trailingComments[r],c?(n=0===r?[n,l]:[n,h]).push(W(s,h)):n=[n,z(W(s))],r===i-1||P(L(n).toString())||(n=[n,"\n"]);return n}function K(e,t,n){var r,i=0;for(r=e;r<t;r++)"\n"===v[r]&&i++;for(r=1;r<i;r++)n.push(f)}function G(e,t,n){return t<n?["(",e,")"]:e}function V(e){var t,n,r;for(t=1,n=(r=e.split(/\r\n|\n/)).length;t<n;t++)r[t]=f+a+r[t];return r}function H(){}function $(e){return L(e.name,e)}function Y(e,t){return e.async?"async"+(t?U():D):""}function Z(e){return e.generator&&!y.moz.starlessGenerator?"*"+D:""}function Q(e){var t=e.value,n="";return t.async&&(n+=Y(t,!e.computed)),t.generator&&(n+=Z(t)?"*":""),n}function ee(e){var t;if(t=new H,w(e))return t.generateStatement(e,1);if(function(e){return H.Expression.hasOwnProperty(e.type)}(e))return t.generateExpression(e,r.Sequence,7);throw new Error("Unknown node type: "+e.type)}H.prototype.maybeBlock=function(t,n){var r,i,s=this;return i=!y.comment||!t.leadingComments,t.type===e.BlockStatement&&i?[D,this.generateStatement(t,n)]:t.type===e.EmptyStatement&&i?";":(X((function(){r=[f,z(s.generateStatement(t,n))]})),r)},H.prototype.maybeBlockSuffix=function(t,n){var r=P(L(n).toString());return t.type!==e.BlockStatement||y.comment&&t.leadingComments||r?r?[n,a]:[n,f,a]:[n,D]},H.prototype.generatePattern=function(t,n,r){return t.type===e.Identifier?$(t):this.generateExpression(t,n,r)},H.prototype.generateFunctionParams=function(t){var n,i,s,u;if(u=!1,t.type!==e.ArrowFunctionExpression||t.rest||t.defaults&&0!==t.defaults.length||1!==t.params.length||t.params[0].type!==e.Identifier){for((s=t.type===e.ArrowFunctionExpression?[Y(t,!1)]:[]).push("("),t.defaults&&(u=!0),n=0,i=t.params.length;n<i;++n)u&&t.defaults[n]?s.push(this.generateAssignment(t.params[n],t.defaults[n],"=",r.Assignment,7)):s.push(this.generatePattern(t.params[n],r.Assignment,7)),n+1<i&&s.push(","+D);t.rest&&(t.params.length&&s.push(","+D),s.push("..."),s.push($(t.rest))),s.push(")")}else s=[Y(t,!0),$(t.params[0])];return s},H.prototype.generateFunctionBody=function(t){var n,i;return n=this.generateFunctionParams(t),t.type===e.ArrowFunctionExpression&&(n.push(D),n.push("=>")),t.expression?(n.push(D),"{"===(i=this.generateExpression(t.body,r.Assignment,7)).toString().charAt(0)&&(i=["(",i,")"]),n.push(i)):n.push(this.maybeBlock(t.body,9)),n},H.prototype.generateIterationForStatement=function(t,n,i){var s=["for"+(n.await?U()+"await":"")+D+"("],u=this;return X((function(){n.left.type===e.VariableDeclaration?X((function(){s.push(n.left.kind+U()),s.push(u.generateStatement(n.left.declarations[0],0))})):s.push(u.generateExpression(n.left,r.Call,7)),s=J(s,t),s=[J(s,u.generateExpression(n.right,r.Assignment,7)),")"]})),s.push(this.maybeBlock(n.body,i)),s},H.prototype.generatePropertyKey=function(e,t){var n=[];return t&&n.push("["),n.push(this.generateExpression(e,r.Assignment,7)),t&&n.push("]"),n},H.prototype.generateAssignment=function(e,t,n,i,s){return r.Assignment<i&&(s|=1),G([this.generateExpression(e,r.Call,s),D+n+D,this.generateExpression(t,r.Assignment,s)],r.Assignment,i)},H.prototype.semicolon=function(e){return!A&&e&k?"":";"},H.Statement={BlockStatement:function(e,t){var n,r,i=["{",f],s=this;return X((function(){var u,o,a,l;for(0===e.body.length&&S&&(n=e.range)[1]-n[0]>2&&("\n"===(r=v.substring(n[0]+1,n[1]-1))[0]&&(i=["{"]),i.push(r)),l=1,8&t&&(l|=16),u=0,o=e.body.length;u<o;++u)S&&(0===u&&(e.body[0].leadingComments&&(n=e.body[0].leadingComments[0].extendedRange,"\n"===(r=v.substring(n[0],n[1]))[0]&&(i=["{"])),e.body[0].leadingComments||K(e.range[0],e.body[0].range[0],i)),u>0&&(e.body[u-1].trailingComments||e.body[u].leadingComments||K(e.body[u-1].range[1],e.body[u].range[0],i))),u===o-1&&(l|=k),a=e.body[u].leadingComments&&S?s.generateStatement(e.body[u],l):z(s.generateStatement(e.body[u],l)),i.push(a),P(L(a).toString())||S&&u<o-1&&e.body[u+1].leadingComments||i.push(f),S&&u===o-1&&(e.body[u].trailingComments||K(e.body[u].range[1],e.range[1],i))})),i.push(z("}")),i},BreakStatement:function(e,t){return e.label?"break "+e.label.name+this.semicolon(t):"break"+this.semicolon(t)},ContinueStatement:function(e,t){return e.label?"continue "+e.label.name+this.semicolon(t):"continue"+this.semicolon(t)},ClassBody:function(e,t){var n=["{",f],i=this;return X((function(t){var s,u;for(s=0,u=e.body.length;s<u;++s)n.push(t),n.push(i.generateExpression(e.body[s],r.Sequence,7)),s+1<u&&n.push(f)})),P(L(n).toString())||n.push(f),n.push(a),n.push("}"),n},ClassDeclaration:function(e,t){var n,i;return n=["class"],e.id&&(n=J(n,this.generateExpression(e.id,r.Sequence,7))),e.superClass&&(i=J("extends",this.generateExpression(e.superClass,r.Unary,7)),n=J(n,i)),n.push(D),n.push(this.generateStatement(e.body,T)),n},DirectiveStatement:function(e,t){return y.raw&&e.raw?e.raw+this.semicolon(t):function(e){var t,n,r,i;for(i="double"===d?'"':"'",t=0,n=e.length;t<n;++t){if(39===(r=e.charCodeAt(t))){i='"';break}if(34===r){i="'";break}92===r&&++t}return i+e+i}(e.directive)+this.semicolon(t)},DoWhileStatement:function(e,t){var n=J("do",this.maybeBlock(e.body,1));return J(n=this.maybeBlockSuffix(e.body,n),["while"+D+"(",this.generateExpression(e.test,r.Sequence,7),")"+this.semicolon(t)])},CatchClause:function(e,t){var n,i=this;return X((function(){var t;e.param?(n=["catch"+D+"(",i.generateExpression(e.param,r.Sequence,7),")"],e.guard&&(t=i.generateExpression(e.guard,r.Sequence,7),n.splice(2,0," if ",t))):n=["catch"]})),n.push(this.maybeBlock(e.body,1)),n},DebuggerStatement:function(e,t){return"debugger"+this.semicolon(t)},EmptyStatement:function(e,t){return";"},ExportDefaultDeclaration:function(e,t){var n,i=["export"];return n=t&k?T:1,i=J(i,"default"),i=w(e.declaration)?J(i,this.generateStatement(e.declaration,n)):J(i,this.generateExpression(e.declaration,r.Assignment,7)+this.semicolon(t))},ExportNamedDeclaration:function(t,n){var i,s=["export"],u=this;return i=n&k?T:1,t.declaration?J(s,this.generateStatement(t.declaration,i)):(t.specifiers&&(0===t.specifiers.length?s=J(s,"{"+D+"}"):t.specifiers[0].type===e.ExportBatchSpecifier?s=J(s,this.generateExpression(t.specifiers[0],r.Sequence,7)):(s=J(s,"{"),X((function(e){var n,i;for(s.push(f),n=0,i=t.specifiers.length;n<i;++n)s.push(e),s.push(u.generateExpression(t.specifiers[n],r.Sequence,7)),n+1<i&&s.push(","+f)})),P(L(s).toString())||s.push(f),s.push(a+"}")),t.source?s=J(s,["from"+D,this.generateExpression(t.source,r.Sequence,7),this.semicolon(n)]):s.push(this.semicolon(n))),s)},ExportAllDeclaration:function(e,t){return["export"+D,"*"+D,"from"+D,this.generateExpression(e.source,r.Sequence,7),this.semicolon(t)]},ExpressionStatement:function(t,n){var i,s;return 123===(s=L(i=[this.generateExpression(t.expression,r.Sequence,7)]).toString()).charCodeAt(0)||function(e){var t;return"class"===e.slice(0,5)&&(123===(t=e.charCodeAt(5))||o.code.isWhiteSpace(t)||o.code.isLineTerminator(t))}(s)||function(e){var t;return"function"===e.slice(0,8)&&(40===(t=e.charCodeAt(8))||o.code.isWhiteSpace(t)||42===t||o.code.isLineTerminator(t))}(s)||function(e){var t,n,r;if("async"!==e.slice(0,5))return!1;if(!o.code.isWhiteSpace(e.charCodeAt(5)))return!1;for(n=6,r=e.length;n<r&&o.code.isWhiteSpace(e.charCodeAt(n));++n);return n!==r&&("function"===e.slice(n,n+8)&&(40===(t=e.charCodeAt(n+8))||o.code.isWhiteSpace(t)||42===t||o.code.isLineTerminator(t)))}(s)||E&&16&n&&t.expression.type===e.Literal&&"string"==typeof t.expression.value?i=["(",i,")"+this.semicolon(n)]:i.push(this.semicolon(n)),i},ImportDeclaration:function(t,n){var i,s,u=this;return 0===t.specifiers.length?["import",D,this.generateExpression(t.source,r.Sequence,7),this.semicolon(n)]:(i=["import"],s=0,t.specifiers[s].type===e.ImportDefaultSpecifier&&(i=J(i,[this.generateExpression(t.specifiers[s],r.Sequence,7)]),++s),t.specifiers[s]&&(0!==s&&i.push(","),t.specifiers[s].type===e.ImportNamespaceSpecifier?i=J(i,[D,this.generateExpression(t.specifiers[s],r.Sequence,7)]):(i.push(D+"{"),t.specifiers.length-s==1?(i.push(D),i.push(this.generateExpression(t.specifiers[s],r.Sequence,7)),i.push(D+"}"+D)):(X((function(e){var n,o;for(i.push(f),n=s,o=t.specifiers.length;n<o;++n)i.push(e),i.push(u.generateExpression(t.specifiers[n],r.Sequence,7)),n+1<o&&i.push(","+f)})),P(L(i).toString())||i.push(f),i.push(a+"}"+D)))),i=J(i,["from"+D,this.generateExpression(t.source,r.Sequence,7),this.semicolon(n)]))},VariableDeclarator:function(e,t){var n=1&t?7:6;return e.init?[this.generateExpression(e.id,r.Assignment,n),D,"=",D,this.generateExpression(e.init,r.Assignment,n)]:this.generatePattern(e.id,r.Assignment,n)},VariableDeclaration:function(e,t){var n,r,i,s,u,o=this;function a(){for(s=e.declarations[0],y.comment&&s.leadingComments?(n.push("\n"),n.push(z(o.generateStatement(s,u)))):(n.push(U()),n.push(o.generateStatement(s,u))),r=1,i=e.declarations.length;r<i;++r)s=e.declarations[r],y.comment&&s.leadingComments?(n.push(","+f),n.push(z(o.generateStatement(s,u)))):(n.push(","+D),n.push(o.generateStatement(s,u)))}return n=[e.kind],u=1&t?1:0,e.declarations.length>1?X(a):a(),n.push(this.semicolon(t)),n},ThrowStatement:function(e,t){return[J("throw",this.generateExpression(e.argument,r.Sequence,7)),this.semicolon(t)]},TryStatement:function(e,t){var n,r,i,s;if(n=["try",this.maybeBlock(e.block,1)],n=this.maybeBlockSuffix(e.block,n),e.handlers)for(r=0,i=e.handlers.length;r<i;++r)n=J(n,this.generateStatement(e.handlers[r],1)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(e.handlers[r].body,n));else{for(r=0,i=(s=e.guardedHandlers||[]).length;r<i;++r)n=J(n,this.generateStatement(s[r],1)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(s[r].body,n));if(e.handler)if(Array.isArray(e.handler))for(r=0,i=e.handler.length;r<i;++r)n=J(n,this.generateStatement(e.handler[r],1)),(e.finalizer||r+1!==i)&&(n=this.maybeBlockSuffix(e.handler[r].body,n));else n=J(n,this.generateStatement(e.handler,1)),e.finalizer&&(n=this.maybeBlockSuffix(e.handler.body,n))}return e.finalizer&&(n=J(n,["finally",this.maybeBlock(e.finalizer,1)])),n},SwitchStatement:function(e,t){var n,i,s,u,o,a=this;if(X((function(){n=["switch"+D+"(",a.generateExpression(e.discriminant,r.Sequence,7),")"+D+"{"+f]})),e.cases)for(o=1,s=0,u=e.cases.length;s<u;++s)s===u-1&&(o|=k),i=z(this.generateStatement(e.cases[s],o)),n.push(i),P(L(i).toString())||n.push(f);return n.push(z("}")),n},SwitchCase:function(t,n){var i,s,u,o,a,l=this;return X((function(){for(i=t.test?[J("case",l.generateExpression(t.test,r.Sequence,7)),":"]:["default:"],u=0,(o=t.consequent.length)&&t.consequent[0].type===e.BlockStatement&&(s=l.maybeBlock(t.consequent[0],1),i.push(s),u=1),u===o||P(L(i).toString())||i.push(f),a=1;u<o;++u)u===o-1&&n&k&&(a|=k),s=z(l.generateStatement(t.consequent[u],a)),i.push(s),u+1===o||P(L(s).toString())||i.push(f)})),i},IfStatement:function(t,n){var i,s,u=this;return X((function(){i=["if"+D+"(",u.generateExpression(t.test,r.Sequence,7),")"]})),s=1,n&k&&(s|=k),t.alternate?(i.push(this.maybeBlock(t.consequent,1)),i=this.maybeBlockSuffix(t.consequent,i),i=t.alternate.type===e.IfStatement?J(i,["else ",this.generateStatement(t.alternate,s)]):J(i,J("else",this.maybeBlock(t.alternate,s)))):i.push(this.maybeBlock(t.consequent,s)),i},ForStatement:function(t,n){var i,s=this;return X((function(){i=["for"+D+"("],t.init?t.init.type===e.VariableDeclaration?i.push(s.generateStatement(t.init,0)):(i.push(s.generateExpression(t.init,r.Sequence,6)),i.push(";")):i.push(";"),t.test?(i.push(D),i.push(s.generateExpression(t.test,r.Sequence,7)),i.push(";")):i.push(";"),t.update?(i.push(D),i.push(s.generateExpression(t.update,r.Sequence,7)),i.push(")")):i.push(")")})),i.push(this.maybeBlock(t.body,n&k?T:1)),i},ForInStatement:function(e,t){return this.generateIterationForStatement("in",e,t&k?T:1)},ForOfStatement:function(e,t){return this.generateIterationForStatement("of",e,t&k?T:1)},LabeledStatement:function(e,t){return[e.label.name+":",this.maybeBlock(e.body,t&k?T:1)]},Program:function(e,t){var n,r,i,s,u;for(s=e.body.length,n=[C&&s>0?"\n":""],u=17,i=0;i<s;++i)C||i!==s-1||(u|=k),S&&(0===i&&(e.body[0].leadingComments||K(e.range[0],e.body[i].range[0],n)),i>0&&(e.body[i-1].trailingComments||e.body[i].leadingComments||K(e.body[i-1].range[1],e.body[i].range[0],n))),r=z(this.generateStatement(e.body[i],u)),n.push(r),i+1<s&&!P(L(r).toString())&&(S&&e.body[i+1].leadingComments||n.push(f)),S&&i===s-1&&(e.body[i].trailingComments||K(e.body[i].range[1],e.range[1],n));return n},FunctionDeclaration:function(e,t){return[Y(e,!0),"function",Z(e)||U(),e.id?$(e.id):"",this.generateFunctionBody(e)]},ReturnStatement:function(e,t){return e.argument?[J("return",this.generateExpression(e.argument,r.Sequence,7)),this.semicolon(t)]:["return"+this.semicolon(t)]},WhileStatement:function(e,t){var n,i=this;return X((function(){n=["while"+D+"(",i.generateExpression(e.test,r.Sequence,7),")"]})),n.push(this.maybeBlock(e.body,t&k?T:1)),n},WithStatement:function(e,t){var n,i=this;return X((function(){n=["with"+D+"(",i.generateExpression(e.object,r.Sequence,7),")"]})),n.push(this.maybeBlock(e.body,t&k?T:1)),n}},j(H.prototype,H.Statement),H.Expression={SequenceExpression:function(e,t,n){var i,s,u;for(r.Sequence<t&&(n|=1),i=[],s=0,u=e.expressions.length;s<u;++s)i.push(this.generateExpression(e.expressions[s],r.Assignment,n)),s+1<u&&i.push(","+D);return G(i,r.Sequence,t)},AssignmentExpression:function(e,t,n){return this.generateAssignment(e.left,e.right,e.operator,t,n)},ArrowFunctionExpression:function(e,t,n){return G(this.generateFunctionBody(e),r.ArrowFunction,t)},ConditionalExpression:function(e,t,n){return r.Conditional<t&&(n|=1),G([this.generateExpression(e.test,r.LogicalOR,n),D+"?"+D,this.generateExpression(e.consequent,r.Assignment,n),D+":"+D,this.generateExpression(e.alternate,r.Assignment,n)],r.Conditional,t)},LogicalExpression:function(e,t,n){return this.BinaryExpression(e,t,n)},BinaryExpression:function(e,t,n){var s,u,a,l,c,h;return l=i[e.operator],u="**"===e.operator?r.Postfix:l,a="**"===e.operator?l:l+1,l<t&&(n|=1),s=47===(h=(c=this.generateExpression(e.left,u,n)).toString()).charCodeAt(h.length-1)&&o.code.isIdentifierPartES5(e.operator.charCodeAt(0))?[c,U(),e.operator]:J(c,e.operator),c=this.generateExpression(e.right,a,n),"/"===e.operator&&"/"===c.toString().charAt(0)||"<"===e.operator.slice(-1)&&"!--"===c.toString().slice(0,3)?(s.push(U()),s.push(c)):s=J(s,c),"in"!==e.operator||1&n?G(s,l,t):["(",s,")"]},CallExpression:function(e,t,n){var i,s,u;for(i=[this.generateExpression(e.callee,r.Call,3)],e.optional&&i.push("?."),i.push("("),s=0,u=e.arguments.length;s<u;++s)i.push(this.generateExpression(e.arguments[s],r.Assignment,7)),s+1<u&&i.push(","+D);return i.push(")"),2&n?G(i,r.Call,t):["(",i,")"]},ChainExpression:function(e,t,n){return r.OptionalChaining<t&&(n|=2),G(this.generateExpression(e.expression,r.OptionalChaining,n),r.OptionalChaining,t)},NewExpression:function(e,t,n){var i,s,u,o,a;if(s=e.arguments.length,a=4&n&&!g&&0===s?5:1,i=J("new",this.generateExpression(e.callee,r.New,a)),!(4&n)||g||s>0){for(i.push("("),u=0,o=s;u<o;++u)i.push(this.generateExpression(e.arguments[u],r.Assignment,7)),u+1<o&&i.push(","+D);i.push(")")}return G(i,r.New,t)},MemberExpression:function(t,n,i){var s,u;return s=[this.generateExpression(t.object,r.Call,2&i?3:1)],t.computed?(t.optional&&s.push("?."),s.push("["),s.push(this.generateExpression(t.property,r.Sequence,2&i?7:5)),s.push("]")):(t.optional||t.object.type!==e.Literal||"number"!=typeof t.object.value||(u=L(s).toString()).indexOf(".")<0&&!/[eExX]/.test(u)&&o.code.isDecimalDigit(u.charCodeAt(u.length-1))&&!(u.length>=2&&48===u.charCodeAt(0))&&s.push(" "),s.push(t.optional?"?.":"."),s.push($(t.property))),G(s,r.Member,n)},MetaProperty:function(e,t,n){var i;return(i=[]).push("string"==typeof e.meta?e.meta:$(e.meta)),i.push("."),i.push("string"==typeof e.property?e.property:$(e.property)),G(i,r.Member,t)},UnaryExpression:function(e,t,n){var i,s,u,a,l;return s=this.generateExpression(e.argument,r.Unary,7),""===D?i=J(e.operator,s):(i=[e.operator],e.operator.length>2?i=J(i,s):(l=(a=L(i).toString()).charCodeAt(a.length-1),u=s.toString().charCodeAt(0),(43===l||45===l)&&l===u||o.code.isIdentifierPartES5(l)&&o.code.isIdentifierPartES5(u)?(i.push(U()),i.push(s)):i.push(s))),G(i,r.Unary,t)},YieldExpression:function(e,t,n){var i;return i=e.delegate?"yield*":"yield",e.argument&&(i=J(i,this.generateExpression(e.argument,r.Yield,7))),G(i,r.Yield,t)},AwaitExpression:function(e,t,n){return G(J(e.all?"await*":"await",this.generateExpression(e.argument,r.Await,7)),r.Await,t)},UpdateExpression:function(e,t,n){return e.prefix?G([e.operator,this.generateExpression(e.argument,r.Unary,7)],r.Unary,t):G([this.generateExpression(e.argument,r.Postfix,7),e.operator],r.Postfix,t)},FunctionExpression:function(e,t,n){var r=[Y(e,!0),"function"];return e.id?(r.push(Z(e)||U()),r.push($(e.id))):r.push(Z(e)||D),r.push(this.generateFunctionBody(e)),r},ArrayPattern:function(e,t,n){return this.ArrayExpression(e,t,n,!0)},ArrayExpression:function(e,t,n,i){var s,u,o=this;return e.elements.length?(u=!i&&e.elements.length>1,s=["[",u?f:""],X((function(t){var n,i;for(n=0,i=e.elements.length;n<i;++n)e.elements[n]?(s.push(u?t:""),s.push(o.generateExpression(e.elements[n],r.Assignment,7))):(u&&s.push(t),n+1===i&&s.push(",")),n+1<i&&s.push(","+(u?f:D))})),u&&!P(L(s).toString())&&s.push(f),s.push(u?a:""),s.push("]"),s):"[]"},RestElement:function(e,t,n){return"..."+this.generatePattern(e.argument)},ClassExpression:function(e,t,n){var i,s;return i=["class"],e.id&&(i=J(i,this.generateExpression(e.id,r.Sequence,7))),e.superClass&&(s=J("extends",this.generateExpression(e.superClass,r.Unary,7)),i=J(i,s)),i.push(D),i.push(this.generateStatement(e.body,T)),i},MethodDefinition:function(e,t,n){var r,i;return r=e.static?["static"+D]:[],i="get"===e.kind||"set"===e.kind?[J(e.kind,this.generatePropertyKey(e.key,e.computed)),this.generateFunctionBody(e.value)]:[Q(e),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)],J(r,i)},Property:function(e,t,n){return"get"===e.kind||"set"===e.kind?[e.kind,U(),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)]:e.shorthand?"AssignmentPattern"===e.value.type?this.AssignmentPattern(e.value,r.Sequence,7):this.generatePropertyKey(e.key,e.computed):e.method?[Q(e),this.generatePropertyKey(e.key,e.computed),this.generateFunctionBody(e.value)]:[this.generatePropertyKey(e.key,e.computed),":"+D,this.generateExpression(e.value,r.Assignment,7)]},ObjectExpression:function(e,t,n){var i,s,u,o,l=this;return e.properties.length?(i=e.properties.length>1,X((function(){u=l.generateExpression(e.properties[0],r.Sequence,7)})),i||(o=L(u).toString(),/[\r\n]/g.test(o))?(X((function(t){var n,o;if(s=["{",f,t,u],i)for(s.push(","+f),n=1,o=e.properties.length;n<o;++n)s.push(t),s.push(l.generateExpression(e.properties[n],r.Sequence,7)),n+1<o&&s.push(","+f)})),P(L(s).toString())||s.push(f),s.push(a),s.push("}"),s):["{",D,u,D,"}"]):"{}"},AssignmentPattern:function(e,t,n){return this.generateAssignment(e.left,e.right,"=",t,n)},ObjectPattern:function(t,n,i){var s,u,o,l,c,h=this;if(!t.properties.length)return"{}";if(l=!1,1===t.properties.length)(c=t.properties[0]).type===e.Property&&c.value.type!==e.Identifier&&(l=!0);else for(u=0,o=t.properties.length;u<o;++u)if((c=t.properties[u]).type===e.Property&&!c.shorthand){l=!0;break}return s=["{",l?f:""],X((function(e){var n,i;for(n=0,i=t.properties.length;n<i;++n)s.push(l?e:""),s.push(h.generateExpression(t.properties[n],r.Sequence,7)),n+1<i&&s.push(","+(l?f:D))})),l&&!P(L(s).toString())&&s.push(f),s.push(l?a:""),s.push("}"),s},ThisExpression:function(e,t,n){return"this"},Super:function(e,t,n){return"super"},Identifier:function(e,t,n){return $(e)},ImportDefaultSpecifier:function(e,t,n){return $(e.id||e.local)},ImportNamespaceSpecifier:function(e,t,n){var r=["*"],i=e.id||e.local;return i&&r.push(D+"as"+U()+$(i)),r},ImportSpecifier:function(e,t,n){var r=e.imported,i=[r.name],s=e.local;return s&&s.name!==r.name&&i.push(U()+"as"+U()+$(s)),i},ExportSpecifier:function(e,t,n){var r=e.local,i=[r.name],s=e.exported;return s&&s.name!==r.name&&i.push(U()+"as"+U()+$(s)),i},Literal:function(t,n,r){var i;if(t.hasOwnProperty("raw")&&x&&y.raw)try{if((i=x(t.raw).body[0].expression).type===e.Literal&&i.value===t.value)return t.raw}catch(e){}return t.regex?"/"+t.regex.pattern+"/"+t.regex.flags:null===t.value?"null":"string"==typeof t.value?function(e){var t,n,r,i,s,u="",a=0,l=0;for(t=0,n=e.length;t<n;++t){if(39===(r=e.charCodeAt(t)))++a;else if(34===r)++l;else if(47===r&&c)u+="\\";else{if(o.code.isLineTerminator(r)||92===r){u+=N(r);continue}if(!o.code.isIdentifierPartES5(r)&&(c&&r<32||!c&&!m&&(r<32||r>126))){u+=R(r,e.charCodeAt(t+1));continue}}u+=String.fromCharCode(r)}if(s=(i=!("double"===d||"auto"===d&&l<a))?"'":'"',!(i?a:l))return s+u+s;for(e=u,u=s,t=0,n=e.length;t<n;++t)(39===(r=e.charCodeAt(t))&&i||34===r&&!i)&&(u+="\\"),u+=String.fromCharCode(r);return u+s}(t.value):"number"==typeof t.value?function(e){var t,n,r,i,s;if(e!=e)throw new Error("Numeric literal whose value is NaN");if(e<0||0===e&&1/e<0)throw new Error("Numeric literal whose value is negative");if(e===1/0)return c?"null":h?"1e400":"1e+400";if(t=""+e,!h||t.length<3)return t;for(n=t.indexOf("."),c||48!==t.charCodeAt(0)||1!==n||(n=0,t=t.slice(1)),r=t,t=t.replace("e+","e"),i=0,(s=r.indexOf("e"))>0&&(i=+r.slice(s+1),r=r.slice(0,s)),n>=0&&(i-=r.length-n-1,r=+(r.slice(0,n)+r.slice(n+1))+""),s=0;48===r.charCodeAt(r.length+s-1);)--s;return 0!==s&&(i-=s,r=r.slice(0,s)),0!==i&&(r+="e"+i),(r.length<t.length||p&&e>1e12&&Math.floor(e)===e&&(r="0x"+e.toString(16)).length<t.length)&&+r===e&&(t=r),t}(t.value):"boolean"==typeof t.value?t.value?"true":"false":function(e){var t,n,r,i,s,u,o,a;if(n=e.toString(),e.source){if(!(t=n.match(/\/([^/]*)$/)))return n;for(r=t[1],n="",o=!1,a=!1,i=0,s=e.source.length;i<s;++i)u=e.source.charCodeAt(i),a?(n+=I(u,a),a=!1):(o?93===u&&(o=!1):47===u?n+="\\":91===u&&(o=!0),n+=I(u,a),a=92===u);return"/"+n+"/"+r}return n}(t.value)},GeneratorExpression:function(e,t,n){return this.ComprehensionExpression(e,t,n)},ComprehensionExpression:function(t,n,i){var s,u,o,a,l=this;return s=t.type===e.GeneratorExpression?["("]:["["],y.moz.comprehensionExpressionStartsWithAssignment&&(a=this.generateExpression(t.body,r.Assignment,7),s.push(a)),t.blocks&&X((function(){for(u=0,o=t.blocks.length;u<o;++u)a=l.generateExpression(t.blocks[u],r.Sequence,7),u>0||y.moz.comprehensionExpressionStartsWithAssignment?s=J(s,a):s.push(a)})),t.filter&&(s=J(s,"if"+D),a=this.generateExpression(t.filter,r.Sequence,7),s=J(s,["(",a,")"])),y.moz.comprehensionExpressionStartsWithAssignment||(a=this.generateExpression(t.body,r.Assignment,7),s=J(s,a)),s.push(t.type===e.GeneratorExpression?")":"]"),s},ComprehensionBlock:function(t,n,i){var s;return s=J(s=t.left.type===e.VariableDeclaration?[t.left.kind,U(),this.generateStatement(t.left.declarations[0],0)]:this.generateExpression(t.left,r.Call,7),t.of?"of":"in"),s=J(s,this.generateExpression(t.right,r.Sequence,7)),["for"+D+"(",s,")"]},SpreadElement:function(e,t,n){return["...",this.generateExpression(e.argument,r.Assignment,7)]},TaggedTemplateExpression:function(e,t,n){var i=3;return 2&n||(i=1),G([this.generateExpression(e.tag,r.Call,i),this.generateExpression(e.quasi,r.Primary,4)],r.TaggedTemplate,t)},TemplateElement:function(e,t,n){return e.value.raw},TemplateLiteral:function(e,t,n){var i,s,u;for(i=["`"],s=0,u=e.quasis.length;s<u;++s)i.push(this.generateExpression(e.quasis[s],r.Primary,7)),s+1<u&&(i.push("${"+D),i.push(this.generateExpression(e.expressions[s],r.Sequence,7)),i.push(D+"}"));return i.push("`"),i},ModuleSpecifier:function(e,t,n){return this.Literal(e,t,n)},ImportExpression:function(e,t,n){return G(["import(",this.generateExpression(e.source,r.Assignment,7),")"],r.Call,t)}},j(H.prototype,H.Expression),H.prototype.generateExpression=function(t,n,i){var s,u;return u=t.type||e.Property,y.verbatim&&t.hasOwnProperty(y.verbatim)?function(e,t){var n;return L("string"==typeof(n=e[y.verbatim])?G(V(n),r.Sequence,t):G(V(n.content),null!=n.precedence?n.precedence:r.Sequence,t),e)}(t,n):(s=this[u](t,n,i),y.comment&&(s=q(t,s)),L(s,t))},H.prototype.generateStatement=function(t,n){var r,i;return r=this[t.type](t,n),y.comment&&(r=q(t,r)),i=L(r).toString(),t.type!==e.Program||C||""!==f||"\n"!==i.charAt(i.length-1)||(r=F?L(r).replaceRight(/\s+$/,""):i.replace(/\s+$/,"")),L(r,t)},b={indent:{style:"",base:0},renumber:!0,hexadecimal:!0,quotes:"auto",escapeless:!0,compact:!0,parentheses:!1,semicolons:!1},B={indent:{style:"    ",base:0,adjustMultilineComment:!1},newline:"\n",space:" ",json:!1,renumber:!1,hexadecimal:!1,quotes:"single",escapeless:!1,compact:!1,parentheses:!0,semicolons:!0,safeConcatenation:!1,preserveBlankLines:!1},t.version=n("./node_modules/escodegen/package.json").version,t.generate=function(e,r){var i,u,o={indent:null,base:null,parse:null,comment:!1,format:{indent:{style:"    ",base:0,adjustMultilineComment:!1},newline:"\n",space:" ",json:!1,renumber:!1,hexadecimal:!1,quotes:"single",escapeless:!1,compact:!1,parentheses:!0,semicolons:!0,safeConcatenation:!1,preserveBlankLines:!1},moz:{comprehensionExpressionStartsWithAssignment:!1,starlessGenerator:!1},sourceMap:null,sourceMapRoot:null,sourceMapWithCode:!1,directive:!1,raw:!0,verbatim:null,sourceCode:null};return null!=r?("string"==typeof r.indent&&(o.format.indent.style=r.indent),"number"==typeof r.base&&(o.format.indent.base=r.base),r=M(o,r),l=r.format.indent.style,a="string"==typeof r.base?r.base:_(l,r.format.indent.base)):(l=(r=o).format.indent.style,a=_(l,r.format.indent.base)),c=r.format.json,h=r.format.renumber,p=!c&&r.format.hexadecimal,d=c?"double":r.format.quotes,m=r.format.escapeless,f=r.format.newline,D=r.format.space,r.format.compact&&(f=D=l=a=""),g=r.format.parentheses,A=r.format.semicolons,C=r.format.safeConcatenation,E=r.directive,x=c?null:r.parse,F=r.sourceMap,v=r.sourceCode,S=r.format.preserveBlankLines&&null!==v,y=r,F&&(s=t.browser?n.g.sourceMap.SourceNode:n("./node_modules/source-map/source-map.js").SourceNode),i=ee(e),F?(u=i.toStringWithSourceMap({file:r.file,sourceRoot:r.sourceMapRoot}),r.sourceContent&&u.map.setSourceContent(r.sourceMap,r.sourceContent),r.sourceMapWithCode?u:u.map.toString()):(u={code:i.toString(),map:null},r.sourceMapWithCode?u:u.code)},t.attachComments=u.attachComments,t.Precedence=M({},r),t.browser=!1,t.FORMAT_MINIFY=b,t.FORMAT_DEFAULTS=B}()},"./node_modules/escodegen/node_modules/estraverse/estraverse.js":(e,t)=>{!function e(t){"use strict";var n,r,i,s,u,o;function a(e){var t,n,r={};for(t in e)e.hasOwnProperty(t)&&(n=e[t],r[t]="object"==typeof n&&null!==n?a(n):n);return r}function l(e,t){this.parent=e,this.key=t}function c(e,t,n,r){this.node=e,this.path=t,this.wrap=n,this.ref=r}function h(){}function p(e){return null!=e&&("object"==typeof e&&"string"==typeof e.type)}function d(e,t){return(e===n.ObjectExpression||e===n.ObjectPattern)&&"properties"===t}function m(e,t){for(var n=e.length-1;n>=0;--n)if(e[n].node===t)return!0;return!1}function f(e,t){return(new h).traverse(e,t)}function D(e,t){var n;return n=function(e,t){var n,r,i,s;for(r=e.length,i=0;r;)t(e[s=i+(n=r>>>1)])?r=n:(i=s+1,r-=n+1);return i}(t,(function(t){return t.range[0]>e.range[0]})),e.extendedRange=[e.range[0],e.range[1]],n!==t.length&&(e.extendedRange[1]=t[n].range[0]),(n-=1)>=0&&(e.extendedRange[0]=t[n].range[1]),e}return n={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ChainExpression:"ChainExpression",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ComprehensionBlock:"ComprehensionBlock",ComprehensionExpression:"ComprehensionExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DebuggerStatement:"DebuggerStatement",DirectiveStatement:"DirectiveStatement",DoWhileStatement:"DoWhileStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForInStatement:"ForInStatement",ForOfStatement:"ForOfStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",GeneratorExpression:"GeneratorExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportExpression:"ImportExpression",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",ModuleSpecifier:"ModuleSpecifier",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",PrivateIdentifier:"PrivateIdentifier",Program:"Program",Property:"Property",PropertyDefinition:"PropertyDefinition",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchStatement:"SwitchStatement",SwitchCase:"SwitchCase",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"},i={AssignmentExpression:["left","right"],AssignmentPattern:["left","right"],ArrayExpression:["elements"],ArrayPattern:["elements"],ArrowFunctionExpression:["params","body"],AwaitExpression:["argument"],BlockStatement:["body"],BinaryExpression:["left","right"],BreakStatement:["label"],CallExpression:["callee","arguments"],CatchClause:["param","body"],ChainExpression:["expression"],ClassBody:["body"],ClassDeclaration:["id","superClass","body"],ClassExpression:["id","superClass","body"],ComprehensionBlock:["left","right"],ComprehensionExpression:["blocks","filter","body"],ConditionalExpression:["test","consequent","alternate"],ContinueStatement:["label"],DebuggerStatement:[],DirectiveStatement:[],DoWhileStatement:["body","test"],EmptyStatement:[],ExportAllDeclaration:["source"],ExportDefaultDeclaration:["declaration"],ExportNamedDeclaration:["declaration","specifiers","source"],ExportSpecifier:["exported","local"],ExpressionStatement:["expression"],ForStatement:["init","test","update","body"],ForInStatement:["left","right","body"],ForOfStatement:["left","right","body"],FunctionDeclaration:["id","params","body"],FunctionExpression:["id","params","body"],GeneratorExpression:["blocks","filter","body"],Identifier:[],IfStatement:["test","consequent","alternate"],ImportExpression:["source"],ImportDeclaration:["specifiers","source"],ImportDefaultSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportSpecifier:["imported","local"],Literal:[],LabeledStatement:["label","body"],LogicalExpression:["left","right"],MemberExpression:["object","property"],MetaProperty:["meta","property"],MethodDefinition:["key","value"],ModuleSpecifier:[],NewExpression:["callee","arguments"],ObjectExpression:["properties"],ObjectPattern:["properties"],PrivateIdentifier:[],Program:["body"],Property:["key","value"],PropertyDefinition:["key","value"],RestElement:["argument"],ReturnStatement:["argument"],SequenceExpression:["expressions"],SpreadElement:["argument"],Super:[],SwitchStatement:["discriminant","cases"],SwitchCase:["test","consequent"],TaggedTemplateExpression:["tag","quasi"],TemplateElement:[],TemplateLiteral:["quasis","expressions"],ThisExpression:[],ThrowStatement:["argument"],TryStatement:["block","handler","finalizer"],UnaryExpression:["argument"],UpdateExpression:["argument"],VariableDeclaration:["declarations"],VariableDeclarator:["id","init"],WhileStatement:["test","body"],WithStatement:["object","body"],YieldExpression:["argument"]},r={Break:s={},Skip:u={},Remove:o={}},l.prototype.replace=function(e){this.parent[this.key]=e},l.prototype.remove=function(){return Array.isArray(this.parent)?(this.parent.splice(this.key,1),!0):(this.replace(null),!1)},h.prototype.path=function(){var e,t,n,r,i;function s(e,t){if(Array.isArray(t))for(n=0,r=t.length;n<r;++n)e.push(t[n]);else e.push(t)}if(!this.__current.path)return null;for(i=[],e=2,t=this.__leavelist.length;e<t;++e)s(i,this.__leavelist[e].path);return s(i,this.__current.path),i},h.prototype.type=function(){return this.current().type||this.__current.wrap},h.prototype.parents=function(){var e,t,n;for(n=[],e=1,t=this.__leavelist.length;e<t;++e)n.push(this.__leavelist[e].node);return n},h.prototype.current=function(){return this.__current.node},h.prototype.__execute=function(e,t){var n,r;return r=void 0,n=this.__current,this.__current=t,this.__state=null,e&&(r=e.call(this,t.node,this.__leavelist[this.__leavelist.length-1].node)),this.__current=n,r},h.prototype.notify=function(e){this.__state=e},h.prototype.skip=function(){this.notify(u)},h.prototype.break=function(){this.notify(s)},h.prototype.remove=function(){this.notify(o)},h.prototype.__initialize=function(e,t){this.visitor=t,this.root=e,this.__worklist=[],this.__leavelist=[],this.__current=null,this.__state=null,this.__fallback=null,"iteration"===t.fallback?this.__fallback=Object.keys:"function"==typeof t.fallback&&(this.__fallback=t.fallback),this.__keys=i,t.keys&&(this.__keys=Object.assign(Object.create(this.__keys),t.keys))},h.prototype.traverse=function(e,t){var n,r,i,o,a,l,h,f,D,g,A,C;for(this.__initialize(e,t),C={},n=this.__worklist,r=this.__leavelist,n.push(new c(e,null,null,null)),r.push(new c(null,null,null,null));n.length;)if((i=n.pop())!==C){if(i.node){if(l=this.__execute(t.enter,i),this.__state===s||l===s)return;if(n.push(C),r.push(i),this.__state===u||l===u)continue;if(a=(o=i.node).type||i.wrap,!(g=this.__keys[a])){if(!this.__fallback)throw new Error("Unknown node type "+a+".");g=this.__fallback(o)}for(f=g.length;(f-=1)>=0;)if(A=o[h=g[f]])if(Array.isArray(A)){for(D=A.length;(D-=1)>=0;)if(A[D]&&!m(r,A[D])){if(d(a,g[f]))i=new c(A[D],[h,D],"Property",null);else{if(!p(A[D]))continue;i=new c(A[D],[h,D],null,null)}n.push(i)}}else if(p(A)){if(m(r,A))continue;n.push(new c(A,h,null,null))}}}else if(i=r.pop(),l=this.__execute(t.leave,i),this.__state===s||l===s)return},h.prototype.replace=function(e,t){var n,r,i,a,h,m,f,D,g,A,C,E,y;function x(e){var t,r,i,s;if(e.ref.remove())for(r=e.ref.key,s=e.ref.parent,t=n.length;t--;)if((i=n[t]).ref&&i.ref.parent===s){if(i.ref.key<r)break;--i.ref.key}}for(this.__initialize(e,t),C={},n=this.__worklist,r=this.__leavelist,m=new c(e,null,null,new l(E={root:e},"root")),n.push(m),r.push(m);n.length;)if((m=n.pop())!==C){if(void 0!==(h=this.__execute(t.enter,m))&&h!==s&&h!==u&&h!==o&&(m.ref.replace(h),m.node=h),this.__state!==o&&h!==o||(x(m),m.node=null),this.__state===s||h===s)return E.root;if((i=m.node)&&(n.push(C),r.push(m),this.__state!==u&&h!==u)){if(a=i.type||m.wrap,!(g=this.__keys[a])){if(!this.__fallback)throw new Error("Unknown node type "+a+".");g=this.__fallback(i)}for(f=g.length;(f-=1)>=0;)if(A=i[y=g[f]])if(Array.isArray(A)){for(D=A.length;(D-=1)>=0;)if(A[D]){if(d(a,g[f]))m=new c(A[D],[y,D],"Property",new l(A,D));else{if(!p(A[D]))continue;m=new c(A[D],[y,D],null,new l(A,D))}n.push(m)}}else p(A)&&n.push(new c(A,y,null,new l(i,y)))}}else if(m=r.pop(),void 0!==(h=this.__execute(t.leave,m))&&h!==s&&h!==u&&h!==o&&m.ref.replace(h),this.__state!==o&&h!==o||x(m),this.__state===s||h===s)return E.root;return E.root},t.Syntax=n,t.traverse=f,t.replace=function(e,t){return(new h).replace(e,t)},t.attachComments=function(e,t,n){var i,s,u,o,l=[];if(!e.range)throw new Error("attachComments needs range information");if(!n.length){if(t.length){for(u=0,s=t.length;u<s;u+=1)(i=a(t[u])).extendedRange=[0,e.range[0]],l.push(i);e.leadingComments=l}return e}for(u=0,s=t.length;u<s;u+=1)l.push(D(a(t[u]),n));return o=0,f(e,{enter:function(e){for(var t;o<l.length&&!((t=l[o]).extendedRange[1]>e.range[0]);)t.extendedRange[1]===e.range[0]?(e.leadingComments||(e.leadingComments=[]),e.leadingComments.push(t),l.splice(o,1)):o+=1;return o===l.length?r.Break:l[o].extendedRange[0]>e.range[1]?r.Skip:void 0}}),o=0,f(e,{leave:function(e){for(var t;o<l.length&&(t=l[o],!(e.range[1]<t.extendedRange[0]));)e.range[1]===t.extendedRange[0]?(e.trailingComments||(e.trailingComments=[]),e.trailingComments.push(t),l.splice(o,1)):o+=1;return o===l.length?r.Break:l[o].extendedRange[0]>e.range[1]?r.Skip:void 0}}),e},t.VisitorKeys=i,t.VisitorOption=r,t.Controller=h,t.cloneEnvironment=function(){return e({})},t}(t)},"./node_modules/esprima/dist/esprima.js":function(e){var t;t=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}return n.m=e,n.c=t,n.p="",n(0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(3),s=n(8),u=n(15);function o(e,t,n){var u=null,o=function(e,t){n&&n(e,t),u&&u.visit(e,t)},a="function"==typeof n?o:null,l=!1;if(t){l="boolean"==typeof t.comment&&t.comment;var c="boolean"==typeof t.attachComment&&t.attachComment;(l||c)&&((u=new r.CommentHandler).attach=c,t.comment=!0,a=o)}var h,p=!1;t&&"string"==typeof t.sourceType&&(p="module"===t.sourceType),h=t&&"boolean"==typeof t.jsx&&t.jsx?new i.JSXParser(e,t,a):new s.Parser(e,t,a);var d=p?h.parseModule():h.parseScript();return l&&u&&(d.comments=u.comments),h.config.tokens&&(d.tokens=h.tokens),h.config.tolerant&&(d.errors=h.errorHandler.errors),d}t.parse=o,t.parseModule=function(e,t,n){var r=t||{};return r.sourceType="module",o(e,r,n)},t.parseScript=function(e,t,n){var r=t||{};return r.sourceType="script",o(e,r,n)},t.tokenize=function(e,t,n){var r,i=new u.Tokenizer(e,t);r=[];try{for(;;){var s=i.getNextToken();if(!s)break;n&&(s=n(s)),r.push(s)}}catch(e){i.errorHandler.tolerate(e)}return i.errorHandler.tolerant&&(r.errors=i.errors()),r};var a=n(2);t.Syntax=a.Syntax,t.version="4.0.1"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(){function e(){this.attach=!1,this.comments=[],this.stack=[],this.leading=[],this.trailing=[]}return e.prototype.insertInnerComments=function(e,t){if(e.type===r.Syntax.BlockStatement&&0===e.body.length){for(var n=[],i=this.leading.length-1;i>=0;--i){var s=this.leading[i];t.end.offset>=s.start&&(n.unshift(s.comment),this.leading.splice(i,1),this.trailing.splice(i,1))}n.length&&(e.innerComments=n)}},e.prototype.findTrailingComments=function(e){var t=[];if(this.trailing.length>0){for(var n=this.trailing.length-1;n>=0;--n){var r=this.trailing[n];r.start>=e.end.offset&&t.unshift(r.comment)}return this.trailing.length=0,t}var i=this.stack[this.stack.length-1];if(i&&i.node.trailingComments){var s=i.node.trailingComments[0];s&&s.range[0]>=e.end.offset&&(t=i.node.trailingComments,delete i.node.trailingComments)}return t},e.prototype.findLeadingComments=function(e){for(var t,n=[];this.stack.length>0&&((s=this.stack[this.stack.length-1])&&s.start>=e.start.offset);)t=s.node,this.stack.pop();if(t){for(var r=(t.leadingComments?t.leadingComments.length:0)-1;r>=0;--r){var i=t.leadingComments[r];i.range[1]<=e.start.offset&&(n.unshift(i),t.leadingComments.splice(r,1))}return t.leadingComments&&0===t.leadingComments.length&&delete t.leadingComments,n}for(r=this.leading.length-1;r>=0;--r){var s;(s=this.leading[r]).start<=e.start.offset&&(n.unshift(s.comment),this.leading.splice(r,1))}return n},e.prototype.visitNode=function(e,t){if(!(e.type===r.Syntax.Program&&e.body.length>0)){this.insertInnerComments(e,t);var n=this.findTrailingComments(t),i=this.findLeadingComments(t);i.length>0&&(e.leadingComments=i),n.length>0&&(e.trailingComments=n),this.stack.push({node:e,start:t.start.offset})}},e.prototype.visitComment=function(e,t){var n="L"===e.type[0]?"Line":"Block",r={type:n,value:e.value};if(e.range&&(r.range=e.range),e.loc&&(r.loc=e.loc),this.comments.push(r),this.attach){var i={comment:{type:n,value:e.value,range:[t.start.offset,t.end.offset]},start:t.start.offset};e.loc&&(i.comment.loc=e.loc),e.type=n,this.leading.push(i),this.trailing.push(i)}},e.prototype.visit=function(e,t){"LineComment"===e.type||"BlockComment"===e.type?this.visitComment(e,t):this.attach&&this.visitNode(e,t)},e}();t.CommentHandler=i},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Syntax={AssignmentExpression:"AssignmentExpression",AssignmentPattern:"AssignmentPattern",ArrayExpression:"ArrayExpression",ArrayPattern:"ArrayPattern",ArrowFunctionExpression:"ArrowFunctionExpression",AwaitExpression:"AwaitExpression",BlockStatement:"BlockStatement",BinaryExpression:"BinaryExpression",BreakStatement:"BreakStatement",CallExpression:"CallExpression",CatchClause:"CatchClause",ClassBody:"ClassBody",ClassDeclaration:"ClassDeclaration",ClassExpression:"ClassExpression",ConditionalExpression:"ConditionalExpression",ContinueStatement:"ContinueStatement",DoWhileStatement:"DoWhileStatement",DebuggerStatement:"DebuggerStatement",EmptyStatement:"EmptyStatement",ExportAllDeclaration:"ExportAllDeclaration",ExportDefaultDeclaration:"ExportDefaultDeclaration",ExportNamedDeclaration:"ExportNamedDeclaration",ExportSpecifier:"ExportSpecifier",ExpressionStatement:"ExpressionStatement",ForStatement:"ForStatement",ForOfStatement:"ForOfStatement",ForInStatement:"ForInStatement",FunctionDeclaration:"FunctionDeclaration",FunctionExpression:"FunctionExpression",Identifier:"Identifier",IfStatement:"IfStatement",ImportDeclaration:"ImportDeclaration",ImportDefaultSpecifier:"ImportDefaultSpecifier",ImportNamespaceSpecifier:"ImportNamespaceSpecifier",ImportSpecifier:"ImportSpecifier",Literal:"Literal",LabeledStatement:"LabeledStatement",LogicalExpression:"LogicalExpression",MemberExpression:"MemberExpression",MetaProperty:"MetaProperty",MethodDefinition:"MethodDefinition",NewExpression:"NewExpression",ObjectExpression:"ObjectExpression",ObjectPattern:"ObjectPattern",Program:"Program",Property:"Property",RestElement:"RestElement",ReturnStatement:"ReturnStatement",SequenceExpression:"SequenceExpression",SpreadElement:"SpreadElement",Super:"Super",SwitchCase:"SwitchCase",SwitchStatement:"SwitchStatement",TaggedTemplateExpression:"TaggedTemplateExpression",TemplateElement:"TemplateElement",TemplateLiteral:"TemplateLiteral",ThisExpression:"ThisExpression",ThrowStatement:"ThrowStatement",TryStatement:"TryStatement",UnaryExpression:"UnaryExpression",UpdateExpression:"UpdateExpression",VariableDeclaration:"VariableDeclaration",VariableDeclarator:"VariableDeclarator",WhileStatement:"WhileStatement",WithStatement:"WithStatement",YieldExpression:"YieldExpression"}},function(e,t,n){"use strict";var r,i=this&&this.__extends||(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var s=n(4),u=n(5),o=n(6),a=n(7),l=n(8),c=n(13),h=n(14);function p(e){var t;switch(e.type){case o.JSXSyntax.JSXIdentifier:t=e.name;break;case o.JSXSyntax.JSXNamespacedName:var n=e;t=p(n.namespace)+":"+p(n.name);break;case o.JSXSyntax.JSXMemberExpression:var r=e;t=p(r.object)+"."+p(r.property)}return t}c.TokenName[100]="JSXIdentifier",c.TokenName[101]="JSXText";var d=function(e){function t(t,n,r){return e.call(this,t,n,r)||this}return i(t,e),t.prototype.parsePrimaryExpression=function(){return this.match("<")?this.parseJSXRoot():e.prototype.parsePrimaryExpression.call(this)},t.prototype.startJSX=function(){this.scanner.index=this.startMarker.index,this.scanner.lineNumber=this.startMarker.line,this.scanner.lineStart=this.startMarker.index-this.startMarker.column},t.prototype.finishJSX=function(){this.nextToken()},t.prototype.reenterJSX=function(){this.startJSX(),this.expectJSX("}"),this.config.tokens&&this.tokens.pop()},t.prototype.createJSXNode=function(){return this.collectComments(),{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.createJSXChildNode=function(){return{index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}},t.prototype.scanXHTMLEntity=function(e){for(var t="&",n=!0,r=!1,i=!1,u=!1;!this.scanner.eof()&&n&&!r;){var o=this.scanner.source[this.scanner.index];if(o===e)break;if(r=";"===o,t+=o,++this.scanner.index,!r)switch(t.length){case 2:i="#"===o;break;case 3:i&&(n=(u="x"===o)||s.Character.isDecimalDigit(o.charCodeAt(0)),i=i&&!u);break;default:n=(n=n&&!(i&&!s.Character.isDecimalDigit(o.charCodeAt(0))))&&!(u&&!s.Character.isHexDigit(o.charCodeAt(0)))}}if(n&&r&&t.length>2){var a=t.substr(1,t.length-2);i&&a.length>1?t=String.fromCharCode(parseInt(a.substr(1),10)):u&&a.length>2?t=String.fromCharCode(parseInt("0"+a.substr(1),16)):i||u||!h.XHTMLEntities[a]||(t=h.XHTMLEntities[a])}return t},t.prototype.lexJSX=function(){var e=this.scanner.source.charCodeAt(this.scanner.index);if(60===e||62===e||47===e||58===e||61===e||123===e||125===e)return{type:7,value:o=this.scanner.source[this.scanner.index++],lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index-1,end:this.scanner.index};if(34===e||39===e){for(var t=this.scanner.index,n=this.scanner.source[this.scanner.index++],r="";!this.scanner.eof()&&(a=this.scanner.source[this.scanner.index++])!==n;)r+="&"===a?this.scanXHTMLEntity(n):a;return{type:8,value:r,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(46===e){var i=this.scanner.source.charCodeAt(this.scanner.index+1),u=this.scanner.source.charCodeAt(this.scanner.index+2),o=46===i&&46===u?"...":".";return t=this.scanner.index,this.scanner.index+=o.length,{type:7,value:o,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}if(96===e)return{type:10,value:"",lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:this.scanner.index,end:this.scanner.index};if(s.Character.isIdentifierStart(e)&&92!==e){for(t=this.scanner.index,++this.scanner.index;!this.scanner.eof();){var a=this.scanner.source.charCodeAt(this.scanner.index);if(s.Character.isIdentifierPart(a)&&92!==a)++this.scanner.index;else{if(45!==a)break;++this.scanner.index}}return{type:100,value:this.scanner.source.slice(t,this.scanner.index),lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:t,end:this.scanner.index}}return this.scanner.lex()},t.prototype.nextJSXToken=function(){this.collectComments(),this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;var e=this.lexJSX();return this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.config.tokens&&this.tokens.push(this.convertToken(e)),e},t.prototype.nextJSXText=function(){this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart;for(var e=this.scanner.index,t="";!this.scanner.eof();){var n=this.scanner.source[this.scanner.index];if("{"===n||"<"===n)break;++this.scanner.index,t+=n,s.Character.isLineTerminator(n.charCodeAt(0))&&(++this.scanner.lineNumber,"\r"===n&&"\n"===this.scanner.source[this.scanner.index]&&++this.scanner.index,this.scanner.lineStart=this.scanner.index)}this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart;var r={type:101,value:t,lineNumber:this.scanner.lineNumber,lineStart:this.scanner.lineStart,start:e,end:this.scanner.index};return t.length>0&&this.config.tokens&&this.tokens.push(this.convertToken(r)),r},t.prototype.peekJSXToken=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.lexJSX();return this.scanner.restoreState(e),t},t.prototype.expectJSX=function(e){var t=this.nextJSXToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},t.prototype.matchJSX=function(e){var t=this.peekJSXToken();return 7===t.type&&t.value===e},t.prototype.parseJSXIdentifier=function(){var e=this.createJSXNode(),t=this.nextJSXToken();return 100!==t.type&&this.throwUnexpectedToken(t),this.finalize(e,new u.JSXIdentifier(t.value))},t.prototype.parseJSXElementName=function(){var e=this.createJSXNode(),t=this.parseJSXIdentifier();if(this.matchJSX(":")){var n=t;this.expectJSX(":");var r=this.parseJSXIdentifier();t=this.finalize(e,new u.JSXNamespacedName(n,r))}else if(this.matchJSX("."))for(;this.matchJSX(".");){var i=t;this.expectJSX(".");var s=this.parseJSXIdentifier();t=this.finalize(e,new u.JSXMemberExpression(i,s))}return t},t.prototype.parseJSXAttributeName=function(){var e,t=this.createJSXNode(),n=this.parseJSXIdentifier();if(this.matchJSX(":")){var r=n;this.expectJSX(":");var i=this.parseJSXIdentifier();e=this.finalize(t,new u.JSXNamespacedName(r,i))}else e=n;return e},t.prototype.parseJSXStringLiteralAttribute=function(){var e=this.createJSXNode(),t=this.nextJSXToken();8!==t.type&&this.throwUnexpectedToken(t);var n=this.getTokenRaw(t);return this.finalize(e,new a.Literal(t.value,n))},t.prototype.parseJSXExpressionAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.finishJSX(),this.match("}")&&this.tolerateError("JSX attributes must only be assigned a non-empty expression");var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new u.JSXExpressionContainer(t))},t.prototype.parseJSXAttributeValue=function(){return this.matchJSX("{")?this.parseJSXExpressionAttribute():this.matchJSX("<")?this.parseJSXElement():this.parseJSXStringLiteralAttribute()},t.prototype.parseJSXNameValueAttribute=function(){var e=this.createJSXNode(),t=this.parseJSXAttributeName(),n=null;return this.matchJSX("=")&&(this.expectJSX("="),n=this.parseJSXAttributeValue()),this.finalize(e,new u.JSXAttribute(t,n))},t.prototype.parseJSXSpreadAttribute=function(){var e=this.createJSXNode();this.expectJSX("{"),this.expectJSX("..."),this.finishJSX();var t=this.parseAssignmentExpression();return this.reenterJSX(),this.finalize(e,new u.JSXSpreadAttribute(t))},t.prototype.parseJSXAttributes=function(){for(var e=[];!this.matchJSX("/")&&!this.matchJSX(">");){var t=this.matchJSX("{")?this.parseJSXSpreadAttribute():this.parseJSXNameValueAttribute();e.push(t)}return e},t.prototype.parseJSXOpeningElement=function(){var e=this.createJSXNode();this.expectJSX("<");var t=this.parseJSXElementName(),n=this.parseJSXAttributes(),r=this.matchJSX("/");return r&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new u.JSXOpeningElement(t,r,n))},t.prototype.parseJSXBoundaryElement=function(){var e=this.createJSXNode();if(this.expectJSX("<"),this.matchJSX("/")){this.expectJSX("/");var t=this.parseJSXElementName();return this.expectJSX(">"),this.finalize(e,new u.JSXClosingElement(t))}var n=this.parseJSXElementName(),r=this.parseJSXAttributes(),i=this.matchJSX("/");return i&&this.expectJSX("/"),this.expectJSX(">"),this.finalize(e,new u.JSXOpeningElement(n,i,r))},t.prototype.parseJSXEmptyExpression=function(){var e=this.createJSXChildNode();return this.collectComments(),this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.finalize(e,new u.JSXEmptyExpression)},t.prototype.parseJSXExpressionContainer=function(){var e,t=this.createJSXNode();return this.expectJSX("{"),this.matchJSX("}")?(e=this.parseJSXEmptyExpression(),this.expectJSX("}")):(this.finishJSX(),e=this.parseAssignmentExpression(),this.reenterJSX()),this.finalize(t,new u.JSXExpressionContainer(e))},t.prototype.parseJSXChildren=function(){for(var e=[];!this.scanner.eof();){var t=this.createJSXChildNode(),n=this.nextJSXText();if(n.start<n.end){var r=this.getTokenRaw(n),i=this.finalize(t,new u.JSXText(n.value,r));e.push(i)}if("{"!==this.scanner.source[this.scanner.index])break;var s=this.parseJSXExpressionContainer();e.push(s)}return e},t.prototype.parseComplexJSXElement=function(e){for(var t=[];!this.scanner.eof();){e.children=e.children.concat(this.parseJSXChildren());var n=this.createJSXChildNode(),r=this.parseJSXBoundaryElement();if(r.type===o.JSXSyntax.JSXOpeningElement){var i=r;if(i.selfClosing){var s=this.finalize(n,new u.JSXElement(i,[],null));e.children.push(s)}else t.push(e),e={node:n,opening:i,closing:null,children:[]}}if(r.type===o.JSXSyntax.JSXClosingElement){e.closing=r;var a=p(e.opening.name);if(a!==p(e.closing.name)&&this.tolerateError("Expected corresponding JSX closing tag for %0",a),!(t.length>0))break;s=this.finalize(e.node,new u.JSXElement(e.opening,e.children,e.closing)),(e=t[t.length-1]).children.push(s),t.pop()}}return e},t.prototype.parseJSXElement=function(){var e=this.createJSXNode(),t=this.parseJSXOpeningElement(),n=[],r=null;if(!t.selfClosing){var i=this.parseComplexJSXElement({node:e,opening:t,closing:r,children:n});n=i.children,r=i.closing}return this.finalize(e,new u.JSXElement(t,n,r))},t.prototype.parseJSXRoot=function(){this.config.tokens&&this.tokens.pop(),this.startJSX();var e=this.parseJSXElement();return this.finishJSX(),e},t.prototype.isStartOfExpression=function(){return e.prototype.isStartOfExpression.call(this)||this.match("<")},t}(l.Parser);t.JSXParser=d},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};t.Character={fromCodePoint:function(e){return e<65536?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10))+String.fromCharCode(56320+(e-65536&1023))},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279].indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||92===e||e>=128&&n.NonAsciiIdentifierStart.test(t.Character.fromCodePoint(e))},isIdentifierPart:function(e){return 36===e||95===e||e>=65&&e<=90||e>=97&&e<=122||e>=48&&e<=57||92===e||e>=128&&n.NonAsciiIdentifierPart.test(t.Character.fromCodePoint(e))},isDecimalDigit:function(e){return e>=48&&e<=57},isHexDigit:function(e){return e>=48&&e<=57||e>=65&&e<=70||e>=97&&e<=102},isOctalDigit:function(e){return e>=48&&e<=55}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),i=function(e){this.type=r.JSXSyntax.JSXClosingElement,this.name=e};t.JSXClosingElement=i;var s=function(e,t,n){this.type=r.JSXSyntax.JSXElement,this.openingElement=e,this.children=t,this.closingElement=n};t.JSXElement=s;var u=function(){this.type=r.JSXSyntax.JSXEmptyExpression};t.JSXEmptyExpression=u;var o=function(e){this.type=r.JSXSyntax.JSXExpressionContainer,this.expression=e};t.JSXExpressionContainer=o;var a=function(e){this.type=r.JSXSyntax.JSXIdentifier,this.name=e};t.JSXIdentifier=a;var l=function(e,t){this.type=r.JSXSyntax.JSXMemberExpression,this.object=e,this.property=t};t.JSXMemberExpression=l;var c=function(e,t){this.type=r.JSXSyntax.JSXAttribute,this.name=e,this.value=t};t.JSXAttribute=c;var h=function(e,t){this.type=r.JSXSyntax.JSXNamespacedName,this.namespace=e,this.name=t};t.JSXNamespacedName=h;var p=function(e,t,n){this.type=r.JSXSyntax.JSXOpeningElement,this.name=e,this.selfClosing=t,this.attributes=n};t.JSXOpeningElement=p;var d=function(e){this.type=r.JSXSyntax.JSXSpreadAttribute,this.argument=e};t.JSXSpreadAttribute=d;var m=function(e,t){this.type=r.JSXSyntax.JSXText,this.value=e,this.raw=t};t.JSXText=m},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JSXSyntax={JSXAttribute:"JSXAttribute",JSXClosingElement:"JSXClosingElement",JSXElement:"JSXElement",JSXEmptyExpression:"JSXEmptyExpression",JSXExpressionContainer:"JSXExpressionContainer",JSXIdentifier:"JSXIdentifier",JSXMemberExpression:"JSXMemberExpression",JSXNamespacedName:"JSXNamespacedName",JSXOpeningElement:"JSXOpeningElement",JSXSpreadAttribute:"JSXSpreadAttribute",JSXText:"JSXText"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),i=function(e){this.type=r.Syntax.ArrayExpression,this.elements=e};t.ArrayExpression=i;var s=function(e){this.type=r.Syntax.ArrayPattern,this.elements=e};t.ArrayPattern=s;var u=function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!1};t.ArrowFunctionExpression=u;var o=function(e,t,n){this.type=r.Syntax.AssignmentExpression,this.operator=e,this.left=t,this.right=n};t.AssignmentExpression=o;var a=function(e,t){this.type=r.Syntax.AssignmentPattern,this.left=e,this.right=t};t.AssignmentPattern=a;var l=function(e,t,n){this.type=r.Syntax.ArrowFunctionExpression,this.id=null,this.params=e,this.body=t,this.generator=!1,this.expression=n,this.async=!0};t.AsyncArrowFunctionExpression=l;var c=function(e,t,n){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionDeclaration=c;var h=function(e,t,n){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=!1,this.expression=!1,this.async=!0};t.AsyncFunctionExpression=h;var p=function(e){this.type=r.Syntax.AwaitExpression,this.argument=e};t.AwaitExpression=p;var d=function(e,t,n){var i="||"===e||"&&"===e;this.type=i?r.Syntax.LogicalExpression:r.Syntax.BinaryExpression,this.operator=e,this.left=t,this.right=n};t.BinaryExpression=d;var m=function(e){this.type=r.Syntax.BlockStatement,this.body=e};t.BlockStatement=m;var f=function(e){this.type=r.Syntax.BreakStatement,this.label=e};t.BreakStatement=f;var D=function(e,t){this.type=r.Syntax.CallExpression,this.callee=e,this.arguments=t};t.CallExpression=D;var g=function(e,t){this.type=r.Syntax.CatchClause,this.param=e,this.body=t};t.CatchClause=g;var A=function(e){this.type=r.Syntax.ClassBody,this.body=e};t.ClassBody=A;var C=function(e,t,n){this.type=r.Syntax.ClassDeclaration,this.id=e,this.superClass=t,this.body=n};t.ClassDeclaration=C;var E=function(e,t,n){this.type=r.Syntax.ClassExpression,this.id=e,this.superClass=t,this.body=n};t.ClassExpression=E;var y=function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!0,this.object=e,this.property=t};t.ComputedMemberExpression=y;var x=function(e,t,n){this.type=r.Syntax.ConditionalExpression,this.test=e,this.consequent=t,this.alternate=n};t.ConditionalExpression=x;var F=function(e){this.type=r.Syntax.ContinueStatement,this.label=e};t.ContinueStatement=F;var v=function(){this.type=r.Syntax.DebuggerStatement};t.DebuggerStatement=v;var S=function(e,t){this.type=r.Syntax.ExpressionStatement,this.expression=e,this.directive=t};t.Directive=S;var b=function(e,t){this.type=r.Syntax.DoWhileStatement,this.body=e,this.test=t};t.DoWhileStatement=b;var B=function(){this.type=r.Syntax.EmptyStatement};t.EmptyStatement=B;var w=function(e){this.type=r.Syntax.ExportAllDeclaration,this.source=e};t.ExportAllDeclaration=w;var k=function(e){this.type=r.Syntax.ExportDefaultDeclaration,this.declaration=e};t.ExportDefaultDeclaration=k;var T=function(e,t,n){this.type=r.Syntax.ExportNamedDeclaration,this.declaration=e,this.specifiers=t,this.source=n};t.ExportNamedDeclaration=T;var _=function(e,t){this.type=r.Syntax.ExportSpecifier,this.exported=t,this.local=e};t.ExportSpecifier=_;var P=function(e){this.type=r.Syntax.ExpressionStatement,this.expression=e};t.ExpressionStatement=P;var j=function(e,t,n){this.type=r.Syntax.ForInStatement,this.left=e,this.right=t,this.body=n,this.each=!1};t.ForInStatement=j;var M=function(e,t,n){this.type=r.Syntax.ForOfStatement,this.left=e,this.right=t,this.body=n};t.ForOfStatement=M;var I=function(e,t,n,i){this.type=r.Syntax.ForStatement,this.init=e,this.test=t,this.update=n,this.body=i};t.ForStatement=I;var R=function(e,t,n,i){this.type=r.Syntax.FunctionDeclaration,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1};t.FunctionDeclaration=R;var N=function(e,t,n,i){this.type=r.Syntax.FunctionExpression,this.id=e,this.params=t,this.body=n,this.generator=i,this.expression=!1,this.async=!1};t.FunctionExpression=N;var O=function(e){this.type=r.Syntax.Identifier,this.name=e};t.Identifier=O;var L=function(e,t,n){this.type=r.Syntax.IfStatement,this.test=e,this.consequent=t,this.alternate=n};t.IfStatement=L;var U=function(e,t){this.type=r.Syntax.ImportDeclaration,this.specifiers=e,this.source=t};t.ImportDeclaration=U;var J=function(e){this.type=r.Syntax.ImportDefaultSpecifier,this.local=e};t.ImportDefaultSpecifier=J;var z=function(e){this.type=r.Syntax.ImportNamespaceSpecifier,this.local=e};t.ImportNamespaceSpecifier=z;var X=function(e,t){this.type=r.Syntax.ImportSpecifier,this.local=e,this.imported=t};t.ImportSpecifier=X;var W=function(e,t){this.type=r.Syntax.LabeledStatement,this.label=e,this.body=t};t.LabeledStatement=W;var q=function(e,t){this.type=r.Syntax.Literal,this.value=e,this.raw=t};t.Literal=q;var K=function(e,t){this.type=r.Syntax.MetaProperty,this.meta=e,this.property=t};t.MetaProperty=K;var G=function(e,t,n,i,s){this.type=r.Syntax.MethodDefinition,this.key=e,this.computed=t,this.value=n,this.kind=i,this.static=s};t.MethodDefinition=G;var V=function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="module"};t.Module=V;var H=function(e,t){this.type=r.Syntax.NewExpression,this.callee=e,this.arguments=t};t.NewExpression=H;var $=function(e){this.type=r.Syntax.ObjectExpression,this.properties=e};t.ObjectExpression=$;var Y=function(e){this.type=r.Syntax.ObjectPattern,this.properties=e};t.ObjectPattern=Y;var Z=function(e,t,n,i,s,u){this.type=r.Syntax.Property,this.key=t,this.computed=n,this.value=i,this.kind=e,this.method=s,this.shorthand=u};t.Property=Z;var Q=function(e,t,n,i){this.type=r.Syntax.Literal,this.value=e,this.raw=t,this.regex={pattern:n,flags:i}};t.RegexLiteral=Q;var ee=function(e){this.type=r.Syntax.RestElement,this.argument=e};t.RestElement=ee;var te=function(e){this.type=r.Syntax.ReturnStatement,this.argument=e};t.ReturnStatement=te;var ne=function(e){this.type=r.Syntax.Program,this.body=e,this.sourceType="script"};t.Script=ne;var re=function(e){this.type=r.Syntax.SequenceExpression,this.expressions=e};t.SequenceExpression=re;var ie=function(e){this.type=r.Syntax.SpreadElement,this.argument=e};t.SpreadElement=ie;var se=function(e,t){this.type=r.Syntax.MemberExpression,this.computed=!1,this.object=e,this.property=t};t.StaticMemberExpression=se;var ue=function(){this.type=r.Syntax.Super};t.Super=ue;var oe=function(e,t){this.type=r.Syntax.SwitchCase,this.test=e,this.consequent=t};t.SwitchCase=oe;var ae=function(e,t){this.type=r.Syntax.SwitchStatement,this.discriminant=e,this.cases=t};t.SwitchStatement=ae;var le=function(e,t){this.type=r.Syntax.TaggedTemplateExpression,this.tag=e,this.quasi=t};t.TaggedTemplateExpression=le;var ce=function(e,t){this.type=r.Syntax.TemplateElement,this.value=e,this.tail=t};t.TemplateElement=ce;var he=function(e,t){this.type=r.Syntax.TemplateLiteral,this.quasis=e,this.expressions=t};t.TemplateLiteral=he;var pe=function(){this.type=r.Syntax.ThisExpression};t.ThisExpression=pe;var de=function(e){this.type=r.Syntax.ThrowStatement,this.argument=e};t.ThrowStatement=de;var me=function(e,t,n){this.type=r.Syntax.TryStatement,this.block=e,this.handler=t,this.finalizer=n};t.TryStatement=me;var fe=function(e,t){this.type=r.Syntax.UnaryExpression,this.operator=e,this.argument=t,this.prefix=!0};t.UnaryExpression=fe;var De=function(e,t,n){this.type=r.Syntax.UpdateExpression,this.operator=e,this.argument=t,this.prefix=n};t.UpdateExpression=De;var ge=function(e,t){this.type=r.Syntax.VariableDeclaration,this.declarations=e,this.kind=t};t.VariableDeclaration=ge;var Ae=function(e,t){this.type=r.Syntax.VariableDeclarator,this.id=e,this.init=t};t.VariableDeclarator=Ae;var Ce=function(e,t){this.type=r.Syntax.WhileStatement,this.test=e,this.body=t};t.WhileStatement=Ce;var Ee=function(e,t){this.type=r.Syntax.WithStatement,this.object=e,this.body=t};t.WithStatement=Ee;var ye=function(e,t){this.type=r.Syntax.YieldExpression,this.argument=e,this.delegate=t};t.YieldExpression=ye},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(10),s=n(11),u=n(7),o=n(12),a=n(2),l=n(13),c="ArrowParameterPlaceHolder",h=function(){function e(e,t,n){void 0===t&&(t={}),this.config={range:"boolean"==typeof t.range&&t.range,loc:"boolean"==typeof t.loc&&t.loc,source:null,tokens:"boolean"==typeof t.tokens&&t.tokens,comment:"boolean"==typeof t.comment&&t.comment,tolerant:"boolean"==typeof t.tolerant&&t.tolerant},this.config.loc&&t.source&&null!==t.source&&(this.config.source=String(t.source)),this.delegate=n,this.errorHandler=new i.ErrorHandler,this.errorHandler.tolerant=this.config.tolerant,this.scanner=new o.Scanner(e,this.errorHandler),this.scanner.trackComment=this.config.comment,this.operatorPrecedence={")":0,";":0,",":0,"=":0,"]":0,"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":11,"/":11,"%":11},this.lookahead={type:2,value:"",lineNumber:this.scanner.lineNumber,lineStart:0,start:0,end:0},this.hasLineTerminator=!1,this.context={isModule:!1,await:!1,allowIn:!0,allowStrictDirective:!0,allowYield:!0,firstCoverInitializedNameError:null,isAssignmentTarget:!1,isBindingElement:!1,inFunctionBody:!1,inIteration:!1,inSwitch:!1,labelSet:{},strict:!1},this.tokens=[],this.startMarker={index:0,line:this.scanner.lineNumber,column:0},this.lastMarker={index:0,line:this.scanner.lineNumber,column:0},this.nextToken(),this.lastMarker={index:this.scanner.index,line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}return e.prototype.throwError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,(function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]})),u=this.lastMarker.index,o=this.lastMarker.line,a=this.lastMarker.column+1;throw this.errorHandler.createError(u,o,a,s)},e.prototype.tolerateError=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var i=Array.prototype.slice.call(arguments,1),s=e.replace(/%(\d)/g,(function(e,t){return r.assert(t<i.length,"Message reference must be in range"),i[t]})),u=this.lastMarker.index,o=this.scanner.lineNumber,a=this.lastMarker.column+1;this.errorHandler.tolerateError(u,o,a,s)},e.prototype.unexpectedTokenError=function(e,t){var n,r=t||s.Messages.UnexpectedToken;if(e?(t||(r=2===e.type?s.Messages.UnexpectedEOS:3===e.type?s.Messages.UnexpectedIdentifier:6===e.type?s.Messages.UnexpectedNumber:8===e.type?s.Messages.UnexpectedString:10===e.type?s.Messages.UnexpectedTemplate:s.Messages.UnexpectedToken,4===e.type&&(this.scanner.isFutureReservedWord(e.value)?r=s.Messages.UnexpectedReserved:this.context.strict&&this.scanner.isStrictModeReservedWord(e.value)&&(r=s.Messages.StrictReservedWord))),n=e.value):n="ILLEGAL",r=r.replace("%0",n),e&&"number"==typeof e.lineNumber){var i=e.start,u=e.lineNumber,o=this.lastMarker.index-this.lastMarker.column,a=e.start-o+1;return this.errorHandler.createError(i,u,a,r)}return i=this.lastMarker.index,u=this.lastMarker.line,a=this.lastMarker.column+1,this.errorHandler.createError(i,u,a,r)},e.prototype.throwUnexpectedToken=function(e,t){throw this.unexpectedTokenError(e,t)},e.prototype.tolerateUnexpectedToken=function(e,t){this.errorHandler.tolerate(this.unexpectedTokenError(e,t))},e.prototype.collectComments=function(){if(this.config.comment){var e=this.scanner.scanComments();if(e.length>0&&this.delegate)for(var t=0;t<e.length;++t){var n=e[t],r=void 0;r={type:n.multiLine?"BlockComment":"LineComment",value:this.scanner.source.slice(n.slice[0],n.slice[1])},this.config.range&&(r.range=n.range),this.config.loc&&(r.loc=n.loc);var i={start:{line:n.loc.start.line,column:n.loc.start.column,offset:n.range[0]},end:{line:n.loc.end.line,column:n.loc.end.column,offset:n.range[1]}};this.delegate(r,i)}}else this.scanner.scanComments()},e.prototype.getTokenRaw=function(e){return this.scanner.source.slice(e.start,e.end)},e.prototype.convertToken=function(e){var t={type:l.TokenName[e.type],value:this.getTokenRaw(e)};if(this.config.range&&(t.range=[e.start,e.end]),this.config.loc&&(t.loc={start:{line:this.startMarker.line,column:this.startMarker.column},end:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart}}),9===e.type){var n=e.pattern,r=e.flags;t.regex={pattern:n,flags:r}}return t},e.prototype.nextToken=function(){var e=this.lookahead;this.lastMarker.index=this.scanner.index,this.lastMarker.line=this.scanner.lineNumber,this.lastMarker.column=this.scanner.index-this.scanner.lineStart,this.collectComments(),this.scanner.index!==this.startMarker.index&&(this.startMarker.index=this.scanner.index,this.startMarker.line=this.scanner.lineNumber,this.startMarker.column=this.scanner.index-this.scanner.lineStart);var t=this.scanner.lex();return this.hasLineTerminator=e.lineNumber!==t.lineNumber,t&&this.context.strict&&3===t.type&&this.scanner.isStrictModeReservedWord(t.value)&&(t.type=4),this.lookahead=t,this.config.tokens&&2!==t.type&&this.tokens.push(this.convertToken(t)),e},e.prototype.nextRegexToken=function(){this.collectComments();var e=this.scanner.scanRegExp();return this.config.tokens&&(this.tokens.pop(),this.tokens.push(this.convertToken(e))),this.lookahead=e,this.nextToken(),e},e.prototype.createNode=function(){return{index:this.startMarker.index,line:this.startMarker.line,column:this.startMarker.column}},e.prototype.startNode=function(e,t){void 0===t&&(t=0);var n=e.start-e.lineStart,r=e.lineNumber;return n<0&&(n+=t,r--),{index:e.start,line:r,column:n}},e.prototype.finalize=function(e,t){if(this.config.range&&(t.range=[e.index,this.lastMarker.index]),this.config.loc&&(t.loc={start:{line:e.line,column:e.column},end:{line:this.lastMarker.line,column:this.lastMarker.column}},this.config.source&&(t.loc.source=this.config.source)),this.delegate){var n={start:{line:e.line,column:e.column,offset:e.index},end:{line:this.lastMarker.line,column:this.lastMarker.column,offset:this.lastMarker.index}};this.delegate(t,n)}return t},e.prototype.expect=function(e){var t=this.nextToken();7===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.expectCommaSeparator=function(){if(this.config.tolerant){var e=this.lookahead;7===e.type&&","===e.value?this.nextToken():7===e.type&&";"===e.value?(this.nextToken(),this.tolerateUnexpectedToken(e)):this.tolerateUnexpectedToken(e,s.Messages.UnexpectedToken)}else this.expect(",")},e.prototype.expectKeyword=function(e){var t=this.nextToken();4===t.type&&t.value===e||this.throwUnexpectedToken(t)},e.prototype.match=function(e){return 7===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchKeyword=function(e){return 4===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchContextualKeyword=function(e){return 3===this.lookahead.type&&this.lookahead.value===e},e.prototype.matchAssign=function(){if(7!==this.lookahead.type)return!1;var e=this.lookahead.value;return"="===e||"*="===e||"**="===e||"/="===e||"%="===e||"+="===e||"-="===e||"<<="===e||">>="===e||">>>="===e||"&="===e||"^="===e||"|="===e},e.prototype.isolateCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return null!==this.context.firstCoverInitializedNameError&&this.throwUnexpectedToken(this.context.firstCoverInitializedNameError),this.context.isBindingElement=t,this.context.isAssignmentTarget=n,this.context.firstCoverInitializedNameError=r,i},e.prototype.inheritCoverGrammar=function(e){var t=this.context.isBindingElement,n=this.context.isAssignmentTarget,r=this.context.firstCoverInitializedNameError;this.context.isBindingElement=!0,this.context.isAssignmentTarget=!0,this.context.firstCoverInitializedNameError=null;var i=e.call(this);return this.context.isBindingElement=this.context.isBindingElement&&t,this.context.isAssignmentTarget=this.context.isAssignmentTarget&&n,this.context.firstCoverInitializedNameError=r||this.context.firstCoverInitializedNameError,i},e.prototype.consumeSemicolon=function(){this.match(";")?this.nextToken():this.hasLineTerminator||(2===this.lookahead.type||this.match("}")||this.throwUnexpectedToken(this.lookahead),this.lastMarker.index=this.startMarker.index,this.lastMarker.line=this.startMarker.line,this.lastMarker.column=this.startMarker.column)},e.prototype.parsePrimaryExpression=function(){var e,t,n,r=this.createNode();switch(this.lookahead.type){case 3:(this.context.isModule||this.context.await)&&"await"===this.lookahead.value&&this.tolerateUnexpectedToken(this.lookahead),e=this.matchAsyncFunction()?this.parseFunctionExpression():this.finalize(r,new u.Identifier(this.nextToken().value));break;case 6:case 8:this.context.strict&&this.lookahead.octal&&this.tolerateUnexpectedToken(this.lookahead,s.Messages.StrictOctalLiteral),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new u.Literal(t.value,n));break;case 1:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new u.Literal("true"===t.value,n));break;case 5:this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,t=this.nextToken(),n=this.getTokenRaw(t),e=this.finalize(r,new u.Literal(null,n));break;case 10:e=this.parseTemplateLiteral();break;case 7:switch(this.lookahead.value){case"(":this.context.isBindingElement=!1,e=this.inheritCoverGrammar(this.parseGroupExpression);break;case"[":e=this.inheritCoverGrammar(this.parseArrayInitializer);break;case"{":e=this.inheritCoverGrammar(this.parseObjectInitializer);break;case"/":case"/=":this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.scanner.index=this.startMarker.index,t=this.nextRegexToken(),n=this.getTokenRaw(t),e=this.finalize(r,new u.RegexLiteral(t.regex,n,t.pattern,t.flags));break;default:e=this.throwUnexpectedToken(this.nextToken())}break;case 4:!this.context.strict&&this.context.allowYield&&this.matchKeyword("yield")?e=this.parseIdentifierName():!this.context.strict&&this.matchKeyword("let")?e=this.finalize(r,new u.Identifier(this.nextToken().value)):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.matchKeyword("function")?e=this.parseFunctionExpression():this.matchKeyword("this")?(this.nextToken(),e=this.finalize(r,new u.ThisExpression)):e=this.matchKeyword("class")?this.parseClassExpression():this.throwUnexpectedToken(this.nextToken()));break;default:e=this.throwUnexpectedToken(this.nextToken())}return e},e.prototype.parseSpreadElement=function(){var e=this.createNode();this.expect("...");var t=this.inheritCoverGrammar(this.parseAssignmentExpression);return this.finalize(e,new u.SpreadElement(t))},e.prototype.parseArrayInitializer=function(){var e=this.createNode(),t=[];for(this.expect("[");!this.match("]");)if(this.match(","))this.nextToken(),t.push(null);else if(this.match("...")){var n=this.parseSpreadElement();this.match("]")||(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1,this.expect(",")),t.push(n)}else t.push(this.inheritCoverGrammar(this.parseAssignmentExpression)),this.match("]")||this.expect(",");return this.expect("]"),this.finalize(e,new u.ArrayExpression(t))},e.prototype.parsePropertyMethod=function(e){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var t=this.context.strict,n=this.context.allowStrictDirective;this.context.allowStrictDirective=e.simple;var r=this.isolateCoverGrammar(this.parseFunctionSourceElements);return this.context.strict&&e.firstRestricted&&this.tolerateUnexpectedToken(e.firstRestricted,e.message),this.context.strict&&e.stricted&&this.tolerateUnexpectedToken(e.stricted,e.message),this.context.strict=t,this.context.allowStrictDirective=n,r},e.prototype.parsePropertyMethodFunction=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters(),r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new u.FunctionExpression(null,n.params,r,!1))},e.prototype.parsePropertyMethodAsyncFunction=function(){var e=this.createNode(),t=this.context.allowYield,n=this.context.await;this.context.allowYield=!1,this.context.await=!0;var r=this.parseFormalParameters(),i=this.parsePropertyMethod(r);return this.context.allowYield=t,this.context.await=n,this.finalize(e,new u.AsyncFunctionExpression(null,r.params,i))},e.prototype.parseObjectPropertyKey=function(){var e,t=this.createNode(),n=this.nextToken();switch(n.type){case 8:case 6:this.context.strict&&n.octal&&this.tolerateUnexpectedToken(n,s.Messages.StrictOctalLiteral);var r=this.getTokenRaw(n);e=this.finalize(t,new u.Literal(n.value,r));break;case 3:case 1:case 5:case 4:e=this.finalize(t,new u.Identifier(n.value));break;case 7:"["===n.value?(e=this.isolateCoverGrammar(this.parseAssignmentExpression),this.expect("]")):e=this.throwUnexpectedToken(n);break;default:e=this.throwUnexpectedToken(n)}return e},e.prototype.isPropertyKey=function(e,t){return e.type===a.Syntax.Identifier&&e.name===t||e.type===a.Syntax.Literal&&e.value===t},e.prototype.parseObjectProperty=function(e){var t,n=this.createNode(),r=this.lookahead,i=null,o=null,a=!1,l=!1,c=!1,h=!1;if(3===r.type){var p=r.value;this.nextToken(),a=this.match("["),i=(h=!(this.hasLineTerminator||"async"!==p||this.match(":")||this.match("(")||this.match("*")||this.match(",")))?this.parseObjectPropertyKey():this.finalize(n,new u.Identifier(p))}else this.match("*")?this.nextToken():(a=this.match("["),i=this.parseObjectPropertyKey());var d=this.qualifiedPropertyName(this.lookahead);if(3===r.type&&!h&&"get"===r.value&&d)t="get",a=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod();else if(3===r.type&&!h&&"set"===r.value&&d)t="set",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod();else if(7===r.type&&"*"===r.value&&d)t="init",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),l=!0;else if(i||this.throwUnexpectedToken(this.lookahead),t="init",this.match(":")&&!h)!a&&this.isPropertyKey(i,"__proto__")&&(e.value&&this.tolerateError(s.Messages.DuplicateProtoProperty),e.value=!0),this.nextToken(),o=this.inheritCoverGrammar(this.parseAssignmentExpression);else if(this.match("("))o=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0;else if(3===r.type)if(p=this.finalize(n,new u.Identifier(r.value)),this.match("=")){this.context.firstCoverInitializedNameError=this.lookahead,this.nextToken(),c=!0;var m=this.isolateCoverGrammar(this.parseAssignmentExpression);o=this.finalize(n,new u.AssignmentPattern(p,m))}else c=!0,o=p;else this.throwUnexpectedToken(this.nextToken());return this.finalize(n,new u.Property(t,i,a,o,l,c))},e.prototype.parseObjectInitializer=function(){var e=this.createNode();this.expect("{");for(var t=[],n={value:!1};!this.match("}");)t.push(this.parseObjectProperty(n)),this.match("}")||this.expectCommaSeparator();return this.expect("}"),this.finalize(e,new u.ObjectExpression(t))},e.prototype.parseTemplateHead=function(){r.assert(this.lookahead.head,"Template literal must start with a template head");var e=this.createNode(),t=this.nextToken(),n=t.value,i=t.cooked;return this.finalize(e,new u.TemplateElement({raw:n,cooked:i},t.tail))},e.prototype.parseTemplateElement=function(){10!==this.lookahead.type&&this.throwUnexpectedToken();var e=this.createNode(),t=this.nextToken(),n=t.value,r=t.cooked;return this.finalize(e,new u.TemplateElement({raw:n,cooked:r},t.tail))},e.prototype.parseTemplateLiteral=function(){var e=this.createNode(),t=[],n=[],r=this.parseTemplateHead();for(n.push(r);!r.tail;)t.push(this.parseExpression()),r=this.parseTemplateElement(),n.push(r);return this.finalize(e,new u.TemplateLiteral(n,t))},e.prototype.reinterpretExpressionAsPattern=function(e){switch(e.type){case a.Syntax.Identifier:case a.Syntax.MemberExpression:case a.Syntax.RestElement:case a.Syntax.AssignmentPattern:break;case a.Syntax.SpreadElement:e.type=a.Syntax.RestElement,this.reinterpretExpressionAsPattern(e.argument);break;case a.Syntax.ArrayExpression:e.type=a.Syntax.ArrayPattern;for(var t=0;t<e.elements.length;t++)null!==e.elements[t]&&this.reinterpretExpressionAsPattern(e.elements[t]);break;case a.Syntax.ObjectExpression:for(e.type=a.Syntax.ObjectPattern,t=0;t<e.properties.length;t++)this.reinterpretExpressionAsPattern(e.properties[t].value);break;case a.Syntax.AssignmentExpression:e.type=a.Syntax.AssignmentPattern,delete e.operator,this.reinterpretExpressionAsPattern(e.left)}},e.prototype.parseGroupExpression=function(){var e;if(this.expect("("),this.match(")"))this.nextToken(),this.match("=>")||this.expect("=>"),e={type:c,params:[],async:!1};else{var t=this.lookahead,n=[];if(this.match("..."))e=this.parseRestElement(n),this.expect(")"),this.match("=>")||this.expect("=>"),e={type:c,params:[e],async:!1};else{var r=!1;if(this.context.isBindingElement=!0,e=this.inheritCoverGrammar(this.parseAssignmentExpression),this.match(",")){var i=[];for(this.context.isAssignmentTarget=!1,i.push(e);2!==this.lookahead.type&&this.match(",");){if(this.nextToken(),this.match(")")){this.nextToken();for(var s=0;s<i.length;s++)this.reinterpretExpressionAsPattern(i[s]);r=!0,e={type:c,params:i,async:!1}}else if(this.match("...")){for(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),i.push(this.parseRestElement(n)),this.expect(")"),this.match("=>")||this.expect("=>"),this.context.isBindingElement=!1,s=0;s<i.length;s++)this.reinterpretExpressionAsPattern(i[s]);r=!0,e={type:c,params:i,async:!1}}else i.push(this.inheritCoverGrammar(this.parseAssignmentExpression));if(r)break}r||(e=this.finalize(this.startNode(t),new u.SequenceExpression(i)))}if(!r){if(this.expect(")"),this.match("=>")&&(e.type===a.Syntax.Identifier&&"yield"===e.name&&(r=!0,e={type:c,params:[e],async:!1}),!r)){if(this.context.isBindingElement||this.throwUnexpectedToken(this.lookahead),e.type===a.Syntax.SequenceExpression)for(s=0;s<e.expressions.length;s++)this.reinterpretExpressionAsPattern(e.expressions[s]);else this.reinterpretExpressionAsPattern(e);var o=e.type===a.Syntax.SequenceExpression?e.expressions:[e];e={type:c,params:o,async:!1}}this.context.isBindingElement=!1}}}return e},e.prototype.parseArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAssignmentExpression);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.isIdentifierName=function(e){return 3===e.type||4===e.type||1===e.type||5===e.type},e.prototype.parseIdentifierName=function(){var e=this.createNode(),t=this.nextToken();return this.isIdentifierName(t)||this.throwUnexpectedToken(t),this.finalize(e,new u.Identifier(t.value))},e.prototype.parseNewExpression=function(){var e,t=this.createNode(),n=this.parseIdentifierName();if(r.assert("new"===n.name,"New expression must start with `new`"),this.match("."))if(this.nextToken(),3===this.lookahead.type&&this.context.inFunctionBody&&"target"===this.lookahead.value){var i=this.parseIdentifierName();e=new u.MetaProperty(n,i)}else this.throwUnexpectedToken(this.lookahead);else{var s=this.isolateCoverGrammar(this.parseLeftHandSideExpression),o=this.match("(")?this.parseArguments():[];e=new u.NewExpression(s,o),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return this.finalize(t,e)},e.prototype.parseAsyncArgument=function(){var e=this.parseAssignmentExpression();return this.context.firstCoverInitializedNameError=null,e},e.prototype.parseAsyncArguments=function(){this.expect("(");var e=[];if(!this.match(")"))for(;;){var t=this.match("...")?this.parseSpreadElement():this.isolateCoverGrammar(this.parseAsyncArgument);if(e.push(t),this.match(")"))break;if(this.expectCommaSeparator(),this.match(")"))break}return this.expect(")"),e},e.prototype.parseLeftHandSideExpressionAllowCall=function(){var e,t=this.lookahead,n=this.matchContextualKeyword("async"),r=this.context.allowIn;for(this.context.allowIn=!0,this.matchKeyword("super")&&this.context.inFunctionBody?(e=this.createNode(),this.nextToken(),e=this.finalize(e,new u.Super),this.match("(")||this.match(".")||this.match("[")||this.throwUnexpectedToken(this.lookahead)):e=this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match(".")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect(".");var i=this.parseIdentifierName();e=this.finalize(this.startNode(t),new u.StaticMemberExpression(e,i))}else if(this.match("(")){var s=n&&t.lineNumber===this.lookahead.lineNumber;this.context.isBindingElement=!1,this.context.isAssignmentTarget=!1;var o=s?this.parseAsyncArguments():this.parseArguments();if(e=this.finalize(this.startNode(t),new u.CallExpression(e,o)),s&&this.match("=>")){for(var a=0;a<o.length;++a)this.reinterpretExpressionAsPattern(o[a]);e={type:c,params:o,async:!0}}}else if(this.match("["))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("["),i=this.isolateCoverGrammar(this.parseExpression),this.expect("]"),e=this.finalize(this.startNode(t),new u.ComputedMemberExpression(e,i));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var l=this.parseTemplateLiteral();e=this.finalize(this.startNode(t),new u.TaggedTemplateExpression(e,l))}return this.context.allowIn=r,e},e.prototype.parseSuper=function(){var e=this.createNode();return this.expectKeyword("super"),this.match("[")||this.match(".")||this.throwUnexpectedToken(this.lookahead),this.finalize(e,new u.Super)},e.prototype.parseLeftHandSideExpression=function(){r.assert(this.context.allowIn,"callee of new expression always allow in keyword.");for(var e=this.startNode(this.lookahead),t=this.matchKeyword("super")&&this.context.inFunctionBody?this.parseSuper():this.inheritCoverGrammar(this.matchKeyword("new")?this.parseNewExpression:this.parsePrimaryExpression);;)if(this.match("[")){this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("[");var n=this.isolateCoverGrammar(this.parseExpression);this.expect("]"),t=this.finalize(e,new u.ComputedMemberExpression(t,n))}else if(this.match("."))this.context.isBindingElement=!1,this.context.isAssignmentTarget=!0,this.expect("."),n=this.parseIdentifierName(),t=this.finalize(e,new u.StaticMemberExpression(t,n));else{if(10!==this.lookahead.type||!this.lookahead.head)break;var i=this.parseTemplateLiteral();t=this.finalize(e,new u.TaggedTemplateExpression(t,i))}return t},e.prototype.parseUpdateExpression=function(){var e,t=this.lookahead;if(this.match("++")||this.match("--")){var n=this.startNode(t),r=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),this.context.strict&&e.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPrefix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment);var i=!0;e=this.finalize(n,new u.UpdateExpression(r.value,e,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else if(e=this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall),!this.hasLineTerminator&&7===this.lookahead.type&&(this.match("++")||this.match("--"))){this.context.strict&&e.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(e.name)&&this.tolerateError(s.Messages.StrictLHSPostfix),this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var o=this.nextToken().value;i=!1,e=this.finalize(this.startNode(t),new u.UpdateExpression(o,e,i))}return e},e.prototype.parseAwaitExpression=function(){var e=this.createNode();this.nextToken();var t=this.parseUnaryExpression();return this.finalize(e,new u.AwaitExpression(t))},e.prototype.parseUnaryExpression=function(){var e;if(this.match("+")||this.match("-")||this.match("~")||this.match("!")||this.matchKeyword("delete")||this.matchKeyword("void")||this.matchKeyword("typeof")){var t=this.startNode(this.lookahead),n=this.nextToken();e=this.inheritCoverGrammar(this.parseUnaryExpression),e=this.finalize(t,new u.UnaryExpression(n.value,e)),this.context.strict&&"delete"===e.operator&&e.argument.type===a.Syntax.Identifier&&this.tolerateError(s.Messages.StrictDelete),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}else e=this.context.await&&this.matchContextualKeyword("await")?this.parseAwaitExpression():this.parseUpdateExpression();return e},e.prototype.parseExponentiationExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseUnaryExpression);if(t.type!==a.Syntax.UnaryExpression&&this.match("**")){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var n=t,r=this.isolateCoverGrammar(this.parseExponentiationExpression);t=this.finalize(this.startNode(e),new u.BinaryExpression("**",n,r))}return t},e.prototype.binaryPrecedence=function(e){var t=e.value;return 7===e.type?this.operatorPrecedence[t]||0:4===e.type&&("instanceof"===t||this.context.allowIn&&"in"===t)?7:0},e.prototype.parseBinaryExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseExponentiationExpression),n=this.lookahead,r=this.binaryPrecedence(n);if(r>0){this.nextToken(),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;for(var i=[e,this.lookahead],s=t,o=this.isolateCoverGrammar(this.parseExponentiationExpression),a=[s,n.value,o],l=[r];!((r=this.binaryPrecedence(this.lookahead))<=0);){for(;a.length>2&&r<=l[l.length-1];){o=a.pop();var c=a.pop();l.pop(),s=a.pop(),i.pop();var h=this.startNode(i[i.length-1]);a.push(this.finalize(h,new u.BinaryExpression(c,s,o)))}a.push(this.nextToken().value),l.push(r),i.push(this.lookahead),a.push(this.isolateCoverGrammar(this.parseExponentiationExpression))}var p=a.length-1;t=a[p];for(var d=i.pop();p>1;){var m=i.pop(),f=d&&d.lineStart;h=this.startNode(m,f),c=a[p-1],t=this.finalize(h,new u.BinaryExpression(c,a[p-2],t)),p-=2,d=m}}return t},e.prototype.parseConditionalExpression=function(){var e=this.lookahead,t=this.inheritCoverGrammar(this.parseBinaryExpression);if(this.match("?")){this.nextToken();var n=this.context.allowIn;this.context.allowIn=!0;var r=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowIn=n,this.expect(":");var i=this.isolateCoverGrammar(this.parseAssignmentExpression);t=this.finalize(this.startNode(e),new u.ConditionalExpression(t,r,i)),this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1}return t},e.prototype.checkPatternParam=function(e,t){switch(t.type){case a.Syntax.Identifier:this.validateParam(e,t,t.name);break;case a.Syntax.RestElement:this.checkPatternParam(e,t.argument);break;case a.Syntax.AssignmentPattern:this.checkPatternParam(e,t.left);break;case a.Syntax.ArrayPattern:for(var n=0;n<t.elements.length;n++)null!==t.elements[n]&&this.checkPatternParam(e,t.elements[n]);break;case a.Syntax.ObjectPattern:for(n=0;n<t.properties.length;n++)this.checkPatternParam(e,t.properties[n].value)}e.simple=e.simple&&t instanceof u.Identifier},e.prototype.reinterpretAsCoverFormalsList=function(e){var t,n=[e],r=!1;switch(e.type){case a.Syntax.Identifier:break;case c:n=e.params,r=e.async;break;default:return null}t={simple:!0,paramSet:{}};for(var i=0;i<n.length;++i)(u=n[i]).type===a.Syntax.AssignmentPattern?u.right.type===a.Syntax.YieldExpression&&(u.right.argument&&this.throwUnexpectedToken(this.lookahead),u.right.type=a.Syntax.Identifier,u.right.name="yield",delete u.right.argument,delete u.right.delegate):r&&u.type===a.Syntax.Identifier&&"await"===u.name&&this.throwUnexpectedToken(this.lookahead),this.checkPatternParam(t,u),n[i]=u;if(this.context.strict||!this.context.allowYield)for(i=0;i<n.length;++i){var u;(u=n[i]).type===a.Syntax.YieldExpression&&this.throwUnexpectedToken(this.lookahead)}if(t.message===s.Messages.StrictParamDupe){var o=this.context.strict?t.stricted:t.firstRestricted;this.throwUnexpectedToken(o,t.message)}return{simple:t.simple,params:n,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.parseAssignmentExpression=function(){var e;if(!this.context.allowYield&&this.matchKeyword("yield"))e=this.parseYieldExpression();else{var t=this.lookahead,n=t;if(e=this.parseConditionalExpression(),3===n.type&&n.lineNumber===this.lookahead.lineNumber&&"async"===n.value&&(3===this.lookahead.type||this.matchKeyword("yield"))){var r=this.parsePrimaryExpression();this.reinterpretExpressionAsPattern(r),e={type:c,params:[r],async:!0}}if(e.type===c||this.match("=>")){this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1;var i=e.async,o=this.reinterpretAsCoverFormalsList(e);if(o){this.hasLineTerminator&&this.tolerateUnexpectedToken(this.lookahead),this.context.firstCoverInitializedNameError=null;var l=this.context.strict,h=this.context.allowStrictDirective;this.context.allowStrictDirective=o.simple;var p=this.context.allowYield,d=this.context.await;this.context.allowYield=!0,this.context.await=i;var m=this.startNode(t);this.expect("=>");var f=void 0;if(this.match("{")){var D=this.context.allowIn;this.context.allowIn=!0,f=this.parseFunctionSourceElements(),this.context.allowIn=D}else f=this.isolateCoverGrammar(this.parseAssignmentExpression);var g=f.type!==a.Syntax.BlockStatement;this.context.strict&&o.firstRestricted&&this.throwUnexpectedToken(o.firstRestricted,o.message),this.context.strict&&o.stricted&&this.tolerateUnexpectedToken(o.stricted,o.message),e=i?this.finalize(m,new u.AsyncArrowFunctionExpression(o.params,f,g)):this.finalize(m,new u.ArrowFunctionExpression(o.params,f,g)),this.context.strict=l,this.context.allowStrictDirective=h,this.context.allowYield=p,this.context.await=d}}else if(this.matchAssign()){if(this.context.isAssignmentTarget||this.tolerateError(s.Messages.InvalidLHSInAssignment),this.context.strict&&e.type===a.Syntax.Identifier){var A=e;this.scanner.isRestrictedWord(A.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictLHSAssignment),this.scanner.isStrictModeReservedWord(A.name)&&this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord)}this.match("=")?this.reinterpretExpressionAsPattern(e):(this.context.isAssignmentTarget=!1,this.context.isBindingElement=!1);var C=(n=this.nextToken()).value,E=this.isolateCoverGrammar(this.parseAssignmentExpression);e=this.finalize(this.startNode(t),new u.AssignmentExpression(C,e,E)),this.context.firstCoverInitializedNameError=null}}return e},e.prototype.parseExpression=function(){var e=this.lookahead,t=this.isolateCoverGrammar(this.parseAssignmentExpression);if(this.match(",")){var n=[];for(n.push(t);2!==this.lookahead.type&&this.match(",");)this.nextToken(),n.push(this.isolateCoverGrammar(this.parseAssignmentExpression));t=this.finalize(this.startNode(e),new u.SequenceExpression(n))}return t},e.prototype.parseStatementListItem=function(){var e;if(this.context.isAssignmentTarget=!0,this.context.isBindingElement=!0,4===this.lookahead.type)switch(this.lookahead.value){case"export":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalExportDeclaration),e=this.parseExportDeclaration();break;case"import":this.context.isModule||this.tolerateUnexpectedToken(this.lookahead,s.Messages.IllegalImportDeclaration),e=this.parseImportDeclaration();break;case"const":e=this.parseLexicalDeclaration({inFor:!1});break;case"function":e=this.parseFunctionDeclaration();break;case"class":e=this.parseClassDeclaration();break;case"let":e=this.isLexicalDeclaration()?this.parseLexicalDeclaration({inFor:!1}):this.parseStatement();break;default:e=this.parseStatement()}else e=this.parseStatement();return e},e.prototype.parseBlock=function(){var e=this.createNode();this.expect("{");for(var t=[];!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.finalize(e,new u.BlockStatement(t))},e.prototype.parseLexicalBinding=function(e,t){var n=this.createNode(),r=this.parsePattern([],e);this.context.strict&&r.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(r.name)&&this.tolerateError(s.Messages.StrictVarName);var i=null;return"const"===e?this.matchKeyword("in")||this.matchContextualKeyword("of")||(this.match("=")?(this.nextToken(),i=this.isolateCoverGrammar(this.parseAssignmentExpression)):this.throwError(s.Messages.DeclarationMissingInitializer,"const")):(!t.inFor&&r.type!==a.Syntax.Identifier||this.match("="))&&(this.expect("="),i=this.isolateCoverGrammar(this.parseAssignmentExpression)),this.finalize(n,new u.VariableDeclarator(r,i))},e.prototype.parseBindingList=function(e,t){for(var n=[this.parseLexicalBinding(e,t)];this.match(",");)this.nextToken(),n.push(this.parseLexicalBinding(e,t));return n},e.prototype.isLexicalDeclaration=function(){var e=this.scanner.saveState();this.scanner.scanComments();var t=this.scanner.lex();return this.scanner.restoreState(e),3===t.type||7===t.type&&"["===t.value||7===t.type&&"{"===t.value||4===t.type&&"let"===t.value||4===t.type&&"yield"===t.value},e.prototype.parseLexicalDeclaration=function(e){var t=this.createNode(),n=this.nextToken().value;r.assert("let"===n||"const"===n,"Lexical declaration must be either let or const");var i=this.parseBindingList(n,e);return this.consumeSemicolon(),this.finalize(t,new u.VariableDeclaration(i,n))},e.prototype.parseBindingRestElement=function(e,t){var n=this.createNode();this.expect("...");var r=this.parsePattern(e,t);return this.finalize(n,new u.RestElement(r))},e.prototype.parseArrayPattern=function(e,t){var n=this.createNode();this.expect("[");for(var r=[];!this.match("]");)if(this.match(","))this.nextToken(),r.push(null);else{if(this.match("...")){r.push(this.parseBindingRestElement(e,t));break}r.push(this.parsePatternWithDefault(e,t)),this.match("]")||this.expect(",")}return this.expect("]"),this.finalize(n,new u.ArrayPattern(r))},e.prototype.parsePropertyPattern=function(e,t){var n,r,i=this.createNode(),s=!1,o=!1;if(3===this.lookahead.type){var a=this.lookahead;n=this.parseVariableIdentifier();var l=this.finalize(i,new u.Identifier(a.value));if(this.match("=")){e.push(a),o=!0,this.nextToken();var c=this.parseAssignmentExpression();r=this.finalize(this.startNode(a),new u.AssignmentPattern(l,c))}else this.match(":")?(this.expect(":"),r=this.parsePatternWithDefault(e,t)):(e.push(a),o=!0,r=l)}else s=this.match("["),n=this.parseObjectPropertyKey(),this.expect(":"),r=this.parsePatternWithDefault(e,t);return this.finalize(i,new u.Property("init",n,s,r,!1,o))},e.prototype.parseObjectPattern=function(e,t){var n=this.createNode(),r=[];for(this.expect("{");!this.match("}");)r.push(this.parsePropertyPattern(e,t)),this.match("}")||this.expect(",");return this.expect("}"),this.finalize(n,new u.ObjectPattern(r))},e.prototype.parsePattern=function(e,t){var n;return this.match("[")?n=this.parseArrayPattern(e,t):this.match("{")?n=this.parseObjectPattern(e,t):(!this.matchKeyword("let")||"const"!==t&&"let"!==t||this.tolerateUnexpectedToken(this.lookahead,s.Messages.LetInLexicalBinding),e.push(this.lookahead),n=this.parseVariableIdentifier(t)),n},e.prototype.parsePatternWithDefault=function(e,t){var n=this.lookahead,r=this.parsePattern(e,t);if(this.match("=")){this.nextToken();var i=this.context.allowYield;this.context.allowYield=!0;var s=this.isolateCoverGrammar(this.parseAssignmentExpression);this.context.allowYield=i,r=this.finalize(this.startNode(n),new u.AssignmentPattern(r,s))}return r},e.prototype.parseVariableIdentifier=function(e){var t=this.createNode(),n=this.nextToken();return 4===n.type&&"yield"===n.value?this.context.strict?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):this.context.allowYield||this.throwUnexpectedToken(n):3!==n.type?this.context.strict&&4===n.type&&this.scanner.isStrictModeReservedWord(n.value)?this.tolerateUnexpectedToken(n,s.Messages.StrictReservedWord):(this.context.strict||"let"!==n.value||"var"!==e)&&this.throwUnexpectedToken(n):(this.context.isModule||this.context.await)&&3===n.type&&"await"===n.value&&this.tolerateUnexpectedToken(n),this.finalize(t,new u.Identifier(n.value))},e.prototype.parseVariableDeclaration=function(e){var t=this.createNode(),n=this.parsePattern([],"var");this.context.strict&&n.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictVarName);var r=null;return this.match("=")?(this.nextToken(),r=this.isolateCoverGrammar(this.parseAssignmentExpression)):n.type===a.Syntax.Identifier||e.inFor||this.expect("="),this.finalize(t,new u.VariableDeclarator(n,r))},e.prototype.parseVariableDeclarationList=function(e){var t={inFor:e.inFor},n=[];for(n.push(this.parseVariableDeclaration(t));this.match(",");)this.nextToken(),n.push(this.parseVariableDeclaration(t));return n},e.prototype.parseVariableStatement=function(){var e=this.createNode();this.expectKeyword("var");var t=this.parseVariableDeclarationList({inFor:!1});return this.consumeSemicolon(),this.finalize(e,new u.VariableDeclaration(t,"var"))},e.prototype.parseEmptyStatement=function(){var e=this.createNode();return this.expect(";"),this.finalize(e,new u.EmptyStatement)},e.prototype.parseExpressionStatement=function(){var e=this.createNode(),t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new u.ExpressionStatement(t))},e.prototype.parseIfClause=function(){return this.context.strict&&this.matchKeyword("function")&&this.tolerateError(s.Messages.StrictFunction),this.parseStatement()},e.prototype.parseIfStatement=function(){var e,t=this.createNode(),n=null;this.expectKeyword("if"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new u.EmptyStatement)):(this.expect(")"),e=this.parseIfClause(),this.matchKeyword("else")&&(this.nextToken(),n=this.parseIfClause())),this.finalize(t,new u.IfStatement(r,e,n))},e.prototype.parseDoWhileStatement=function(){var e=this.createNode();this.expectKeyword("do");var t=this.context.inIteration;this.context.inIteration=!0;var n=this.parseStatement();this.context.inIteration=t,this.expectKeyword("while"),this.expect("(");var r=this.parseExpression();return!this.match(")")&&this.config.tolerant?this.tolerateUnexpectedToken(this.nextToken()):(this.expect(")"),this.match(";")&&this.nextToken()),this.finalize(e,new u.DoWhileStatement(n,r))},e.prototype.parseWhileStatement=function(){var e,t=this.createNode();this.expectKeyword("while"),this.expect("(");var n=this.parseExpression();if(!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new u.EmptyStatement);else{this.expect(")");var r=this.context.inIteration;this.context.inIteration=!0,e=this.parseStatement(),this.context.inIteration=r}return this.finalize(t,new u.WhileStatement(n,e))},e.prototype.parseForStatement=function(){var e,t,n,r=null,i=null,o=null,l=!0,c=this.createNode();if(this.expectKeyword("for"),this.expect("("),this.match(";"))this.nextToken();else if(this.matchKeyword("var")){r=this.createNode(),this.nextToken();var h=this.context.allowIn;this.context.allowIn=!1;var p=this.parseVariableDeclarationList({inFor:!0});if(this.context.allowIn=h,1===p.length&&this.matchKeyword("in")){var d=p[0];d.init&&(d.id.type===a.Syntax.ArrayPattern||d.id.type===a.Syntax.ObjectPattern||this.context.strict)&&this.tolerateError(s.Messages.ForInOfLoopInitializer,"for-in"),r=this.finalize(r,new u.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseExpression(),r=null}else 1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new u.VariableDeclaration(p,"var")),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,l=!1):(r=this.finalize(r,new u.VariableDeclaration(p,"var")),this.expect(";"))}else if(this.matchKeyword("const")||this.matchKeyword("let")){r=this.createNode();var m=this.nextToken().value;this.context.strict||"in"!==this.lookahead.value?(h=this.context.allowIn,this.context.allowIn=!1,p=this.parseBindingList(m,{inFor:!0}),this.context.allowIn=h,1===p.length&&null===p[0].init&&this.matchKeyword("in")?(r=this.finalize(r,new u.VariableDeclaration(p,m)),this.nextToken(),e=r,t=this.parseExpression(),r=null):1===p.length&&null===p[0].init&&this.matchContextualKeyword("of")?(r=this.finalize(r,new u.VariableDeclaration(p,m)),this.nextToken(),e=r,t=this.parseAssignmentExpression(),r=null,l=!1):(this.consumeSemicolon(),r=this.finalize(r,new u.VariableDeclaration(p,m)))):(r=this.finalize(r,new u.Identifier(m)),this.nextToken(),e=r,t=this.parseExpression(),r=null)}else{var f=this.lookahead;if(h=this.context.allowIn,this.context.allowIn=!1,r=this.inheritCoverGrammar(this.parseAssignmentExpression),this.context.allowIn=h,this.matchKeyword("in"))this.context.isAssignmentTarget&&r.type!==a.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForIn),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseExpression(),r=null;else if(this.matchContextualKeyword("of"))this.context.isAssignmentTarget&&r.type!==a.Syntax.AssignmentExpression||this.tolerateError(s.Messages.InvalidLHSInForLoop),this.nextToken(),this.reinterpretExpressionAsPattern(r),e=r,t=this.parseAssignmentExpression(),r=null,l=!1;else{if(this.match(",")){for(var D=[r];this.match(",");)this.nextToken(),D.push(this.isolateCoverGrammar(this.parseAssignmentExpression));r=this.finalize(this.startNode(f),new u.SequenceExpression(D))}this.expect(";")}}if(void 0===e&&(this.match(";")||(i=this.parseExpression()),this.expect(";"),this.match(")")||(o=this.parseExpression())),!this.match(")")&&this.config.tolerant)this.tolerateUnexpectedToken(this.nextToken()),n=this.finalize(this.createNode(),new u.EmptyStatement);else{this.expect(")");var g=this.context.inIteration;this.context.inIteration=!0,n=this.isolateCoverGrammar(this.parseStatement),this.context.inIteration=g}return void 0===e?this.finalize(c,new u.ForStatement(r,i,o,n)):l?this.finalize(c,new u.ForInStatement(e,t,n)):this.finalize(c,new u.ForOfStatement(e,t,n))},e.prototype.parseContinueStatement=function(){var e=this.createNode();this.expectKeyword("continue");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier();t=n;var r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(s.Messages.UnknownLabel,n.name)}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.throwError(s.Messages.IllegalContinue),this.finalize(e,new u.ContinueStatement(t))},e.prototype.parseBreakStatement=function(){var e=this.createNode();this.expectKeyword("break");var t=null;if(3===this.lookahead.type&&!this.hasLineTerminator){var n=this.parseVariableIdentifier(),r="$"+n.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,r)||this.throwError(s.Messages.UnknownLabel,n.name),t=n}return this.consumeSemicolon(),null!==t||this.context.inIteration||this.context.inSwitch||this.throwError(s.Messages.IllegalBreak),this.finalize(e,new u.BreakStatement(t))},e.prototype.parseReturnStatement=function(){this.context.inFunctionBody||this.tolerateError(s.Messages.IllegalReturn);var e=this.createNode();this.expectKeyword("return");var t=(this.match(";")||this.match("}")||this.hasLineTerminator||2===this.lookahead.type)&&8!==this.lookahead.type&&10!==this.lookahead.type?null:this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new u.ReturnStatement(t))},e.prototype.parseWithStatement=function(){this.context.strict&&this.tolerateError(s.Messages.StrictModeWith);var e,t=this.createNode();this.expectKeyword("with"),this.expect("(");var n=this.parseExpression();return!this.match(")")&&this.config.tolerant?(this.tolerateUnexpectedToken(this.nextToken()),e=this.finalize(this.createNode(),new u.EmptyStatement)):(this.expect(")"),e=this.parseStatement()),this.finalize(t,new u.WithStatement(n,e))},e.prototype.parseSwitchCase=function(){var e,t=this.createNode();this.matchKeyword("default")?(this.nextToken(),e=null):(this.expectKeyword("case"),e=this.parseExpression()),this.expect(":");for(var n=[];!(this.match("}")||this.matchKeyword("default")||this.matchKeyword("case"));)n.push(this.parseStatementListItem());return this.finalize(t,new u.SwitchCase(e,n))},e.prototype.parseSwitchStatement=function(){var e=this.createNode();this.expectKeyword("switch"),this.expect("(");var t=this.parseExpression();this.expect(")");var n=this.context.inSwitch;this.context.inSwitch=!0;var r=[],i=!1;for(this.expect("{");!this.match("}");){var o=this.parseSwitchCase();null===o.test&&(i&&this.throwError(s.Messages.MultipleDefaultsInSwitch),i=!0),r.push(o)}return this.expect("}"),this.context.inSwitch=n,this.finalize(e,new u.SwitchStatement(t,r))},e.prototype.parseLabelledStatement=function(){var e,t=this.createNode(),n=this.parseExpression();if(n.type===a.Syntax.Identifier&&this.match(":")){this.nextToken();var r=n,i="$"+r.name;Object.prototype.hasOwnProperty.call(this.context.labelSet,i)&&this.throwError(s.Messages.Redeclaration,"Label",r.name),this.context.labelSet[i]=!0;var o=void 0;if(this.matchKeyword("class"))this.tolerateUnexpectedToken(this.lookahead),o=this.parseClassDeclaration();else if(this.matchKeyword("function")){var l=this.lookahead,c=this.parseFunctionDeclaration();this.context.strict?this.tolerateUnexpectedToken(l,s.Messages.StrictFunction):c.generator&&this.tolerateUnexpectedToken(l,s.Messages.GeneratorInLegacyContext),o=c}else o=this.parseStatement();delete this.context.labelSet[i],e=new u.LabeledStatement(r,o)}else this.consumeSemicolon(),e=new u.ExpressionStatement(n);return this.finalize(t,e)},e.prototype.parseThrowStatement=function(){var e=this.createNode();this.expectKeyword("throw"),this.hasLineTerminator&&this.throwError(s.Messages.NewlineAfterThrow);var t=this.parseExpression();return this.consumeSemicolon(),this.finalize(e,new u.ThrowStatement(t))},e.prototype.parseCatchClause=function(){var e=this.createNode();this.expectKeyword("catch"),this.expect("("),this.match(")")&&this.throwUnexpectedToken(this.lookahead);for(var t=[],n=this.parsePattern(t),r={},i=0;i<t.length;i++){var o="$"+t[i].value;Object.prototype.hasOwnProperty.call(r,o)&&this.tolerateError(s.Messages.DuplicateBinding,t[i].value),r[o]=!0}this.context.strict&&n.type===a.Syntax.Identifier&&this.scanner.isRestrictedWord(n.name)&&this.tolerateError(s.Messages.StrictCatchVariable),this.expect(")");var l=this.parseBlock();return this.finalize(e,new u.CatchClause(n,l))},e.prototype.parseFinallyClause=function(){return this.expectKeyword("finally"),this.parseBlock()},e.prototype.parseTryStatement=function(){var e=this.createNode();this.expectKeyword("try");var t=this.parseBlock(),n=this.matchKeyword("catch")?this.parseCatchClause():null,r=this.matchKeyword("finally")?this.parseFinallyClause():null;return n||r||this.throwError(s.Messages.NoCatchOrFinally),this.finalize(e,new u.TryStatement(t,n,r))},e.prototype.parseDebuggerStatement=function(){var e=this.createNode();return this.expectKeyword("debugger"),this.consumeSemicolon(),this.finalize(e,new u.DebuggerStatement)},e.prototype.parseStatement=function(){var e;switch(this.lookahead.type){case 1:case 5:case 6:case 8:case 10:case 9:e=this.parseExpressionStatement();break;case 7:var t=this.lookahead.value;e="{"===t?this.parseBlock():"("===t?this.parseExpressionStatement():";"===t?this.parseEmptyStatement():this.parseExpressionStatement();break;case 3:e=this.matchAsyncFunction()?this.parseFunctionDeclaration():this.parseLabelledStatement();break;case 4:switch(this.lookahead.value){case"break":e=this.parseBreakStatement();break;case"continue":e=this.parseContinueStatement();break;case"debugger":e=this.parseDebuggerStatement();break;case"do":e=this.parseDoWhileStatement();break;case"for":e=this.parseForStatement();break;case"function":e=this.parseFunctionDeclaration();break;case"if":e=this.parseIfStatement();break;case"return":e=this.parseReturnStatement();break;case"switch":e=this.parseSwitchStatement();break;case"throw":e=this.parseThrowStatement();break;case"try":e=this.parseTryStatement();break;case"var":e=this.parseVariableStatement();break;case"while":e=this.parseWhileStatement();break;case"with":e=this.parseWithStatement();break;default:e=this.parseExpressionStatement()}break;default:e=this.throwUnexpectedToken(this.lookahead)}return e},e.prototype.parseFunctionSourceElements=function(){var e=this.createNode();this.expect("{");var t=this.parseDirectivePrologues(),n=this.context.labelSet,r=this.context.inIteration,i=this.context.inSwitch,s=this.context.inFunctionBody;for(this.context.labelSet={},this.context.inIteration=!1,this.context.inSwitch=!1,this.context.inFunctionBody=!0;2!==this.lookahead.type&&!this.match("}");)t.push(this.parseStatementListItem());return this.expect("}"),this.context.labelSet=n,this.context.inIteration=r,this.context.inSwitch=i,this.context.inFunctionBody=s,this.finalize(e,new u.BlockStatement(t))},e.prototype.validateParam=function(e,t,n){var r="$"+n;this.context.strict?(this.scanner.isRestrictedWord(n)&&(e.stricted=t,e.message=s.Messages.StrictParamName),Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)):e.firstRestricted||(this.scanner.isRestrictedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictParamName):this.scanner.isStrictModeReservedWord(n)?(e.firstRestricted=t,e.message=s.Messages.StrictReservedWord):Object.prototype.hasOwnProperty.call(e.paramSet,r)&&(e.stricted=t,e.message=s.Messages.StrictParamDupe)),"function"==typeof Object.defineProperty?Object.defineProperty(e.paramSet,r,{value:!0,enumerable:!0,writable:!0,configurable:!0}):e.paramSet[r]=!0},e.prototype.parseRestElement=function(e){var t=this.createNode();this.expect("...");var n=this.parsePattern(e);return this.match("=")&&this.throwError(s.Messages.DefaultRestParameter),this.match(")")||this.throwError(s.Messages.ParameterAfterRestParameter),this.finalize(t,new u.RestElement(n))},e.prototype.parseFormalParameter=function(e){for(var t=[],n=this.match("...")?this.parseRestElement(t):this.parsePatternWithDefault(t),r=0;r<t.length;r++)this.validateParam(e,t[r],t[r].value);e.simple=e.simple&&n instanceof u.Identifier,e.params.push(n)},e.prototype.parseFormalParameters=function(e){var t;if(t={simple:!0,params:[],firstRestricted:e},this.expect("("),!this.match(")"))for(t.paramSet={};2!==this.lookahead.type&&(this.parseFormalParameter(t),!this.match(")"))&&(this.expect(","),!this.match(")")););return this.expect(")"),{simple:t.simple,params:t.params,stricted:t.stricted,firstRestricted:t.firstRestricted,message:t.message}},e.prototype.matchAsyncFunction=function(){var e=this.matchContextualKeyword("async");if(e){var t=this.scanner.saveState();this.scanner.scanComments();var n=this.scanner.lex();this.scanner.restoreState(t),e=t.lineNumber===n.lineNumber&&4===n.type&&"function"===n.value}return e},e.prototype.parseFunctionDeclaration=function(e){var t=this.createNode(),n=this.matchContextualKeyword("async");n&&this.nextToken(),this.expectKeyword("function");var r,i=!n&&this.match("*");i&&this.nextToken();var o=null,a=null;if(!e||!this.match("(")){var l=this.lookahead;o=this.parseVariableIdentifier(),this.context.strict?this.scanner.isRestrictedWord(l.value)&&this.tolerateUnexpectedToken(l,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(l.value)?(a=l,r=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(l.value)&&(a=l,r=s.Messages.StrictReservedWord)}var c=this.context.await,h=this.context.allowYield;this.context.await=n,this.context.allowYield=!i;var p=this.parseFormalParameters(a),d=p.params,m=p.stricted;a=p.firstRestricted,p.message&&(r=p.message);var f=this.context.strict,D=this.context.allowStrictDirective;this.context.allowStrictDirective=p.simple;var g=this.parseFunctionSourceElements();return this.context.strict&&a&&this.throwUnexpectedToken(a,r),this.context.strict&&m&&this.tolerateUnexpectedToken(m,r),this.context.strict=f,this.context.allowStrictDirective=D,this.context.await=c,this.context.allowYield=h,n?this.finalize(t,new u.AsyncFunctionDeclaration(o,d,g)):this.finalize(t,new u.FunctionDeclaration(o,d,g,i))},e.prototype.parseFunctionExpression=function(){var e=this.createNode(),t=this.matchContextualKeyword("async");t&&this.nextToken(),this.expectKeyword("function");var n,r=!t&&this.match("*");r&&this.nextToken();var i,o=null,a=this.context.await,l=this.context.allowYield;if(this.context.await=t,this.context.allowYield=!r,!this.match("(")){var c=this.lookahead;o=this.context.strict||r||!this.matchKeyword("yield")?this.parseVariableIdentifier():this.parseIdentifierName(),this.context.strict?this.scanner.isRestrictedWord(c.value)&&this.tolerateUnexpectedToken(c,s.Messages.StrictFunctionName):this.scanner.isRestrictedWord(c.value)?(i=c,n=s.Messages.StrictFunctionName):this.scanner.isStrictModeReservedWord(c.value)&&(i=c,n=s.Messages.StrictReservedWord)}var h=this.parseFormalParameters(i),p=h.params,d=h.stricted;i=h.firstRestricted,h.message&&(n=h.message);var m=this.context.strict,f=this.context.allowStrictDirective;this.context.allowStrictDirective=h.simple;var D=this.parseFunctionSourceElements();return this.context.strict&&i&&this.throwUnexpectedToken(i,n),this.context.strict&&d&&this.tolerateUnexpectedToken(d,n),this.context.strict=m,this.context.allowStrictDirective=f,this.context.await=a,this.context.allowYield=l,t?this.finalize(e,new u.AsyncFunctionExpression(o,p,D)):this.finalize(e,new u.FunctionExpression(o,p,D,r))},e.prototype.parseDirective=function(){var e=this.lookahead,t=this.createNode(),n=this.parseExpression(),r=n.type===a.Syntax.Literal?this.getTokenRaw(e).slice(1,-1):null;return this.consumeSemicolon(),this.finalize(t,r?new u.Directive(n,r):new u.ExpressionStatement(n))},e.prototype.parseDirectivePrologues=function(){for(var e=null,t=[];;){var n=this.lookahead;if(8!==n.type)break;var r=this.parseDirective();t.push(r);var i=r.directive;if("string"!=typeof i)break;"use strict"===i?(this.context.strict=!0,e&&this.tolerateUnexpectedToken(e,s.Messages.StrictOctalLiteral),this.context.allowStrictDirective||this.tolerateUnexpectedToken(n,s.Messages.IllegalLanguageModeDirective)):!e&&n.octal&&(e=n)}return t},e.prototype.qualifiedPropertyName=function(e){switch(e.type){case 3:case 8:case 1:case 5:case 6:case 4:return!0;case 7:return"["===e.value}return!1},e.prototype.parseGetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();n.params.length>0&&this.tolerateError(s.Messages.BadGetterArity);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new u.FunctionExpression(null,n.params,r,!1))},e.prototype.parseSetterMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();1!==n.params.length?this.tolerateError(s.Messages.BadSetterArity):n.params[0]instanceof u.RestElement&&this.tolerateError(s.Messages.BadSetterRestParameter);var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new u.FunctionExpression(null,n.params,r,!1))},e.prototype.parseGeneratorMethod=function(){var e=this.createNode(),t=this.context.allowYield;this.context.allowYield=!0;var n=this.parseFormalParameters();this.context.allowYield=!1;var r=this.parsePropertyMethod(n);return this.context.allowYield=t,this.finalize(e,new u.FunctionExpression(null,n.params,r,!0))},e.prototype.isStartOfExpression=function(){var e=!0,t=this.lookahead.value;switch(this.lookahead.type){case 7:e="["===t||"("===t||"{"===t||"+"===t||"-"===t||"!"===t||"~"===t||"++"===t||"--"===t||"/"===t||"/="===t;break;case 4:e="class"===t||"delete"===t||"function"===t||"let"===t||"new"===t||"super"===t||"this"===t||"typeof"===t||"void"===t||"yield"===t}return e},e.prototype.parseYieldExpression=function(){var e=this.createNode();this.expectKeyword("yield");var t=null,n=!1;if(!this.hasLineTerminator){var r=this.context.allowYield;this.context.allowYield=!1,(n=this.match("*"))?(this.nextToken(),t=this.parseAssignmentExpression()):this.isStartOfExpression()&&(t=this.parseAssignmentExpression()),this.context.allowYield=r}return this.finalize(e,new u.YieldExpression(t,n))},e.prototype.parseClassElement=function(e){var t=this.lookahead,n=this.createNode(),r="",i=null,o=null,a=!1,l=!1,c=!1,h=!1;if(this.match("*"))this.nextToken();else if(a=this.match("["),"static"===(i=this.parseObjectPropertyKey()).name&&(this.qualifiedPropertyName(this.lookahead)||this.match("*"))&&(t=this.lookahead,c=!0,a=this.match("["),this.match("*")?this.nextToken():i=this.parseObjectPropertyKey()),3===t.type&&!this.hasLineTerminator&&"async"===t.value){var p=this.lookahead.value;":"!==p&&"("!==p&&"*"!==p&&(h=!0,t=this.lookahead,i=this.parseObjectPropertyKey(),3===t.type&&"constructor"===t.value&&this.tolerateUnexpectedToken(t,s.Messages.ConstructorIsAsync))}var d=this.qualifiedPropertyName(this.lookahead);return 3===t.type?"get"===t.value&&d?(r="get",a=this.match("["),i=this.parseObjectPropertyKey(),this.context.allowYield=!1,o=this.parseGetterMethod()):"set"===t.value&&d&&(r="set",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseSetterMethod()):7===t.type&&"*"===t.value&&d&&(r="init",a=this.match("["),i=this.parseObjectPropertyKey(),o=this.parseGeneratorMethod(),l=!0),!r&&i&&this.match("(")&&(r="init",o=h?this.parsePropertyMethodAsyncFunction():this.parsePropertyMethodFunction(),l=!0),r||this.throwUnexpectedToken(this.lookahead),"init"===r&&(r="method"),a||(c&&this.isPropertyKey(i,"prototype")&&this.throwUnexpectedToken(t,s.Messages.StaticPrototype),!c&&this.isPropertyKey(i,"constructor")&&(("method"!==r||!l||o&&o.generator)&&this.throwUnexpectedToken(t,s.Messages.ConstructorSpecialMethod),e.value?this.throwUnexpectedToken(t,s.Messages.DuplicateConstructor):e.value=!0,r="constructor")),this.finalize(n,new u.MethodDefinition(i,a,o,r,c))},e.prototype.parseClassElementList=function(){var e=[],t={value:!1};for(this.expect("{");!this.match("}");)this.match(";")?this.nextToken():e.push(this.parseClassElement(t));return this.expect("}"),e},e.prototype.parseClassBody=function(){var e=this.createNode(),t=this.parseClassElementList();return this.finalize(e,new u.ClassBody(t))},e.prototype.parseClassDeclaration=function(e){var t=this.createNode(),n=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var r=e&&3!==this.lookahead.type?null:this.parseVariableIdentifier(),i=null;this.matchKeyword("extends")&&(this.nextToken(),i=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var s=this.parseClassBody();return this.context.strict=n,this.finalize(t,new u.ClassDeclaration(r,i,s))},e.prototype.parseClassExpression=function(){var e=this.createNode(),t=this.context.strict;this.context.strict=!0,this.expectKeyword("class");var n=3===this.lookahead.type?this.parseVariableIdentifier():null,r=null;this.matchKeyword("extends")&&(this.nextToken(),r=this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));var i=this.parseClassBody();return this.context.strict=t,this.finalize(e,new u.ClassExpression(n,r,i))},e.prototype.parseModule=function(){this.context.strict=!0,this.context.isModule=!0,this.scanner.isModule=!0;for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new u.Module(t))},e.prototype.parseScript=function(){for(var e=this.createNode(),t=this.parseDirectivePrologues();2!==this.lookahead.type;)t.push(this.parseStatementListItem());return this.finalize(e,new u.Script(t))},e.prototype.parseModuleSpecifier=function(){var e=this.createNode();8!==this.lookahead.type&&this.throwError(s.Messages.InvalidModuleSpecifier);var t=this.nextToken(),n=this.getTokenRaw(t);return this.finalize(e,new u.Literal(t.value,n))},e.prototype.parseImportSpecifier=function(){var e,t,n=this.createNode();return 3===this.lookahead.type?(t=e=this.parseVariableIdentifier(),this.matchContextualKeyword("as")&&(this.nextToken(),t=this.parseVariableIdentifier())):(t=e=this.parseIdentifierName(),this.matchContextualKeyword("as")?(this.nextToken(),t=this.parseVariableIdentifier()):this.throwUnexpectedToken(this.nextToken())),this.finalize(n,new u.ImportSpecifier(t,e))},e.prototype.parseNamedImports=function(){this.expect("{");for(var e=[];!this.match("}");)e.push(this.parseImportSpecifier()),this.match("}")||this.expect(",");return this.expect("}"),e},e.prototype.parseImportDefaultSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName();return this.finalize(e,new u.ImportDefaultSpecifier(t))},e.prototype.parseImportNamespaceSpecifier=function(){var e=this.createNode();this.expect("*"),this.matchContextualKeyword("as")||this.throwError(s.Messages.NoAsAfterImportNamespace),this.nextToken();var t=this.parseIdentifierName();return this.finalize(e,new u.ImportNamespaceSpecifier(t))},e.prototype.parseImportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalImportDeclaration);var e,t=this.createNode();this.expectKeyword("import");var n=[];if(8===this.lookahead.type)e=this.parseModuleSpecifier();else{if(this.match("{")?n=n.concat(this.parseNamedImports()):this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.isIdentifierName(this.lookahead)&&!this.matchKeyword("default")?(n.push(this.parseImportDefaultSpecifier()),this.match(",")&&(this.nextToken(),this.match("*")?n.push(this.parseImportNamespaceSpecifier()):this.match("{")?n=n.concat(this.parseNamedImports()):this.throwUnexpectedToken(this.lookahead))):this.throwUnexpectedToken(this.nextToken()),!this.matchContextualKeyword("from")){var r=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken(),e=this.parseModuleSpecifier()}return this.consumeSemicolon(),this.finalize(t,new u.ImportDeclaration(n,e))},e.prototype.parseExportSpecifier=function(){var e=this.createNode(),t=this.parseIdentifierName(),n=t;return this.matchContextualKeyword("as")&&(this.nextToken(),n=this.parseIdentifierName()),this.finalize(e,new u.ExportSpecifier(t,n))},e.prototype.parseExportDeclaration=function(){this.context.inFunctionBody&&this.throwError(s.Messages.IllegalExportDeclaration);var e,t=this.createNode();if(this.expectKeyword("export"),this.matchKeyword("default"))if(this.nextToken(),this.matchKeyword("function")){var n=this.parseFunctionDeclaration(!0);e=this.finalize(t,new u.ExportDefaultDeclaration(n))}else this.matchKeyword("class")?(n=this.parseClassDeclaration(!0),e=this.finalize(t,new u.ExportDefaultDeclaration(n))):this.matchContextualKeyword("async")?(n=this.matchAsyncFunction()?this.parseFunctionDeclaration(!0):this.parseAssignmentExpression(),e=this.finalize(t,new u.ExportDefaultDeclaration(n))):(this.matchContextualKeyword("from")&&this.throwError(s.Messages.UnexpectedToken,this.lookahead.value),n=this.match("{")?this.parseObjectInitializer():this.match("[")?this.parseArrayInitializer():this.parseAssignmentExpression(),this.consumeSemicolon(),e=this.finalize(t,new u.ExportDefaultDeclaration(n)));else if(this.match("*")){if(this.nextToken(),!this.matchContextualKeyword("from")){var r=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause;this.throwError(r,this.lookahead.value)}this.nextToken();var i=this.parseModuleSpecifier();this.consumeSemicolon(),e=this.finalize(t,new u.ExportAllDeclaration(i))}else if(4===this.lookahead.type){switch(n=void 0,this.lookahead.value){case"let":case"const":n=this.parseLexicalDeclaration({inFor:!1});break;case"var":case"class":case"function":n=this.parseStatementListItem();break;default:this.throwUnexpectedToken(this.lookahead)}e=this.finalize(t,new u.ExportNamedDeclaration(n,[],null))}else if(this.matchAsyncFunction())n=this.parseFunctionDeclaration(),e=this.finalize(t,new u.ExportNamedDeclaration(n,[],null));else{var o=[],a=null,l=!1;for(this.expect("{");!this.match("}");)l=l||this.matchKeyword("default"),o.push(this.parseExportSpecifier()),this.match("}")||this.expect(",");this.expect("}"),this.matchContextualKeyword("from")?(this.nextToken(),a=this.parseModuleSpecifier(),this.consumeSemicolon()):l?(r=this.lookahead.value?s.Messages.UnexpectedToken:s.Messages.MissingFromClause,this.throwError(r,this.lookahead.value)):this.consumeSemicolon(),e=this.finalize(t,new u.ExportNamedDeclaration(null,o,a))}return e},e}();t.Parser=h},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=function(e,t){if(!e)throw new Error("ASSERT: "+t)}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){this.errors=[],this.tolerant=!1}return e.prototype.recordError=function(e){this.errors.push(e)},e.prototype.tolerate=function(e){if(!this.tolerant)throw e;this.recordError(e)},e.prototype.constructError=function(e,t){var n=new Error(e);try{throw n}catch(e){Object.create&&Object.defineProperty&&(n=Object.create(e),Object.defineProperty(n,"column",{value:t}))}return n},e.prototype.createError=function(e,t,n,r){var i="Line "+t+": "+r,s=this.constructError(i,n);return s.index=e,s.lineNumber=t,s.description=r,s},e.prototype.throwError=function(e,t,n,r){throw this.createError(e,t,n,r)},e.prototype.tolerateError=function(e,t,n,r){var i=this.createError(e,t,n,r);if(!this.tolerant)throw i;this.recordError(i)},e}();t.ErrorHandler=n},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Messages={BadGetterArity:"Getter must not have any formal parameters",BadSetterArity:"Setter must have exactly one formal parameter",BadSetterRestParameter:"Setter function argument must not be a rest parameter",ConstructorIsAsync:"Class constructor may not be an async method",ConstructorSpecialMethod:"Class constructor may not be an accessor",DeclarationMissingInitializer:"Missing initializer in %0 declaration",DefaultRestParameter:"Unexpected token =",DuplicateBinding:"Duplicate binding %0",DuplicateConstructor:"A class may only have one constructor",DuplicateProtoProperty:"Duplicate __proto__ fields are not allowed in object literals",ForInOfLoopInitializer:"%0 loop variable declaration may not have an initializer",GeneratorInLegacyContext:"Generator declarations are not allowed in legacy contexts",IllegalBreak:"Illegal break statement",IllegalContinue:"Illegal continue statement",IllegalExportDeclaration:"Unexpected token",IllegalImportDeclaration:"Unexpected token",IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list",IllegalReturn:"Illegal return statement",InvalidEscapedReservedWord:"Keyword must not contain escaped characters",InvalidHexEscapeSequence:"Invalid hexadecimal escape sequence",InvalidLHSInAssignment:"Invalid left-hand side in assignment",InvalidLHSInForIn:"Invalid left-hand side in for-in",InvalidLHSInForLoop:"Invalid left-hand side in for-loop",InvalidModuleSpecifier:"Unexpected token",InvalidRegExp:"Invalid regular expression",LetInLexicalBinding:"let is disallowed as a lexically bound name",MissingFromClause:"Unexpected token",MultipleDefaultsInSwitch:"More than one default clause in switch statement",NewlineAfterThrow:"Illegal newline after throw",NoAsAfterImportNamespace:"Unexpected token",NoCatchOrFinally:"Missing catch or finally after try",ParameterAfterRestParameter:"Rest parameter must be last formal parameter",Redeclaration:"%0 '%1' has already been declared",StaticPrototype:"Classes may not have static property named prototype",StrictCatchVariable:"Catch variable may not be eval or arguments in strict mode",StrictDelete:"Delete of an unqualified identifier in strict mode.",StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block",StrictFunctionName:"Function name may not be eval or arguments in strict mode",StrictLHSAssignment:"Assignment to eval or arguments is not allowed in strict mode",StrictLHSPostfix:"Postfix increment/decrement may not have eval or arguments operand in strict mode",StrictLHSPrefix:"Prefix increment/decrement may not have eval or arguments operand in strict mode",StrictModeWith:"Strict mode code may not include a with statement",StrictOctalLiteral:"Octal literals are not allowed in strict mode.",StrictParamDupe:"Strict mode function may not have duplicate parameter names",StrictParamName:"Parameter name eval or arguments is not allowed in strict mode",StrictReservedWord:"Use of future reserved word in strict mode",StrictVarName:"Variable name may not be eval or arguments in strict mode",TemplateOctalLiteral:"Octal literals are not allowed in template strings.",UnexpectedEOS:"Unexpected end of input",UnexpectedIdentifier:"Unexpected identifier",UnexpectedNumber:"Unexpected number",UnexpectedReserved:"Unexpected reserved word",UnexpectedString:"Unexpected string",UnexpectedTemplate:"Unexpected quasi %0",UnexpectedToken:"Unexpected token %0",UnexpectedTokenIllegal:"Unexpected token ILLEGAL",UnknownLabel:"Undefined label '%0'",UnterminatedRegExp:"Invalid regular expression: missing /"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(9),i=n(4),s=n(11);function u(e){return"0123456789abcdef".indexOf(e.toLowerCase())}function o(e){return"01234567".indexOf(e)}var a=function(){function e(e,t){this.source=e,this.errorHandler=t,this.trackComment=!1,this.isModule=!1,this.length=e.length,this.index=0,this.lineNumber=e.length>0?1:0,this.lineStart=0,this.curlyStack=[]}return e.prototype.saveState=function(){return{index:this.index,lineNumber:this.lineNumber,lineStart:this.lineStart}},e.prototype.restoreState=function(e){this.index=e.index,this.lineNumber=e.lineNumber,this.lineStart=e.lineStart},e.prototype.eof=function(){return this.index>=this.length},e.prototype.throwUnexpectedToken=function(e){return void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.throwError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.tolerateUnexpectedToken=function(e){void 0===e&&(e=s.Messages.UnexpectedTokenIllegal),this.errorHandler.tolerateError(this.index,this.lineNumber,this.index-this.lineStart+1,e)},e.prototype.skipSingleLineComment=function(e){var t,n,r=[];for(this.trackComment&&(r=[],t=this.index-e,n={start:{line:this.lineNumber,column:this.index-this.lineStart-e},end:{}});!this.eof();){var s=this.source.charCodeAt(this.index);if(++this.index,i.Character.isLineTerminator(s)){if(this.trackComment){n.end={line:this.lineNumber,column:this.index-this.lineStart-1};var u={multiLine:!1,slice:[t+e,this.index-1],range:[t,this.index-1],loc:n};r.push(u)}return 13===s&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,r}}return this.trackComment&&(n.end={line:this.lineNumber,column:this.index-this.lineStart},u={multiLine:!1,slice:[t+e,this.index],range:[t,this.index],loc:n},r.push(u)),r},e.prototype.skipMultiLineComment=function(){var e,t,n=[];for(this.trackComment&&(n=[],e=this.index-2,t={start:{line:this.lineNumber,column:this.index-this.lineStart-2},end:{}});!this.eof();){var r=this.source.charCodeAt(this.index);if(i.Character.isLineTerminator(r))13===r&&10===this.source.charCodeAt(this.index+1)&&++this.index,++this.lineNumber,++this.index,this.lineStart=this.index;else if(42===r){if(47===this.source.charCodeAt(this.index+1)){if(this.index+=2,this.trackComment){t.end={line:this.lineNumber,column:this.index-this.lineStart};var s={multiLine:!0,slice:[e+2,this.index-2],range:[e,this.index],loc:t};n.push(s)}return n}++this.index}else++this.index}return this.trackComment&&(t.end={line:this.lineNumber,column:this.index-this.lineStart},s={multiLine:!0,slice:[e+2,this.index],range:[e,this.index],loc:t},n.push(s)),this.tolerateUnexpectedToken(),n},e.prototype.scanComments=function(){var e;this.trackComment&&(e=[]);for(var t=0===this.index;!this.eof();){var n=this.source.charCodeAt(this.index);if(i.Character.isWhiteSpace(n))++this.index;else if(i.Character.isLineTerminator(n))++this.index,13===n&&10===this.source.charCodeAt(this.index)&&++this.index,++this.lineNumber,this.lineStart=this.index,t=!0;else if(47===n)if(47===(n=this.source.charCodeAt(this.index+1))){this.index+=2;var r=this.skipSingleLineComment(2);this.trackComment&&(e=e.concat(r)),t=!0}else{if(42!==n)break;this.index+=2,r=this.skipMultiLineComment(),this.trackComment&&(e=e.concat(r))}else if(t&&45===n){if(45!==this.source.charCodeAt(this.index+1)||62!==this.source.charCodeAt(this.index+2))break;this.index+=3,r=this.skipSingleLineComment(3),this.trackComment&&(e=e.concat(r))}else{if(60!==n||this.isModule)break;if("!--"!==this.source.slice(this.index+1,this.index+4))break;this.index+=4,r=this.skipSingleLineComment(4),this.trackComment&&(e=e.concat(r))}}return e},e.prototype.isFutureReservedWord=function(e){switch(e){case"enum":case"export":case"import":case"super":return!0;default:return!1}},e.prototype.isStrictModeReservedWord=function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"yield":case"let":return!0;default:return!1}},e.prototype.isRestrictedWord=function(e){return"eval"===e||"arguments"===e},e.prototype.isKeyword=function(e){switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e||"let"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}},e.prototype.codePointAt=function(e){var t=this.source.charCodeAt(e);if(t>=55296&&t<=56319){var n=this.source.charCodeAt(e+1);n>=56320&&n<=57343&&(t=1024*(t-55296)+n-56320+65536)}return t},e.prototype.scanHexEscape=function(e){for(var t="u"===e?4:2,n=0,r=0;r<t;++r){if(this.eof()||!i.Character.isHexDigit(this.source.charCodeAt(this.index)))return null;n=16*n+u(this.source[this.index++])}return String.fromCharCode(n)},e.prototype.scanUnicodeCodePointEscape=function(){var e=this.source[this.index],t=0;for("}"===e&&this.throwUnexpectedToken();!this.eof()&&(e=this.source[this.index++],i.Character.isHexDigit(e.charCodeAt(0)));)t=16*t+u(e);return(t>1114111||"}"!==e)&&this.throwUnexpectedToken(),i.Character.fromCodePoint(t)},e.prototype.getIdentifier=function(){for(var e=this.index++;!this.eof();){var t=this.source.charCodeAt(this.index);if(92===t)return this.index=e,this.getComplexIdentifier();if(t>=55296&&t<57343)return this.index=e,this.getComplexIdentifier();if(!i.Character.isIdentifierPart(t))break;++this.index}return this.source.slice(e,this.index)},e.prototype.getComplexIdentifier=function(){var e,t=this.codePointAt(this.index),n=i.Character.fromCodePoint(t);for(this.index+=n.length,92===t&&(117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierStart(e.charCodeAt(0))||this.throwUnexpectedToken(),n=e);!this.eof()&&(t=this.codePointAt(this.index),i.Character.isIdentifierPart(t));)n+=e=i.Character.fromCodePoint(t),this.index+=e.length,92===t&&(n=n.substr(0,n.length-1),117!==this.source.charCodeAt(this.index)&&this.throwUnexpectedToken(),++this.index,"{"===this.source[this.index]?(++this.index,e=this.scanUnicodeCodePointEscape()):null!==(e=this.scanHexEscape("u"))&&"\\"!==e&&i.Character.isIdentifierPart(e.charCodeAt(0))||this.throwUnexpectedToken(),n+=e);return n},e.prototype.octalToDecimal=function(e){var t="0"!==e,n=o(e);return!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(t=!0,n=8*n+o(this.source[this.index++]),"0123".indexOf(e)>=0&&!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index))&&(n=8*n+o(this.source[this.index++]))),{code:n,octal:t}},e.prototype.scanIdentifier=function(){var e,t=this.index,n=92===this.source.charCodeAt(t)?this.getComplexIdentifier():this.getIdentifier();if(3!=(e=1===n.length?3:this.isKeyword(n)?4:"null"===n?5:"true"===n||"false"===n?1:3)&&t+n.length!==this.index){var r=this.index;this.index=t,this.tolerateUnexpectedToken(s.Messages.InvalidEscapedReservedWord),this.index=r}return{type:e,value:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.scanPunctuator=function(){var e=this.index,t=this.source[this.index];switch(t){case"(":case"{":"{"===t&&this.curlyStack.push("{"),++this.index;break;case".":++this.index,"."===this.source[this.index]&&"."===this.source[this.index+1]&&(this.index+=2,t="...");break;case"}":++this.index,this.curlyStack.pop();break;case")":case";":case",":case"[":case"]":case":":case"?":case"~":++this.index;break;default:">>>="===(t=this.source.substr(this.index,4))?this.index+=4:"==="===(t=t.substr(0,3))||"!=="===t||">>>"===t||"<<="===t||">>="===t||"**="===t?this.index+=3:"&&"===(t=t.substr(0,2))||"||"===t||"=="===t||"!="===t||"+="===t||"-="===t||"*="===t||"/="===t||"++"===t||"--"===t||"<<"===t||">>"===t||"&="===t||"|="===t||"^="===t||"%="===t||"<="===t||">="===t||"=>"===t||"**"===t?this.index+=2:(t=this.source[this.index],"<>=!+-*%&|^/".indexOf(t)>=0&&++this.index)}return this.index===e&&this.throwUnexpectedToken(),{type:7,value:t,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanHexLiteral=function(e){for(var t="";!this.eof()&&i.Character.isHexDigit(this.source.charCodeAt(this.index));)t+=this.source[this.index++];return 0===t.length&&this.throwUnexpectedToken(),i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseInt("0x"+t,16),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanBinaryLiteral=function(e){for(var t,n="";!this.eof()&&("0"===(t=this.source[this.index])||"1"===t);)n+=this.source[this.index++];return 0===n.length&&this.throwUnexpectedToken(),this.eof()||(t=this.source.charCodeAt(this.index),(i.Character.isIdentifierStart(t)||i.Character.isDecimalDigit(t))&&this.throwUnexpectedToken()),{type:6,value:parseInt(n,2),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanOctalLiteral=function(e,t){var n="",r=!1;for(i.Character.isOctalDigit(e.charCodeAt(0))?(r=!0,n="0"+this.source[this.index++]):++this.index;!this.eof()&&i.Character.isOctalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];return r||0!==n.length||this.throwUnexpectedToken(),(i.Character.isIdentifierStart(this.source.charCodeAt(this.index))||i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))&&this.throwUnexpectedToken(),{type:6,value:parseInt(n,8),octal:r,lineNumber:this.lineNumber,lineStart:this.lineStart,start:t,end:this.index}},e.prototype.isImplicitOctalLiteral=function(){for(var e=this.index+1;e<this.length;++e){var t=this.source[e];if("8"===t||"9"===t)return!1;if(!i.Character.isOctalDigit(t.charCodeAt(0)))return!0}return!0},e.prototype.scanNumericLiteral=function(){var e=this.index,t=this.source[e];r.assert(i.Character.isDecimalDigit(t.charCodeAt(0))||"."===t,"Numeric literal must start with a decimal digit or a decimal point");var n="";if("."!==t){if(n=this.source[this.index++],t=this.source[this.index],"0"===n){if("x"===t||"X"===t)return++this.index,this.scanHexLiteral(e);if("b"===t||"B"===t)return++this.index,this.scanBinaryLiteral(e);if("o"===t||"O"===t)return this.scanOctalLiteral(t,e);if(t&&i.Character.isOctalDigit(t.charCodeAt(0))&&this.isImplicitOctalLiteral())return this.scanOctalLiteral(t,e)}for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("."===t){for(n+=this.source[this.index++];i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];t=this.source[this.index]}if("e"===t||"E"===t)if(n+=this.source[this.index++],"+"!==(t=this.source[this.index])&&"-"!==t||(n+=this.source[this.index++]),i.Character.isDecimalDigit(this.source.charCodeAt(this.index)))for(;i.Character.isDecimalDigit(this.source.charCodeAt(this.index));)n+=this.source[this.index++];else this.throwUnexpectedToken();return i.Character.isIdentifierStart(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(),{type:6,value:parseFloat(n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanStringLiteral=function(){var e=this.index,t=this.source[e];r.assert("'"===t||'"'===t,"String literal must starts with a quote"),++this.index;for(var n=!1,u="";!this.eof();){var o=this.source[this.index++];if(o===t){t="";break}if("\\"===o)if((o=this.source[this.index++])&&i.Character.isLineTerminator(o.charCodeAt(0)))++this.lineNumber,"\r"===o&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(o){case"u":if("{"===this.source[this.index])++this.index,u+=this.scanUnicodeCodePointEscape();else{var a=this.scanHexEscape(o);null===a&&this.throwUnexpectedToken(),u+=a}break;case"x":var l=this.scanHexEscape(o);null===l&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),u+=l;break;case"n":u+="\n";break;case"r":u+="\r";break;case"t":u+="\t";break;case"b":u+="\b";break;case"f":u+="\f";break;case"v":u+="\v";break;case"8":case"9":u+=o,this.tolerateUnexpectedToken();break;default:if(o&&i.Character.isOctalDigit(o.charCodeAt(0))){var c=this.octalToDecimal(o);n=c.octal||n,u+=String.fromCharCode(c.code)}else u+=o}else{if(i.Character.isLineTerminator(o.charCodeAt(0)))break;u+=o}}return""!==t&&(this.index=e,this.throwUnexpectedToken()),{type:8,value:u,octal:n,lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.scanTemplate=function(){var e="",t=!1,n=this.index,r="`"===this.source[n],u=!1,o=2;for(++this.index;!this.eof();){var a=this.source[this.index++];if("`"===a){o=1,u=!0,t=!0;break}if("$"===a){if("{"===this.source[this.index]){this.curlyStack.push("${"),++this.index,t=!0;break}e+=a}else if("\\"===a)if(a=this.source[this.index++],i.Character.isLineTerminator(a.charCodeAt(0)))++this.lineNumber,"\r"===a&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index;else switch(a){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"u":if("{"===this.source[this.index])++this.index,e+=this.scanUnicodeCodePointEscape();else{var l=this.index,c=this.scanHexEscape(a);null!==c?e+=c:(this.index=l,e+=a)}break;case"x":var h=this.scanHexEscape(a);null===h&&this.throwUnexpectedToken(s.Messages.InvalidHexEscapeSequence),e+=h;break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:"0"===a?(i.Character.isDecimalDigit(this.source.charCodeAt(this.index))&&this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral),e+="\0"):i.Character.isOctalDigit(a.charCodeAt(0))?this.throwUnexpectedToken(s.Messages.TemplateOctalLiteral):e+=a}else i.Character.isLineTerminator(a.charCodeAt(0))?(++this.lineNumber,"\r"===a&&"\n"===this.source[this.index]&&++this.index,this.lineStart=this.index,e+="\n"):e+=a}return t||this.throwUnexpectedToken(),r||this.curlyStack.pop(),{type:10,value:this.source.slice(n+1,this.index-o),cooked:e,head:r,tail:u,lineNumber:this.lineNumber,lineStart:this.lineStart,start:n,end:this.index}},e.prototype.testRegExp=function(e,t){var n=e,r=this;t.indexOf("u")>=0&&(n=n.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g,(function(e,t,n){var i=parseInt(t||n,16);return i>1114111&&r.throwUnexpectedToken(s.Messages.InvalidRegExp),i<=65535?String.fromCharCode(i):"￿"})).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,"￿"));try{RegExp(n)}catch(e){this.throwUnexpectedToken(s.Messages.InvalidRegExp)}try{return new RegExp(e,t)}catch(e){return null}},e.prototype.scanRegExpBody=function(){var e=this.source[this.index];r.assert("/"===e,"Regular expression literal must start with a slash");for(var t=this.source[this.index++],n=!1,u=!1;!this.eof();)if(t+=e=this.source[this.index++],"\\"===e)e=this.source[this.index++],i.Character.isLineTerminator(e.charCodeAt(0))&&this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t+=e;else if(i.Character.isLineTerminator(e.charCodeAt(0)))this.throwUnexpectedToken(s.Messages.UnterminatedRegExp);else if(n)"]"===e&&(n=!1);else{if("/"===e){u=!0;break}"["===e&&(n=!0)}return u||this.throwUnexpectedToken(s.Messages.UnterminatedRegExp),t.substr(1,t.length-2)},e.prototype.scanRegExpFlags=function(){for(var e="";!this.eof();){var t=this.source[this.index];if(!i.Character.isIdentifierPart(t.charCodeAt(0)))break;if(++this.index,"\\"!==t||this.eof())e+=t;else if("u"===(t=this.source[this.index])){++this.index;var n=this.index,r=this.scanHexEscape("u");if(null!==r)for(e+=r;n<this.index;++n)this.source[n];else this.index=n,e+="u";this.tolerateUnexpectedToken()}else this.tolerateUnexpectedToken()}return e},e.prototype.scanRegExp=function(){var e=this.index,t=this.scanRegExpBody(),n=this.scanRegExpFlags();return{type:9,value:"",pattern:t,flags:n,regex:this.testRegExp(t,n),lineNumber:this.lineNumber,lineStart:this.lineStart,start:e,end:this.index}},e.prototype.lex=function(){if(this.eof())return{type:2,value:"",lineNumber:this.lineNumber,lineStart:this.lineStart,start:this.index,end:this.index};var e=this.source.charCodeAt(this.index);return i.Character.isIdentifierStart(e)?this.scanIdentifier():40===e||41===e||59===e?this.scanPunctuator():39===e||34===e?this.scanStringLiteral():46===e?i.Character.isDecimalDigit(this.source.charCodeAt(this.index+1))?this.scanNumericLiteral():this.scanPunctuator():i.Character.isDecimalDigit(e)?this.scanNumericLiteral():96===e||125===e&&"${"===this.curlyStack[this.curlyStack.length-1]?this.scanTemplate():e>=55296&&e<57343&&i.Character.isIdentifierStart(this.codePointAt(this.index))?this.scanIdentifier():this.scanPunctuator()},e}();t.Scanner=a},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenName={},t.TokenName[1]="Boolean",t.TokenName[2]="<end>",t.TokenName[3]="Identifier",t.TokenName[4]="Keyword",t.TokenName[5]="Null",t.TokenName[6]="Numeric",t.TokenName[7]="Punctuator",t.TokenName[8]="String",t.TokenName[9]="RegularExpression",t.TokenName[10]="Template"},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHTMLEntities={quot:'"',amp:"&",apos:"'",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦",lang:"⟨",rang:"⟩"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),i=n(12),s=n(13),u=function(){function e(){this.values=[],this.curly=this.paren=-1}return e.prototype.beforeFunctionExpression=function(e){return["(","{","[","in","typeof","instanceof","new","return","case","delete","throw","void","=","+=","-=","*=","**=","/=","%=","<<=",">>=",">>>=","&=","|=","^=",",","+","-","*","**","/","%","++","--","<<",">>",">>>","&","|","^","!","~","&&","||","?",":","===","==",">=","<=","<",">","!=","!=="].indexOf(e)>=0},e.prototype.isRegexStart=function(){var e=this.values[this.values.length-1],t=null!==e;switch(e){case"this":case"]":t=!1;break;case")":var n=this.values[this.paren-1];t="if"===n||"while"===n||"for"===n||"with"===n;break;case"}":if(t=!1,"function"===this.values[this.curly-3])t=!!(r=this.values[this.curly-4])&&!this.beforeFunctionExpression(r);else if("function"===this.values[this.curly-4]){var r;t=!(r=this.values[this.curly-5])||!this.beforeFunctionExpression(r)}}return t},e.prototype.push=function(e){7===e.type||4===e.type?("{"===e.value?this.curly=this.values.length:"("===e.value&&(this.paren=this.values.length),this.values.push(e.value)):this.values.push(null)},e}(),o=function(){function e(e,t){this.errorHandler=new r.ErrorHandler,this.errorHandler.tolerant=!!t&&"boolean"==typeof t.tolerant&&t.tolerant,this.scanner=new i.Scanner(e,this.errorHandler),this.scanner.trackComment=!!t&&"boolean"==typeof t.comment&&t.comment,this.trackRange=!!t&&"boolean"==typeof t.range&&t.range,this.trackLoc=!!t&&"boolean"==typeof t.loc&&t.loc,this.buffer=[],this.reader=new u}return e.prototype.errors=function(){return this.errorHandler.errors},e.prototype.getNextToken=function(){if(0===this.buffer.length){var e=this.scanner.scanComments();if(this.scanner.trackComment)for(var t=0;t<e.length;++t){var n=e[t],r=this.scanner.source.slice(n.slice[0],n.slice[1]),i={type:n.multiLine?"BlockComment":"LineComment",value:r};this.trackRange&&(i.range=n.range),this.trackLoc&&(i.loc=n.loc),this.buffer.push(i)}if(!this.scanner.eof()){var u=void 0;this.trackLoc&&(u={start:{line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},end:{}});var o="/"===this.scanner.source[this.scanner.index]&&this.reader.isRegexStart()?this.scanner.scanRegExp():this.scanner.lex();this.reader.push(o);var a={type:s.TokenName[o.type],value:this.scanner.source.slice(o.start,o.end)};if(this.trackRange&&(a.range=[o.start,o.end]),this.trackLoc&&(u.end={line:this.scanner.lineNumber,column:this.scanner.index-this.scanner.lineStart},a.loc=u),9===o.type){var l=o.pattern,c=o.flags;a.regex={pattern:l,flags:c}}this.buffer.push(a)}}return this.buffer.shift()},e}();t.Tokenizer=o}])},e.exports=t()},"./node_modules/esutils/lib/ast.js":e=>{!function(){"use strict";function t(e){if(null==e)return!1;switch(e.type){case"BlockStatement":case"BreakStatement":case"ContinueStatement":case"DebuggerStatement":case"DoWhileStatement":case"EmptyStatement":case"ExpressionStatement":case"ForInStatement":case"ForStatement":case"IfStatement":case"LabeledStatement":case"ReturnStatement":case"SwitchStatement":case"ThrowStatement":case"TryStatement":case"VariableDeclaration":case"WhileStatement":case"WithStatement":return!0}return!1}function n(e){switch(e.type){case"IfStatement":return null!=e.alternate?e.alternate:e.consequent;case"LabeledStatement":case"ForStatement":case"ForInStatement":case"WhileStatement":case"WithStatement":return e.body}return null}e.exports={isExpression:function(e){if(null==e)return!1;switch(e.type){case"ArrayExpression":case"AssignmentExpression":case"BinaryExpression":case"CallExpression":case"ConditionalExpression":case"FunctionExpression":case"Identifier":case"Literal":case"LogicalExpression":case"MemberExpression":case"NewExpression":case"ObjectExpression":case"SequenceExpression":case"ThisExpression":case"UnaryExpression":case"UpdateExpression":return!0}return!1},isStatement:t,isIterationStatement:function(e){if(null==e)return!1;switch(e.type){case"DoWhileStatement":case"ForInStatement":case"ForStatement":case"WhileStatement":return!0}return!1},isSourceElement:function(e){return t(e)||null!=e&&"FunctionDeclaration"===e.type},isProblematicIfStatement:function(e){var t;if("IfStatement"!==e.type)return!1;if(null==e.alternate)return!1;t=e.consequent;do{if("IfStatement"===t.type&&null==t.alternate)return!0;t=n(t)}while(t);return!1},trailingStatement:n}}()},"./node_modules/esutils/lib/code.js":e=>{!function(){"use strict";var t,n,r,i,s,u;function o(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(Math.floor((e-65536)/1024)+55296)+String.fromCharCode((e-65536)%1024+56320)}for(n={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,NonAsciiIdentifierPart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/},t={NonAsciiIdentifierStart:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,NonAsciiIdentifierPart:/[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/},r=[5760,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279],i=new Array(128),u=0;u<128;++u)i[u]=u>=97&&u<=122||u>=65&&u<=90||36===u||95===u;for(s=new Array(128),u=0;u<128;++u)s[u]=u>=97&&u<=122||u>=65&&u<=90||u>=48&&u<=57||36===u||95===u;e.exports={isDecimalDigit:function(e){return 48<=e&&e<=57},isHexDigit:function(e){return 48<=e&&e<=57||97<=e&&e<=102||65<=e&&e<=70},isOctalDigit:function(e){return e>=48&&e<=55},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&r.indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStartES5:function(e){return e<128?i[e]:n.NonAsciiIdentifierStart.test(o(e))},isIdentifierPartES5:function(e){return e<128?s[e]:n.NonAsciiIdentifierPart.test(o(e))},isIdentifierStartES6:function(e){return e<128?i[e]:t.NonAsciiIdentifierStart.test(o(e))},isIdentifierPartES6:function(e){return e<128?s[e]:t.NonAsciiIdentifierPart.test(o(e))}}}()},"./node_modules/esutils/lib/keyword.js":(e,t,n)=>{!function(){"use strict";var t=n("./node_modules/esutils/lib/code.js");function r(e,t){return!(!t&&"yield"===e)&&i(e,t)}function i(e,t){if(t&&function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"let":return!0;default:return!1}}(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function s(e,t){return"null"===e||"true"===e||"false"===e||r(e,t)}function u(e,t){return"null"===e||"true"===e||"false"===e||i(e,t)}function o(e){var n,r,i;if(0===e.length)return!1;if(i=e.charCodeAt(0),!t.isIdentifierStartES5(i))return!1;for(n=1,r=e.length;n<r;++n)if(i=e.charCodeAt(n),!t.isIdentifierPartES5(i))return!1;return!0}function a(e){var n,r,i,s,u;if(0===e.length)return!1;for(u=t.isIdentifierStartES6,n=0,r=e.length;n<r;++n){if(55296<=(i=e.charCodeAt(n))&&i<=56319){if(++n>=r)return!1;if(!(56320<=(s=e.charCodeAt(n))&&s<=57343))return!1;i=1024*(i-55296)+(s-56320)+65536}if(!u(i))return!1;u=t.isIdentifierPartES6}return!0}e.exports={isKeywordES5:r,isKeywordES6:i,isReservedWordES5:s,isReservedWordES6:u,isRestrictedWord:function(e){return"eval"===e||"arguments"===e},isIdentifierNameES5:o,isIdentifierNameES6:a,isIdentifierES5:function(e,t){return o(e)&&!s(e,t)},isIdentifierES6:function(e,t){return a(e)&&!u(e,t)}}}()},"./node_modules/esutils/lib/utils.js":(e,t,n)=>{!function(){"use strict";t.ast=n("./node_modules/esutils/lib/ast.js"),t.code=n("./node_modules/esutils/lib/code.js"),t.keyword=n("./node_modules/esutils/lib/keyword.js")}()},"./node_modules/hyphenate-style-name/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=/[A-Z]/g,i=/^ms-/,s={};function u(e){return"-"+e.toLowerCase()}const o=function(e){if(s.hasOwnProperty(e))return s[e];var t=e.replace(r,u);return s[e]=i.test(t)?"-"+t:t}},"./node_modules/is-in-browser/dist/module.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s,isBrowser:()=>i});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;const s=i},"./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/hyphenate-style-name/index.js");function i(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:(0,r.default)(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(i):t.fallbacks=i(e.fallbacks)),t}const s=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=i(e[t]);return e}return i(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var i=(0,r.default)(t);return t===i?e:(n.prop(i,e),null)}}}},"./node_modules/jss-plugin-compose/dist/jss-plugin-compose.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js");function i(e,t){if(!t)return!0;if(Array.isArray(t)){for(var n=0;n<t.length;n++){if(!i(e,t[n]))return!1}return!0}if(t.indexOf(" ")>-1)return i(e,t.split(" "));var s=e.options.parent;if("$"===t[0]){var u=s.getRule(t.substr(1));return u?u===e?((0,r.default)(!1,"[JSS] Cyclic composition detected. \n"+e.toString()),!1):(s.classes[e.key]+=" "+s.classes[u.key],!0):((0,r.default)(!1,"[JSS] Referenced rule is not defined. \n"+e.toString()),!1)}return s.classes[e.key]+=" "+t,!0}const s=function(){return{onProcessStyle:function(e,t){return"composes"in e?(i(t,e.composes),delete e.composes,e):e}}}},"./node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r=n("./node_modules/jss/dist/jss.esm.js"),i=r.hasCSSTOMSupport&&CSS?CSS.px:"px",s=r.hasCSSTOMSupport&&CSS?CSS.ms:"ms",u=r.hasCSSTOMSupport&&CSS?CSS.percent:"%";function o(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var i in e)r[i]=e[i],r[i.replace(t,n)]=e[i];return r}var a=o({"animation-delay":s,"animation-duration":s,"background-position":i,"background-position-x":i,"background-position-y":i,"background-size":i,border:i,"border-bottom":i,"border-bottom-left-radius":i,"border-bottom-right-radius":i,"border-bottom-width":i,"border-left":i,"border-left-width":i,"border-radius":i,"border-right":i,"border-right-width":i,"border-top":i,"border-top-left-radius":i,"border-top-right-radius":i,"border-top-width":i,"border-width":i,"border-block":i,"border-block-end":i,"border-block-end-width":i,"border-block-start":i,"border-block-start-width":i,"border-block-width":i,"border-inline":i,"border-inline-end":i,"border-inline-end-width":i,"border-inline-start":i,"border-inline-start-width":i,"border-inline-width":i,"border-start-start-radius":i,"border-start-end-radius":i,"border-end-start-radius":i,"border-end-end-radius":i,margin:i,"margin-bottom":i,"margin-left":i,"margin-right":i,"margin-top":i,"margin-block":i,"margin-block-end":i,"margin-block-start":i,"margin-inline":i,"margin-inline-end":i,"margin-inline-start":i,padding:i,"padding-bottom":i,"padding-left":i,"padding-right":i,"padding-top":i,"padding-block":i,"padding-block-end":i,"padding-block-start":i,"padding-inline":i,"padding-inline-end":i,"padding-inline-start":i,"mask-position-x":i,"mask-position-y":i,"mask-size":i,height:i,width:i,"min-height":i,"max-height":i,"min-width":i,"max-width":i,bottom:i,left:i,top:i,right:i,inset:i,"inset-block":i,"inset-block-end":i,"inset-block-start":i,"inset-inline":i,"inset-inline-end":i,"inset-inline-start":i,"box-shadow":i,"text-shadow":i,"column-gap":i,"column-rule":i,"column-rule-width":i,"column-width":i,"font-size":i,"font-size-delta":i,"letter-spacing":i,"text-decoration-thickness":i,"text-indent":i,"text-stroke":i,"text-stroke-width":i,"word-spacing":i,motion:i,"motion-offset":i,outline:i,"outline-offset":i,"outline-width":i,perspective:i,"perspective-origin-x":u,"perspective-origin-y":u,"transform-origin":u,"transform-origin-x":u,"transform-origin-y":u,"transform-origin-z":u,"transition-delay":s,"transition-duration":s,"vertical-align":i,"flex-basis":i,"shape-margin":i,size:i,gap:i,grid:i,"grid-gap":i,"row-gap":i,"grid-row-gap":i,"grid-column-gap":i,"grid-template-rows":i,"grid-template-columns":i,"grid-auto-rows":i,"grid-auto-columns":i,"box-shadow-x":i,"box-shadow-y":i,"box-shadow-blur":i,"box-shadow-spread":i,"font-line-height":i,"text-shadow-x":i,"text-shadow-y":i,"text-shadow-blur":i});function l(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=l(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var s in t)t[s]=l(s,t[s],n);else for(var u in t)t[u]=l(e+"-"+u,t[u],n);else if("number"==typeof t&&!1===isNaN(t)){var o=n[e]||a[e];return!o||0===t&&o===i?t.toString():"function"==typeof o?o(t).toString():""+t+o}return t}const c=function(e){void 0===e&&(e={});var t=o(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=l(r,e[r],t);return e},onChangeValue:function(e,n){return l(n,e,t)}}}},"./node_modules/jss-plugin-expand/dist/jss-plugin-expand.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var r={"background-size":!0,"background-position":!0,border:!0,"border-bottom":!0,"border-left":!0,"border-top":!0,"border-right":!0,"border-radius":!0,"border-image":!0,"border-width":!0,"border-style":!0,"border-color":!0,"box-shadow":!0,flex:!0,margin:!0,padding:!0,outline:!0,"transform-origin":!0,transform:!0,transition:!0},i={position:!0,size:!0},s={padding:{top:0,right:0,bottom:0,left:0},margin:{top:0,right:0,bottom:0,left:0},background:{attachment:null,color:null,image:null,position:null,repeat:null},border:{width:null,style:null,color:null},"border-top":{width:null,style:null,color:null},"border-right":{width:null,style:null,color:null},"border-bottom":{width:null,style:null,color:null},"border-left":{width:null,style:null,color:null},outline:{width:null,style:null,color:null},"list-style":{type:null,position:null,image:null},transition:{property:null,duration:null,"timing-function":null,timingFunction:null,delay:null},animation:{name:null,duration:null,"timing-function":null,timingFunction:null,delay:null,"iteration-count":null,iterationCount:null,direction:null,"fill-mode":null,fillMode:null,"play-state":null,playState:null},"box-shadow":{x:0,y:0,blur:0,spread:0,color:null,inset:null},"text-shadow":{x:0,y:0,blur:null,color:null}},u={border:{radius:"border-radius",image:"border-image",width:"border-width",style:"border-style",color:"border-color"},"border-bottom":{width:"border-bottom-width",style:"border-bottom-style",color:"border-bottom-color"},"border-top":{width:"border-top-width",style:"border-top-style",color:"border-top-color"},"border-left":{width:"border-left-width",style:"border-left-style",color:"border-left-color"},"border-right":{width:"border-right-width",style:"border-right-style",color:"border-right-color"},background:{size:"background-size",image:"background-image"},font:{style:"font-style",variant:"font-variant",weight:"font-weight",stretch:"font-stretch",size:"font-size",family:"font-family",lineHeight:"line-height","line-height":"line-height"},flex:{grow:"flex-grow",basis:"flex-basis",direction:"flex-direction",wrap:"flex-wrap",flow:"flex-flow",shrink:"flex-shrink"},align:{self:"align-self",items:"align-items",content:"align-content"},grid:{"template-columns":"grid-template-columns",templateColumns:"grid-template-columns","template-rows":"grid-template-rows",templateRows:"grid-template-rows","template-areas":"grid-template-areas",templateAreas:"grid-template-areas",template:"grid-template","auto-columns":"grid-auto-columns",autoColumns:"grid-auto-columns","auto-rows":"grid-auto-rows",autoRows:"grid-auto-rows","auto-flow":"grid-auto-flow",autoFlow:"grid-auto-flow",row:"grid-row",column:"grid-column","row-start":"grid-row-start",rowStart:"grid-row-start","row-end":"grid-row-end",rowEnd:"grid-row-end","column-start":"grid-column-start",columnStart:"grid-column-start","column-end":"grid-column-end",columnEnd:"grid-column-end",area:"grid-area",gap:"grid-gap","row-gap":"grid-row-gap",rowGap:"grid-row-gap","column-gap":"grid-column-gap",columnGap:"grid-column-gap"}};function o(e,t,n,r){return null==n[t]?e:0===e.length?[]:Array.isArray(e[0])?o(e[0],t,n,r):"object"==typeof e[0]?function(e,t,n){return e.map((function(e){return a(e,t,n,!1,!0)}))}(e,t,r):[e]}function a(e,t,n,r,o){if(!s[t]&&!u[t])return[];var a=[];if(u[t]&&(e=function(e,t,n,r){for(var i in n){var s=n[i];if(void 0!==e[i]&&(r||!t.prop(s))){var u,o=l((u={},u[s]=e[i],u),t)[s];r?t.style.fallbacks[s]=o:t.style[s]=o}delete e[i]}return e}(e,n,u[t],r)),Object.keys(e).length)for(var c in s[t])e[c]?Array.isArray(e[c])?a.push(null===i[c]?e[c]:e[c].join(" ")):a.push(e[c]):null!=s[t][c]&&a.push(s[t][c]);return!a.length||o?a:[a]}function l(e,t,n){for(var i in e){var s=e[i];if(Array.isArray(s)){if(!Array.isArray(s[0])){if("fallbacks"===i){for(var u=0;u<e.fallbacks.length;u++)e.fallbacks[u]=l(e.fallbacks[u],t,!0);continue}e[i]=o(s,i,r,t),e[i].length||delete e[i]}}else if("object"==typeof s){if("fallbacks"===i){e.fallbacks=l(e.fallbacks,t,!0);continue}e[i]=a(s,i,t,n),e[i].length||delete e[i]}else""===e[i]&&delete e[i]}return e}const c=function(){return{onProcessStyle:function(e,t){if(!e||"style"!==t.type)return e;if(Array.isArray(e)){for(var n=0;n<e.length;n++)e[n]=l(e[n],t);return e}return l(e,t)}}}},"./node_modules/jss-plugin-extend/dist/jss-plugin-extend.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@babel/runtime/helpers/esm/extends.js"),i=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js"),s=function(e){return e&&"object"==typeof e&&!Array.isArray(e)},u="extendCurrValue"+Date.now();function o(e,t,n,u){return void 0===u&&(u={}),function(e,t,n,u){if("string"!=typeof e.extend)if(Array.isArray(e.extend))for(var a=0;a<e.extend.length;a++){var l=e.extend[a];o("string"==typeof l?(0,r.default)({},e,{extend:l}):e.extend[a],t,n,u)}else for(var c in e.extend)"extend"!==c?s(e.extend[c])?(c in u||(u[c]={}),o(e.extend[c],t,n,u[c])):u[c]=e.extend[c]:o(e.extend.extend,t,n,u);else{if(!n)return;var h=n.getRule(e.extend);if(!h)return;if(h===t)return void(0,i.default)(!1,"[JSS] A rule tries to extend itself \n"+t.toString());var p=h.options.parent;p&&o(p.rules.raw[e.extend],t,n,u)}}(e,t,n,u),function(e,t,n,r){for(var i in e)"extend"!==i&&(s(r[i])&&s(e[i])?o(e[i],t,n,r[i]):s(e[i])?r[i]=o(e[i],t,n):r[i]=e[i])}(e,t,n,u),u}const a=function(){return{onProcessStyle:function(e,t,n){return"extend"in e?o(e,t,n):e},onChangeValue:function(e,t,n){if("extend"!==t)return e;if(null==e||!1===e){for(var r in n[u])n.prop(r,null);return n[u]=null,null}if("object"==typeof e){for(var i in e)n.prop(i,e[i]);n[u]=e}return null}}}},"./node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>h});var r=n("./node_modules/@babel/runtime/helpers/esm/extends.js"),i=n("./node_modules/jss/dist/jss.esm.js"),s="@global",u="@global ",o=function(){function e(e,t,n){for(var u in this.type="global",this.at=s,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new i.RuleList((0,r.default)({},n,{parent:this})),t)this.rules.add(u,t[u]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.replaceRule=function(e,t,n){var r=this.rules.replace(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),a=function(){function e(e,t,n){this.type="global",this.at=s,this.isProcessed=!1,this.key=e,this.options=n;var i=e.substr(u.length);this.rule=n.jss.createRule(i,t,(0,r.default)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),l=/\s*,\s*/g;function c(e,t){for(var n=e.split(l),r="",i=0;i<n.length;i++)r+=t+" "+n[i].trim(),n[i+1]&&(r+=", ");return r}const h=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===s)return new o(e,t,n);if("@"===e[0]&&e.substr(0,u.length)===u)return new a(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),n.selector||!1!==n.scoped||(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,i=e.style,u=i?i[s]:null;if(u){for(var o in u)t.addRule(o,u[o],(0,r.default)({},n,{selector:c(o,e.selector)}));delete i[s]}}(e,t),function(e,t){var n=e.options,i=e.style;for(var u in i)if("@"===u[0]&&u.substr(0,s.length)===s){var o=c(u.substr(s.length),e.selector);t.addRule(o,i[u],(0,r.default)({},n,{selector:o})),delete i[u]}}(e,t))}}}},"./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/@babel/runtime/helpers/esm/extends.js"),i=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js"),s=/\s*,\s*/g,u=/&/g,o=/\$([\w-]+)/g;const a=function(){function e(e,t){return function(n,r){var s=e.getRule(r)||t&&t.getRule(r);return s?s.selector:((0,i.default)(!1,'[JSS] Could not find the referenced rule "'+r+'" in "'+(e.options.meta||e.toString())+'".'),r)}}function t(e,t){for(var n=t.split(s),r=e.split(s),i="",o=0;o<n.length;o++)for(var a=n[o],l=0;l<r.length;l++){var c=r[l];i&&(i+=", "),i+=-1!==c.indexOf("&")?c.replace(u,a):a+" "+c}return i}function n(e,t,n){if(n)return(0,r.default)({},n,{index:n.index+1});var i=e.options.nestingLevel;i=void 0===i?1:i+1;var s=(0,r.default)({},e.options,{nestingLevel:i,index:t.indexOf(e)+1});return delete s.name,s}return{onProcessStyle:function(i,s,u){if("style"!==s.type)return i;var a,l,c=s,h=c.options.parent;for(var p in i){var d=-1!==p.indexOf("&"),m="@"===p[0];if(d||m){if(a=n(c,h,a),d){var f=t(p,c.selector);l||(l=e(h,u)),f=f.replace(o,l);var D=c.key+"-"+p;"replaceRule"in h?h.replaceRule(D,i[p],(0,r.default)({},a,{selector:f})):h.addRule(D,i[p],(0,r.default)({},a,{selector:f}))}else m&&h.addRule(p,{},a).addRule(c.key,i[p],{selector:c.selector});delete i[p]}}return i}}}},"./node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},i=Object.keys(t).sort(e),s=0;s<i.length;s++)r[i[s]]=t[i[s]];return r}}}},"./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js"),i=n("./node_modules/jss/dist/jss.esm.js"),s=Date.now(),u="fnValues"+s,o="fnStyle"+ ++s;const a=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=(0,i.createRule)(e,{},n);return r[o]=t,r},onProcessStyle:function(e,t){if(u in t||o in t)return e;var n={};for(var r in e){var i=e[r];"function"==typeof i&&(delete e[r],n[r]=i)}return t[u]=n,e},onUpdate:function(e,t,n,i){var s=t,a=s[o];if(a)for(var l in s.style=a(e)||{},s.style)if("function"==typeof s.style[l]){(0,r.default)(!1,"[JSS] Function values inside function rules are not supported.");break}var c=s[u];if(c)for(var h in c)s.prop(h,c[h](e),i)}}}},"./node_modules/jss-plugin-rule-value-observable/dist/jss-plugin-rule-value-observable.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/symbol-observable/es/index.js"),i=n("./node_modules/jss/dist/jss.esm.js"),s=function(e){return e&&e[r.default]&&e===e[r.default]()};const u=function(e){return{onCreateRule:function(t,n,r){if(!s(n))return null;var u=n,o=(0,i.createRule)(t,{},r);return u.subscribe((function(t){for(var n in t)o.prop(n,t[n],e)})),o},onProcessRule:function(t){if(!t||"style"===t.type){var n=t,r=n.style,i=function(t){var i=r[t];if(!s(i))return"continue";delete r[t],i.subscribe({next:function(r){n.prop(t,r,e)}})};for(var u in r)i(u)}}}}},"./node_modules/jss-plugin-template/dist/jss-plugin-template.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js"),i=/;\n/,s=function(e){"string"==typeof e.style&&(e.style=function(e){for(var t={},n=e.split(i),s=0;s<n.length;s++){var u=(n[s]||"").trim();if(u){var o=u.indexOf(":");if(-1!==o){var a=u.substr(0,o).trim(),l=u.substr(o+1).trim();t[a]=l}else(0,r.default)(!1,'[JSS] Malformed CSS string "'+u+'"')}}return t}(e.style))};const u=function(){return{onProcessRule:s}}},"./node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r=n("./node_modules/css-vendor/dist/css-vendor.esm.js"),i=n("./node_modules/jss/dist/jss.esm.js");const s=function(){function e(t){for(var n in t){var s=t[n];if("fallbacks"===n&&Array.isArray(s))t[n]=s.map(e);else{var u=!1,o=(0,r.supportedProperty)(n);o&&o!==n&&(u=!0);var a=!1,l=(0,r.supportedValue)(o,(0,i.toCssValue)(s));l&&l!==s&&(a=!0),(u||a)&&(u&&delete t[n],t[o||n]=l||s)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=(0,r.supportedKeyframes)(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return(0,r.supportedValue)(t,(0,i.toCssValue)(e))||e}}}},"./node_modules/jss-preset-default/dist/jss-preset-default.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>f});var r=n("./node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js"),i=n("./node_modules/jss-plugin-rule-value-observable/dist/jss-plugin-rule-value-observable.esm.js"),s=n("./node_modules/jss-plugin-template/dist/jss-plugin-template.esm.js"),u=n("./node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js"),o=n("./node_modules/jss-plugin-extend/dist/jss-plugin-extend.esm.js"),a=n("./node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js"),l=n("./node_modules/jss-plugin-compose/dist/jss-plugin-compose.esm.js"),c=n("./node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js"),h=n("./node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js"),p=n("./node_modules/jss-plugin-expand/dist/jss-plugin-expand.esm.js"),d=n("./node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js"),m=n("./node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js");const f=function(e){return void 0===e&&(e={}),{plugins:[(0,r.default)(),(0,i.default)(e.observable),(0,s.default)(),(0,u.default)(),(0,o.default)(),(0,a.default)(),(0,l.default)(),(0,c.default)(),(0,h.default)(e.defaultUnit),(0,p.default)(),(0,d.default)(),(0,m.default)()]}}},"./node_modules/jss/dist/jss.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{RuleList:()=>H,SheetsManager:()=>Ae,SheetsRegistry:()=>Z,create:()=>ge,createGenerateId:()=>re,createRule:()=>p,default:()=>ye,getDynamicStyles:()=>Ee,hasCSSTOMSupport:()=>Ce,sheets:()=>Q,toCssValue:()=>m});var r=n("./node_modules/@babel/runtime/helpers/esm/extends.js"),i=n("./node_modules/is-in-browser/dist/module.js"),s=n("./node_modules/tiny-warning/dist/tiny-warning.esm.js"),u=n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),o=n("./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"),a=n("./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"),l=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"),c={}.constructor;function h(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(h);if(e.constructor!==c)return e;var t={};for(var n in e)t[n]=h(e[n]);return t}function p(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,i=h(t),u=r.plugins.onCreateRule(e,i,n);return u||("@"===e[0]&&(0,s.default)(!1,"[JSS] Unknown rule "+e),null)}var d=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},m=function(e){if(!Array.isArray(e))return e;var t="";if(Array.isArray(e[0]))for(var n=0;n<e.length&&"!important"!==e[n];n++)t&&(t+=", "),t+=d(e[n]," ");else t=d(e,", ");return"!important"===e[e.length-1]&&(t+=" !important"),t};function f(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function D(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function g(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var i=n.indent,s=void 0===i?0:i,u=t.fallbacks;!1===n.format&&(s=-1/0);var o=f(n),a=o.linebreak,l=o.space;if(e&&s++,u)if(Array.isArray(u))for(var c=0;c<u.length;c++){var h=u[c];for(var p in h){var d=h[p];null!=d&&(r&&(r+=a),r+=D(p+":"+l+m(d)+";",s))}}else for(var g in u){var A=u[g];null!=A&&(r&&(r+=a),r+=D(g+":"+l+m(A)+";",s))}for(var C in t){var E=t[C];null!=E&&"fallbacks"!==C&&(r&&(r+=a),r+=D(C+":"+l+m(E)+";",s))}return(r||n.allowEmpty)&&e?(r&&(r=""+a+r+a),D(""+e+l+"{"+r,--s)+D("}",s)):r}var A=/([[\].#*$><+~=|^:(),"'`\s])/g,C="undefined"!=typeof CSS&&CSS.escape,E=function(e){return C?C(e):e.replace(A,"\\$1")},y=function(){function e(e,t,n){this.type="style",this.isProcessed=!1;var r=n.sheet,i=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var i=t;n&&!1===n.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var u=null==i||!1===i,o=e in this.style;if(u&&!o&&!r)return this;var a=u&&o;if(a?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return a?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var l=this.options.sheet;return l&&l.attached&&(0,s.default)(!1,'[JSS] Rule is not linked. Missing sheet option "link: true".'),this},e}(),x=function(e){function t(t,n,r){var i;i=e.call(this,t,n,r)||this;var s=r.selector,u=r.scoped,o=r.sheet,l=r.generateId;return s?i.selectorText=s:!1!==u&&(i.id=l((0,a.default)((0,a.default)(i)),o),i.selectorText="."+E(i.id)),i}(0,o.default)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=m(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,r.default)({},e,{allowEmpty:!0}):e;return g(this.selectorText,this.style,n)},(0,u.default)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(y),F={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new x(e,t,n)}},v={indent:1,children:!0},S=/@([\w-]+)/,b=function(){function e(e,t,n){this.type="conditional",this.isProcessed=!1,this.key=e;var i=e.match(S);for(var s in this.at=i?i[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new H((0,r.default)({},n,{parent:this})),t)this.rules.add(s,t[s]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.replaceRule=function(e,t,n){var r=this.rules.replace(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.toString=function(e){void 0===e&&(e=v);var t=f(e).linebreak;if(null==e.indent&&(e.indent=v.indent),null==e.children&&(e.children=v.children),!1===e.children)return this.query+" {}";var n=this.rules.toString(e);return n?this.query+" {"+t+n+t+"}":""},e}(),B=/@media|@supports\s+/,w={onCreateRule:function(e,t,n){return B.test(e)?new b(e,t,n):null}},k={indent:1,children:!0},T=/@keyframes\s+([\w-]+)/,_=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var i=e.match(T);i&&i[1]?this.name=i[1]:(this.name="noname",(0,s.default)(!1,"[JSS] Bad keyframes name "+e)),this.key=this.type+"-"+this.name,this.options=n;var u=n.scoped,o=n.sheet,a=n.generateId;for(var l in this.id=!1===u?this.name:E(a(this,o)),this.rules=new H((0,r.default)({},n,{parent:this})),t)this.rules.add(l,t[l],(0,r.default)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=k);var t=f(e).linebreak;if(null==e.indent&&(e.indent=k.indent),null==e.children&&(e.children=k.children),!1===e.children)return this.at+" "+this.id+" {}";var n=this.rules.toString(e);return n&&(n=""+t+n+t),this.at+" "+this.id+" {"+n+"}"},e}(),P=/@keyframes\s+/,j=/\$([\w-]+)/g,M=function(e,t){return"string"==typeof e?e.replace(j,(function(e,n){return n in t?t[n]:((0,s.default)(!1,'[JSS] Referenced keyframes rule "'+n+'" is not defined.'),e)})):e},I=function(e,t,n){var r=e[t],i=M(r,n);i!==r&&(e[t]=i)},R={onCreateRule:function(e,t,n){return"string"==typeof e&&P.test(e)?new _(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&I(e,"animation-name",n.keyframes),"animation"in e&&I(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return M(e,r.keyframes);default:return e}}},N=function(e){function t(){return e.apply(this,arguments)||this}return(0,o.default)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,r.default)({},e,{allowEmpty:!0}):e;return g(this.key,this.style,n)},t}(y),O={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new N(e,t,n):null}},L=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){var t=f(e).linebreak;if(Array.isArray(this.style)){for(var n="",r=0;r<this.style.length;r++)n+=g(this.at,this.style[r]),this.style[r+1]&&(n+=t);return n}return g(this.at,this.style,e)},e}(),U=/@font-face/,J={onCreateRule:function(e,t,n){return U.test(e)?new L(e,t,n):null}},z=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return g(this.key,this.style,e)},e}(),X={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new z(e,t,n):null}},W=function(){function e(e,t,n){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),q={"@charset":!0,"@import":!0,"@namespace":!0},K=[F,w,R,O,J,X,{onCreateRule:function(e,t,n){return e in q?new W(e,t,n):null}}],G={process:!0},V={force:!0,process:!0},H=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var i=this.options,s=i.parent,u=i.sheet,o=i.jss,a=i.Renderer,l=i.generateId,c=i.scoped,h=(0,r.default)({classes:this.classes,parent:s,sheet:u,jss:o,Renderer:a,generateId:l,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(h.selector="."+E(this.classes[d]));var m=p(d,t,h);if(!m)return null;this.register(m);var f=void 0===h.index?this.index.length:h.index;return this.index.splice(f,0,m),m},t.replace=function(e,t,n){var i=this.get(e),s=this.index.indexOf(i);i&&this.remove(i);var u=n;return-1!==s&&(u=(0,r.default)({},n,{index:s})),this.add(e,t,u)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof x?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof _&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof x?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof _&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=G);var i=this.options,s=i.jss.plugins,u=i.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var o=t.style;if(s.onUpdate(n,t,u,r),r.process&&o&&o!==t.style){for(var a in s.onProcessStyle(t.style,t,u),t.style){var l=t.style[a];l!==o[a]&&t.prop(a,l,V)}for(var c in o){var h=t.style[c],p=o[c];null==h&&h!==p&&t.prop(c,null,V)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,i=f(e).linebreak,s=0;s<this.index.length;s++){var u=this.index[s].toString(e);(u||r)&&(t&&(t+=i),t+=u)}return t},e}(),$=function(){function e(e,t){for(var n in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,r.default)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new H(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var i=this.rules.add(e,t,n);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(r?r.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.replaceRule=function(e,t,n){var r=this.rules.get(e);if(!r)return this.addRule(e,t,n);var i=this.rules.replace(e,t,n);return i&&this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(this.renderer&&(i?r.renderable&&this.renderer.replaceRule(r.renderable,i):this.renderer.deleteRule(r)),i):i:(this.deployed=!1,i)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var i=this.addRule(r,e[r],t);i&&n.push(i)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),Y=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var i=this.registry.onCreateRule[r](e,t,n);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,i=0;i<this.registry.onChangeValue.length;i++)r=this.registry.onChangeValue[i](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e?e[n].push(t[n]):(0,s.default)(!1,'[JSS] Unknown hook "'+n+'".');return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),Z=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,l.default)(t,["attached"]),i=f(r).linebreak,s="",u=0;u<this.registry.length;u++){var o=this.registry[u];null!=n&&o.attached!==n||(s&&(s+=i),s+=o.toString(r))}return s},(0,u.default)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),Q=new Z,ee="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),te="2f1acc6c3a606b082e5eef5e54414ffb";null==ee[te]&&(ee[te]=0);var ne=ee[te]++,re=function(e){void 0===e&&(e={});var t=0;return function(n,r){(t+=1)>1e10&&(0,s.default)(!1,"[JSS] You might have a memory leak. Rule counter is at "+t+".");var i="",u="";return r&&(r.options.classNamePrefix&&(u=r.options.classNamePrefix),null!=r.options.jss.id&&(i=String(r.options.jss.id))),e.minify?""+(u||"c")+ne+i+t:u+n.key+"-"+ne+(i?"-"+i:"")+"-"+t}},ie=function(e){var t;return function(){return t||(t=e()),t}},se=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ue=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=m(n)),e.attributeStyleMap)e.attributeStyleMap.set(t,r);else{var i=r?r.indexOf("!important"):-1,s=i>-1?r.substr(0,i-1):r;e.style.setProperty(t,s,i>-1?"important":"")}}catch(e){return!1}return!0},oe=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){(0,s.default)(!1,'[JSS] DOMException "'+e.message+'" was thrown. Tried to remove property "'+t+'".')}},ae=function(e,t){return e.selectorText=t,e.selectorText===t},le=ie((function(){return document.querySelector("head")}));function ce(e){var t=Q.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e),n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var i=function(e){for(var t=le(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(i)return{parent:i.parentNode,node:i.nextSibling};(0,s.default)(!1,'[JSS] Insertion point "'+r+'" not found.')}return!1}var he=ie((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),pe=function(e,t,n){try{"insertRule"in e?e.insertRule(t,n):"appendRule"in e&&e.appendRule(t)}catch(e){return(0,s.default)(!1,"[JSS] "+e.message),!1}return e.cssRules[n]},de=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},me=function(){function e(e){this.getPropertyValue=se,this.setProperty=ue,this.removeProperty=oe,this.setSelector=ae,this.hasInsertedRules=!1,this.cssRules=[],e&&Q.add(e),this.sheet=e;var t,n=this.sheet?this.sheet.options:{},r=n.media,i=n.meta,s=n.element;this.element=s||((t=document.createElement("style")).textContent="\n",t),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),i&&this.element.setAttribute("data-meta",i);var u=he();u&&this.element.setAttribute("nonce",u)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=ce(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var i=n,u=i.parentNode;u?u.insertBefore(e,i.nextSibling):(0,s.default)(!1,"[JSS] Insertion point is not in the DOM.")}else le().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,i=n;if("conditional"===e.type||"keyframes"===e.type){var s=de(n,t);if(!1===(i=pe(n,r.toString({children:!1}),s)))return!1;this.refCssRule(e,s,i)}return this.insertRules(r.rules,i),i}var u=e.toString();if(!u)return!1;var o=de(n,t),a=pe(n,u,o);return!1!==a&&(this.hasInsertedRules=!0,this.refCssRule(e,o,a),a)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof $&&this.cssRules.splice(t,0,n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),fe=0,De=function(){function e(e){this.id=fe++,this.version="10.9.2",this.plugins=new Y,this.options={id:{minify:!1},createGenerateId:re,Renderer:i.default?me:null,plugins:[]},this.generateId=re({minify:!1});for(var t=0;t<K.length;t++)this.plugins.use(K[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,r.default)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===Q.index?0:Q.index+1);var i=new $(e,(0,r.default)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(i),i},t.removeStyleSheet=function(e){return e.detach(),Q.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var i=(0,r.default)({},n,{name:e,jss:this,Renderer:this.options.Renderer});i.generateId||(i.generateId=this.generateId),i.classes||(i.classes={}),i.keyframes||(i.keyframes={});var s=p(e,t,i);return s&&this.plugins.onProcessRule(s),s},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}(),ge=function(e){return new De(e)},Ae=function(){function e(){this.length=0,this.sheets=new WeakMap}var t=e.prototype;return t.get=function(e){var t=this.sheets.get(e);return t&&t.sheet},t.add=function(e,t){this.sheets.has(e)||(this.length++,this.sheets.set(e,{sheet:t,refs:0}))},t.manage=function(e){var t=this.sheets.get(e);if(t)return 0===t.refs&&t.sheet.attach(),t.refs++,t.sheet;(0,s.default)(!1,"[JSS] SheetsManager: can't find sheet to manage")},t.unmanage=function(e){var t=this.sheets.get(e);t?t.refs>0&&(t.refs--,0===t.refs&&t.sheet.detach()):(0,s.default)(!1,"SheetsManager: can't find sheet to unmanage")},(0,u.default)(e,[{key:"size",get:function(){return this.length}}]),e}(),Ce="object"==typeof CSS&&null!=CSS&&"number"in CSS;function Ee(e){var t=null;for(var n in e){var r=e[n],i=typeof r;if("function"===i)t||(t={}),t[n]=r;else if("object"===i&&null!==r&&!Array.isArray(r)){var s=Ee(r);s&&(t||(t={}),t[n]=s)}}return t}const ye=ge()},"./node_modules/source-map/lib/array-set.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/util.js"),i=Object.prototype.hasOwnProperty,s="undefined"!=typeof Map;function u(){this._array=[],this._set=s?new Map:Object.create(null)}u.fromArray=function(e,t){for(var n=new u,r=0,i=e.length;r<i;r++)n.add(e[r],t);return n},u.prototype.size=function(){return s?this._set.size:Object.getOwnPropertyNames(this._set).length},u.prototype.add=function(e,t){var n=s?e:r.toSetString(e),u=s?this.has(e):i.call(this._set,n),o=this._array.length;u&&!t||this._array.push(e),u||(s?this._set.set(e,o):this._set[n]=o)},u.prototype.has=function(e){if(s)return this._set.has(e);var t=r.toSetString(e);return i.call(this._set,t)},u.prototype.indexOf=function(e){if(s){var t=this._set.get(e);if(t>=0)return t}else{var n=r.toSetString(e);if(i.call(this._set,n))return this._set[n]}throw new Error('"'+e+'" is not in the set.')},u.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},u.prototype.toArray=function(){return this._array.slice()},t.ArraySet=u},"./node_modules/source-map/lib/base64-vlq.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/base64.js");t.encode=function(e){var t,n="",i=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&i,(i>>>=5)>0&&(t|=32),n+=r.encode(t)}while(i>0);return n},t.decode=function(e,t,n){var i,s,u,o,a=e.length,l=0,c=0;do{if(t>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(s=r.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));i=!!(32&s),l+=(s&=31)<<c,c+=5}while(i);n.value=(o=(u=l)>>1,1==(1&u)?-o:o),n.rest=t}},"./node_modules/source-map/lib/base64.js":(e,t)=>{var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");t.encode=function(e){if(0<=e&&e<n.length)return n[e];throw new TypeError("Must be between 0 and 63: "+e)},t.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},"./node_modules/source-map/lib/binary-search.js":(e,t)=>{function n(e,r,i,s,u,o){var a=Math.floor((r-e)/2)+e,l=u(i,s[a],!0);return 0===l?a:l>0?r-a>1?n(a,r,i,s,u,o):o==t.LEAST_UPPER_BOUND?r<s.length?r:-1:a:a-e>1?n(e,a,i,s,u,o):o==t.LEAST_UPPER_BOUND?a:e<0?-1:e}t.GREATEST_LOWER_BOUND=1,t.LEAST_UPPER_BOUND=2,t.search=function(e,r,i,s){if(0===r.length)return-1;var u=n(-1,r.length,e,r,i,s||t.GREATEST_LOWER_BOUND);if(u<0)return-1;for(;u-1>=0&&0===i(r[u],r[u-1],!0);)--u;return u}},"./node_modules/source-map/lib/mapping-list.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/util.js");function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},i.prototype.add=function(e){var t,n,i,s,u,o;t=this._last,n=e,i=t.generatedLine,s=n.generatedLine,u=t.generatedColumn,o=n.generatedColumn,s>i||s==i&&o>=u||r.compareByGeneratedPositionsInflated(t,n)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},t.MappingList=i},"./node_modules/source-map/lib/quick-sort.js":(e,t)=>{function n(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function r(e,t,i,s){if(i<s){var u=i-1;n(e,(c=i,h=s,Math.round(c+Math.random()*(h-c))),s);for(var o=e[s],a=i;a<s;a++)t(e[a],o)<=0&&n(e,u+=1,a);n(e,u+1,a);var l=u+1;r(e,t,i,l-1),r(e,t,l+1,s)}var c,h}t.quickSort=function(e,t){r(e,t,0,e.length-1)}},"./node_modules/source-map/lib/source-map-consumer.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/util.js"),i=n("./node_modules/source-map/lib/binary-search.js"),s=n("./node_modules/source-map/lib/array-set.js").ArraySet,u=n("./node_modules/source-map/lib/base64-vlq.js"),o=n("./node_modules/source-map/lib/quick-sort.js").quickSort;function a(e,t){var n=e;return"string"==typeof e&&(n=r.parseSourceMapInput(e)),null!=n.sections?new h(n,t):new l(n,t)}function l(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),u=r.getArg(n,"sources"),o=r.getArg(n,"names",[]),a=r.getArg(n,"sourceRoot",null),l=r.getArg(n,"sourcesContent",null),c=r.getArg(n,"mappings"),h=r.getArg(n,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);a&&(a=r.normalize(a)),u=u.map(String).map(r.normalize).map((function(e){return a&&r.isAbsolute(a)&&r.isAbsolute(e)?r.relative(a,e):e})),this._names=s.fromArray(o.map(String),!0),this._sources=s.fromArray(u,!0),this._absoluteSources=this._sources.toArray().map((function(e){return r.computeSourceURL(a,e,t)})),this.sourceRoot=a,this.sourcesContent=l,this._mappings=c,this._sourceMapURL=t,this.file=h}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function h(e,t){var n=e;"string"==typeof e&&(n=r.parseSourceMapInput(e));var i=r.getArg(n,"version"),u=r.getArg(n,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new s,this._names=new s;var o={line:-1,column:0};this._sections=u.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var n=r.getArg(e,"offset"),i=r.getArg(n,"line"),s=r.getArg(n,"column");if(i<o.line||i===o.line&&s<o.column)throw new Error("Section offsets must be ordered and non-overlapping.");return o=n,{generatedOffset:{generatedLine:i+1,generatedColumn:s+1},consumer:new a(r.getArg(e,"map"),t)}}))}a.fromSourceMap=function(e,t){return l.fromSourceMap(e,t)},a.prototype._version=3,a.prototype.__generatedMappings=null,Object.defineProperty(a.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),a.prototype.__originalMappings=null,Object.defineProperty(a.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),a.prototype._charIsMappingSeparator=function(e,t){var n=e.charAt(t);return";"===n||","===n},a.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},a.GENERATED_ORDER=1,a.ORIGINAL_ORDER=2,a.GREATEST_LOWER_BOUND=1,a.LEAST_UPPER_BOUND=2,a.prototype.eachMapping=function(e,t,n){var i,s=t||null;switch(n||a.GENERATED_ORDER){case a.GENERATED_ORDER:i=this._generatedMappings;break;case a.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var u=this.sourceRoot;i.map((function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=r.computeSourceURL(u,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,s)},a.prototype.allGeneratedPositionsFor=function(e){var t=r.getArg(e,"line"),n={source:r.getArg(e,"source"),originalLine:t,originalColumn:r.getArg(e,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var s=[],u=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(u>=0){var o=this._originalMappings[u];if(void 0===e.column)for(var a=o.originalLine;o&&o.originalLine===a;)s.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++u];else for(var l=o.originalColumn;o&&o.originalLine===t&&o.originalColumn==l;)s.push({line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}),o=this._originalMappings[++u]}return s},t.SourceMapConsumer=a,l.prototype=Object.create(a.prototype),l.prototype.consumer=a,l.prototype._findSourceIndex=function(e){var t,n=e;if(null!=this.sourceRoot&&(n=r.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},l.fromSourceMap=function(e,t){var n=Object.create(l.prototype),i=n._names=s.fromArray(e._names.toArray(),!0),u=n._sources=s.fromArray(e._sources.toArray(),!0);n.sourceRoot=e._sourceRoot,n.sourcesContent=e._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=e._file,n._sourceMapURL=t,n._absoluteSources=n._sources.toArray().map((function(e){return r.computeSourceURL(n.sourceRoot,e,t)}));for(var a=e._mappings.toArray().slice(),h=n.__generatedMappings=[],p=n.__originalMappings=[],d=0,m=a.length;d<m;d++){var f=a[d],D=new c;D.generatedLine=f.generatedLine,D.generatedColumn=f.generatedColumn,f.source&&(D.source=u.indexOf(f.source),D.originalLine=f.originalLine,D.originalColumn=f.originalColumn,f.name&&(D.name=i.indexOf(f.name)),p.push(D)),h.push(D)}return o(n.__originalMappings,r.compareByOriginalPositions),n},l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),l.prototype._parseMappings=function(e,t){for(var n,i,s,a,l,h=1,p=0,d=0,m=0,f=0,D=0,g=e.length,A=0,C={},E={},y=[],x=[];A<g;)if(";"===e.charAt(A))h++,A++,p=0;else if(","===e.charAt(A))A++;else{for((n=new c).generatedLine=h,a=A;a<g&&!this._charIsMappingSeparator(e,a);a++);if(s=C[i=e.slice(A,a)])A+=i.length;else{for(s=[];A<a;)u.decode(e,A,E),l=E.value,A=E.rest,s.push(l);if(2===s.length)throw new Error("Found a source, but no line and column");if(3===s.length)throw new Error("Found a source and line, but no column");C[i]=s}n.generatedColumn=p+s[0],p=n.generatedColumn,s.length>1&&(n.source=f+s[1],f+=s[1],n.originalLine=d+s[2],d=n.originalLine,n.originalLine+=1,n.originalColumn=m+s[3],m=n.originalColumn,s.length>4&&(n.name=D+s[4],D+=s[4])),x.push(n),"number"==typeof n.originalLine&&y.push(n)}o(x,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=x,o(y,r.compareByOriginalPositions),this.__originalMappings=y},l.prototype._findMapping=function(e,t,n,r,s,u){if(e[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[n]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,t,s,u)},l.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var n=this._generatedMappings[e+1];if(t.generatedLine===n.generatedLine){t.lastGeneratedColumn=n.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},l.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(e,"bias",a.GREATEST_LOWER_BOUND));if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===t.generatedLine){var s=r.getArg(i,"source",null);null!==s&&(s=this._sources.at(s),s=r.computeSourceURL(this.sourceRoot,s,this._sourceMapURL));var u=r.getArg(i,"name",null);return null!==u&&(u=this._names.at(u)),{source:s,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:u}}}return{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},l.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var n=this._findSourceIndex(e);if(n>=0)return this.sourcesContent[n];var i,s=e;if(null!=this.sourceRoot&&(s=r.relative(this.sourceRoot,s)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var u=s.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(u))return this.sourcesContent[this._sources.indexOf(u)];if((!i.path||"/"==i.path)&&this._sources.has("/"+s))return this.sourcesContent[this._sources.indexOf("/"+s)]}if(t)return null;throw new Error('"'+s+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(e){var t=r.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var n={source:t,originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")},i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(e,"bias",a.GREATEST_LOWER_BOUND));if(i>=0){var s=this._originalMappings[i];if(s.source===n.source)return{line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},t.BasicSourceMapConsumer=l,h.prototype=Object.create(a.prototype),h.prototype.constructor=a,h.prototype._version=3,Object.defineProperty(h.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var n=0;n<this._sections[t].consumer.sources.length;n++)e.push(this._sections[t].consumer.sources[n]);return e}}),h.prototype.originalPositionFor=function(e){var t={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},n=i.search(t,this._sections,(function(e,t){var n=e.generatedLine-t.generatedOffset.generatedLine;return n||e.generatedColumn-t.generatedOffset.generatedColumn})),s=this._sections[n];return s?s.consumer.originalPositionFor({line:t.generatedLine-(s.generatedOffset.generatedLine-1),column:t.generatedColumn-(s.generatedOffset.generatedLine===t.generatedLine?s.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},h.prototype.sourceContentFor=function(e,t){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(e,!0);if(r)return r}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var n=this._sections[t];if(-1!==n.consumer._findSourceIndex(r.getArg(e,"source"))){var i=n.consumer.generatedPositionFor(e);if(i)return{line:i.line+(n.generatedOffset.generatedLine-1),column:i.column+(n.generatedOffset.generatedLine===i.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},h.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var i=this._sections[n],s=i.consumer._generatedMappings,u=0;u<s.length;u++){var a=s[u],l=i.consumer._sources.at(a.source);l=r.computeSourceURL(i.consumer.sourceRoot,l,this._sourceMapURL),this._sources.add(l),l=this._sources.indexOf(l);var c=null;a.name&&(c=i.consumer._names.at(a.name),this._names.add(c),c=this._names.indexOf(c));var h={source:l,generatedLine:a.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(i.generatedOffset.generatedLine===a.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(h),"number"==typeof h.originalLine&&this.__originalMappings.push(h)}o(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),o(this.__originalMappings,r.compareByOriginalPositions)},t.IndexedSourceMapConsumer=h},"./node_modules/source-map/lib/source-map-generator.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/base64-vlq.js"),i=n("./node_modules/source-map/lib/util.js"),s=n("./node_modules/source-map/lib/array-set.js").ArraySet,u=n("./node_modules/source-map/lib/mapping-list.js").MappingList;function o(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new s,this._names=new s,this._mappings=new u,this._sourcesContents=null}o.prototype._version=3,o.fromSourceMap=function(e){var t=e.sourceRoot,n=new o({file:e.file,sourceRoot:t});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=t&&(r.source=i.relative(t,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),n.addMapping(r)})),e.sources.forEach((function(r){var s=r;null!==t&&(s=i.relative(t,r)),n._sources.has(s)||n._sources.add(s);var u=e.sourceContentFor(r);null!=u&&n.setSourceContent(r,u)})),n},o.prototype.addMapping=function(e){var t=i.getArg(e,"generated"),n=i.getArg(e,"original",null),r=i.getArg(e,"source",null),s=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,n,r,s),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=s&&(s=String(s),this._names.has(s)||this._names.add(s)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:s})},o.prototype.setSourceContent=function(e,t){var n=e;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(n)]=t):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},o.prototype.applySourceMap=function(e,t,n){var r=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var u=this._sourceRoot;null!=u&&(r=i.relative(u,r));var o=new s,a=new s;this._mappings.unsortedForEach((function(t){if(t.source===r&&null!=t.originalLine){var s=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=s.source&&(t.source=s.source,null!=n&&(t.source=i.join(n,t.source)),null!=u&&(t.source=i.relative(u,t.source)),t.originalLine=s.line,t.originalColumn=s.column,null!=s.name&&(t.name=s.name))}var l=t.source;null==l||o.has(l)||o.add(l);var c=t.name;null==c||a.has(c)||a.add(c)}),this),this._sources=o,this._names=a,e.sources.forEach((function(t){var r=e.sourceContentFor(t);null!=r&&(null!=n&&(t=i.join(n,t)),null!=u&&(t=i.relative(u,t)),this.setSourceContent(t,r))}),this)},o.prototype._validateMapping=function(e,t,n,r){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||n||r)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:n,original:t,name:r}))},o.prototype._serializeMappings=function(){for(var e,t,n,s,u=0,o=1,a=0,l=0,c=0,h=0,p="",d=this._mappings.toArray(),m=0,f=d.length;m<f;m++){if(e="",(t=d[m]).generatedLine!==o)for(u=0;t.generatedLine!==o;)e+=";",o++;else if(m>0){if(!i.compareByGeneratedPositionsInflated(t,d[m-1]))continue;e+=","}e+=r.encode(t.generatedColumn-u),u=t.generatedColumn,null!=t.source&&(s=this._sources.indexOf(t.source),e+=r.encode(s-h),h=s,e+=r.encode(t.originalLine-1-l),l=t.originalLine-1,e+=r.encode(t.originalColumn-a),a=t.originalColumn,null!=t.name&&(n=this._names.indexOf(t.name),e+=r.encode(n-c),c=n)),p+=e}return p},o.prototype._generateSourcesContent=function(e,t){return e.map((function(e){if(!this._sourcesContents)return null;null!=t&&(e=i.relative(t,e));var n=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},o.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},o.prototype.toString=function(){return JSON.stringify(this.toJSON())},t.SourceMapGenerator=o},"./node_modules/source-map/lib/source-node.js":(e,t,n)=>{var r=n("./node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator,i=n("./node_modules/source-map/lib/util.js"),s=/(\r?\n)/,u="$$$isSourceNode$$$";function o(e,t,n,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==n?null:n,this.name=null==i?null:i,this[u]=!0,null!=r&&this.add(r)}o.fromStringWithSourceMap=function(e,t,n){var r=new o,u=e.split(s),a=0,l=function(){return e()+(e()||"");function e(){return a<u.length?u[a++]:void 0}},c=1,h=0,p=null;return t.eachMapping((function(e){if(null!==p){if(!(c<e.generatedLine)){var t=(n=u[a]||"").substr(0,e.generatedColumn-h);return u[a]=n.substr(e.generatedColumn-h),h=e.generatedColumn,d(p,t),void(p=e)}d(p,l()),c++,h=0}for(;c<e.generatedLine;)r.add(l()),c++;if(h<e.generatedColumn){var n=u[a]||"";r.add(n.substr(0,e.generatedColumn)),u[a]=n.substr(e.generatedColumn),h=e.generatedColumn}p=e}),this),a<u.length&&(p&&d(p,l()),r.add(u.splice(a).join(""))),t.sources.forEach((function(e){var s=t.sourceContentFor(e);null!=s&&(null!=n&&(e=i.join(n,e)),r.setSourceContent(e,s))})),r;function d(e,t){if(null===e||void 0===e.source)r.add(t);else{var s=n?i.join(n,e.source):e.source;r.add(new o(e.originalLine,e.originalColumn,s,t,e.name))}}},o.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[u]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},o.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[u]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},o.prototype.walk=function(e){for(var t,n=0,r=this.children.length;n<r;n++)(t=this.children[n])[u]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},o.prototype.join=function(e){var t,n,r=this.children.length;if(r>0){for(t=[],n=0;n<r-1;n++)t.push(this.children[n]),t.push(e);t.push(this.children[n]),this.children=t}return this},o.prototype.replaceRight=function(e,t){var n=this.children[this.children.length-1];return n[u]?n.replaceRight(e,t):"string"==typeof n?this.children[this.children.length-1]=n.replace(e,t):this.children.push("".replace(e,t)),this},o.prototype.setSourceContent=function(e,t){this.sourceContents[i.toSetString(e)]=t},o.prototype.walkSourceContents=function(e){for(var t=0,n=this.children.length;t<n;t++)this.children[t][u]&&this.children[t].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(t=0,n=r.length;t<n;t++)e(i.fromSetString(r[t]),this.sourceContents[r[t]])},o.prototype.toString=function(){var e="";return this.walk((function(t){e+=t})),e},o.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},n=new r(e),i=!1,s=null,u=null,o=null,a=null;return this.walk((function(e,r){t.code+=e,null!==r.source&&null!==r.line&&null!==r.column?(s===r.source&&u===r.line&&o===r.column&&a===r.name||n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name}),s=r.source,u=r.line,o=r.column,a=r.name,i=!0):i&&(n.addMapping({generated:{line:t.line,column:t.column}}),s=null,i=!1);for(var l=0,c=e.length;l<c;l++)10===e.charCodeAt(l)?(t.line++,t.column=0,l+1===c?(s=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:t.line,column:t.column},name:r.name})):t.column++})),this.walkSourceContents((function(e,t){n.setSourceContent(e,t)})),{code:t.code,map:n}},t.SourceNode=o},"./node_modules/source-map/lib/util.js":(e,t)=>{t.getArg=function(e,t,n){if(t in e)return e[t];if(3===arguments.length)return n;throw new Error('"'+t+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var t=e.match(n);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function s(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function u(e){var n=e,r=i(e);if(r){if(!r.path)return e;n=r.path}for(var u,o=t.isAbsolute(n),a=n.split(/\/+/),l=0,c=a.length-1;c>=0;c--)"."===(u=a[c])?a.splice(c,1):".."===u?l++:l>0&&(""===u?(a.splice(c+1,l),l=0):(a.splice(c,2),l--));return""===(n=a.join("/"))&&(n=o?"/":"."),r?(r.path=n,s(r)):n}function o(e,t){""===e&&(e="."),""===t&&(t=".");var n=i(t),o=i(e);if(o&&(e=o.path||"/"),n&&!n.scheme)return o&&(n.scheme=o.scheme),s(n);if(n||t.match(r))return t;if(o&&!o.host&&!o.path)return o.host=t,s(o);var a="/"===t.charAt(0)?t:u(e.replace(/\/+$/,"")+"/"+t);return o?(o.path=a,s(o)):a}t.urlParse=i,t.urlGenerate=s,t.normalize=u,t.join=o,t.isAbsolute=function(e){return"/"===e.charAt(0)||n.test(e)},t.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var n=0;0!==t.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return t;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return t;++n}return Array(n+1).join("../")+t.substr(e.length+1)};var a=!("__proto__"in Object.create(null));function l(e){return e}function c(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var n=t-10;n>=0;n--)if(36!==e.charCodeAt(n))return!1;return!0}function h(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}t.toSetString=a?l:function(e){return c(e)?"$"+e:e},t.fromSetString=a?l:function(e){return c(e)?e.slice(1):e},t.compareByOriginalPositions=function(e,t,n){var r=h(e.source,t.source);return 0!==r||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)||n||0!==(r=e.generatedColumn-t.generatedColumn)||0!==(r=e.generatedLine-t.generatedLine)?r:h(e.name,t.name)},t.compareByGeneratedPositionsDeflated=function(e,t,n){var r=e.generatedLine-t.generatedLine;return 0!==r||0!==(r=e.generatedColumn-t.generatedColumn)||n||0!==(r=h(e.source,t.source))||0!==(r=e.originalLine-t.originalLine)||0!==(r=e.originalColumn-t.originalColumn)?r:h(e.name,t.name)},t.compareByGeneratedPositionsInflated=function(e,t){var n=e.generatedLine-t.generatedLine;return 0!==n||0!==(n=e.generatedColumn-t.generatedColumn)||0!==(n=h(e.source,t.source))||0!==(n=e.originalLine-t.originalLine)||0!==(n=e.originalColumn-t.originalColumn)?n:h(e.name,t.name)},t.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},t.computeSourceURL=function(e,t,n){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var a=r.path.lastIndexOf("/");a>=0&&(r.path=r.path.substring(0,a+1))}t=o(s(r),t)}return u(t)}},"./node_modules/source-map/source-map.js":(e,t,n)=>{t.SourceMapGenerator=n("./node_modules/source-map/lib/source-map-generator.js").SourceMapGenerator,t.SourceMapConsumer=n("./node_modules/source-map/lib/source-map-consumer.js").SourceMapConsumer,t.SourceNode=n("./node_modules/source-map/lib/source-node.js").SourceNode},"./node_modules/symbol-observable/es/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var r,i=n("./node_modules/symbol-observable/es/ponyfill.js");e=n.hmd(e),r="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e;const s=(0,i.default)(r)},"./node_modules/symbol-observable/es/ponyfill.js":(e,t,n)=>{"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.r(t),n.d(t,{default:()=>r})},"./node_modules/tiny-warning/dist/tiny-warning.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=function(e,t){if(!e){var n="Warning: "+t;"undefined"!=typeof console&&console.warn(n);try{throw Error(n)}catch(e){}}}},"./src/bangle.ts":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bangle=void 0;const r=n("./src/device-controller.ts");class i extends r.DeviceController{}t.Bangle=i},"./src/device-controller.ts":function(e,t,n){"use strict";var r,i,s,u=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function u(e){try{a(r.next(e))}catch(e){s(e)}}function o(e){try{a(r.throw(e))}catch(e){s(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,o)}a((r=r.apply(e,t||[])).next())}))},o=this&&this.__classPrivateFieldGet||function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.DeviceController=void 0;const a=n("./node_modules/@espruino-tools/transpiler/lib/index.js"),l=n("./node_modules/@espruino-tools/uart/lib/uart.js"),c=n("./src/helpers/fetchHelper.ts");t.DeviceController=class{constructor(){r.add(this),this.connected=!1,this.UART=l.uart,this.deviceType=void 0,this.Call={},this.Pin={val:e=>this.eval(e+".read()"),analogOn:(e,t)=>this.UART.write("analogWrite("+e+","+t+");\n"),digitalOn:(e,t)=>this.UART.write("digitalWrite("+e+","+t+");\n"),digitalToggle:e=>this.UART.write(e+".toggle();\n"),reset:e=>this.UART.write(e+".reset();\n"),getInfo:e=>this.eval(e+".getInfo()")}}dump(){return u(this,void 0,void 0,(function*(){return yield this.eval("E.dumpStr()")}))}getDeviceType(){return u(this,void 0,void 0,(function*(){return yield this.eval("process.env.BOARD")}))}getBattery(){return u(this,void 0,void 0,(function*(){return yield this.eval("E.getBattery()")}))}eval(e){return u(this,void 0,void 0,(function*(){return new Promise((t=>{this.UART.eval(e,((e,n)=>{n||(n=""),t({data:e,log:n})}))})).catch((e=>{throw new Error(e)}))}))}connect(e){return u(this,void 0,void 0,(function*(){yield this.eval("{}").then((({data:t,log:n})=>{"success"==n&&(this.connected=!0,this.UART.write("digitalPulse(LED2,1,100);\n"),this.getDeviceFunctions().then((()=>{null==e||e()})))}))}))}disconnect(e){return u(this,void 0,void 0,(function*(){yield this.eval("digitalPulse(LED1,1,100);\n").then((()=>{var t;null===(t=this.UART)||void 0===t||t.close(),this.connected=!1,this.deviceType=void 0,null==e||e()}))}))}reset(){this.UART.write("reset(true);\n")}quickWrite(e){this.UART.write(e)}loadCode(e,t=!1){return u(this,void 0,void 0,(function*(){let n=yield this.getDeviceType();"BANGLEJS"===n&&(t=!1);this.reset(),t?"PIXLJS"!==n?(this.UART.write(`E.setBootCode(\`${e}\`,true);\n`),this.UART.write("load();\n")):(this.UART.write(e),this.UART.write("save();\n"),this.UART.write("load();\n")):this.UART.write(e),this.getDeviceFunctions()}))}setInterval(e,t=2e3){let n=(0,a.transpile)(`DeviceController.setInterval(${e.toString()}, ${t})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(n)}upload(e,t=!1){return u(this,void 0,void 0,(function*(){yield(0,c.fetchToText)(e).then((e=>u(this,void 0,void 0,(function*(){this.loadCode(e,t)}))))}))}getDeviceFunctions(){return u(this,void 0,void 0,(function*(){this.Call=yield this.dump().then((e=>{o(this,r,"m",i).call(this,o(this,r,"m",s).call(this,e.data))}))}))}},r=new WeakSet,i=function(e){e.map((e=>{this.Call=Object.assign({[e.name]:(...t)=>{this.UART.write(`${e.name}(${JSON.stringify(t.join(","))});\n`)}},this.Call)}))},s=function(e){return e.split("\n").map((e=>e.startsWith("function")?e.split("{")[0].replace("function","").split(" ").join(""):(e.startsWith("let")||e.startsWith("const"))&&(e.includes("function(")||e.includes("=>"))?e.includes("=>")?e.split("=>")[0].replace("let","").replace("const","").replace("=","").split(" ").join(""):e.split("{")[0].replace("let","").replace("const","").replace("=","").replace("function","").split(" ").join(""):void 0)).filter(Boolean).map((e=>({name:e.split("(")[0],parameters:""!==e.split("(")[1].replace(")","").split(",")[0]?e.split("(")[1].replace(")","").split(","):[]})))}},"./src/helpers/fetchHelper.ts":function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function u(e){try{a(r.next(e))}catch(e){s(e)}}function o(e){try{a(r.throw(e))}catch(e){s(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,o)}a((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchToText=void 0,t.fetchToText=function(e){return n(this,void 0,void 0,(function*(){let t=yield fetch(e).then((e=>{if(!e.ok)throw new Error(e.status);return e}));if(!t)throw new Error(`fetch on :${e} failed`);return yield t.text()}))}},"./src/pixl.ts":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pixl=void 0;const r=n("./src/device-controller.ts");class i extends r.DeviceController{}t.Pixl=i},"./src/puck.ts":function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,s){function u(e){try{a(r.next(e))}catch(e){s(e)}}function o(e){try{a(r.throw(e))}catch(e){s(e)}}function a(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,o)}a((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Puck=void 0;const i=n("./node_modules/@espruino-tools/transpiler/lib/index.js"),s=n("./src/device-controller.ts"),u=n("./src/types/puck-types.ts");class o extends s.DeviceController{constructor(){super(...arguments),this.mag={enableMag:()=>{this.UART.write("Puck.magOn();\n")},enableField:()=>{this.UART.write('require("puckjsv2-mag-level").on();\n')},disableMag:()=>{this.UART.write("Puck.magOff();\n")},disableField:()=>{this.UART.write('require("puckjsv2-mag-level").off();\n')},onMag:e=>{let t=(0,i.transpile)(`p.mag.onMag(${e.toString()})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(t)},onField:e=>{let t=(0,i.transpile)(`p.mag.onField(${e.toString()})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(t)}},this.accel={enableAccelMovement:()=>{this.UART.write('require("puckjsv2-accel-movement").on();\n')},enableAccelBigMovement:()=>{this.UART.write('require("puckjsv2-accel-bigmovement").on();\n')},enableAccelTilt:()=>{this.UART.write('require("puckjsv2-accel-tilt").on();\n')},disableAccelMovement:()=>{this.UART.write('require("puckjsv2-accel-movement").off();\n')},disableAccelBigMovement:()=>{this.UART.write('require("puckjsv2-accel-bigmovement").off();\n')},disableAccelTilt:()=>{this.UART.write('require("puckjsv2-accel-tilt").off();\n')},val:()=>this.eval("Puck.accel()"),onMove:e=>{let t=(0,i.transpile)(`p.accel.onMove(${e.toString()})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(t)},onTilt:e=>{let t=(0,i.transpile)(`p.accel.onTilt(${e.toString()})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(t)}},this.IR={transmit:e=>{this.UART.write("Puck.IR(["+e.join(",")+"]);\n")}},this.LED={on:e=>{Array.isArray(e)?this.UART.write(`digitalWrite(${e}, 1)`):this.UART.write(`LED${u.LEDColours.indexOf(e)+1}.set();\n`)},off:e=>{Array.isArray(e)?this.UART.write(`digitalWrite(${e}, 0)`):this.UART.write(`LED${u.LEDColours.indexOf(e)+1}.reset();\n`)},toggle:e=>{this.UART.write(`LED${u.LEDColours.indexOf(e)+1}.toggle();\n`)},flash:(e,t)=>{this.UART.write(`digitalPulse(LED${u.LEDColours.indexOf(e)+1},1,${t});\n`)},val:e=>this.eval(`digitalRead(LED${u.LEDColours.indexOf(e)+1}) == 1`)},this.NFC={setUrl:e=>this.UART.write('NRF.nfcURL("'+e+'");\n'),reset:()=>this.UART.write("NRF.nfcURL();\n")}}getLightVal(){return this.eval("Puck.light()")}getTemperature(){return r(this,void 0,void 0,(function*(){return yield this.eval("E.getTemperature()")}))}onPress(e){let t=(0,i.transpile)(`p.onTimedPress(${e.toString()})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(t)}onTimedPress(e,t,n=.3){let r=(0,i.transpile)(`p.onTimedPress(${e.toString()},${t.toString()},${n})`,{additional_callees:["p"],parse_type:"module"});this.UART.write(r)}}t.Puck=o},"./src/types/puck-types.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LEDColours=void 0,t.LEDColours=["red","green","blue"]},"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");function i(e){if(Array.isArray(e))return(0,r.default)(e)}},"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/createClass.js":(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}n.r(t),n.d(t,{default:()=>i})},"./node_modules/@babel/runtime/helpers/esm/extends.js":(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,(0,r.default)(e,t)}},"./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":(e,t,n)=>{"use strict";function r(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":(e,t,n)=>{"use strict";function r(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}n.r(t),n.d(t,{default:()=>r})},"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n("./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js"),i=n("./node_modules/@babel/runtime/helpers/esm/iterableToArray.js"),s=n("./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"),u=n("./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");function o(e){return(0,r.default)(e)||(0,i.default)(e)||(0,s.default)(e)||(0,u.default)()}},"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n("./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");function i(e,t){if(e){if("string"==typeof e)return(0,r.default)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?(0,r.default)(e,t):void 0}}},"./node_modules/escodegen/package.json":e=>{"use strict";e.exports=JSON.parse('{"name":"escodegen","description":"ECMAScript code generator","homepage":"http://github.com/estools/escodegen","main":"escodegen.js","bin":{"esgenerate":"./bin/esgenerate.js","escodegen":"./bin/escodegen.js"},"files":["LICENSE.BSD","README.md","bin","escodegen.js","package.json"],"version":"2.0.0","engines":{"node":">=6.0"},"maintainers":[{"name":"Yusuke Suzuki","email":"utatane.tea@gmail.com","web":"http://github.com/Constellation"}],"repository":{"type":"git","url":"http://github.com/estools/escodegen.git"},"dependencies":{"estraverse":"^5.2.0","esutils":"^2.0.2","esprima":"^4.0.1","optionator":"^0.8.1"},"optionalDependencies":{"source-map":"~0.6.1"},"devDependencies":{"acorn":"^7.3.1","bluebird":"^3.4.7","bower-registry-client":"^1.0.0","chai":"^4.2.0","chai-exclude":"^2.0.2","commonjs-everywhere":"^0.9.7","gulp":"^3.8.10","gulp-eslint":"^3.0.1","gulp-mocha":"^3.0.1","semver":"^5.1.0"},"license":"BSD-2-Clause","scripts":{"test":"gulp travis","unit-test":"gulp test","lint":"gulp lint","release":"node tools/release.js","build-min":"./node_modules/.bin/cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js","build":"./node_modules/.bin/cjsify -a path: tools/entry-point.js > escodegen.browser.js"}}')}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.DeviceController=e.Bangle=e.Pixl=e.Puck=void 0;const t=n("./src/puck.ts");Object.defineProperty(e,"Puck",{enumerable:!0,get:function(){return t.Puck}});const i=n("./src/pixl.ts");Object.defineProperty(e,"Pixl",{enumerable:!0,get:function(){return i.Pixl}});const s=n("./src/bangle.ts");Object.defineProperty(e,"Bangle",{enumerable:!0,get:function(){return s.Bangle}});const u=n("./src/device-controller.ts");Object.defineProperty(e,"DeviceController",{enumerable:!0,get:function(){return u.DeviceController}}),e.default=u.DeviceController})(),ESPT_core=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsSUFBSyxJQUNMQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsSUFBSyxJQUNMQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxJQUFLLElBQ0xDLElBQUssSUFDTHRtQixJQUFLLElBQ0x1bUIsS0FBTSxJQUNOQyxJQUFLLElBQ0xDLE9BQVEsSUFDUkMsS0FBTSxJQUNOQyxLQUFNLElBQ05DLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxNQUFPLElBQ1BDLEtBQU0sSUFDTkMsSUFBSyxJQUNMQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLElBQUssSUFDTEMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxNQUFPLElBQ1BDLEtBQU0sSUFDTkMsT0FBUSxJQUNSQyxNQUFPLElBQ1BDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsT0FBUSxJQUNSQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsUUFBUyxJQUNUQyxLQUFNLElBQ05DLElBQUssSUFDTEMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxRQUFTLElBQ1RDLEdBQUksSUFDSkMsSUFBSyxJQUNMQyxNQUFPLElBQ1BDLElBQUssSUFDTEMsUUFBUyxJQUNUQyxJQUFLLElBQ0xDLElBQUssSUFDTEMsSUFBSyxJQUNMQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsUUFBUyxJQUNUQyxLQUFNLElBQ05DLElBQUssSUFDTEMsTUFBTyxJQUNQQyxLQUFNLElBQ05DLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxHQUFJLElBQ0pDLEdBQUksSUFDSkMsR0FBSSxJQUNKQyxRQUFTLElBQ1RDLEdBQUksSUFDSkMsSUFBSyxJQUNMQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsSUFBSyxJQUNMQyxRQUFTLElBQ1RDLElBQUssSUFDTEMsSUFBSyxJQUNMQyxJQUFLLElBQ0xDLE1BQU8sSUFDUEMsU0FBVSxJQUNWQyxNQUFPLElBQ1BDLElBQUssSUFDTEMsS0FBTSxJQUNOQyxLQUFNLElBQ05DLE9BQVEsSUFDUkMsS0FBTSxJQUNOQyxJQUFLLElBQ0xDLElBQUssSUFDTEMsSUFBSyxJQUNMQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsT0FBUSxJQUNSQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxRQUFTLElBQ1RDLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxPQUFRLElBQ1JDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxNQUFPLElBQ1BDLE1BQU8sSUFDUEMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLEdBQUksSUFDSkMsS0FBTSxJQUNOQyxJQUFLLElBQ0xDLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxNQUFPLElBQ1A1bkMsS0FBTSxJQUNONm5DLE1BQU8sSUFDUEMsSUFBSyxJQUNMQyxJQUFLLElBQ0xDLEdBQUksSUFDSkMsSUFBSyxJQUNMQyxJQUFLLElBQ0xDLElBQUssSUFDTEMsT0FBUSxJQUNSQyxJQUFLLElBQ0xDLEtBQU0sSUFDTkMsTUFBTyxJQUNQQyxHQUFJLElBQ0pDLE1BQU8sSUFDUEMsR0FBSSxJQUNKQyxHQUFJLElBQ0pDLElBQUssSUFDTEMsSUFBSyxJQUNMQyxLQUFNLElBQ05DLEtBQU0sSUFDTkMsS0FBTSxJQUNOQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsS0FBTSxJQUNOQyxLQUFNLElBQ05DLE1BQU8sSUFDUEMsTUFBTyxJQUNQQyxPQUFRLElBQ1JDLE9BQVEsSUFDUkMsSUFBSyxJQUNMQyxPQUFRLElBQ1JDLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxNQUFPLElB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Q252RSxPQUFPQyxlQUFlQyxFQUFTNGxELE9BQU9xcEIsWUFBYSxDQUFFaHZFLE1BQU8sV0FFN0RILE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFQyxPQUFPLEdBQU8sc0NDSjlESCxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRUMsT0FBTyxJQUN0REQsRUFBUW1FLGlCQUFtQm5FLEVBQVFnRixPQUFTaEYsRUFBUStFLEtBQU8vRSxFQUFRd0IsVUFBTyxFQUMxRSxNQUFNMHRFLEVBQVMsRUFBUSxpQkFDdkJwdkUsT0FBT0MsZUFBZUMsRUFBUyxPQUFRLENBQUVrQixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPK3RFLEVBQU8xdEUsSUFBTSxJQUNsRyxNQUFNMnRFLEVBQVMsRUFBUSxpQkFDdkJydkUsT0FBT0MsZUFBZUMsRUFBUyxPQUFRLENBQUVrQixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPZ3VFLEVBQU9wcUUsSUFBTSxJQUNsRyxNQUFNcXFFLEVBQVcsRUFBUSxtQkFDekJ0dkUsT0FBT0MsZUFBZUMsRUFBUyxTQUFVLENBQUVrQixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPaXVFLEVBQVNwcUUsTUFBUSxJQUN4RyxNQUFNNmxFLEVBQXNCLEVBQVEsOEJBQ3BDL3FFLE9BQU9DLGVBQWVDLEVBQVMsbUJBQW9CLENBQUVrQixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPMHBFLEVBQW9CMW1FLGdCQUFrQixJQUN2SW5FLEVBQUEsUUFBa0I2cUUsRUFBb0IxbUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGVzcHJ1aW5vLXRvb2xzL3RyYW5zcGlsZXIvbGliL2RlZmF1bHRzL3RyYW5zcGlsZV9kZWZhdWx0LmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AZXNwcnVpbm8tdG9vbHMvdHJhbnNwaWxlci9saWIvZ2VuZXJhdG9yLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AZXNwcnVpbm8tdG9vbHMvdHJhbnNwaWxlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0Blc3BydWluby10b29scy90cmFuc3BpbGVyL2xpYi9tYXBwaW5ncy5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGVzcHJ1aW5vLXRvb2xzL3RyYW5zcGlsZXIvbGliL3RyYW5zZm9ybWVyLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AZXNwcnVpbm8tdG9vbHMvdHJhbnNwaWxlci9saWIvdHJhbnNwaWxlLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AZXNwcnVpbm8tdG9vbHMvdHJhbnNwaWxlci9saWIvdHlwZXMvbWFwcGluZ3MuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0Blc3BydWluby10b29scy91YXJ0L2xpYi9oZWxwZXJzL2lzSU9TLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AZXNwcnVpbm8tdG9vbHMvdWFydC9saWIvaGVscGVycy9zdHJpbmdBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGVzcHJ1aW5vLXRvb2xzL3VhcnQvbGliL3N0eWxlcy9tb2RhbC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGVzcHJ1aW5vLXRvb2xzL3VhcnQvbGliL3VhcnQuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvZXNjb2RlZ2VuL2VzY29kZWdlbi5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvZXNjb2RlZ2VuL25vZGVfbW9kdWxlcy9lc3RyYXZlcnNlL2VzdHJhdmVyc2UuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2VzcHJpbWEvZGlzdC9lc3ByaW1hLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9lc3V0aWxzL2xpYi9hc3QuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2VzdXRpbHMvbGliL2NvZGUuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2VzdXRpbHMvbGliL2tleXdvcmQuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2VzdXRpbHMvbGliL3V0aWxzLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvaXMtaW4tYnJvd3Nlci9kaXN0L21vZHVsZS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jYW1lbC1jYXNlL2Rpc3QvanNzLXBsdWdpbi1jYW1lbC1jYXNlLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1jb21wb3NlL2Rpc3QvanNzLXBsdWdpbi1jb21wb3NlLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1kZWZhdWx0LXVuaXQvZGlzdC9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC5lc20uanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZXhwYW5kL2Rpc3QvanNzLXBsdWdpbi1leHBhbmQuZXNtLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWV4dGVuZC9kaXN0L2pzcy1wbHVnaW4tZXh0ZW5kLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1nbG9iYWwvZGlzdC9qc3MtcGx1Z2luLWdsb2JhbC5lc20uanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tbmVzdGVkL2Rpc3QvanNzLXBsdWdpbi1uZXN0ZWQuZXNtLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXByb3BzLXNvcnQvZGlzdC9qc3MtcGx1Z2luLXByb3BzLXNvcnQuZXNtLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24vZGlzdC9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24uZXNtLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXJ1bGUtdmFsdWUtb2JzZXJ2YWJsZS9kaXN0L2pzcy1wbHVnaW4tcnVsZS12YWx1ZS1vYnNlcnZhYmxlLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi10ZW1wbGF0ZS9kaXN0L2pzcy1wbHVnaW4tdGVtcGxhdGUuZXNtLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlci9kaXN0L2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzLXByZXNldC1kZWZhdWx0L2Rpc3QvanNzLXByZXNldC1kZWZhdWx0LmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvanNzL2Rpc3QvanNzLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQtdmxxLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2JpbmFyeS1zZWFyY2guanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL21hcHBpbmctbGlzdC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi91dGlsLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL3NvdXJjZS1tYXAuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvdGlueS13YXJuaW5nL2Rpc3QvdGlueS13YXJuaW5nLmVzbS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9zcmMvYmFuZ2xlLnRzIiwid2VicGFjazovL0VTUFRfY29yZS8uL3NyYy9kZXZpY2UtY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9zcmMvaGVscGVycy9mZXRjaEhlbHBlci50cyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9zcmMvcGl4bC50cyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9zcmMvcHVjay50cyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9zcmMvdHlwZXMvcHVjay10eXBlcy50cyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlMaWtlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL0VTUFRfY29yZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9FU1BUX2NvcmUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0VTUFRfY29yZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlL3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vRVNQVF9jb3JlLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0X3RyYW5zcGlsZV9vcHRpb25zID0gdm9pZCAwO1xuZXhwb3J0cy5kZWZhdWx0X3RyYW5zcGlsZV9vcHRpb25zID0ge1xuICAgIHBhcnNlX3R5cGU6ICdtb2R1bGUnLFxuICAgIGFkZGl0aW9uYWxfY2FsbGVlczogW10sXG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRvciA9IHZvaWQgMDtcbmNvbnN0IGVzY29kZWdlbiA9IHJlcXVpcmUoXCJlc2NvZGVnZW5cIik7XG4vKipcbiAqIFRoaXMgd2lsbCBnZW5lcmF0ZSBjb2RlIGZyb20gdGhlIEFTVFxuICogQHBhcmFtIGFzdFxuICovXG5jb25zdCBnZW5lcmF0b3IgPSAoYXN0LCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IGNvZGUgPSBhc3QuYm9keS5tYXAoKGV4cHIpID0+IGVzY29kZWdlbi5nZW5lcmF0ZShleHByKSkuam9pbignXFxuJyk7XG4gICAgcmV0dXJuIGNvZGUucmVwbGFjZUFsbCgnOzsnLCAnOycpO1xufTtcbmV4cG9ydHMuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRyYW5zZm9ybWVyID0gZXhwb3J0cy5nZW5lcmF0b3IgPSBleHBvcnRzLnRyYW5zcGlsZSA9IHZvaWQgMDtcbi8qKlxuICogVGhpcyBwYWNrYWdlIHByb3ZpZGVzIGJvdGggYSBjbGkgYW5kIGFuIGV4cG9ydGVkIGZ1bmN0aW9uIHRvXG4gKiBhbGxvdyBmb3IgdHJhbnNwaWxpbmcgd2l0aGluIGEgZmlsZSBvciBhY3Jvc3MgYSBkaXJlY3RvcnkuXG4gKi9cbmNvbnN0IHRyYW5zcGlsZV8xID0gcmVxdWlyZShcIi4vdHJhbnNwaWxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhbnNwaWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cmFuc3BpbGVfMS50cmFuc3BpbGU7IH0gfSk7XG5jb25zdCBnZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRvclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdlbmVyYXRvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdG9yXzEuZ2VuZXJhdG9yOyB9IH0pO1xuY29uc3QgdHJhbnNmb3JtZXJfMSA9IHJlcXVpcmUoXCIuL3RyYW5zZm9ybWVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidHJhbnNmb3JtZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRyYW5zZm9ybWVyXzEudHJhbnNmb3JtZXI7IH0gfSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFwcGluZ3MgPSB2b2lkIDA7XG5jb25zdCBtYXBwaW5nc18xID0gcmVxdWlyZShcIi4vdHlwZXMvbWFwcGluZ3NcIik7XG5leHBvcnRzLm1hcHBpbmdzID0ge1xuICAgIFB1Y2s6IHtcbiAgICAgICAgTkZDOiB7XG4gICAgICAgICAgICBzZXRVcmw6ICh1cmwpID0+IGBOUkYubmZjVVJMKCR7dXJsfSlgLFxuICAgICAgICAgICAgcmVzZXQ6ICgpID0+ICdOUkYubmZjVVJMKCknLFxuICAgICAgICB9LFxuICAgICAgICBtYWc6IHtcbiAgICAgICAgICAgIGVuYWJsZU1hZzogKCkgPT4gYFB1Y2subWFnT24oKWAsXG4gICAgICAgICAgICBlbmFibGVGaWVsZDogKCkgPT4gYHJlcXVpcmUoXCJwdWNranN2Mi1tYWctbGV2ZWxcIikub24oKWAsXG4gICAgICAgICAgICBkaXNhYmxlTWFnOiAoKSA9PiBgUHVjay5tYWdPZmYoKWAsXG4gICAgICAgICAgICBkaXNhYmxlRmllbGQ6ICgpID0+IGByZXF1aXJlKFwicHVja2pzdjItbWFnLWxldmVsXCIpLm9mZigpYCxcbiAgICAgICAgICAgIG9uTWFnOiAoZnVuYykgPT4gYFB1Y2sub24oJ21hZycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICR7ZnVuY31cbiAgICAgIH0pYCxcbiAgICAgICAgICAgIG9uRmllbGQ6IChmdW5jKSA9PiBgUHVjay5vbignZmllbGQnLCBmdW5jdGlvbigpe1xuICAgICAgICAke2Z1bmN9XG4gICAgICB9KWAsXG4gICAgICAgIH0sXG4gICAgICAgIGFjY2VsOiB7XG4gICAgICAgICAgICBlbmFibGVBY2NlbE1vdmVtZW50OiAoKSA9PiBgcmVxdWlyZShcInB1Y2tqc3YyLWFjY2VsLW1vdmVtZW50XCIpLm9uKClgLFxuICAgICAgICAgICAgZW5hYmxlQWNjZWxCaWdNb3ZlbWVudDogKCkgPT4gYHJlcXVpcmUoXCJwdWNranN2Mi1hY2NlbC1iaWdtb3ZlbWVudFwiKS5vbigpYCxcbiAgICAgICAgICAgIGVuYWJsZUFjY2VsVGlsdDogKCkgPT4gYHJlcXVpcmUoXCJwdWNranN2Mi1hY2NlbC10aWx0XCIpLm9uKClgLFxuICAgICAgICAgICAgZGlzYWJsZUFjY2VsTW92ZW1lbnQ6ICgpID0+IGByZXF1aXJlKFwicHVja2pzdjItYWNjZWwtbW92ZW1lbnRcIikub2ZmKClgLFxuICAgICAgICAgICAgZGlzYWJsZUFjY2VsQmlnTW92ZW1lbnQ6ICgpID0+IGByZXF1aXJlKFwicHVja2pzdjItYWNjZWwtYmlnbW92ZW1lbnRcIikub2ZmKClgLFxuICAgICAgICAgICAgZGlzYWJsZUFjY2VsVGlsdDogKCkgPT4gYHJlcXVpcmUoXCJwdWNranN2Mi1hY2NlbC10aWx0XCIpLm9mZigpYCxcbiAgICAgICAgICAgIHZhbDogKCkgPT4gJ1B1Y2suYWNjZWwoKScsXG4gICAgICAgICAgICBvbk1vdmU6IChmdW5jKSA9PiBgUHVjay5vbignYWNjZWwnLCBmdW5jdGlvbihhY2Mpe1xuICAgICAgICAke2Z1bmN9XG4gICAgICB9KWAsXG4gICAgICAgICAgICBvblRpbHQ6IChmdW5jKSA9PiBgUHVjay5vbignYWNjZWwnLCBmdW5jdGlvbihhY2Mpe1xuICAgICAgICAke2Z1bmN9XG4gICAgICB9KWAsXG4gICAgICAgIH0sXG4gICAgICAgIElSOiB7XG4gICAgICAgICAgICB0cmFuc21pdDogKGRhdGEpID0+IGBQdWNrLklSKFske2RhdGEuam9pbignLCcpfV0pYCxcbiAgICAgICAgfSxcbiAgICAgICAgTEVEOiB7XG4gICAgICAgICAgICBvbjogKGNvbG9yKSA9PiBBcnJheS5pc0FycmF5KGNvbG9yKVxuICAgICAgICAgICAgICAgID8gYGRpZ2l0YWxXcml0ZSgke2NvbG9yfSwxKWBcbiAgICAgICAgICAgICAgICA6IGBMRUQke21hcHBpbmdzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9LnNldCgpYCxcbiAgICAgICAgICAgIG9mZjogKGNvbG9yKSA9PiBBcnJheS5pc0FycmF5KGNvbG9yKVxuICAgICAgICAgICAgICAgID8gYGRpZ2l0YWxXcml0ZSgke2NvbG9yfSwwKWBcbiAgICAgICAgICAgICAgICA6IGBMRUQke21hcHBpbmdzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9LnJlc2V0KClgLFxuICAgICAgICAgICAgdG9nZ2xlOiAoY29sb3IpID0+IGBMRUQke21hcHBpbmdzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9LnRvZ2dsZSgpYCxcbiAgICAgICAgICAgIGZsYXNoOiAoY29sb3IsIG1zKSA9PiBgZGlnaXRhbFB1bHNlKExFRCR7bWFwcGluZ3NfMS5MRURDb2xvdXJzLmluZGV4T2YoY29sb3IpICsgMX0sMSwke21zfSlgLFxuICAgICAgICAgICAgdmFsOiAoY29sb3IpID0+IGBkaWdpdGFsUmVhZChMRUQke21hcHBpbmdzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9KSA9PSAxYCxcbiAgICAgICAgfSxcbiAgICAgICAgb25QcmVzczogKGZ1bmMpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgc2V0V2F0Y2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICR7ZnVuY31cbiAgICAgICAgfSwgQlROLCB7ZWRnZTpcInJpc2luZ1wiLCByZXBlYXQ6dHJ1ZSwgZGVib3VuY2U6NTB9KWA7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVGltZWRQcmVzczogKGxvbmcsIHNob3J0LCBtcyA9IDAuMykgPT4gYHNldFdhdGNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgbXMgPSAoZS50aW1lIC0gZS5sYXN0VGltZSk7XG5cbiAgICAgIGlmKG1zID4gJHttc30pe1xuICAgICAgICAke2xvbmd9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAke3Nob3J0fVxuICAgICAgfVxuICAgIH0sIEJUTiwge2VkZ2U6J2ZhbGxpbmcnLCByZXBlYXQ6dHJ1ZSwgZGVib3VuY2U6NTB9KWAsXG4gICAgICAgIGdldFRlbXBlcmF0dXJlOiAoKSA9PiAnRS5nZXRUZW1wZXJhdHVyZSgpJyxcbiAgICAgICAgZ2V0TGlnaHRWYWw6ICgpID0+ICdQdWNrLmxpZ2h0KCknLFxuICAgIH0sXG4gICAgRGV2aWNlQ29udHJvbGxlcjoge1xuICAgICAgICBjb25uZWN0OiAoKSA9PiBgMGAsXG4gICAgICAgIHJlc2V0OiAoKSA9PiBgcmVzZXQodHJ1ZSlgLFxuICAgICAgICBkdW1wOiAoKSA9PiBgRS5kdW1wU3RyKClgLFxuICAgICAgICBnZXREZXZpY2VUeXBlOiAoKSA9PiBgcHJvY2Vzcy5lbnYuQk9BUkRgLFxuICAgICAgICBnZXRCYXR0ZXJ5OiAoKSA9PiBgRS5nZXRCYXR0ZXJ5KClgLFxuICAgICAgICBzZXRJbnRlcnZhbDogKGZ1bmMsIG1zKSA9PiBgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICR7ZnVuY307XG4gICAgfSwgJHttc30pYCxcbiAgICAgICAgUGluOiB7XG4gICAgICAgICAgICB2YWw6IChwaW4pID0+IGAke3Bpbn0ucmVhZCgpYCxcbiAgICAgICAgICAgIGFuYWxvZ09uOiAocGluLCB2YWwpID0+IGBhbmFsb2dXcml0ZSgke3Bpbn0sJHt2YWx9KWAsXG4gICAgICAgICAgICBkaWdpdGFsT246IChwaW4sIHZhbCkgPT4gYGRpZ2l0YWxXcml0ZSgke3Bpbn0sJHt2YWx9KWAsXG4gICAgICAgICAgICBkaWdpdGFsVG9nZ2xlOiAocGluKSA9PiBgJHtwaW59LnRvZ2dsZSgpYCxcbiAgICAgICAgICAgIHJlc2V0OiAocGluKSA9PiBgJHtwaW59LnJlc2V0KClgLFxuICAgICAgICAgICAgZ2V0SW5mbzogKHBpbikgPT4gYCR7cGlufS5nZXRJbmZvKClgLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgUGl4bDoge30sXG4gICAgQmFuZ2xlOiB7fSxcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudHJhbnNmb3JtZXIgPSB2b2lkIDA7XG5jb25zdCBtYXBwaW5nc18xID0gcmVxdWlyZShcIi4vbWFwcGluZ3NcIik7XG5jb25zdCBlc3ByaW1hID0gcmVxdWlyZShcImVzcHJpbWFcIik7XG5jb25zdCBnZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuL2dlbmVyYXRvclwiKTtcbi8qKlxuICogVGhpcyB3aWxsIHJlcGxhY2UgY29kZSBpbiBBU1QgcHJlLXJlYnVpbGRpbmdcbiAqIEBwYXJhbSBhc3RcbiAqL1xuY29uc3QgdHJhbnNmb3JtZXIgPSAoYXN0LCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IGNhbGxlZV9uYW1lcyA9IFtcbiAgICAgICAgJ1B1Y2snLFxuICAgICAgICAnUGl4bCcsXG4gICAgICAgICdCYW5nbGUnLFxuICAgICAgICAnRGV2aWNlQ29udHJvbGxlcicsXG4gICAgICAgIC4uLihvcHRpb25zLmFkZGl0aW9uYWxfaW5pdGlhbGlzZXJzXG4gICAgICAgICAgICA/IG9wdGlvbnMuYWRkaXRpb25hbF9pbml0aWFsaXNlcnNcbiAgICAgICAgICAgIDogW10pLFxuICAgIF07XG4gICAgY29uc3QgZ2V0SW5zdGFuY2VJbml0aWFsaXNpbmcgPSAoYXN0KSA9PiB7XG4gICAgICAgIGxldCB2YXJpYWJsZV9kZWNsYXJhdGlvbnMgPSBhc3QuYm9keS5maWx0ZXIoKHgpID0+IHgudHlwZSA9PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpO1xuICAgICAgICBsZXQgZXNwX2luaXRpdGFsaXNpbmdfdmFycyA9IHZhcmlhYmxlX2RlY2xhcmF0aW9ucy5maWx0ZXIoKHgpID0+IHsgdmFyIF9hOyByZXR1cm4gY2FsbGVlX25hbWVzLmluY2x1ZGVzKChfYSA9IHguZGVjbGFyYXRpb25zWzBdLmluaXQuY2FsbGVlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmFtZSk7IH0pO1xuICAgICAgICBsZXQgY2FsbGVlcyA9IFtcbiAgICAgICAgICAgIC4uLmVzcF9pbml0aXRhbGlzaW5nX3ZhcnMubWFwKCh4KSA9PiAoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHguZGVjbGFyYXRpb25zWzBdLmlkLm5hbWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbGlzZXI6IHguZGVjbGFyYXRpb25zWzBdLmluaXQuY2FsbGVlLm5hbWUsXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAuLi5vcHRpb25zLmFkZGl0aW9uYWxfY2FsbGVlcyxcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIGNhbGxlZXM7XG4gICAgfTtcbiAgICBjb25zdCBjb252ZXJ0VG9BU1QgPSAoY29kZSwgcGFyYW1zKSA9PiB7XG4gICAgICAgIGxldCBjb2RlX2FyciA9IGNvZGUuc3BsaXQoJy4nKTtcbiAgICAgICAgbGV0IGV4cHJlc3Npb25fZnVuYyA9IGNvZGVfYXJyLnJlZHVjZSgocHJldiwgY3VycikgPT4gcHJldltjdXJyXSwgbWFwcGluZ3NfMS5tYXBwaW5ncyk7XG4gICAgICAgIHJldHVybiBlc3ByaW1hLnBhcnNlU2NyaXB0KGV4cHJlc3Npb25fZnVuYyguLi5wYXJhbXMpKS5ib2R5WzBdO1xuICAgIH07XG4gICAgY29uc3QgcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbiA9ICh4KSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICBpZiAoKHggPT09IG51bGwgfHwgeCA9PT0gdm9pZCAwID8gdm9pZCAwIDogeC50eXBlKSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZXNwX2luaXRpYWxpc2luZ192YXJzID0gZ2V0SW5zdGFuY2VJbml0aWFsaXNpbmcoYXN0KTtcbiAgICAgICAgbGV0IGRldmljZV92YXJpYWJsZSA9IChfYyA9IChfYiA9IChfYSA9IHggPT09IG51bGwgfHwgeCA9PT0gdm9pZCAwID8gdm9pZCAwIDogeC5jYWxsZWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vYmplY3QpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vYmplY3QpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5uYW1lO1xuICAgICAgICBsZXQgZGV2aWNlX2luaXQgPSBlc3BfaW5pdGlhbGlzaW5nX3ZhcnMuZmluZCgoeCkgPT4geC5uYW1lID09PSBkZXZpY2VfdmFyaWFibGUpO1xuICAgICAgICBsZXQgcGhyYXNlID0gZGV2aWNlX2luaXQuaW5pdGlhbGlzZXIgKyAnLic7XG4gICAgICAgIGlmICgoX2QgPSB4LmNhbGxlZS5vYmplY3QucHJvcGVydHkpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5uYW1lKSB7XG4gICAgICAgICAgICBwaHJhc2UgKz1cbiAgICAgICAgICAgICAgICAoKF9lID0geC5jYWxsZWUub2JqZWN0LnByb3BlcnR5KSA9PT0gbnVsbCB8fCBfZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2UubmFtZSkgJiYgKChfZiA9IHguY2FsbGVlLm9iamVjdC5wcm9wZXJ0eSkgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLm5hbWUpICsgJy4nO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJhbXMgPSB4LmFyZ3VtZW50cy5tYXAoKHkpID0+IHtcbiAgICAgICAgICAgIGlmICh5Lmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNmb3JtZXJfb3V0ID0gKDAsIGV4cG9ydHMudHJhbnNmb3JtZXIpKHguYm9keSwge1xuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX2NhbGxlZXM6IGdldEluc3RhbmNlSW5pdGlhbGlzaW5nKGFzdCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBnZW5lcmF0b3JfMS5nZW5lcmF0b3IpKHRyYW5zZm9ybWVyX291dCwge1xuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX2NhbGxlZXM6IFtdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcGhyYXNlICs9IHguY2FsbGVlLnByb3BlcnR5Lm5hbWU7XG4gICAgICAgIGxldCBhc3RfcmVzID0gY29udmVydFRvQVNUKHBocmFzZSwgcGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIGFzdF9yZXM7XG4gICAgfTtcbiAgICBjb25zdCByZXBsYWNlRXhwcmVzc2lvbiA9ICh4KSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbztcbiAgICAgICAgbGV0IGVzcF9pbml0aWFsaXNpbmdfdmFycyA9IGdldEluc3RhbmNlSW5pdGlhbGlzaW5nKGFzdCk7XG4gICAgICAgIGxldCBkZXZpY2VfdmFyaWFibGU7XG4gICAgICAgIHN3aXRjaCAoeCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4LnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0lmU3RhdGVtZW50Jzoge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlSWZTdGF0ZW1lbnQoeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdDbGFzc0RlY2xhcmF0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZUNsYXNzKHgpO1xuICAgICAgICAgICAgY2FzZSAnRnVuY3Rpb25EZWNsYXJhdGlvbic6XG4gICAgICAgICAgICBjYXNlICdXaGlsZVN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdGb3JTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRm9ySW5TdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRG9XaGlsZVN0YXRlbWVudCc6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZUxvb3BTdGF0ZW1lbnQoeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdTd2l0Y2hTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlU3dpdGNoU3RhdGVtZW50KHgpO1xuICAgICAgICAgICAgY2FzZSAnQ29udGludWVTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnQnJlYWtTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgICAgIGlmICgoeCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4LnR5cGUpID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcbiAgICAgICAgICAgIGlmICgoKF9hID0geC5kZWNsYXJhdGlvbnNbMF0uaW5pdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgIHguZGVjbGFyYXRpb25zWzBdLmluaXQuYm9keS5ib2R5ID0geC5kZWNsYXJhdGlvbnNbMF0uaW5pdC5ib2R5LmJvZHkubWFwKCh5KSA9PiByZXBsYWNlRXhwcmVzc2lvbih5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKChfYiA9IHguZGVjbGFyYXRpb25zWzBdLmluaXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi50eXBlKSA9PT0gJ0F3YWl0RXhwcmVzc2lvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoKF9jID0geC5kZWNsYXJhdGlvbnNbMF0uaW5pdCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnR5cGUpID09PSAnT2JqZWN0RXhwcmVzc2lvbicpIHtcbiAgICAgICAgICAgICAgICB4LmRlY2xhcmF0aW9uc1swXS5pbml0LnByb3BlcnRpZXMgPVxuICAgICAgICAgICAgICAgICAgICB4LmRlY2xhcmF0aW9uc1swXS5pbml0LnByb3BlcnRpZXMubWFwKCh5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeS52YWx1ZS50eXBlID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkudmFsdWUgPSByZXBsYWNlTG9vcFN0YXRlbWVudCh5LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHkudmFsdWUudHlwZSA9PT0gJ0NhbGxFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkudmFsdWUgPSByZXBsYWNlUmV0dXJuZWRFeHByZXNzaW9uKHkudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoeC52YWx1ZS50eXBlID09PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeS52YWx1ZS5ib2R5ID0gcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbih5LnZhbHVlLmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgoeCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4LnR5cGUpID09PSAnUmV0dXJuU3RhdGVtZW50Jykge1xuICAgICAgICAgICAgaWYgKHguYXJndW1lbnQudHlwZSA9PT0gJ0xpdGVyYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB4LmFyZ3VtZW50ID0gcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbih4LmFyZ3VtZW50KTtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgICAgIGlmICgoeCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4LmV4cHJlc3Npb24udHlwZSkgPT09ICdMb2dpY2FsRXhwcmVzc2lvbicpIHtcbiAgICAgICAgICAgIGlmICh4LmV4cHJlc3Npb24ucmlnaHQudHlwZSAhPT0gJ0xpdGVyYWwnKSB7XG4gICAgICAgICAgICAgICAgeC5leHByZXNzaW9uLnJpZ2h0ID0gcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbih4LmV4cHJlc3Npb24ucmlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHguZXhwcmVzc2lvbi5sZWZ0LnR5cGUgIT09ICdMaXRlcmFsJykge1xuICAgICAgICAgICAgICAgIHguZXhwcmVzc2lvbi5sZWZ0ID0gcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbih4LmV4cHJlc3Npb24ubGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHggPT09IG51bGwgfHwgeCA9PT0gdm9pZCAwID8gdm9pZCAwIDogeC5leHByZXNzaW9uLnR5cGUpID09PSAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgeC5leHByZXNzaW9uLmNvbnNlcXVlbnQgPSByZXBsYWNlUmV0dXJuZWRFeHByZXNzaW9uKHguZXhwcmVzc2lvbi5jb25zZXF1ZW50KTtcbiAgICAgICAgICAgIHguZXhwcmVzc2lvbi5hbHRlcm5hdGUgPSByZXBsYWNlUmV0dXJuZWRFeHByZXNzaW9uKHguZXhwcmVzc2lvbi5hbHRlcm5hdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh4ID09PSBudWxsIHx8IHggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHguZXhwcmVzc2lvbi50eXBlKSA9PT0gJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2UgPSAoX2QgPSB4ID09PSBudWxsIHx8IHggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHguZXhwcmVzc2lvbikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGxlZSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLm9iamVjdC50eXBlKSA9PT0gJ01lbWJlckV4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICBkZXZpY2VfdmFyaWFibGUgPSB4LmV4cHJlc3Npb24uY2FsbGVlLm9iamVjdC5vYmplY3QubmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoKF9oID0gKF9nID0gKF9mID0geCA9PT0gbnVsbCB8fCB4ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB4LmV4cHJlc3Npb24pID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsZWUpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5vYmplY3QpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC50eXBlKSA9PT0gJ0lkZW50aWZpZXInKSB7XG4gICAgICAgICAgICBkZXZpY2VfdmFyaWFibGUgPSB4LmV4cHJlc3Npb24uY2FsbGVlLm9iamVjdC5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGV2aWNlX3ZhcmlhYmxlID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoX2sgPSAoX2ogPSB4ID09PSBudWxsIHx8IHggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHguZXhwcmVzc2lvbikgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLm9iamVjdCkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLnR5cGUpID09PSAnVGhpc0V4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVzcF9pbml0aWFsaXNpbmdfdmFycy5tYXAoKHgpID0+IHgubmFtZSkuaW5jbHVkZXMoZGV2aWNlX3ZhcmlhYmxlKSkge1xuICAgICAgICAgICAgaWYgKCh4ID09PSBudWxsIHx8IHggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHguZXhwcmVzc2lvbi5hcmd1bWVudHMpIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICB4LmV4cHJlc3Npb24uYXJndW1lbnRzID0geC5leHByZXNzaW9uLmFyZ3VtZW50cy5tYXAoKHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHkuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkuYm9keS5oYXNPd25Qcm9wZXJ0eSgnYm9keScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeS5ib2R5LmJvZHkgPSB5LmJvZHkuYm9keS5tYXAoKHopID0+IHJlcGxhY2VFeHByZXNzaW9uKHopKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBkZXZpY2VfaW5pdCA9IGVzcF9pbml0aWFsaXNpbmdfdmFycy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGRldmljZV92YXJpYWJsZSk7XG4gICAgICAgICAgICBsZXQgcGhyYXNlID0gZGV2aWNlX2luaXQuaW5pdGlhbGlzZXIgKyAnLic7XG4gICAgICAgICAgICBpZiAoKF9sID0geC5leHByZXNzaW9uLmNhbGxlZS5vYmplY3QucHJvcGVydHkpID09PSBudWxsIHx8IF9sID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgcGhyYXNlICs9XG4gICAgICAgICAgICAgICAgICAgICgoX20gPSB4LmV4cHJlc3Npb24uY2FsbGVlLm9iamVjdC5wcm9wZXJ0eSkgPT09IG51bGwgfHwgX20gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tLm5hbWUpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoKF9vID0geC5leHByZXNzaW9uLmNhbGxlZS5vYmplY3QucHJvcGVydHkpID09PSBudWxsIHx8IF9vID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfby5uYW1lKSArICcuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwYXJhbXMgPSB4LmV4cHJlc3Npb24uYXJndW1lbnRzLm1hcCgoeCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh4Lmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRyYW5zZm9ybWVyX291dCA9ICgwLCBleHBvcnRzLnRyYW5zZm9ybWVyKSh4LmJvZHksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxfY2FsbGVlczogZ2V0SW5zdGFuY2VJbml0aWFsaXNpbmcoYXN0KSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgZ2VuZXJhdG9yXzEuZ2VuZXJhdG9yKSh0cmFuc2Zvcm1lcl9vdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxfY2FsbGVlczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcGhyYXNlICs9IHguZXhwcmVzc2lvbi5jYWxsZWUucHJvcGVydHkubmFtZTtcbiAgICAgICAgICAgIGxldCBhc3RfcmVzID0gY29udmVydFRvQVNUKHBocmFzZSwgcGFyYW1zKTtcbiAgICAgICAgICAgIHJldHVybiBhc3RfcmVzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVJbml0c0FuZEltcG9ydHMgPSAoYXN0KSA9PiB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgbGV0IHZhbDtcbiAgICAgICAgc3dpdGNoIChhc3QudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnSW1wb3J0RGVjbGFyYXRpb24nOiB7XG4gICAgICAgICAgICAgICAgdmFsID0gYXN0LnNvdXJjZS52YWx1ZS5pbmNsdWRlcygnZXNwcnVpbm8tdG9vbHMnKSA/ICcnIDogYXN0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnVmFyaWFibGVEZWNsYXJhdGlvbic6IHtcbiAgICAgICAgICAgICAgICBpZiAoKChfYSA9IGFzdC5kZWNsYXJhdGlvbnNbMF0uaW5pdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnR5cGUpID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQuYm9keS5ib2R5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFzdC5kZWNsYXJhdGlvbnNbMF0uaW5pdC5ib2R5LmJvZHkubWFwKCh4KSA9PiByZXBsYWNlRXhwcmVzc2lvbih4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoKF9iID0gYXN0LmRlY2xhcmF0aW9uc1swXS5pbml0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudHlwZSkgPT09ICdPYmplY3RFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQucHJvcGVydGllcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQucHJvcGVydGllcy5tYXAoKHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeC52YWx1ZS50eXBlID09PSAnRnVuY3Rpb25FeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LnZhbHVlID0gcmVwbGFjZUxvb3BTdGF0ZW1lbnQoeC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHgudmFsdWUudHlwZSA9PT0gJ0NhbGxFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LnZhbHVlID0gcmVwbGFjZVJldHVybmVkRXhwcmVzc2lvbih4LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoeC52YWx1ZS50eXBlID09PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgudmFsdWUuYm9keSA9IHJlcGxhY2VSZXR1cm5lZEV4cHJlc3Npb24oeC52YWx1ZS5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCgoX2MgPSBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy50eXBlKSA9PT0gJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXN0LmRlY2xhcmF0aW9uc1swXS5pbml0LmJvZHkuYm9keSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQuYm9keS5ib2R5ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3QuZGVjbGFyYXRpb25zWzBdLmluaXQuYm9keS5ib2R5Lm1hcCgoeCkgPT4gcmVwbGFjZUV4cHJlc3Npb24oeCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXN0LmRlY2xhcmF0aW9uc1swXS5pbml0LmJvZHkgPSByZXBsYWNlUmV0dXJuZWRFeHByZXNzaW9uKGFzdC5kZWNsYXJhdGlvbnNbMF0uaW5pdC5ib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXN0LmRlY2xhcmF0aW9uc1swXS5pbml0Lmhhc093blByb3BlcnR5KCdjYWxsZWUnKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSBjYWxsZWVfbmFtZXMuaW5jbHVkZXMoKF9kID0gYXN0LmRlY2xhcmF0aW9uc1swXS5pbml0LmNhbGxlZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IGFzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBhc3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlcGxhY2VJZkV4cHJlc3Npb25zID0gKHgpID0+IHtcbiAgICAgICAgbGV0IHhfY29weSA9IE9iamVjdC5hc3NpZ24oe30sIHgpO1xuICAgICAgICBpZiAoeF9jb3B5LnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcbiAgICAgICAgICAgIHhfY29weS5ib2R5ID0geF9jb3B5LmJvZHkubWFwKCh5KSA9PiByZXBsYWNlRXhwcmVzc2lvbih5KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHhfY29weS50eXBlID09PSAnSWZTdGF0ZW1lbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZUlmU3RhdGVtZW50KHhfY29weSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHhfY29weTtcbiAgICB9O1xuICAgIGNvbnN0IHJlcGxhY2VJZlN0YXRlbWVudCA9ICh4KSA9PiB7XG4gICAgICAgIGxldCBpZl9jb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgeCk7XG4gICAgICAgIGlmX2NvcHkuY29uc2VxdWVudCA9IHJlcGxhY2VJZkV4cHJlc3Npb25zKHguY29uc2VxdWVudCk7XG4gICAgICAgIGlmIChpZl9jb3B5LmFsdGVybmF0ZSkge1xuICAgICAgICAgICAgaWZfY29weS5hbHRlcm5hdGUgPSByZXBsYWNlSWZFeHByZXNzaW9ucyh4LmFsdGVybmF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlmX2NvcHk7XG4gICAgfTtcbiAgICBjb25zdCByZXBsYWNlTG9vcFN0YXRlbWVudCA9ICh4KSA9PiB7XG4gICAgICAgIGxldCBsb29wX2NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCB4KTtcbiAgICAgICAgbG9vcF9jb3B5LmJvZHkuYm9keSA9IGxvb3BfY29weS5ib2R5LmJvZHkubWFwKCh5KSA9PiByZXBsYWNlRXhwcmVzc2lvbih5KSk7XG4gICAgICAgIHJldHVybiBsb29wX2NvcHk7XG4gICAgfTtcbiAgICBjb25zdCByZXBsYWNlU3dpdGNoU3RhdGVtZW50ID0gKHgpID0+IHtcbiAgICAgICAgbGV0IHN3aXRjaF9jb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgeCk7XG4gICAgICAgIHN3aXRjaF9jb3B5LmNhc2VzID0gc3dpdGNoX2NvcHkuY2FzZXMubWFwKCh5KSA9PiAoeS5jb25zZXF1ZW50ID0geS5jb25zZXF1ZW50Lm1hcCgoeikgPT4gcmVwbGFjZUV4cHJlc3Npb24oeikpKSk7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH07XG4gICAgY29uc3QgcmVwbGFjZUNsYXNzID0gKHgpID0+IHtcbiAgICAgICAgbGV0IGNsYXNzX2NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCB4KTtcbiAgICAgICAgY2xhc3NfY29weS5ib2R5LmJvZHkgPSBjbGFzc19jb3B5LmJvZHkuYm9keS5tYXAoKHkpID0+IHtcbiAgICAgICAgICAgIHkudmFsdWUgPSByZXBsYWNlTG9vcFN0YXRlbWVudCh5LnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsYXNzX2NvcHk7XG4gICAgfTtcbiAgICBjb25zdCByZXBsYWNlVHJ5Q2F0Y2ggPSAoeCkgPT4ge1xuICAgICAgICB4LmJsb2NrLmJvZHkgPSB4LmJsb2NrLmJvZHkubWFwKCh5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZUV4cHJlc3Npb24oeSk7XG4gICAgICAgIH0pO1xuICAgICAgICB4LmhhbmRsZXIuYm9keS5ib2R5ID0geC5oYW5kbGVyLmJvZHkuYm9keS5tYXAoKHkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlRXhwcmVzc2lvbih5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB4O1xuICAgIH07XG4gICAgY29uc3QgZ2V0RXhwcmVzc2lvbnMgPSAoYXN0KSA9PiB7XG4gICAgICAgIGxldCBhc3RfY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGFzdCk7XG4gICAgICAgIGFzdF9jb3B5LmJvZHkgPSBhc3QuYm9keVxuICAgICAgICAgICAgLm1hcCgoeCkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoICh4LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFeHByZXNzaW9uU3RhdGVtZW50Jzoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZUV4cHJlc3Npb24oeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ1RyeVN0YXRlbWVudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VUcnlDYXRjaCh4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnSWZTdGF0ZW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlSWZTdGF0ZW1lbnQoeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ0NsYXNzRGVjbGFyYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZUNsYXNzKHgpO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0Z1bmN0aW9uRGVjbGFyYXRpb24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1doaWxlU3RhdGVtZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICdGb3JTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0ZvckluU3RhdGVtZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICdBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RvV2hpbGVTdGF0ZW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBsYWNlTG9vcFN0YXRlbWVudCh4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnU3dpdGNoU3RhdGVtZW50JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VTd2l0Y2hTdGF0ZW1lbnQoeCk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVtb3ZlSW5pdHNBbmRJbXBvcnRzKHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoKHgpID0+IHggIT09ICcnKTtcbiAgICAgICAgcmV0dXJuIGFzdF9jb3B5O1xuICAgIH07XG4gICAgcmV0dXJuIGdldEV4cHJlc3Npb25zKGFzdCk7XG59O1xuZXhwb3J0cy50cmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRyYW5zcGlsZSA9IHZvaWQgMDtcbmNvbnN0IGVzcHJpbWFfMSA9IHJlcXVpcmUoXCJlc3ByaW1hXCIpO1xuY29uc3QgZ2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi9nZW5lcmF0b3JcIik7XG5jb25zdCB0cmFuc3BpbGVfZGVmYXVsdF8xID0gcmVxdWlyZShcIi4vZGVmYXVsdHMvdHJhbnNwaWxlX2RlZmF1bHRcIik7XG5jb25zdCB0cmFuc2Zvcm1lcl8xID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtZXJcIik7XG4vKipcbiAqIFRoaXMgZmlsZSBjb2xsYXRlcyB0aGUgcGFyc2VyIHJldHVybnMgdGhlIGdlbmVyYXRlZCBjb2RlLlxuICogQHBhcmFtIGNvZGVcbiAqL1xuY29uc3QgdHJhbnNwaWxlID0gKGNvZGUsIG9wdGlvbnMgPSB0cmFuc3BpbGVfZGVmYXVsdF8xLmRlZmF1bHRfdHJhbnNwaWxlX29wdGlvbnMpID0+IHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0cmFuc3BpbGVfZGVmYXVsdF8xLmRlZmF1bHRfdHJhbnNwaWxlX29wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgICBsZXQgYXN0ID0gb3B0aW9ucy5wYXJzZV90eXBlID09ICdzY3JpcHQnID8gKDAsIGVzcHJpbWFfMS5wYXJzZVNjcmlwdCkoY29kZSkgOiAoMCwgZXNwcmltYV8xLnBhcnNlTW9kdWxlKShjb2RlKTtcbiAgICAgICAgbGV0IHRyYW5zZm9ybWVkX2FzdCA9ICgwLCB0cmFuc2Zvcm1lcl8xLnRyYW5zZm9ybWVyKShhc3QsIG9wdGlvbnMpO1xuICAgICAgICBsZXQgb3V0ID0gKDAsIGdlbmVyYXRvcl8xLmdlbmVyYXRvcikodHJhbnNmb3JtZWRfYXN0LCB7XG4gICAgICAgICAgICBvYmplY3RfbmFtZTogb3B0aW9ucy5vYmplY3RfbmFtZSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfY2FsbGVlczogb3B0aW9ucy5hZGRpdGlvbmFsX2NhbGxlZXMsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRocm93IGNvZGU7XG4gICAgfVxufTtcbmV4cG9ydHMudHJhbnNwaWxlID0gdHJhbnNwaWxlO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxFRENvbG91cnMgPSB2b2lkIDA7XG5leHBvcnRzLkxFRENvbG91cnMgPSBbJ3JlZCcsICdncmVlbicsICdibHVlJ107XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNJT1MgPSB2b2lkIDA7XG5jb25zdCBpc0lPUyA9ICgpID0+IHtcbiAgICB2YXIgaW9zUXVpcmtQcmVzZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXVkaW8gPSBuZXcgQXVkaW8oKTtcbiAgICAgICAgYXVkaW8udm9sdW1lID0gMC41O1xuICAgICAgICByZXR1cm4gYXVkaW8udm9sdW1lID09PSAxOyAvLyB2b2x1bWUgY2Fubm90IGJlIGNoYW5nZWQgZnJvbSBcIjFcIiBvbiBpT1MgMTIgYW5kIGJlbG93XG4gICAgfTtcbiAgICB2YXIgaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgaXNBcHBsZURldmljZSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJNYWNpbnRvc2hcIik7XG4gICAgdmFyIGlzVG91Y2hTY3JlZW4gPSBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPj0gMTsgLy8gdHJ1ZSBmb3IgaU9TIDEzIChhbmQgaG9wZWZ1bGx5IGJleW9uZClcbiAgICByZXR1cm4gaXNJT1MgfHwgKGlzQXBwbGVEZXZpY2UgJiYgKGlzVG91Y2hTY3JlZW4gfHwgaW9zUXVpcmtQcmVzZW50KCkpKTtcbn07XG5leHBvcnRzLmlzSU9TID0gaXNJT1M7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RyMmFiID0gZXhwb3J0cy5hYjJzdHIgPSB2b2lkIDA7XG5mdW5jdGlvbiBhYjJzdHIoYnVmKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoYnVmKSk7XG59XG5leHBvcnRzLmFiMnN0ciA9IGFiMnN0cjtcbmZ1bmN0aW9uIHN0cjJhYihzdHIpIHtcbiAgICB2YXIgYnVmID0gbmV3IEFycmF5QnVmZmVyKHN0ci5sZW5ndGgpO1xuICAgIHZhciBidWZWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICBmb3IgKHZhciBpID0gMCwgc3RyTGVuID0gc3RyLmxlbmd0aDsgaSA8IHN0ckxlbjsgaSsrKVxuICAgICAgICBidWZWaWV3W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMuc3RyMmFiID0gc3RyMmFiO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsYXNzZXMgPSB2b2lkIDA7XG5jb25zdCBqc3NfMSA9IHJlcXVpcmUoXCJqc3NcIik7XG5jb25zdCBqc3NfcHJlc2V0X2RlZmF1bHRfMSA9IHJlcXVpcmUoXCJqc3MtcHJlc2V0LWRlZmF1bHRcIik7XG5qc3NfMS5kZWZhdWx0LnNldHVwKCgwLCBqc3NfcHJlc2V0X2RlZmF1bHRfMS5kZWZhdWx0KSgpKTtcbmNvbnN0IHN0eWxlcyA9IHtcbiAgICBtZW51OiB7XG4gICAgICAgIGNvbG9yOiBcIiNiMmIyYjJiXCIsXG4gICAgICAgIGJhY2tncm91bmQ6IFwid2hpdGVcIixcbiAgICAgICAgcGFkZGluZzogXCIxMHB4IDE2cHggMTBweCAxNnB4XCIsXG4gICAgICAgIGZvbnRXZWlnaHQ6IFwibWVkaXVtXCIsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IDcsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiA3LFxuICAgICAgICBib3JkZXI6IFwiMC41cHggc29saWQgbGlnaHRncmF5XCIsXG4gICAgICAgIFwiJiAuZXNwLXRvb2xzLWhlYWRlci1iYXJcIjoge1xuICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwic3BhY2UtYmV0d2VlblwiLFxuICAgICAgICAgICAgXCImICpcIjoge1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIiYgZGl2XCI6IHtcbiAgICAgICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgIFwiJjpob3ZlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjA1KVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgaXRlbXM6IHtcbiAgICAgICAgY29sb3I6IFwiIzAwMFwiLFxuICAgICAgICBiYWNrZ3JvdW5kOiBcIndoaXRlXCIsXG4gICAgICAgIHBhZGRpbmc6IFwiNHB4IDhweCA0cHggOHB4XCIsXG4gICAgICAgIGRpc3BsYXk6IFwiZ3JpZFwiLFxuICAgICAgICBncmlkVGVtcGxhdGVDb2x1bW5zOiBcImZpdC1jb250ZW50KDApXCIsXG4gICAgICAgIGdyaWRUZW1wbGF0ZVJvd3M6IFwiZml0LWNvbnRlbnQoMClcIixcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDcsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDcsXG4gICAgICAgIGJvcmRlcjogXCIwLjVweCBzb2xpZCBsaWdodGdyYXlcIixcbiAgICAgICAgYm9yZGVyVG9wOiAwLFxuICAgICAgICBcIiYgcFwiOiB7XG4gICAgICAgICAgICBjb250ZW50OiBcIlNlbGVjdCBhIGNvbm5lY3Rpb24gbWV0aG9kIHRvIHBhaXIgeW91ciBkZXZpY2VcIixcbiAgICAgICAgICAgIGdyaWRBcmVhOiBcIjEgLyAxIC8gMiAvIDNcIixcbiAgICAgICAgICAgIGZvbnRTaXplOiAxMixcbiAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiAxMCxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDUsXG4gICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICBjb2xvcjogXCIjN0Q3RDdEXCIsXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBlbmRwb2ludHM6IHtcbiAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgaGVpZ2h0OiAxNTAsXG4gICAgICAgIG1hcmdpbjogXCI0cHggMHB4IDRweCAwcHhcIixcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDMwLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IDMwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDEwLFxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgICAgXCImOmhvdmVyXCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IFwicmdiYSgwLDAsMCwwLjA1KVwiLFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLmVzcC10b29scy1pY29uc1wiOiB7XG4gICAgICAgICAgICB3aWR0aDogNDgsXG4gICAgICAgICAgICBoZWlnaHQ6IDQ4LFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLmVzcC10b29scy1uYW1lXCI6IHtcbiAgICAgICAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgICAgICAgIGZvbnRXZWlnaHQ6IDUwMCxcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IDgsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiA0LFxuICAgICAgICB9LFxuICAgICAgICBcIiYgLmVzcC10b29scy1kZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBmb250V2VpZ2h0OiAzMDAsXG4gICAgICAgICAgICBmb250U2l6ZTogMTIsXG4gICAgICAgICAgICBjb2xvcjogXCIjNjY2XCIsXG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5leHBvcnRzLmNsYXNzZXMgPSBqc3NfMS5kZWZhdWx0LmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzKS5hdHRhY2goKS5jbGFzc2VzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn07XG52YXIgX1VBUlRDbGFzc19pbnN0YW5jZXMsIF9VQVJUQ2xhc3NfZGVidWcsIF9VQVJUQ2xhc3NfZmxvd0NvbnRyb2wsIF9VQVJUQ2xhc3NfcXVldWUsIF9VQVJUQ2xhc3Nfc2VudENodW5rcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBfVUFSVENsYXNzX2VuZHBvaW50cywgX1VBUlRDbGFzc19oYW5kbGVRdWV1ZSwgX1VBUlRDbGFzc19sb2csIF9VQVJUQ2xhc3NfY2hlY2tJZlN1cHBvcnRlZDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudWFydCA9IHZvaWQgMDtcbmNvbnN0IHN0cmluZ0FycmF5QnVmZmVyXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzL3N0cmluZ0FycmF5QnVmZmVyXCIpO1xuY29uc3QgbW9kYWxfMSA9IHJlcXVpcmUoXCIuL3N0eWxlcy9tb2RhbFwiKTtcbmNvbnN0IGlzSU9TXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzL2lzSU9TXCIpO1xuY2xhc3MgVUFSVENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLmFkZCh0aGlzKTtcbiAgICAgICAgX1VBUlRDbGFzc19kZWJ1Zy5zZXQodGhpcywgMyk7XG4gICAgICAgIHRoaXMuaXNCdXN5ID0gZmFsc2U7XG4gICAgICAgIF9VQVJUQ2xhc3NfZmxvd0NvbnRyb2wuc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICBfVUFSVENsYXNzX3F1ZXVlLnNldCh0aGlzLCBbXSk7XG4gICAgICAgIF9VQVJUQ2xhc3Nfc2VudENodW5rcy5zZXQodGhpcywgW10pO1xuICAgICAgICBfVUFSVENsYXNzX2Nvbm5lY3Rpb24uc2V0KHRoaXMsIHZvaWQgMCk7XG4gICAgICAgIF9VQVJUQ2xhc3NfZW5kcG9pbnRzLnNldCh0aGlzLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXZWIgQmx1ZXRvb3RoXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQmx1ZXRvb3RoIExFIGRldmljZXNcIixcbiAgICAgICAgICAgICAgICBzdmc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjQ4XCIgaGVpZ2h0PVwiNDhcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiLz48cGF0aCBkPVwiTTE3LjcxIDcuNzFMMTIgMmgtMXY3LjU5TDYuNDEgNSA1IDYuNDEgMTAuNTkgMTIgNSAxNy41OSA2LjQxIDE5IDExIDE0LjQxVjIyaDFsNS43MS01LjcxLTQuMy00LjI5IDQuMy00LjI5ek0xMyA1LjgzbDEuODggMS44OEwxMyA5LjU5VjUuODN6bTEuODggMTAuNDZMMTMgMTguMTd2LTMuNzZsMS44OCAxLjg4elwiIGZpbGw9XCIjZDJkMmQyXCIvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgaXNTdXBwb3J0ZWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5wbGF0Zm9ybS5pbmRleE9mKFwiV2luXCIpID49IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJDaHJvbWUvNTRcIikgPj0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIkNocm9tZS81NVwiKSA+PSAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiQ2hyb21lLzU2XCIpID49IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQ2hyb21lIDw1NiBpbiBXaW5kb3dzIGhhcyBuYXZpZ2F0b3IuYmx1ZXRvb3RoIGJ1dCBpdCdzIG5vdCBpbXBsZW1lbnRlZCBwcm9wZXJseVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCA9PSBcImh0dHA6XCIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPSBcImxvY2FsaG9zdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU2VydmluZyBvZmYgSFRUUCAobm90IEhUVFBTKSAtIFdlYiBCbHVldG9vdGggbm90IGVuYWJsZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5ibHVldG9vdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlPUyA9ICgwLCBpc0lPU18xLmlzSU9TKSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaU9TKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJUbyB1c2UgV2ViIEJsdWV0b290aCBvbiBpT1MgeW91J2xsIG5lZWQgdGhlIFdlYkJMRSBBcHAuXFxuUGxlYXNlIGdvIHRvIGh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS91cy9hcHAvd2ViYmxlL2lkMTE5MzUzMTA3MyB0byBkb3dubG9hZCBpdC5cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlRoaXMgV2ViIEJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IFdlYiBCbHVldG9vdGguXFxuUGxlYXNlIHNlZSBodHRwczovL3d3dy5lc3BydWluby5jb20vUHVjay5qcytRdWljaytTdGFydFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb25uZWN0OiAoY29ubmVjdGlvbiwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIE5PUkRJQ19TRVJWSUNFID0gXCI2ZTQwMDAwMS1iNWEzLWYzOTMtZTBhOS1lNTBlMjRkY2NhOWVcIjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIE5PUkRJQ19UWCA9IFwiNmU0MDAwMDItYjVhMy1mMzkzLWUwYTktZTUwZTI0ZGNjYTllXCI7XG4gICAgICAgICAgICAgICAgICAgIHZhciBOT1JESUNfUlggPSBcIjZlNDAwMDAzLWI1YTMtZjM5My1lMGE5LWU1MGUyNGRjY2E5ZVwiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgREVGQVVMVF9DSFVOS1NJWkUgPSAyMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRklORCBPVVQgQ09SUkVDVCBUWVBFUyBGT1IgVEhJU1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnRTZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidFNlcnZpY2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eENoYXJhY3RlcmlzdGljO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcnhDaGFyYWN0ZXJpc3RpYztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR4RGF0YVF1ZXVlID0gW107XG4gICAgICAgICAgICAgICAgICAgIHZhciBmbG93Q29udHJvbFhPRkYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNodW5rU2l6ZSA9IERFRkFVTFRfQ0hVTktTSVpFO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlzT3BlbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVtaXQoXCJjbG9zZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnRTZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidFNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRTZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHhDaGFyYWN0ZXJpc3RpYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByeENoYXJhY3RlcmlzdGljID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLndyaXRlID0gKGRhdGEsIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eERhdGFRdWV1ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgd3JpdGVDaHVuayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxvd0NvbnRyb2xYT0ZGKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZsb3cgY29udHJvbCAtIHRyeSBhZ2FpbiBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHdyaXRlQ2h1bmssIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bms7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0eERhdGFRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHhJdGVtID0gdHhEYXRhUXVldWVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR4SXRlbS5kYXRhLmxlbmd0aCA8PSBjaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmsgPSB0eEl0ZW0uZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHhJdGVtLmRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVuayA9IHR4SXRlbS5kYXRhLnN1YnN0cigwLCBjaHVua1NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eEl0ZW0uZGF0YSA9IHR4SXRlbS5kYXRhLnN1YnN0cihjaHVua1NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDIsIFwiU2VuZGluZyBcIiArIEpTT04uc3RyaW5naWZ5KGNodW5rKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX3NlbnRDaHVua3MsIFwiZlwiKS5wdXNoKEpTT04uc3RyaW5naWZ5KGNodW5rKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHhDaGFyYWN0ZXJpc3RpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAud3JpdGVWYWx1ZSgoMCwgc3RyaW5nQXJyYXlCdWZmZXJfMS5zdHIyYWIpKGNodW5rKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMywgXCJTZW50XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXR4SXRlbS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eERhdGFRdWV1ZS5zaGlmdCgpOyAvLyByZW1vdmUgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHhJdGVtLmNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4SXRlbS5jYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHhJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQ2h1bmsoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIlNFTkQgRVJST1I6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eERhdGFRdWV1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uaXNPcGVuICYmICFjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUNodW5rKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5ibHVldG9vdGhcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXF1ZXN0RGV2aWNlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWVQcmVmaXg6IFwiUHVjay5qc1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lUHJlZml4OiBcIlBpeGwuanNcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZVByZWZpeDogXCJNREJUNDJRXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWVQcmVmaXg6IFwiQmFuZ2xlXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWVQcmVmaXg6IFwiUnV1dmlUYWdcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbmFtZVByZWZpeDogXCJpVHJhY2tlclwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lUHJlZml4OiBcIlRoaW5neVwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBuYW1lUHJlZml4OiBcIkVzcHJ1aW5vXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHNlcnZpY2VzOiBbTk9SRElDX1NFUlZJQ0VdIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxTZXJ2aWNlczogW05PUkRJQ19TRVJWSUNFXSxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChkZXZpY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIkRldmljZSBOYW1lOiAgICAgICBcIiArIGRldmljZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIkRldmljZSBJRDogICAgICAgICBcIiArIGRldmljZS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXYXMgZGVwcmVjYXRlZDogU2hvdWxkIHVzZSBnZXRQcmltYXJ5U2VydmljZXMgZm9yIHRoaXMgaW4gZnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZygnQlQ+ICBEZXZpY2UgVVVJRHM6ICAgICAgJyArIGRldmljZS51dWlkcy5qb2luKCdcXG4nICsgJyAnLnJlcGVhdCgyMSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZS5hZGRFdmVudExpc3RlbmVyKFwiZ2F0dHNlcnZlcmRpc2Nvbm5lY3RlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDEsIFwiRGlzY29ubmVjdGVkIChnYXR0c2VydmVyZGlzY29ubmVjdGVkKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXZpY2UuZ2F0dC5jb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoc2VydmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMSwgXCJDb25uZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBidFNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXJ2ZXIuZ2V0UHJpbWFyeVNlcnZpY2UoTk9SRElDX1NFUlZJQ0UpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAyLCBcIkdvdCBzZXJ2aWNlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnRTZXJ2aWNlID0gc2VydmljZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBidFNlcnZpY2UuZ2V0Q2hhcmFjdGVyaXN0aWMoTk9SRElDX1JYKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChjaGFyYWN0ZXJpc3RpYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnhDaGFyYWN0ZXJpc3RpYyA9IGNoYXJhY3RlcmlzdGljO1xuICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDIsIFwiUlggY2hhcmFjdGVyaXN0aWM6XCIgKyBKU09OLnN0cmluZ2lmeShyeENoYXJhY3RlcmlzdGljKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByeENoYXJhY3RlcmlzdGljLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFyYWN0ZXJpc3RpY3ZhbHVlY2hhbmdlZFwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YXZpZXcgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGF2aWV3LmJ5dGVMZW5ndGggPiBjaHVua1NpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDIsIFwiUmVjZWl2ZWQgcGFja2V0IG9mIGxlbmd0aCBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhdmlldy5ieXRlTGVuZ3RoICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLCBpbmNyZWFzaW5nIGNodW5rIHNpemVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rU2l6ZSA9IGRhdGF2aWV3LmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfZmxvd0NvbnRyb2wsIFwiZlwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGF2aWV3LmJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoID0gZGF0YXZpZXcuZ2V0VWludDgoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT0gMTcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBYT05cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMiwgXCJYT04gcmVjZWl2ZWQgPT4gcmVzdW1lIHVwbG9hZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG93Q29udHJvbFhPRkYgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PSAxOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFhPRkZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMiwgXCJYT0ZGIHJlY2VpdmVkID0+IHBhdXNlIHVwbG9hZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG93Q29udHJvbFhPRkYgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAoMCwgc3RyaW5nQXJyYXlCdWZmZXJfMS5hYjJzdHIpKGRhdGF2aWV3LmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDMsIFwiUmVjZWl2ZWQgXCIgKyBKU09OLnN0cmluZ2lmeShzdHIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmVtaXQoXCJkYXRhXCIsIHN0cik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByeENoYXJhY3RlcmlzdGljLnN0YXJ0Tm90aWZpY2F0aW9ucygpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ0U2VydmljZS5nZXRDaGFyYWN0ZXJpc3RpYyhOT1JESUNfVFgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKGNoYXJhY3RlcmlzdGljKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eENoYXJhY3RlcmlzdGljID0gY2hhcmFjdGVyaXN0aWM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMiwgXCJUWCBjaGFyYWN0ZXJpc3RpYzpcIiArIEpTT04uc3RyaW5naWZ5KHR4Q2hhcmFjdGVyaXN0aWMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24udHhJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlzT3BlbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0J1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1VBUlRDbGFzc19xdWV1ZSwgW10sIFwiZlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5lbWl0KFwib3BlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGhhZCBhbnkgd3JpdGVzIHF1ZXVlZCwgZG8gdGhlbSBub3dcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ud3JpdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIkVSUk9SOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFNlcmlhbFwiLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlVTQiBjb25uZWN0ZWQgZGV2aWNlc1wiLFxuICAgICAgICAgICAgICAgIHN2ZzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNDhcIiBoZWlnaHQ9XCI0OFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIvPjxwYXRoIGQ9XCJNMTUgN3Y0aDF2MmgtM1Y1aDJsLTMtNC0zIDRoMnY4SDh2LTIuMDdjLjctLjM3IDEuMi0xLjA4IDEuMi0xLjkzIDAtMS4yMS0uOTktMi4yLTIuMi0yLjItMS4yMSAwLTIuMi45OS0yLjIgMi4yIDAgLjg1LjUgMS41NiAxLjIgMS45M1YxM2MwIDEuMTEuODkgMiAyIDJoM3YzLjA1Yy0uNzEuMzctMS4yIDEuMS0xLjIgMS45NSAwIDEuMjIuOTkgMi4yIDIuMiAyLjIgMS4yMSAwIDIuMi0uOTggMi4yLTIuMiAwLS44NS0uNDktMS41OC0xLjItMS45NVYxNWgzYzEuMTEgMCAyLS44OSAyLTJ2LTJoMVY3aC00elwiIGZpbGw9XCIjZDJkMmQyXCIvPjwvc3ZnPicsXG4gICAgICAgICAgICAgICAgaXNTdXBwb3J0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuYXZpZ2F0b3Iuc2VyaWFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTm8gbmF2aWdhdG9yLnNlcmlhbCAtIFdlYiBTZXJpYWwgbm90IGVuYWJsZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT0gXCJodHRwOlwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT0gXCJsb2NhbGhvc3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNlcnZpbmcgb2ZmIEhUVFAgKG5vdCBIVFRQUykgLSBXZWIgU2VyaWFsIG5vdCBlbmFibGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29ubmVjdDogKGNvbm5lY3Rpb24sIGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXJpYWxQb3J0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXNjb25uZWN0ZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmlzT3BlbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3Rpb24uaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDEsIFwiRGlzY29ubmVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5lbWl0KFwiY2xvc2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFBhc3MgVVNCIHZlbmRvciBhbmQgcHJvZHVjdCBJRCBmaWx0ZXIgd2hlbiBzdXBwb3J0ZWQgYnkgQ2hyb21lLlxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VyaWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVxdWVzdFBvcnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHBvcnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIkNvbm5lY3RpbmcgdG8gc2VyaWFsIHBvcnRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxQb3J0ID0gcG9ydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3J0Lm9wZW4oeyBiYXVkUmF0ZTogMTE1MjAwIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZExvb3AgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IHNlcmlhbFBvcnQucmVhZGFibGUuZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklORCBPVVQgQ09SUkVDVCBUWVBFUyBGT1IgVEhJU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkKCkudGhlbigoeyB2YWx1ZSwgZG9uZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAoMCwgc3RyaW5nQXJyYXlCdWZmZXJfMS5hYjJzdHIpKHZhbHVlLmJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMywgXCJSZWNlaXZlZCBcIiArIEpTT04uc3RyaW5naWZ5KHN0cikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5lbWl0KFwiZGF0YVwiLCBzdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRMb29wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkTG9vcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDEsIFwiU2VyaWFsIGNvbm5lY3RlZC4gUmVjZWl2aW5nIGRhdGEuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLnR4SW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5pc09wZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDAsIFwiRVJST1I6IFwiICsgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VyaWFsUG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcmlhbFBvcnQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpYWxQb3J0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzY29ubmVjdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ud3JpdGUgPSAoZGF0YSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cml0ZXIgPSBzZXJpYWxQb3J0LndyaXRhYmxlLmdldFdyaXRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogcHJvZ3Jlc3M/XG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud3JpdGUoKDAsIHN0cmluZ0FycmF5QnVmZmVyXzEuc3RyMmFiKShkYXRhKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDAsIFwiU0VORCBFUlJPUjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuREFUQV9XQUlUX1RJTUUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGF0YVdhaXRUaW1lO1xuICAgIH1cbiAgICBjb25uZWN0KGNhbGxiYWNrKSB7XG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCB7XG4gICAgICAgICAgICBvbjogZnVuY3Rpb24gKGV2dCwgY2IpIHtcbiAgICAgICAgICAgICAgICB0aGlzW1wib25cIiArIGV2dF0gPSBjYjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbWl0OiBmdW5jdGlvbiAoZXZ0LCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNbXCJvblwiICsgZXZ0XSlcbiAgICAgICAgICAgICAgICAgICAgdGhpc1tcIm9uXCIgKyBldnRdKGRhdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzT3BlbjogZmFsc2UsXG4gICAgICAgICAgICBpc09wZW5pbmc6IHRydWUsXG4gICAgICAgICAgICB0eEluUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgICB9LCBcImZcIik7XG4gICAgICAgIC8vIG1vZGFsXG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcInBvc2l0aW9uOmFic29sdXRlO3RvcDowcHg7bGVmdDowcHg7cmlnaHQ6MHB4O2JvdHRvbTowcHg7b3BhY2l0eTowLjU7ei1pbmRleDoxMDA7YmFja2dyb3VuZDpibGFjaztcIik7XG4gICAgICAgIC8vIG1lbnVcbiAgICAgICAgdmFyIG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtZW51LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7dG9wOjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7Zm9udC1mYW1pbHk6IFNhbnMtU2VyaWY7ei1pbmRleDoxMDE7XCIpO1xuICAgICAgICB2YXIgbWVudXRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbWVudXRpdGxlLmNsYXNzTGlzdC5hZGQobW9kYWxfMS5jbGFzc2VzLm1lbnUpO1xuICAgICAgICB2YXIgbWVudUNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtZW51Q29udGVudC5jbGFzc0xpc3QuYWRkKFwiZXNwLXRvb2xzLWhlYWRlci1iYXJcIik7XG4gICAgICAgIGxldCBtZW51VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgbWVudVRpdGxlLmlubmVyVGV4dCA9IFwiQ29ubmVjdFwiO1xuICAgICAgICBtZW51Q29udGVudC5hcHBlbmRDaGlsZChtZW51VGl0bGUpO1xuICAgICAgICBsZXQgbWVudUNsb3NlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbWVudUNsb3NlLmlubmVySFRNTCA9XG4gICAgICAgICAgICAnPHN2ZyBpZD1cImVzcC10b29scy1jbG9zZS1tb2RhbFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIwXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGhlaWdodD1cIjFlbVwiIHdpZHRoPVwiMWVtXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiIzAwMFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTcsNyBMMTcsMTcgTTcsMTcgTDE3LDdcIj48L3BhdGg+PC9zdmc+JztcbiAgICAgICAgbWVudUNvbnRlbnQuYXBwZW5kQ2hpbGQobWVudUNsb3NlKTtcbiAgICAgICAgbWVudXRpdGxlLmFwcGVuZENoaWxkKG1lbnVDb250ZW50KTtcbiAgICAgICAgbWVudS5hcHBlbmRDaGlsZChtZW51dGl0bGUpO1xuICAgICAgICB2YXIgaXRlbXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBpdGVtcy5jbGFzc0xpc3QuYWRkKG1vZGFsXzEuY2xhc3Nlcy5pdGVtcyk7XG4gICAgICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCJTZWxlY3QgYSBjb25uZWN0aW9uIG1ldGhvZCB0byBwYWlyIHlvdXIgZGV2aWNlXCI7XG4gICAgICAgIGl0ZW1zLmFwcGVuZENoaWxkKHApO1xuICAgICAgICBtZW51LmFwcGVuZENoaWxkKGl0ZW1zKTtcbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2VuZHBvaW50cywgXCJmXCIpLmZvckVhY2goKGVuZHBvaW50KSA9PiB7XG4gICAgICAgICAgICB2YXIgc3VwcG9ydGVkID0gZW5kcG9pbnQuaXNTdXBwb3J0ZWQoKTtcbiAgICAgICAgICAgIGlmIChzdXBwb3J0ZWQgIT09IHRydWUpXG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDAsIGVuZHBvaW50Lm5hbWUgKyBcIiBub3Qgc3VwcG9ydGVkLCBcIiArIHN1cHBvcnRlZCk7XG4gICAgICAgICAgICB2YXIgZXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZXAuY2xhc3NMaXN0LmFkZChtb2RhbF8xLmNsYXNzZXMuZW5kcG9pbnRzKTtcbiAgICAgICAgICAgIGVwLmlubmVySFRNTCA9XG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlc3AtdG9vbHMtaWNvbnNcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQuc3ZnICtcbiAgICAgICAgICAgICAgICAgICAgXCI8L2Rpdj5cIiArXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZXNwLXRvb2xzLW5hbWVcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnQubmFtZSArXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCIgK1xuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVzcC10b29scy1kZXNjcmlwdGlvblwiPicgK1xuICAgICAgICAgICAgICAgICAgICBlbmRwb2ludC5kZXNjcmlwdGlvbiArXG4gICAgICAgICAgICAgICAgICAgIFwiPC9kaXY+XCI7XG4gICAgICAgICAgICBlcC5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRTZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBlbmRwb2ludC5jb25uZWN0KF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIiksIGNhbGxiYWNrKSwgXCJmXCIpO1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobWVudSk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpdGVtcy5hcHBlbmRDaGlsZChlcCk7XG4gICAgICAgIH0pO1xuICAgICAgICBtZW51Q2xvc2Uub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobWVudSk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGUpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5pc09wZW5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1lbnUpO1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKTtcbiAgICB9XG4gICAgZ2V0V3JpdHRlbkRhdGEoKSB7XG4gICAgICAgIGxldCBzdHJfY2h1bmtzID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX3NlbnRDaHVua3MsIFwiZlwiKS5qb2luKFwiXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHJlc29sdmUoc3RyX2NodW5rcykpO1xuICAgIH1cbiAgICB3cml0ZShkYXRhLCBjYWxsYmFjaywgY2FsbGJhY2tOZXdsaW5lKSB7XG4gICAgICAgIGlmICghX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfY2hlY2tJZlN1cHBvcnRlZCkuY2FsbCh0aGlzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuaXNCdXN5KSB7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMywgXCJCdXN5IC0gYWRkaW5nIHdyaXRlIHRvIHF1ZXVlXCIpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX3F1ZXVlLCBcImZcIikucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ3cml0ZVwiLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrTmV3bGluZTogY2FsbGJhY2tOZXdsaW5lLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNiVGltZW91dDtcbiAgICAgICAgY29uc3Qgb25Xcml0dGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrTmV3bGluZSkge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuY2IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdMaW5lSWR4ID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5yZWNlaXZlZC5pbmRleE9mKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3TGluZUlkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikucmVjZWl2ZWQuc3Vic3RyKDAsIG5ld0xpbmVJZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5yZWNlaXZlZCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikucmVjZWl2ZWQuc3Vic3RyKG5ld0xpbmVJZHggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuY2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2JUaW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChjYlRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2JUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0J1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2hhbmRsZVF1ZXVlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIGFueSByZWNlaXZlZCBkYXRhIGlmIHdlIGhhdmUgYSBjYWxsYmFjay4uLlxuICAgICAgICAgICAgdmFyIG1heFRpbWUgPSAzMDA7IC8vIDMwIHNlYyAtIE1heCB0aW1lIHdlIHdhaXQgaW4gdG90YWwsIGV2ZW4gaWYgZ2V0dGluZyBkYXRhXG4gICAgICAgICAgICB2YXIgZGF0YVdhaXRUaW1lID0gY2FsbGJhY2tOZXdsaW5lXG4gICAgICAgICAgICAgICAgPyAxMDAgLyoxMCBzZWMgIGlmIHdhaXRpbmcgZm9yIG5ld2xpbmUqL1xuICAgICAgICAgICAgICAgIDogMDsgLyozMDBtcyovXG4gICAgICAgICAgICB2YXIgbWF4RGF0YVRpbWUgPSBkYXRhV2FpdFRpbWU7IC8vIG1heCB0aW1lIHdlIHdhaXQgYWZ0ZXIgaGF2aW5nIHJlY2VpdmVkIGRhdGFcbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2JUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlmIChtYXhUaW1lKVxuICAgICAgICAgICAgICAgICAgICBtYXhUaW1lLS07XG4gICAgICAgICAgICAgICAgaWYgKG1heERhdGFUaW1lKVxuICAgICAgICAgICAgICAgICAgICBtYXhEYXRhVGltZS0tO1xuICAgICAgICAgICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLmhhZERhdGEpXG4gICAgICAgICAgICAgICAgICAgIG1heERhdGFUaW1lID0gZGF0YVdhaXRUaW1lO1xuICAgICAgICAgICAgICAgIGlmIChtYXhEYXRhVGltZSAmJiBtYXhUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiVGltZW91dCA9IHNldFRpbWVvdXQodGltZW91dCwgMTAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuY2IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja05ld2xpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMiwgXCJ3cml0ZSB3YWl0aW5nIGZvciBuZXdsaW5lIHRpbWVkIG91dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5yZWNlaXZlZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNCdXN5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2hhbmRsZVF1ZXVlKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLnJlY2VpdmVkID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5oYWREYXRhID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2JUaW1lb3V0ID0gc2V0VGltZW91dCh0aW1lb3V0LCAxMDApO1xuICAgICAgICB9O1xuICAgICAgICBpZiAoX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKSAmJlxuICAgICAgICAgICAgKF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuaXNPcGVuIHx8IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikuaXNPcGVuaW5nKSkge1xuICAgICAgICAgICAgaWYgKCFfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLnR4SW5Qcm9ncmVzcylcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLnJlY2VpdmVkID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuaXNCdXN5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLndyaXRlKGRhdGEsIG9uV3JpdHRlbik7XG4gICAgICAgIH1cbiAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIHRoaXMuY29ubmVjdCgodWFydCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF1YXJ0KSB7XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIHVuZGVmaW5lZCwgXCJmXCIpO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5yZWNlaXZlZCA9IFwiXCI7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLm9uKFwiZGF0YVwiLCAoZCkgPT4ge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikucmVjZWl2ZWQgKz0gZDtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLmhhZERhdGEgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLmNiKVxuICAgICAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLmNiKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpLm9uKFwiY2xvc2VcIiwgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgdW5kZWZpbmVkLCBcImZcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaXNCdXN5ID0gdHJ1ZTtcbiAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19jb25uZWN0aW9uLCBcImZcIikud3JpdGUoZGF0YSwgb25Xcml0dGVuKTtcbiAgICAgICAgfSksIFwiZlwiKTtcbiAgICB9XG4gICAgZXZhbChleHByLCBjYikge1xuICAgICAgICBpZiAoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2NoZWNrSWZTdXBwb3J0ZWQpLmNhbGwodGhpcykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmlzQnVzeSkge1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2luc3RhbmNlcywgXCJtXCIsIF9VQVJUQ2xhc3NfbG9nKS5jYWxsKHRoaXMsIDMsIFwiQnVzeSAtIGFkZGluZyBldmFsIHRvIHF1ZXVlXCIpO1xuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX3F1ZXVlLCBcImZcIikucHVzaCh7IHR5cGU6IFwiZXZhbFwiLCBleHByOiBleHByLCBjYjogY2IgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0ZShcIlxceDEwZXZhbChwcm9jZXNzLmVudi5DT05TT0xFKS5wcmludGxuKEpTT04uc3RyaW5naWZ5KFwiICsgZXhwciArIFwiKSlcXG5cIiwgKGQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGQudHJpbSgpKTtcbiAgICAgICAgICAgICAgICBjYihqc29uLCBcInN1Y2Nlc3NcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIlVuYWJsZSB0byBkZWNvZGUgXCIgKyBKU09OLnN0cmluZ2lmeShkKSArIFwiLCBnb3QgXCIgKyBlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIFwiZmFpbGVkXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0cnVlIC8qY2FsbGJhY2tOZXdsaW5lKi8pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgc2V0VGltZShjYikge1xuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBjbWQgPSBcInNldFRpbWUoXCIgKyBkLmdldFRpbWUoKSAvIDEwMDAgKyBcIik7XCI7XG4gICAgICAgIGNtZCArPVxuICAgICAgICAgICAgXCJpZiAoRS5zZXRUaW1lWm9uZSkgRS5zZXRUaW1lWm9uZShcIiArXG4gICAgICAgICAgICAgICAgZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gLTYwICtcbiAgICAgICAgICAgICAgICBcIik7XFxuXCI7XG4gICAgICAgIHRoaXMud3JpdGUoY21kLCBjYik7XG4gICAgfVxuICAgIGlzQ29ubmVjdGVkKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXRDb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKTtcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmIChfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiwgXCJmXCIpKVxuICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX2Nvbm5lY3Rpb24sIFwiZlwiKS5jbG9zZSgpO1xuICAgIH1cbn1cbl9VQVJUQ2xhc3NfZGVidWcgPSBuZXcgV2Vha01hcCgpLCBfVUFSVENsYXNzX2Zsb3dDb250cm9sID0gbmV3IFdlYWtNYXAoKSwgX1VBUlRDbGFzc19xdWV1ZSA9IG5ldyBXZWFrTWFwKCksIF9VQVJUQ2xhc3Nfc2VudENodW5rcyA9IG5ldyBXZWFrTWFwKCksIF9VQVJUQ2xhc3NfY29ubmVjdGlvbiA9IG5ldyBXZWFrTWFwKCksIF9VQVJUQ2xhc3NfZW5kcG9pbnRzID0gbmV3IFdlYWtNYXAoKSwgX1VBUlRDbGFzc19pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfVUFSVENsYXNzX2hhbmRsZVF1ZXVlID0gZnVuY3Rpb24gX1VBUlRDbGFzc19oYW5kbGVRdWV1ZSgpIHtcbiAgICBpZiAoIV9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19xdWV1ZSwgXCJmXCIpLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBxID0gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfVUFSVENsYXNzX3F1ZXVlLCBcImZcIikuc2hpZnQoKTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMywgXCJFeGVjdXRpbmcgXCIgKyBKU09OLnN0cmluZ2lmeShxKSArIFwiIGZyb20gcXVldWVcIik7XG4gICAgaWYgKHEudHlwZSA9PSBcImV2YWxcIilcbiAgICAgICAgdGhpcy5ldmFsKHEuZXhwciwgcS5jYik7XG4gICAgZWxzZSBpZiAocS50eXBlID09IFwid3JpdGVcIilcbiAgICAgICAgdGhpcy53cml0ZShxLmRhdGEsIHEuY2FsbGJhY2ssIHEuY2FsbGJhY2tOZXdsaW5lKTtcbiAgICBlbHNlXG4gICAgICAgIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX1VBUlRDbGFzc19pbnN0YW5jZXMsIFwibVwiLCBfVUFSVENsYXNzX2xvZykuY2FsbCh0aGlzLCAxLCBcIlVua25vd24gcXVldWUgaXRlbSBcIiArIEpTT04uc3RyaW5naWZ5KHEpKTtcbn0sIF9VQVJUQ2xhc3NfbG9nID0gZnVuY3Rpb24gX1VBUlRDbGFzc19sb2cobGV2ZWwsIHMpIHtcbiAgICBsZXZlbCA8PSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfZGVidWcsIFwiZlwiKSAmJiBjb25zb2xlLmxvZyhcIjxVQVJUPiBcIiArIHMpO1xufSwgX1VBUlRDbGFzc19jaGVja0lmU3VwcG9ydGVkID0gZnVuY3Rpb24gX1VBUlRDbGFzc19jaGVja0lmU3VwcG9ydGVkKCkge1xuICAgIHZhciBhbnlTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfZW5kcG9pbnRzLCBcImZcIikuZm9yRWFjaCgoZW5kcG9pbnQpID0+IHtcbiAgICAgICAgdmFyIHN1cHBvcnRlZCA9IGVuZHBvaW50LmlzU3VwcG9ydGVkKCk7XG4gICAgICAgIGlmIChzdXBwb3J0ZWQgPT09IHRydWUpXG4gICAgICAgICAgICBhbnlTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9VQVJUQ2xhc3NfaW5zdGFuY2VzLCBcIm1cIiwgX1VBUlRDbGFzc19sb2cpLmNhbGwodGhpcywgMCwgZW5kcG9pbnQubmFtZSArIFwiIG5vdCBzdXBwb3J0ZWQsIFwiICsgc3VwcG9ydGVkKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYW55U3VwcG9ydGVkO1xufTtcbmxldCB1YXJ0ID0gbmV3IFVBUlRDbGFzcygpO1xuZXhwb3J0cy51YXJ0ID0gdWFydDtcbiIsImltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXknO1xuXG4vLyBFeHBvcnQgamF2YXNjcmlwdCBzdHlsZSBhbmQgY3NzIHN0eWxlIHZlbmRvciBwcmVmaXhlcy5cbnZhciBqcyA9ICcnO1xudmFyIGNzcyA9ICcnO1xudmFyIHZlbmRvciA9ICcnO1xudmFyIGJyb3dzZXIgPSAnJztcbnZhciBpc1RvdWNoID0gaXNJbkJyb3dzZXIgJiYgJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBXZSBzaG91bGQgbm90IGRvIGFueXRoaW5nIGlmIHJlcXVpcmVkIHNlcnZlcnNpZGUuXG5cbmlmIChpc0luQnJvd3Nlcikge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIG1zOiAnLW1zLScsXG4gICAgTzogJy1vLScsXG4gICAgV2Via2l0OiAnLXdlYmtpdC0nXG4gIH07XG5cbiAgdmFyIF9kb2N1bWVudCRjcmVhdGVFbGVtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKSxcbiAgICAgIHN0eWxlID0gX2RvY3VtZW50JGNyZWF0ZUVsZW1lLnN0eWxlO1xuXG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIEVkZ2UgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJ21zSHlwaGVucycgaW4gc3R5bGUpIHtcbiAgICBqcyA9ICdtcyc7XG4gICAgY3NzID0ganNDc3NNYXAubXM7XG4gICAgYnJvd3NlciA9ICdlZGdlJztcbiAgfSAvLyBDb3JyZWN0bHkgZGV0ZWN0IHRoZSBTYWZhcmkgYnJvd3Nlci5cblxuXG4gIGlmIChqcyA9PT0gJ1dlYmtpdCcgJiYgJy1hcHBsZS10cmFpbGluZy13b3JkJyBpbiBzdHlsZSkge1xuICAgIHZlbmRvciA9ICdhcHBsZSc7XG4gIH1cbn1cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZywgdmVuZG9yOiBTdHJpbmcsIGJyb3dzZXI6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxudmFyIHByZWZpeCA9IHtcbiAganM6IGpzLFxuICBjc3M6IGNzcyxcbiAgdmVuZG9yOiB2ZW5kb3IsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGlzVG91Y2g6IGlzVG91Y2hcbn07XG5cbi8qKlxuICogVGVzdCBpZiBhIGtleWZyYW1lIGF0LXJ1bGUgc2hvdWxkIGJlIHByZWZpeGVkIG9yIG5vdFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB2ZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkS2V5ZnJhbWVzKGtleSkge1xuICAvLyBLZXlmcmFtZXMgaXMgYWxyZWFkeSBwcmVmaXhlZC4gZS5nLiBrZXkgPSAnQC13ZWJraXQta2V5ZnJhbWVzIGEnXG4gIGlmIChrZXlbMV0gPT09ICctJykgcmV0dXJuIGtleTsgLy8gTm8gbmVlZCB0byBwcmVmaXggSUUvRWRnZS4gT2xkZXIgYnJvd3NlcnMgd2lsbCBpZ25vcmUgdW5zdXBwb3J0ZWQgcnVsZXMuXG4gIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1rZXlmcmFtZXNcblxuICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4ga2V5O1xuICByZXR1cm4gXCJAXCIgKyBwcmVmaXguY3NzICsgXCJrZXlmcmFtZXNcIiArIGtleS5zdWJzdHIoMTApO1xufVxuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9YXBwZWFyYW5jZVxuXG52YXIgYXBwZWFyZW5jZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ2FwcGVhcmFuY2UnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ2FwcGVhcmFuY2UnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y29sb3ItYWRqdXN0XG5cbnZhciBjb2xvckFkanVzdCA9IHtcbiAgbm9QcmVmaWxsOiBbJ2NvbG9yLWFkanVzdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnY29sb3ItYWRqdXN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSByZXR1cm4gcHJlZml4LmNzcyArIFwicHJpbnQtXCIgKyBwcm9wO1xuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG52YXIgcmVnRXhwID0gL1stXFxzXSsoLik/L2c7XG4vKipcbiAqIFJlcGxhY2VzIHRoZSBsZXR0ZXIgd2l0aCB0aGUgY2FwaXRhbCBsZXR0ZXJcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWF0Y2hcbiAqIEBwYXJhbSB7U3RyaW5nfSBjXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0b1VwcGVyKG1hdGNoLCBjKSB7XG4gIHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBjYW1lbC1jYXNlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UocmVnRXhwLCB0b1VwcGVyKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gcGFzY2FsIGNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhc2NhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIGNhbWVsaXplKFwiLVwiICsgc3RyKTtcbn1cblxuLy8gYnV0IHdlIGNhbiB1c2UgYSBsb25naGFuZCBwcm9wZXJ0eSBpbnN0ZWFkLlxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW1hc2tcblxudmFyIG1hc2sgPSB7XG4gIG5vUHJlZmlsbDogWydtYXNrJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15tYXNrLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0Jykge1xuICAgICAgdmFyIGxvbmdoYW5kID0gJ21hc2staW1hZ2UnO1xuXG4gICAgICBpZiAoY2FtZWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlZml4LmpzICsgcGFzY2FsaXplKGxvbmdoYW5kKSBpbiBzdHlsZSkge1xuICAgICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10ZXh0LW9yaWVudGF0aW9uXG5cbnZhciB0ZXh0T3JpZW50YXRpb24gPSB7XG4gIG5vUHJlZmlsbDogWyd0ZXh0LW9yaWVudGF0aW9uJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd0ZXh0LW9yaWVudGF0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScgJiYgIXByZWZpeC5pc1RvdWNoKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2Zvcm1cblxudmFyIHRyYW5zZm9ybSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zZm9ybSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zZm9ybScpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dHJhbnNpdGlvblxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RyYW5zaXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHByb3AgIT09ICd0cmFuc2l0aW9uJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9d3JpdGluZy1tb2RlXG5cbnZhciB3cml0aW5nTW9kZSA9IHtcbiAgbm9QcmVmaWxsOiBbJ3dyaXRpbmctbW9kZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnd3JpdGluZy1tb2RlJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcgfHwgcHJlZml4LmpzID09PSAnbXMnICYmIHByZWZpeC5icm93c2VyICE9PSAnZWRnZScpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXVzZXItc2VsZWN0XG5cbnZhciB1c2VyU2VsZWN0ID0ge1xuICBub1ByZWZpbGw6IFsndXNlci1zZWxlY3QnXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3VzZXItc2VsZWN0JykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicgfHwgcHJlZml4LmpzID09PSAnbXMnIHx8IHByZWZpeC52ZW5kb3IgPT09ICdhcHBsZScpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW11bHRpY29sdW1uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzQ5MVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8xNzdcblxudmFyIGJyZWFrUHJvcHNPbGQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIGlmICghL15icmVhay0vLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIganNQcm9wID0gXCJXZWJraXRDb2x1bW5cIiArIHBhc2NhbGl6ZShwcm9wKTtcbiAgICAgIHJldHVybiBqc1Byb3AgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgXCJjb2x1bW4tXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHtcbiAgICAgIHZhciBfanNQcm9wID0gXCJwYWdlXCIgKyBwYXNjYWxpemUocHJvcCk7XG5cbiAgICAgIHJldHVybiBfanNQcm9wIGluIHN0eWxlID8gXCJwYWdlLVwiICsgcHJvcCA6IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvMzI0LlxuXG52YXIgaW5saW5lTG9naWNhbE9sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXihib3JkZXJ8bWFyZ2lufHBhZGRpbmcpLWlubGluZS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcmVmaXguanMgPT09ICdNb3onKSByZXR1cm4gcHJvcDtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3AucmVwbGFjZSgnLWlubGluZScsICcnKTtcbiAgICByZXR1cm4gcHJlZml4LmpzICsgcGFzY2FsaXplKG5ld1Byb3ApIGluIHN0eWxlID8gcHJlZml4LmNzcyArIG5ld1Byb3AgOiBmYWxzZTtcbiAgfVxufTtcblxuLy8gQ2FtZWxpemF0aW9uIGlzIHJlcXVpcmVkIGJlY2F1c2Ugd2UgY2FuJ3QgdGVzdCB1c2luZy5cbi8vIENTUyBzeW50YXggZm9yIGUuZy4gaW4gRkYuXG5cbnZhciB1bnByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICByZXR1cm4gY2FtZWxpemUocHJvcCkgaW4gc3R5bGUgPyBwcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcmVmaXhlZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIHBhc2NhbGl6ZWQgPSBwYXNjYWxpemUocHJvcCk7IC8vIFJldHVybiBjdXN0b20gQ1NTIHZhcmlhYmxlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJykgcmV0dXJuIHByb3A7IC8vIFJldHVybiBhbHJlYWR5IHByZWZpeGVkIHZhbHVlIHdpdGhvdXQgcHJlZml4aW5nLlxuXG4gICAgaWYgKHByb3BbMF0gPT09ICctJyAmJiBwcm9wWzFdID09PSAnLScpIHJldHVybiBwcm9wO1xuICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7IC8vIFRyeSB3ZWJraXQgZmFsbGJhY2suXG5cbiAgICBpZiAocHJlZml4LmpzICE9PSAnV2Via2l0JyAmJiBcIldlYmtpdFwiICsgcGFzY2FsaXplZCBpbiBzdHlsZSkgcmV0dXJuIFwiLXdlYmtpdC1cIiArIHByb3A7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2Nyb2xsLXNuYXBcblxudmFyIHNjcm9sbFNuYXAgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3Auc3Vic3RyaW5nKDAsIDExKSAhPT0gJ3Njcm9sbC1zbmFwJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ21zJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPW92ZXJzY3JvbGwtYmVoYXZpb3JcblxudmFyIG92ZXJzY3JvbGxCZWhhdmlvciA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ292ZXJzY3JvbGwtYmVoYXZpb3InKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gcHJlZml4LmNzcyArIFwic2Nyb2xsLWNoYWluaW5nXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwID0ge1xuICAnZmxleC1ncm93JzogJ2ZsZXgtcG9zaXRpdmUnLFxuICAnZmxleC1zaHJpbmsnOiAnZmxleC1uZWdhdGl2ZScsXG4gICdmbGV4LWJhc2lzJzogJ2ZsZXgtcHJlZmVycmVkLXNpemUnLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2ZsZXgtcGFjaycsXG4gIG9yZGVyOiAnZmxleC1vcmRlcicsXG4gICdhbGlnbi1pdGVtcyc6ICdmbGV4LWFsaWduJyxcbiAgJ2FsaWduLWNvbnRlbnQnOiAnZmxleC1saW5lLXBhY2snIC8vICdhbGlnbi1zZWxmJyBpcyBoYW5kbGVkIGJ5ICdhbGlnbi1zZWxmJyBwbHVnaW4uXG5cbn07IC8vIFN1cHBvcnQgb2xkIGZsZXggc3BlYyBmcm9tIDIwMTIuXG5cbnZhciBmbGV4MjAxMiA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgdmFyIG5ld1Byb3AgPSBwcm9wTWFwW3Byb3BdO1xuICAgIGlmICghbmV3UHJvcCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG52YXIgcHJvcE1hcCQxID0ge1xuICBmbGV4OiAnYm94LWZsZXgnLFxuICAnZmxleC1ncm93JzogJ2JveC1mbGV4JyxcbiAgJ2ZsZXgtZGlyZWN0aW9uJzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgb3JkZXI6ICdib3gtb3JkaW5hbC1ncm91cCcsXG4gICdhbGlnbi1pdGVtcyc6ICdib3gtYWxpZ24nLFxuICAnZmxleC1mbG93JzogWydib3gtb3JpZW50JywgJ2JveC1kaXJlY3Rpb24nXSxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdib3gtcGFjaydcbn07XG52YXIgcHJvcEtleXMgPSBPYmplY3Qua2V5cyhwcm9wTWFwJDEpO1xuXG52YXIgcHJlZml4Q3NzID0gZnVuY3Rpb24gcHJlZml4Q3NzKHApIHtcbiAgcmV0dXJuIHByZWZpeC5jc3MgKyBwO1xufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAwOS5cblxuXG52YXIgZmxleDIwMDkgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgX3JlZikge1xuICAgIHZhciBtdWx0aXBsZSA9IF9yZWYubXVsdGlwbGU7XG5cbiAgICBpZiAocHJvcEtleXMuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXAkMVtwcm9wXTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG5ld1Byb3ApKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11bHRpcGxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3UHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIShwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcFswXSkgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdQcm9wLm1hcChwcmVmaXhDc3MpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuLy8gcGx1Z2lucyA9IFtcbi8vICAgLi4ucGx1Z2lucyxcbi8vICAgIGJyZWFrUHJvcHNPbGQsXG4vLyAgICBpbmxpbmVMb2dpY2FsT2xkLFxuLy8gICAgdW5wcmVmaXhlZCxcbi8vICAgIHByZWZpeGVkLFxuLy8gICAgc2Nyb2xsU25hcCxcbi8vICAgIGZsZXgyMDEyLFxuLy8gICAgZmxleDIwMDlcbi8vIF1cbi8vIFBsdWdpbnMgd2l0aG91dCAnbm9QcmVmaWxsJyB2YWx1ZSwgZ29pbmcgbGFzdC5cbi8vICdmbGV4LSonIHBsdWdpbnMgc2hvdWxkIGJlIGF0IHRoZSBib3R0b20uXG4vLyAnZmxleDIwMDknIGdvaW5nIGFmdGVyICdmbGV4MjAxMicuXG4vLyAncHJlZml4ZWQnIGdvaW5nIGFmdGVyICd1bnByZWZpeGVkJ1xuXG52YXIgcGx1Z2lucyA9IFthcHBlYXJlbmNlLCBjb2xvckFkanVzdCwgbWFzaywgdGV4dE9yaWVudGF0aW9uLCB0cmFuc2Zvcm0sIHRyYW5zaXRpb24sIHdyaXRpbmdNb2RlLCB1c2VyU2VsZWN0LCBicmVha1Byb3BzT2xkLCBpbmxpbmVMb2dpY2FsT2xkLCB1bnByZWZpeGVkLCBwcmVmaXhlZCwgc2Nyb2xsU25hcCwgb3ZlcnNjcm9sbEJlaGF2aW9yLCBmbGV4MjAxMiwgZmxleDIwMDldO1xudmFyIHByb3BlcnR5RGV0ZWN0b3JzID0gcGx1Z2lucy5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KS5tYXAoZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIHAuc3VwcG9ydGVkUHJvcGVydHk7XG59KTtcbnZhciBub1ByZWZpbGwgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5ub1ByZWZpbGw7XG59KS5yZWR1Y2UoZnVuY3Rpb24gKGEsIHApIHtcbiAgYS5wdXNoLmFwcGx5KGEsIF90b0NvbnN1bWFibGVBcnJheShwLm5vUHJlZmlsbCkpO1xuICByZXR1cm4gYTtcbn0sIFtdKTtcblxudmFyIGVsO1xudmFyIGNhY2hlID0ge307XG5cbmlmIChpc0luQnJvd3Nlcikge1xuICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTsgLy8gV2UgdGVzdCBldmVyeSBwcm9wZXJ0eSBvbiB2ZW5kb3IgcHJlZml4IHJlcXVpcmVtZW50LlxuICAvLyBPbmNlIHRlc3RlZCwgcmVzdWx0IGlzIGNhY2hlZC4gSXQgZ2l2ZXMgdXMgdXAgdG8gNzAlIHBlcmYgYm9vc3QuXG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2VsZW1lbnQtc3R5bGUtb2JqZWN0LWFjY2Vzcy12cy1wbGFpbi1vYmplY3RcbiAgLy9cbiAgLy8gUHJlZmlsbCBjYWNoZSB3aXRoIGtub3duIGNzcyBwcm9wZXJ0aWVzIHRvIHJlZHVjZSBhbW91bnQgb2ZcbiAgLy8gcHJvcGVydGllcyB3ZSBuZWVkIHRvIGZlYXR1cmUgdGVzdCBhdCBydW50aW1lLlxuICAvLyBodHRwOi8vZGF2aWR3YWxzaC5uYW1lL3ZlbmRvci1wcmVmaXhcblxuICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcblxuICBmb3IgKHZhciBrZXkkMSBpbiBjb21wdXRlZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBpZiAoIWlzTmFOKGtleSQxKSkgY2FjaGVbY29tcHV0ZWRba2V5JDFdXSA9IGNvbXB1dGVkW2tleSQxXTtcbiAgfSAvLyBQcm9wZXJ0aWVzIHRoYXQgY2Fubm90IGJlIGNvcnJlY3RseSBkZXRlY3RlZCB1c2luZyB0aGVcbiAgLy8gY2FjaGUgcHJlZmlsbCBtZXRob2QuXG5cblxuICBub1ByZWZpbGwuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBkZWxldGUgY2FjaGVbeF07XG4gIH0pO1xufVxuLyoqXG4gKiBUZXN0IGlmIGEgcHJvcGVydHkgaXMgc3VwcG9ydGVkLCByZXR1cm5zIHN1cHBvcnRlZCBwcm9wZXJ0eSB3aXRoIHZlbmRvclxuICogcHJlZml4IGlmIHJlcXVpcmVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBkYXNoIHNlcGFyYXRlZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgaWYgKCFlbCkgcmV0dXJuIHByb3A7IC8vIFJlbW92ZSBjYWNoZSBmb3IgYmVuY2htYXJrIHRlc3RzIG9yIHJldHVybiBwcm9wZXJ0eSBmcm9tIHRoZSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlW3Byb3BdICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGVbcHJvcF07XG4gIH0gLy8gQ2hlY2sgaWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2Zvcm0nIG5hdGl2ZWx5IHN1cHBvcnRlZCBpbiBicm93c2VyLlxuXG5cbiAgaWYgKHByb3AgPT09ICd0cmFuc2l0aW9uJyB8fCBwcm9wID09PSAndHJhbnNmb3JtJykge1xuICAgIG9wdGlvbnNbcHJvcF0gPSBwcm9wIGluIGVsLnN0eWxlO1xuICB9IC8vIEZpbmQgYSBwbHVnaW4gZm9yIGN1cnJlbnQgcHJlZml4IHByb3BlcnR5LlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wZXJ0eURldGVjdG9ycy5sZW5ndGg7IGkrKykge1xuICAgIGNhY2hlW3Byb3BdID0gcHJvcGVydHlEZXRlY3RvcnNbaV0ocHJvcCwgZWwuc3R5bGUsIG9wdGlvbnMpOyAvLyBCcmVhayBsb29wLCBpZiB2YWx1ZSBmb3VuZC5cblxuICAgIGlmIChjYWNoZVtwcm9wXSkgYnJlYWs7XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuICAvLyBGaXJlZm94IGNhbiBldmVuIHRocm93IGFuIGVycm9yIGZvciBpbnZhbGlkIHByb3BlcnRpZXMsIGUuZy4sIFwiMFwiLlxuXG5cbiAgdHJ5IHtcbiAgICBlbC5zdHlsZVtwcm9wXSA9ICcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY2FjaGVbcHJvcF07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgdHJhbnNpdGlvblByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IDEsXG4gICd0cmFuc2l0aW9uLXByb3BlcnR5JzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbic6IDEsXG4gICctd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHknOiAxXG59O1xudmFyIHRyYW5zUHJvcHNSZWdFeHAgPSAvKF5cXHMqW1xcdy1dKyl8LCAoXFxzKltcXHctXSspKD8hW14oKV0qXFwpKS9nO1xudmFyIGVsJDE7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgdHJhbnNpdGlvbi90cmFuc2Zvcm0gaWYgbmVlZGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IHAxXG4gKiBAcGFyYW0ge1N0cmluZ30gcDJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayhtYXRjaCwgcDEsIHAyKSB7XG4gIGlmIChwMSA9PT0gJ3ZhcicpIHJldHVybiAndmFyJztcbiAgaWYgKHAxID09PSAnYWxsJykgcmV0dXJuICdhbGwnO1xuICBpZiAocDIgPT09ICdhbGwnKSByZXR1cm4gJywgYWxsJztcbiAgdmFyIHByZWZpeGVkVmFsdWUgPSBwMSA/IHN1cHBvcnRlZFByb3BlcnR5KHAxKSA6IFwiLCBcIiArIHN1cHBvcnRlZFByb3BlcnR5KHAyKTtcbiAgaWYgKCFwcmVmaXhlZFZhbHVlKSByZXR1cm4gcDEgfHwgcDI7XG4gIHJldHVybiBwcmVmaXhlZFZhbHVlO1xufVxuXG5pZiAoaXNJbkJyb3dzZXIpIGVsJDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4vKipcbiAqIFJldHVybnMgcHJlZml4ZWQgdmFsdWUgaWYgbmVlZGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdmFsdWUgaXMgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAoIWVsJDEgfHwgcHJvcGVydHkgPT09ICdjb250ZW50JykgcmV0dXJuIHZhbHVlOyAvLyBJdCBpcyBhIHN0cmluZyBvciBhIG51bWJlciBhcyBhIHN0cmluZyBsaWtlICcxJy5cbiAgLy8gV2Ugd2FudCBvbmx5IHByZWZpeGFibGUgdmFsdWVzIGhlcmUuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICBpZiAodHlwZW9mIHByZWZpeGVkVmFsdWUgIT09ICdzdHJpbmcnIHx8ICFpc05hTihwYXJzZUludChwcmVmaXhlZFZhbHVlLCAxMCkpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG4gIH0gLy8gQ3JlYXRlIGNhY2hlIGtleSBmb3IgY3VycmVudCB2YWx1ZS5cblxuXG4gIHZhciBjYWNoZUtleSA9IHByb3BlcnR5ICsgcHJlZml4ZWRWYWx1ZTsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHZhbHVlIGZyb20gY2FjaGUuXG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnYmVuY2htYXJrJyAmJiBjYWNoZSQxW2NhY2hlS2V5XSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xuICB9IC8vIElFIGNhbiBldmVuIHRocm93IGFuIGVycm9yIGluIHNvbWUgY2FzZXMsIGZvciBlLmcuIHN0eWxlLmNvbnRlbnQgPSAnYmFyJy5cblxuXG4gIHRyeSB7XG4gICAgLy8gVGVzdCB2YWx1ZSBhcyBpdCBpcy5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuICAgIGNhY2hlJDFbY2FjaGVLZXldID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmICd0cmFuc2l0aW9uJyBvciAndHJhbnNpdGlvbi1wcm9wZXJ0eScgcHJvcGVydHkuXG5cblxuICBpZiAodHJhbnNpdGlvblByb3BlcnRpZXNbcHJvcGVydHldKSB7XG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeGVkVmFsdWUucmVwbGFjZSh0cmFuc1Byb3BzUmVnRXhwLCBwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgIC8vIFZhbHVlIHdpdGggYSB2ZW5kb3IgcHJlZml4LlxuICAgIHByZWZpeGVkVmFsdWUgPSBwcmVmaXguY3NzICsgcHJlZml4ZWRWYWx1ZTsgLy8gSGFyZGNvZGUgdGVzdCB0byBjb252ZXJ0IFwiZmxleFwiIHRvIFwiLW1zLWZsZXhib3hcIiBmb3IgSUUxMC5cblxuICAgIGlmIChwcmVmaXhlZFZhbHVlID09PSAnLW1zLWZsZXgnKSBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICctbXMtZmxleGJveCc7IC8vIFRlc3QgcHJlZml4ZWQgdmFsdWUuXG5cbiAgICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9IHByZWZpeGVkVmFsdWU7IC8vIFJldHVybiBmYWxzZSBpZiB2YWx1ZSBub3Qgc3VwcG9ydGVkLlxuXG4gICAgaWYgKGVsJDEuc3R5bGVbcHJvcGVydHldID09PSAnJykge1xuICAgICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gUmVzZXQgc3R5bGVzIGZvciBjdXJyZW50IHByb3BlcnR5LlxuXG5cbiAgZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPSAnJzsgLy8gV3JpdGUgY3VycmVudCB2YWx1ZSB0byBjYWNoZS5cblxuICBjYWNoZSQxW2NhY2hlS2V5XSA9IHByZWZpeGVkVmFsdWU7XG4gIHJldHVybiBjYWNoZSQxW2NhY2hlS2V5XTtcbn1cblxuZXhwb3J0IHsgcHJlZml4LCBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFByb3BlcnR5LCBzdXBwb3J0ZWRWYWx1ZSB9O1xuIiwiLypcbiAgQ29weXJpZ2h0IChDKSAyMDEyLTIwMTQgWXVzdWtlIFN1enVraSA8dXRhdGFuZS50ZWFAZ21haWwuY29tPlxuICBDb3B5cmlnaHQgKEMpIDIwMTUgSW5ndmFyIFN0ZXBhbnlhbiA8bWVAcnJldmVyc2VyLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDE0IEl2YW4gTmlrdWxpbiA8aWZhYWFuQGdtYWlsLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDEyLTIwMTMgTWljaGFlbCBGaWNhcnJhIDxlc2NvZGVnZW4uY29weXJpZ2h0QG1pY2hhZWwuZmljYXJyYS5tZT5cbiAgQ29weXJpZ2h0IChDKSAyMDEyLTIwMTMgTWF0aGlhcyBCeW5lbnMgPG1hdGhpYXNAcWl3aS5iZT5cbiAgQ29weXJpZ2h0IChDKSAyMDEzIElyYWtsaSBHb3phbGlzaHZpbGkgPHJmb2JpY0BnbWFpbC5jb20+XG4gIENvcHlyaWdodCAoQykgMjAxMiBSb2JlcnQgR3VzdC1CYXJkb24gPGRvbmF0ZUByb2JlcnQuZ3VzdC1iYXJkb24ub3JnPlxuICBDb3B5cmlnaHQgKEMpIDIwMTIgSm9obiBGcmVlbWFuIDxqZnJlZW1hbjA4QGdtYWlsLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDExLTIwMTIgQXJpeWEgSGlkYXlhdCA8YXJpeWEuaGlkYXlhdEBnbWFpbC5jb20+XG4gIENvcHlyaWdodCAoQykgMjAxMiBKb29zdC1XaW0gQm9la2VzdGVpam4gPGpvb3N0LXdpbUBib2VrZXN0ZWlqbi5ubD5cbiAgQ29weXJpZ2h0IChDKSAyMDEyIEtyaXMgS293YWwgPGtyaXMua293YWxAY2l4YXIuY29tPlxuICBDb3B5cmlnaHQgKEMpIDIwMTIgQXJwYWQgQm9yc29zIDxhcnBhZC5ib3Jzb3NAZ29vZ2xlbWFpbC5jb20+XG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXG4gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuLypnbG9iYWwgZXhwb3J0czp0cnVlLCByZXF1aXJlOnRydWUsIGdsb2JhbDp0cnVlKi9cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFN5bnRheCxcbiAgICAgICAgUHJlY2VkZW5jZSxcbiAgICAgICAgQmluYXJ5UHJlY2VkZW5jZSxcbiAgICAgICAgU291cmNlTm9kZSxcbiAgICAgICAgZXN0cmF2ZXJzZSxcbiAgICAgICAgZXN1dGlscyxcbiAgICAgICAgYmFzZSxcbiAgICAgICAgaW5kZW50LFxuICAgICAgICBqc29uLFxuICAgICAgICByZW51bWJlcixcbiAgICAgICAgaGV4YWRlY2ltYWwsXG4gICAgICAgIHF1b3RlcyxcbiAgICAgICAgZXNjYXBlbGVzcyxcbiAgICAgICAgbmV3bGluZSxcbiAgICAgICAgc3BhY2UsXG4gICAgICAgIHBhcmVudGhlc2VzLFxuICAgICAgICBzZW1pY29sb25zLFxuICAgICAgICBzYWZlQ29uY2F0ZW5hdGlvbixcbiAgICAgICAgZGlyZWN0aXZlLFxuICAgICAgICBleHRyYSxcbiAgICAgICAgcGFyc2UsXG4gICAgICAgIHNvdXJjZU1hcCxcbiAgICAgICAgc291cmNlQ29kZSxcbiAgICAgICAgcHJlc2VydmVCbGFua0xpbmVzLFxuICAgICAgICBGT1JNQVRfTUlOSUZZLFxuICAgICAgICBGT1JNQVRfREVGQVVMVFM7XG5cbiAgICBlc3RyYXZlcnNlID0gcmVxdWlyZSgnZXN0cmF2ZXJzZScpO1xuICAgIGVzdXRpbHMgPSByZXF1aXJlKCdlc3V0aWxzJyk7XG5cbiAgICBTeW50YXggPSBlc3RyYXZlcnNlLlN5bnRheDtcblxuICAgIC8vIEdlbmVyYXRpb24gaXMgZG9uZSBieSBnZW5lcmF0ZUV4cHJlc3Npb24uXG4gICAgZnVuY3Rpb24gaXNFeHByZXNzaW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIENvZGVHZW5lcmF0b3IuRXhwcmVzc2lvbi5oYXNPd25Qcm9wZXJ0eShub2RlLnR5cGUpO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRpb24gaXMgZG9uZSBieSBnZW5lcmF0ZVN0YXRlbWVudC5cbiAgICBmdW5jdGlvbiBpc1N0YXRlbWVudChub2RlKSB7XG4gICAgICAgIHJldHVybiBDb2RlR2VuZXJhdG9yLlN0YXRlbWVudC5oYXNPd25Qcm9wZXJ0eShub2RlLnR5cGUpO1xuICAgIH1cblxuICAgIFByZWNlZGVuY2UgPSB7XG4gICAgICAgIFNlcXVlbmNlOiAwLFxuICAgICAgICBZaWVsZDogMSxcbiAgICAgICAgQXNzaWdubWVudDogMSxcbiAgICAgICAgQ29uZGl0aW9uYWw6IDIsXG4gICAgICAgIEFycm93RnVuY3Rpb246IDIsXG4gICAgICAgIExvZ2ljYWxPUjogMyxcbiAgICAgICAgTG9naWNhbEFORDogNCxcbiAgICAgICAgQml0d2lzZU9SOiA1LFxuICAgICAgICBCaXR3aXNlWE9SOiA2LFxuICAgICAgICBCaXR3aXNlQU5EOiA3LFxuICAgICAgICBFcXVhbGl0eTogOCxcbiAgICAgICAgUmVsYXRpb25hbDogOSxcbiAgICAgICAgQml0d2lzZVNISUZUOiAxMCxcbiAgICAgICAgQWRkaXRpdmU6IDExLFxuICAgICAgICBNdWx0aXBsaWNhdGl2ZTogMTIsXG4gICAgICAgIEV4cG9uZW50aWF0aW9uOiAxMyxcbiAgICAgICAgQXdhaXQ6IDE0LFxuICAgICAgICBVbmFyeTogMTQsXG4gICAgICAgIFBvc3RmaXg6IDE1LFxuICAgICAgICBPcHRpb25hbENoYWluaW5nOiAxNixcbiAgICAgICAgQ2FsbDogMTcsXG4gICAgICAgIE5ldzogMTgsXG4gICAgICAgIFRhZ2dlZFRlbXBsYXRlOiAxOSxcbiAgICAgICAgTWVtYmVyOiAyMCxcbiAgICAgICAgUHJpbWFyeTogMjFcbiAgICB9O1xuXG4gICAgQmluYXJ5UHJlY2VkZW5jZSA9IHtcbiAgICAgICAgJ3x8JzogUHJlY2VkZW5jZS5Mb2dpY2FsT1IsXG4gICAgICAgICcmJic6IFByZWNlZGVuY2UuTG9naWNhbEFORCxcbiAgICAgICAgJ3wnOiBQcmVjZWRlbmNlLkJpdHdpc2VPUixcbiAgICAgICAgJ14nOiBQcmVjZWRlbmNlLkJpdHdpc2VYT1IsXG4gICAgICAgICcmJzogUHJlY2VkZW5jZS5CaXR3aXNlQU5ELFxuICAgICAgICAnPT0nOiBQcmVjZWRlbmNlLkVxdWFsaXR5LFxuICAgICAgICAnIT0nOiBQcmVjZWRlbmNlLkVxdWFsaXR5LFxuICAgICAgICAnPT09JzogUHJlY2VkZW5jZS5FcXVhbGl0eSxcbiAgICAgICAgJyE9PSc6IFByZWNlZGVuY2UuRXF1YWxpdHksXG4gICAgICAgICdpcyc6IFByZWNlZGVuY2UuRXF1YWxpdHksXG4gICAgICAgICdpc250JzogUHJlY2VkZW5jZS5FcXVhbGl0eSxcbiAgICAgICAgJzwnOiBQcmVjZWRlbmNlLlJlbGF0aW9uYWwsXG4gICAgICAgICc+JzogUHJlY2VkZW5jZS5SZWxhdGlvbmFsLFxuICAgICAgICAnPD0nOiBQcmVjZWRlbmNlLlJlbGF0aW9uYWwsXG4gICAgICAgICc+PSc6IFByZWNlZGVuY2UuUmVsYXRpb25hbCxcbiAgICAgICAgJ2luJzogUHJlY2VkZW5jZS5SZWxhdGlvbmFsLFxuICAgICAgICAnaW5zdGFuY2VvZic6IFByZWNlZGVuY2UuUmVsYXRpb25hbCxcbiAgICAgICAgJzw8JzogUHJlY2VkZW5jZS5CaXR3aXNlU0hJRlQsXG4gICAgICAgICc+Pic6IFByZWNlZGVuY2UuQml0d2lzZVNISUZULFxuICAgICAgICAnPj4+JzogUHJlY2VkZW5jZS5CaXR3aXNlU0hJRlQsXG4gICAgICAgICcrJzogUHJlY2VkZW5jZS5BZGRpdGl2ZSxcbiAgICAgICAgJy0nOiBQcmVjZWRlbmNlLkFkZGl0aXZlLFxuICAgICAgICAnKic6IFByZWNlZGVuY2UuTXVsdGlwbGljYXRpdmUsXG4gICAgICAgICclJzogUHJlY2VkZW5jZS5NdWx0aXBsaWNhdGl2ZSxcbiAgICAgICAgJy8nOiBQcmVjZWRlbmNlLk11bHRpcGxpY2F0aXZlLFxuICAgICAgICAnKionOiBQcmVjZWRlbmNlLkV4cG9uZW50aWF0aW9uXG4gICAgfTtcblxuICAgIC8vRmxhZ3NcbiAgICB2YXIgRl9BTExPV19JTiA9IDEsXG4gICAgICAgIEZfQUxMT1dfQ0FMTCA9IDEgPDwgMSxcbiAgICAgICAgRl9BTExPV19VTlBBUkFUSF9ORVcgPSAxIDw8IDIsXG4gICAgICAgIEZfRlVOQ19CT0RZID0gMSA8PCAzLFxuICAgICAgICBGX0RJUkVDVElWRV9DVFggPSAxIDw8IDQsXG4gICAgICAgIEZfU0VNSUNPTE9OX09QVCA9IDEgPDwgNTtcblxuICAgIC8vRXhwcmVzc2lvbiBmbGFnIHNldHNcbiAgICAvL05PVEU6IEZsYWcgb3JkZXI6XG4gICAgLy8gRl9BTExPV19JTlxuICAgIC8vIEZfQUxMT1dfQ0FMTFxuICAgIC8vIEZfQUxMT1dfVU5QQVJBVEhfTkVXXG4gICAgdmFyIEVfRlRUID0gRl9BTExPV19DQUxMIHwgRl9BTExPV19VTlBBUkFUSF9ORVcsXG4gICAgICAgIEVfVFRGID0gRl9BTExPV19JTiB8IEZfQUxMT1dfQ0FMTCxcbiAgICAgICAgRV9UVFQgPSBGX0FMTE9XX0lOIHwgRl9BTExPV19DQUxMIHwgRl9BTExPV19VTlBBUkFUSF9ORVcsXG4gICAgICAgIEVfVEZGID0gRl9BTExPV19JTixcbiAgICAgICAgRV9GRlQgPSBGX0FMTE9XX1VOUEFSQVRIX05FVyxcbiAgICAgICAgRV9URlQgPSBGX0FMTE9XX0lOIHwgRl9BTExPV19VTlBBUkFUSF9ORVc7XG5cbiAgICAvL1N0YXRlbWVudCBmbGFnIHNldHNcbiAgICAvL05PVEU6IEZsYWcgb3JkZXI6XG4gICAgLy8gRl9BTExPV19JTlxuICAgIC8vIEZfRlVOQ19CT0RZXG4gICAgLy8gRl9ESVJFQ1RJVkVfQ1RYXG4gICAgLy8gRl9TRU1JQ09MT05fT1BUXG4gICAgdmFyIFNfVEZGRiA9IEZfQUxMT1dfSU4sXG4gICAgICAgIFNfVEZGVCA9IEZfQUxMT1dfSU4gfCBGX1NFTUlDT0xPTl9PUFQsXG4gICAgICAgIFNfRkZGRiA9IDB4MDAsXG4gICAgICAgIFNfVEZURiA9IEZfQUxMT1dfSU4gfCBGX0RJUkVDVElWRV9DVFgsXG4gICAgICAgIFNfVFRGRiA9IEZfQUxMT1dfSU4gfCBGX0ZVTkNfQk9EWTtcblxuICAgIGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICAgICAgICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGVudDogbnVsbCxcbiAgICAgICAgICAgIGJhc2U6IG51bGwsXG4gICAgICAgICAgICBwYXJzZTogbnVsbCxcbiAgICAgICAgICAgIGNvbW1lbnQ6IGZhbHNlLFxuICAgICAgICAgICAgZm9ybWF0OiB7XG4gICAgICAgICAgICAgICAgaW5kZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnICAgICcsXG4gICAgICAgICAgICAgICAgICAgIGJhc2U6IDAsXG4gICAgICAgICAgICAgICAgICAgIGFkanVzdE11bHRpbGluZUNvbW1lbnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBuZXdsaW5lOiAnXFxuJyxcbiAgICAgICAgICAgICAgICBzcGFjZTogJyAnLFxuICAgICAgICAgICAgICAgIGpzb246IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlbnVtYmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBoZXhhZGVjaW1hbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgcXVvdGVzOiAnc2luZ2xlJyxcbiAgICAgICAgICAgICAgICBlc2NhcGVsZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBjb21wYWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXJlbnRoZXNlczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZW1pY29sb25zOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNhZmVDb25jYXRlbmF0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcmVzZXJ2ZUJsYW5rTGluZXM6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbW96OiB7XG4gICAgICAgICAgICAgICAgY29tcHJlaGVuc2lvbkV4cHJlc3Npb25TdGFydHNXaXRoQXNzaWdubWVudDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3Rhcmxlc3NHZW5lcmF0b3I6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc291cmNlTWFwOiBudWxsLFxuICAgICAgICAgICAgc291cmNlTWFwUm9vdDogbnVsbCxcbiAgICAgICAgICAgIHNvdXJjZU1hcFdpdGhDb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICByYXc6IHRydWUsXG4gICAgICAgICAgICB2ZXJiYXRpbTogbnVsbCxcbiAgICAgICAgICAgIHNvdXJjZUNvZGU6IG51bGxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJpbmdSZXBlYXQoc3RyLCBudW0pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIGZvciAobnVtIHw9IDA7IG51bSA+IDA7IG51bSA+Pj49IDEsIHN0ciArPSBzdHIpIHtcbiAgICAgICAgICAgIGlmIChudW0gJiAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzTGluZVRlcm1pbmF0b3Ioc3RyKSB7XG4gICAgICAgIHJldHVybiAoL1tcXHJcXG5dL2cpLnRlc3Qoc3RyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHN0cikge1xuICAgICAgICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGxlbiAmJiBlc3V0aWxzLmNvZGUuaXNMaW5lVGVybWluYXRvcihzdHIuY2hhckNvZGVBdChsZW4gLSAxKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBvdmVycmlkZSkge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGtleSBpbiBvdmVycmlkZSkge1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IG92ZXJyaWRlW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVEZWVwbHkodGFyZ2V0LCBvdmVycmlkZSkge1xuICAgICAgICB2YXIga2V5LCB2YWw7XG5cbiAgICAgICAgZnVuY3Rpb24gaXNIYXNoT2JqZWN0KHRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmIHRhcmdldCBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHRhcmdldCBpbnN0YW5jZW9mIFJlZ0V4cCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGtleSBpbiBvdmVycmlkZSkge1xuICAgICAgICAgICAgaWYgKG92ZXJyaWRlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBvdmVycmlkZVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChpc0hhc2hPYmplY3QodmFsKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNIYXNoT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGVlcGx5KHRhcmdldFtrZXldLCB2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB1cGRhdGVEZWVwbHkoe30sIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU51bWJlcih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0LCBwb2ludCwgdGVtcCwgZXhwb25lbnQsIHBvcztcblxuICAgICAgICBpZiAodmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ051bWVyaWMgbGl0ZXJhbCB3aG9zZSB2YWx1ZSBpcyBOYU4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdW1lcmljIGxpdGVyYWwgd2hvc2UgdmFsdWUgaXMgbmVnYXRpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMSAvIDApIHtcbiAgICAgICAgICAgIHJldHVybiBqc29uID8gJ251bGwnIDogcmVudW1iZXIgPyAnMWU0MDAnIDogJzFlKzQwMCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSAnJyArIHZhbHVlO1xuICAgICAgICBpZiAoIXJlbnVtYmVyIHx8IHJlc3VsdC5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcG9pbnQgPSByZXN1bHQuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoIWpzb24gJiYgcmVzdWx0LmNoYXJDb2RlQXQoMCkgPT09IDB4MzAgIC8qIDAgKi8gJiYgcG9pbnQgPT09IDEpIHtcbiAgICAgICAgICAgIHBvaW50ID0gMDtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wID0gcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgnZSsnLCAnZScpO1xuICAgICAgICBleHBvbmVudCA9IDA7XG4gICAgICAgIGlmICgocG9zID0gdGVtcC5pbmRleE9mKCdlJykpID4gMCkge1xuICAgICAgICAgICAgZXhwb25lbnQgPSArdGVtcC5zbGljZShwb3MgKyAxKTtcbiAgICAgICAgICAgIHRlbXAgPSB0ZW1wLnNsaWNlKDAsIHBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50ID49IDApIHtcbiAgICAgICAgICAgIGV4cG9uZW50IC09IHRlbXAubGVuZ3RoIC0gcG9pbnQgLSAxO1xuICAgICAgICAgICAgdGVtcCA9ICsodGVtcC5zbGljZSgwLCBwb2ludCkgKyB0ZW1wLnNsaWNlKHBvaW50ICsgMSkpICsgJyc7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gMDtcbiAgICAgICAgd2hpbGUgKHRlbXAuY2hhckNvZGVBdCh0ZW1wLmxlbmd0aCArIHBvcyAtIDEpID09PSAweDMwICAvKiAwICovKSB7XG4gICAgICAgICAgICAtLXBvcztcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zICE9PSAwKSB7XG4gICAgICAgICAgICBleHBvbmVudCAtPSBwb3M7XG4gICAgICAgICAgICB0ZW1wID0gdGVtcC5zbGljZSgwLCBwb3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHBvbmVudCAhPT0gMCkge1xuICAgICAgICAgICAgdGVtcCArPSAnZScgKyBleHBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRlbXAubGVuZ3RoIDwgcmVzdWx0Lmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgICAgICAoaGV4YWRlY2ltYWwgJiYgdmFsdWUgPiAxZTEyICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZSAmJiAodGVtcCA9ICcweCcgKyB2YWx1ZS50b1N0cmluZygxNikpLmxlbmd0aCA8IHJlc3VsdC5sZW5ndGgpKSAmJlxuICAgICAgICAgICAgICAgICt0ZW1wID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdGVtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgdmFsaWQgUmVnRXhwIGV4cHJlc3Npb24uXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vQ29uc3RlbGxhdGlvbi9pdiBFbmdpbmVcblxuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cENoYXJhY3RlcihjaCwgcHJldmlvdXNJc0JhY2tzbGFzaCkge1xuICAgICAgICAvLyBub3QgaGFuZGxpbmcgJ1xcJyBhbmQgaGFuZGxpbmcgXFx1MjAyOCBvciBcXHUyMDI5IHRvIHVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlXG4gICAgICAgIGlmICgoY2ggJiB+MSkgPT09IDB4MjAyOCkge1xuICAgICAgICAgICAgcmV0dXJuIChwcmV2aW91c0lzQmFja3NsYXNoID8gJ3UnIDogJ1xcXFx1JykgKyAoKGNoID09PSAweDIwMjgpID8gJzIwMjgnIDogJzIwMjknKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gMTAgfHwgY2ggPT09IDEzKSB7ICAvLyBcXG4sIFxcclxuICAgICAgICAgICAgcmV0dXJuIChwcmV2aW91c0lzQmFja3NsYXNoID8gJycgOiAnXFxcXCcpICsgKChjaCA9PT0gMTApID8gJ24nIDogJ3InKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVSZWdFeHAocmVnKSB7XG4gICAgICAgIHZhciBtYXRjaCwgcmVzdWx0LCBmbGFncywgaSwgaXosIGNoLCBjaGFyYWN0ZXJJbkJyYWNrLCBwcmV2aW91c0lzQmFja3NsYXNoO1xuXG4gICAgICAgIHJlc3VsdCA9IHJlZy50b1N0cmluZygpO1xuXG4gICAgICAgIGlmIChyZWcuc291cmNlKSB7XG4gICAgICAgICAgICAvLyBleHRyYWN0IGZsYWcgZnJvbSB0b1N0cmluZyByZXN1bHRcbiAgICAgICAgICAgIG1hdGNoID0gcmVzdWx0Lm1hdGNoKC9cXC8oW14vXSopJC8pO1xuICAgICAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZsYWdzID0gbWF0Y2hbMV07XG4gICAgICAgICAgICByZXN1bHQgPSAnJztcblxuICAgICAgICAgICAgY2hhcmFjdGVySW5CcmFjayA9IGZhbHNlO1xuICAgICAgICAgICAgcHJldmlvdXNJc0JhY2tzbGFzaCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSByZWcuc291cmNlLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICBjaCA9IHJlZy5zb3VyY2UuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAgICAgICAgIGlmICghcHJldmlvdXNJc0JhY2tzbGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVySW5CcmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSA5MykgeyAgLy8gXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlckluQnJhY2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gNDcpIHsgIC8vIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PT0gOTEpIHsgIC8vIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJJbkJyYWNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gZXNjYXBlUmVnRXhwQ2hhcmFjdGVyKGNoLCBwcmV2aW91c0lzQmFja3NsYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNJc0JhY2tzbGFzaCA9IGNoID09PSA5MjsgIC8vIFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgbmV3IFJlZ0V4cChcIlxcXFxcXG4nKSBpcyBwcm92aWRlZCwgY3JlYXRlIC9cXG4vXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGVSZWdFeHBDaGFyYWN0ZXIoY2gsIHByZXZpb3VzSXNCYWNrc2xhc2gpO1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmV2ZW50IGxpa2UgL1xcXFxbL10vXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzSXNCYWNrc2xhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAnLycgKyByZXN1bHQgKyAnLycgKyBmbGFncztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXNjYXBlQWxsb3dlZENoYXJhY3Rlcihjb2RlLCBuZXh0KSB7XG4gICAgICAgIHZhciBoZXg7XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IDB4MDggIC8qIFxcYiAqLykge1xuICAgICAgICAgICAgcmV0dXJuICdcXFxcYic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gMHgwQyAgLyogXFxmICovKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1xcXFxmJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSAweDA5ICAvKiBcXHQgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHQnO1xuICAgICAgICB9XG5cbiAgICAgICAgaGV4ID0gY29kZS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKGpzb24gfHwgY29kZSA+IDB4RkYpIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHUnICsgJzAwMDAnLnNsaWNlKGhleC5sZW5ndGgpICsgaGV4O1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4MDAwMCAmJiAhZXN1dGlscy5jb2RlLmlzRGVjaW1hbERpZ2l0KG5leHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1xcXFwwJztcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDAwMEIgIC8qIFxcdiAqLykgeyAvLyAnXFx2J1xuICAgICAgICAgICAgcmV0dXJuICdcXFxceDBCJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHgnICsgJzAwJy5zbGljZShoZXgubGVuZ3RoKSArIGhleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVzY2FwZURpc2FsbG93ZWRDaGFyYWN0ZXIoY29kZSkge1xuICAgICAgICBpZiAoY29kZSA9PT0gMHg1QyAgLyogXFwgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXFxcXFwnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGUgPT09IDB4MEEgIC8qIFxcbiAqLykge1xuICAgICAgICAgICAgcmV0dXJuICdcXFxcbic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gMHgwRCAgLyogXFxyICovKSB7XG4gICAgICAgICAgICByZXR1cm4gJ1xcXFxyJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSAweDIwMjgpIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHUyMDI4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb2RlID09PSAweDIwMjkpIHtcbiAgICAgICAgICAgIHJldHVybiAnXFxcXHUyMDI5JztcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5jb3JyZWN0bHkgY2xhc3NpZmllZCBjaGFyYWN0ZXInKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVEaXJlY3RpdmUoc3RyKSB7XG4gICAgICAgIHZhciBpLCBpeiwgY29kZSwgcXVvdGU7XG5cbiAgICAgICAgcXVvdGUgPSBxdW90ZXMgPT09ICdkb3VibGUnID8gJ1wiJyA6ICdcXCcnO1xuICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IHN0ci5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gMHgyNyAgLyogJyAqLykge1xuICAgICAgICAgICAgICAgIHF1b3RlID0gJ1wiJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMiAgLyogXCIgKi8pIHtcbiAgICAgICAgICAgICAgICBxdW90ZSA9ICdcXCcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDVDICAvKiBcXCAqLykge1xuICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBxdW90ZSArIHN0ciArIHF1b3RlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVzY2FwZVN0cmluZyhzdHIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnLCBpLCBsZW4sIGNvZGUsIHNpbmdsZVF1b3RlcyA9IDAsIGRvdWJsZVF1b3RlcyA9IDAsIHNpbmdsZSwgcXVvdGU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gc3RyLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICBjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY29kZSA9PT0gMHgyNyAgLyogJyAqLykge1xuICAgICAgICAgICAgICAgICsrc2luZ2xlUXVvdGVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIyICAvKiBcIiAqLykge1xuICAgICAgICAgICAgICAgICsrZG91YmxlUXVvdGVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDJGICAvKiAvICovICYmIGpzb24pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlc3V0aWxzLmNvZGUuaXNMaW5lVGVybWluYXRvcihjb2RlKSB8fCBjb2RlID09PSAweDVDICAvKiBcXCAqLykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGVEaXNhbGxvd2VkQ2hhcmFjdGVyKGNvZGUpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXN1dGlscy5jb2RlLmlzSWRlbnRpZmllclBhcnRFUzUoY29kZSkgJiYgKGpzb24gJiYgY29kZSA8IDB4MjAgIC8qIFNQICovIHx8ICFqc29uICYmICFlc2NhcGVsZXNzICYmIChjb2RlIDwgMHgyMCAgLyogU1AgKi8gfHwgY29kZSA+IDB4N0UgIC8qIH4gKi8pKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGVBbGxvd2VkQ2hhcmFjdGVyKGNvZGUsIHN0ci5jaGFyQ29kZUF0KGkgKyAxKSk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNpbmdsZSA9ICEocXVvdGVzID09PSAnZG91YmxlJyB8fCAocXVvdGVzID09PSAnYXV0bycgJiYgZG91YmxlUXVvdGVzIDwgc2luZ2xlUXVvdGVzKSk7XG4gICAgICAgIHF1b3RlID0gc2luZ2xlID8gJ1xcJycgOiAnXCInO1xuXG4gICAgICAgIGlmICghKHNpbmdsZSA/IHNpbmdsZVF1b3RlcyA6IGRvdWJsZVF1b3RlcykpIHtcbiAgICAgICAgICAgIHJldHVybiBxdW90ZSArIHJlc3VsdCArIHF1b3RlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RyID0gcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBxdW90ZTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHIubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmICgoY29kZSA9PT0gMHgyNyAgLyogJyAqLyAmJiBzaW5nbGUpIHx8IChjb2RlID09PSAweDIyICAvKiBcIiAqLyAmJiAhc2luZ2xlKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnXFxcXCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQgKyBxdW90ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBmbGF0dGVuIGFuIGFycmF5IHRvIGEgc3RyaW5nLCB3aGVyZSB0aGUgYXJyYXkgY2FuIGNvbnRhaW5cbiAgICAgKiBlaXRoZXIgc3RyaW5ncyBvciBuZXN0ZWQgYXJyYXlzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlblRvU3RyaW5nKGFycikge1xuICAgICAgICB2YXIgaSwgaXosIGVsZW0sIHJlc3VsdCA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IGFyci5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICBlbGVtID0gYXJyW2ldO1xuICAgICAgICAgICAgcmVzdWx0ICs9IEFycmF5LmlzQXJyYXkoZWxlbSkgPyBmbGF0dGVuVG9TdHJpbmcoZWxlbSkgOiBlbGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY29udmVydCBnZW5lcmF0ZWQgdG8gYSBTb3VyY2VOb2RlIHdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChnZW5lcmF0ZWQsIG5vZGUpIHtcbiAgICAgICAgaWYgKCFzb3VyY2VNYXApIHtcbiAgICAgICAgICAgIC8vIHdpdGggbm8gc291cmNlIG1hcHMsIGdlbmVyYXRlZCBpcyBlaXRoZXIgYW5cbiAgICAgICAgICAgIC8vIGFycmF5IG9yIGEgc3RyaW5nLiAgaWYgYW4gYXJyYXksIGZsYXR0ZW4gaXQuXG4gICAgICAgICAgICAvLyBpZiBhIHN0cmluZywganVzdCByZXR1cm4gaXRcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGdlbmVyYXRlZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmxhdHRlblRvU3RyaW5nKGdlbmVyYXRlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGdlbmVyYXRlZCBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubG9jID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU291cmNlTm9kZShudWxsLCBudWxsLCBzb3VyY2VNYXAsIGdlbmVyYXRlZCwgbm9kZS5uYW1lIHx8IG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU291cmNlTm9kZShub2RlLmxvYy5zdGFydC5saW5lLCBub2RlLmxvYy5zdGFydC5jb2x1bW4sIChzb3VyY2VNYXAgPT09IHRydWUgPyBub2RlLmxvYy5zb3VyY2UgfHwgbnVsbCA6IHNvdXJjZU1hcCksIGdlbmVyYXRlZCwgbm9kZS5uYW1lIHx8IG51bGwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vRW1wdHlTcGFjZSgpIHtcbiAgICAgICAgcmV0dXJuIChzcGFjZSkgPyBzcGFjZSA6ICcgJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBqb2luKGxlZnQsIHJpZ2h0KSB7XG4gICAgICAgIHZhciBsZWZ0U291cmNlLFxuICAgICAgICAgICAgcmlnaHRTb3VyY2UsXG4gICAgICAgICAgICBsZWZ0Q2hhckNvZGUsXG4gICAgICAgICAgICByaWdodENoYXJDb2RlO1xuXG4gICAgICAgIGxlZnRTb3VyY2UgPSB0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKGxlZnQpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChsZWZ0U291cmNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtyaWdodF07XG4gICAgICAgIH1cblxuICAgICAgICByaWdodFNvdXJjZSA9IHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmlnaHQpLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChyaWdodFNvdXJjZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbbGVmdF07XG4gICAgICAgIH1cblxuICAgICAgICBsZWZ0Q2hhckNvZGUgPSBsZWZ0U291cmNlLmNoYXJDb2RlQXQobGVmdFNvdXJjZS5sZW5ndGggLSAxKTtcbiAgICAgICAgcmlnaHRDaGFyQ29kZSA9IHJpZ2h0U291cmNlLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgICAgaWYgKChsZWZ0Q2hhckNvZGUgPT09IDB4MkIgIC8qICsgKi8gfHwgbGVmdENoYXJDb2RlID09PSAweDJEICAvKiAtICovKSAmJiBsZWZ0Q2hhckNvZGUgPT09IHJpZ2h0Q2hhckNvZGUgfHxcbiAgICAgICAgICAgIGVzdXRpbHMuY29kZS5pc0lkZW50aWZpZXJQYXJ0RVM1KGxlZnRDaGFyQ29kZSkgJiYgZXN1dGlscy5jb2RlLmlzSWRlbnRpZmllclBhcnRFUzUocmlnaHRDaGFyQ29kZSkgfHxcbiAgICAgICAgICAgIGxlZnRDaGFyQ29kZSA9PT0gMHgyRiAgLyogLyAqLyAmJiByaWdodENoYXJDb2RlID09PSAweDY5ICAvKiBpICovKSB7IC8vIGluZml4IHdvcmQgb3BlcmF0b3JzIGFsbCBzdGFydCB3aXRoIGBpYFxuICAgICAgICAgICAgcmV0dXJuIFtsZWZ0LCBub0VtcHR5U3BhY2UoKSwgcmlnaHRdO1xuICAgICAgICB9IGVsc2UgaWYgKGVzdXRpbHMuY29kZS5pc1doaXRlU3BhY2UobGVmdENoYXJDb2RlKSB8fCBlc3V0aWxzLmNvZGUuaXNMaW5lVGVybWluYXRvcihsZWZ0Q2hhckNvZGUpIHx8XG4gICAgICAgICAgICAgICAgZXN1dGlscy5jb2RlLmlzV2hpdGVTcGFjZShyaWdodENoYXJDb2RlKSB8fCBlc3V0aWxzLmNvZGUuaXNMaW5lVGVybWluYXRvcihyaWdodENoYXJDb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFtsZWZ0LCByaWdodF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtsZWZ0LCBzcGFjZSwgcmlnaHRdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEluZGVudChzdG10KSB7XG4gICAgICAgIHJldHVybiBbYmFzZSwgc3RtdF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2l0aEluZGVudChmbikge1xuICAgICAgICB2YXIgcHJldmlvdXNCYXNlO1xuICAgICAgICBwcmV2aW91c0Jhc2UgPSBiYXNlO1xuICAgICAgICBiYXNlICs9IGluZGVudDtcbiAgICAgICAgZm4oYmFzZSk7XG4gICAgICAgIGJhc2UgPSBwcmV2aW91c0Jhc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2VzKHN0cikge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gc3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICBpZiAoZXN1dGlscy5jb2RlLmlzTGluZVRlcm1pbmF0b3Ioc3RyLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChzdHIubGVuZ3RoIC0gMSkgLSBpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkanVzdE11bHRpbGluZUNvbW1lbnQodmFsdWUsIHNwZWNpYWxCYXNlKSB7XG4gICAgICAgIHZhciBhcnJheSwgaSwgbGVuLCBsaW5lLCBqLCBzcGFjZXMsIHByZXZpb3VzQmFzZSwgc247XG5cbiAgICAgICAgYXJyYXkgPSB2YWx1ZS5zcGxpdCgvXFxyXFxufFtcXHJcXG5dLyk7XG4gICAgICAgIHNwYWNlcyA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAgICAgLy8gZmlyc3QgbGluZSBkb2Vzbid0IGhhdmUgaW5kZW50YXRpb25cbiAgICAgICAgZm9yIChpID0gMSwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGxpbmUgPSBhcnJheVtpXTtcbiAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBsaW5lLmxlbmd0aCAmJiBlc3V0aWxzLmNvZGUuaXNXaGl0ZVNwYWNlKGxpbmUuY2hhckNvZGVBdChqKSkpIHtcbiAgICAgICAgICAgICAgICArK2o7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3BhY2VzID4gaikge1xuICAgICAgICAgICAgICAgIHNwYWNlcyA9IGo7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHNwZWNpYWxCYXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgLy8gcGF0dGVybiBsaWtlXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgIHZhciB0ID0gMjA7ICAvKlxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICogdGhpcyBpcyBjb21tZW50XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIHByZXZpb3VzQmFzZSA9IGJhc2U7XG4gICAgICAgICAgICBpZiAoYXJyYXlbMV1bc3BhY2VzXSA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgc3BlY2lhbEJhc2UgKz0gJyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmFzZSA9IHNwZWNpYWxCYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHNwYWNlcyAmIDEpIHtcbiAgICAgICAgICAgICAgICAvLyAvKlxuICAgICAgICAgICAgICAgIC8vICAqXG4gICAgICAgICAgICAgICAgLy8gICovXG4gICAgICAgICAgICAgICAgLy8gSWYgc3BhY2VzIGFyZSBvZGQgbnVtYmVyLCBhYm92ZSBwYXR0ZXJuIGlzIGNvbnNpZGVyZWQuXG4gICAgICAgICAgICAgICAgLy8gV2Ugd2FzdGUgMSBzcGFjZS5cbiAgICAgICAgICAgICAgICAtLXNwYWNlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzQmFzZSA9IGJhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAxLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgc24gPSB0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKGFkZEluZGVudChhcnJheVtpXS5zbGljZShzcGFjZXMpKSk7XG4gICAgICAgICAgICBhcnJheVtpXSA9IHNvdXJjZU1hcCA/IHNuLmpvaW4oJycpIDogc247XG4gICAgICAgIH1cblxuICAgICAgICBiYXNlID0gcHJldmlvdXNCYXNlO1xuXG4gICAgICAgIHJldHVybiBhcnJheS5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCwgc3BlY2lhbEJhc2UpIHtcbiAgICAgICAgaWYgKGNvbW1lbnQudHlwZSA9PT0gJ0xpbmUnKSB7XG4gICAgICAgICAgICBpZiAoZW5kc1dpdGhMaW5lVGVybWluYXRvcihjb21tZW50LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLy8nICsgY29tbWVudC52YWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQWx3YXlzIHVzZSBMaW5lVGVybWluYXRvclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAnLy8nICsgY29tbWVudC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhLmZvcm1hdC5pbmRlbnQuYWRqdXN0TXVsdGlsaW5lQ29tbWVudCAmJiAvW1xcblxccl0vLnRlc3QoY29tbWVudC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGp1c3RNdWx0aWxpbmVDb21tZW50KCcvKicgKyBjb21tZW50LnZhbHVlICsgJyovJywgc3BlY2lhbEJhc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLyonICsgY29tbWVudC52YWx1ZSArICcqLyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ29tbWVudHMoc3RtdCwgcmVzdWx0KSB7XG4gICAgICAgIHZhciBpLCBsZW4sIGNvbW1lbnQsIHNhdmUsIHRhaWxpbmdUb1N0YXRlbWVudCwgc3BlY2lhbEJhc2UsIGZyYWdtZW50LFxuICAgICAgICAgICAgZXh0UmFuZ2UsIHJhbmdlLCBwcmV2UmFuZ2UsIHByZWZpeCwgaW5maXgsIHN1ZmZpeCwgY291bnQ7XG5cbiAgICAgICAgaWYgKHN0bXQubGVhZGluZ0NvbW1lbnRzICYmIHN0bXQubGVhZGluZ0NvbW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNhdmUgPSByZXN1bHQ7XG5cbiAgICAgICAgICAgIGlmIChwcmVzZXJ2ZUJsYW5rTGluZXMpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gc3RtdC5sZWFkaW5nQ29tbWVudHNbMF07XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgICAgICBleHRSYW5nZSA9IGNvbW1lbnQuZXh0ZW5kZWRSYW5nZTtcbiAgICAgICAgICAgICAgICByYW5nZSA9IGNvbW1lbnQucmFuZ2U7XG5cbiAgICAgICAgICAgICAgICBwcmVmaXggPSBzb3VyY2VDb2RlLnN1YnN0cmluZyhleHRSYW5nZVswXSwgcmFuZ2VbMF0pO1xuICAgICAgICAgICAgICAgIGNvdW50ID0gKHByZWZpeC5tYXRjaCgvXFxuL2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdHJpbmdSZXBlYXQoJ1xcbicsIGNvdW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEluZGVudChnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcmVmaXgpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByZXZSYW5nZSA9IHJhbmdlO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgbGVuID0gc3RtdC5sZWFkaW5nQ29tbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IHN0bXQubGVhZGluZ0NvbW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGNvbW1lbnQucmFuZ2U7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5maXggPSBzb3VyY2VDb2RlLnN1YnN0cmluZyhwcmV2UmFuZ2VbMV0sIHJhbmdlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgY291bnQgPSAoaW5maXgubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdHJpbmdSZXBlYXQoJ1xcbicsIGNvdW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEluZGVudChnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCkpKTtcblxuICAgICAgICAgICAgICAgICAgICBwcmV2UmFuZ2UgPSByYW5nZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdWZmaXggPSBzb3VyY2VDb2RlLnN1YnN0cmluZyhyYW5nZVsxXSwgZXh0UmFuZ2VbMV0pO1xuICAgICAgICAgICAgICAgIGNvdW50ID0gKHN1ZmZpeC5tYXRjaCgvXFxuL2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc3RyaW5nUmVwZWF0KCdcXG4nLCBjb3VudCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gc3RtdC5sZWFkaW5nQ29tbWVudHNbMF07XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHNhZmVDb25jYXRlbmF0aW9uICYmIHN0bXQudHlwZSA9PT0gU3ludGF4LlByb2dyYW0gJiYgc3RtdC5ib2R5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGdlbmVyYXRlQ29tbWVudChjb21tZW50KSk7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgbGVuID0gc3RtdC5sZWFkaW5nQ29tbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IHN0bXQubGVhZGluZ0NvbW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IFtnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChmcmFnbWVudCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEluZGVudChmcmFnbWVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYWRkSW5kZW50KHNhdmUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdG10LnRyYWlsaW5nQ29tbWVudHMpIHtcblxuICAgICAgICAgICAgaWYgKHByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSBzdG10LnRyYWlsaW5nQ29tbWVudHNbMF07XG4gICAgICAgICAgICAgICAgZXh0UmFuZ2UgPSBjb21tZW50LmV4dGVuZGVkUmFuZ2U7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBjb21tZW50LnJhbmdlO1xuXG4gICAgICAgICAgICAgICAgcHJlZml4ID0gc291cmNlQ29kZS5zdWJzdHJpbmcoZXh0UmFuZ2VbMF0sIHJhbmdlWzBdKTtcbiAgICAgICAgICAgICAgICBjb3VudCA9IChwcmVmaXgubWF0Y2goL1xcbi9nKSB8fCBbXSkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdHJpbmdSZXBlYXQoJ1xcbicsIGNvdW50KSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEluZGVudChnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwcmVmaXgpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChnZW5lcmF0ZUNvbW1lbnQoY29tbWVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFpbGluZ1RvU3RhdGVtZW50ID0gIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHNwZWNpYWxCYXNlID0gc3RyaW5nUmVwZWF0KCcgJywgY2FsY3VsYXRlU3BhY2VzKHRvU291cmNlTm9kZVdoZW5OZWVkZWQoW2Jhc2UsIHJlc3VsdCwgaW5kZW50XSkudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN0bXQudHJhaWxpbmdDb21tZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gc3RtdC50cmFpbGluZ0NvbW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFpbGluZ1RvU3RhdGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBhc3N1bWUgdGFyZ2V0IGxpa2UgZm9sbG93aW5nIHNjcmlwdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciB0ID0gMjA7ICAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgKiBUaGlzIGlzIGNvbW1lbnQgb2YgdFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXJzdCBjYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW3Jlc3VsdCwgaW5kZW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW3Jlc3VsdCwgc3BlY2lhbEJhc2VdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZ2VuZXJhdGVDb21tZW50KGNvbW1lbnQsIHNwZWNpYWxCYXNlKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbcmVzdWx0LCBhZGRJbmRlbnQoZ2VuZXJhdGVDb21tZW50KGNvbW1lbnQpKV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGxlbiAtIDEgJiYgIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQpLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbcmVzdWx0LCAnXFxuJ107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQmxhbmtMaW5lcyhzdGFydCwgZW5kLCByZXN1bHQpIHtcbiAgICAgICAgdmFyIGosIG5ld2xpbmVDb3VudCA9IDA7XG5cbiAgICAgICAgZm9yIChqID0gc3RhcnQ7IGogPCBlbmQ7IGorKykge1xuICAgICAgICAgICAgaWYgKHNvdXJjZUNvZGVbal0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgbmV3bGluZUNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAxOyBqIDwgbmV3bGluZUNvdW50OyBqKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld2xpbmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyZW50aGVzaXplKHRleHQsIGN1cnJlbnQsIHNob3VsZCkge1xuICAgICAgICBpZiAoY3VycmVudCA8IHNob3VsZCkge1xuICAgICAgICAgICAgcmV0dXJuIFsnKCcsIHRleHQsICcpJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVWZXJiYXRpbVN0cmluZyhzdHJpbmcpIHtcbiAgICAgICAgdmFyIGksIGl6LCByZXN1bHQ7XG4gICAgICAgIHJlc3VsdCA9IHN0cmluZy5zcGxpdCgvXFxyXFxufFxcbi8pO1xuICAgICAgICBmb3IgKGkgPSAxLCBpeiA9IHJlc3VsdC5sZW5ndGg7IGkgPCBpejsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHRbaV0gPSBuZXdsaW5lICsgYmFzZSArIHJlc3VsdFtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlVmVyYmF0aW0oZXhwciwgcHJlY2VkZW5jZSkge1xuICAgICAgICB2YXIgdmVyYmF0aW0sIHJlc3VsdCwgcHJlYztcbiAgICAgICAgdmVyYmF0aW0gPSBleHByW2V4dHJhLnZlcmJhdGltXTtcblxuICAgICAgICBpZiAodHlwZW9mIHZlcmJhdGltID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcGFyZW50aGVzaXplKGdlbmVyYXRlVmVyYmF0aW1TdHJpbmcodmVyYmF0aW0pLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHZlcmJhdGltIGlzIG9iamVjdFxuICAgICAgICAgICAgcmVzdWx0ID0gZ2VuZXJhdGVWZXJiYXRpbVN0cmluZyh2ZXJiYXRpbS5jb250ZW50KTtcbiAgICAgICAgICAgIHByZWMgPSAodmVyYmF0aW0ucHJlY2VkZW5jZSAhPSBudWxsKSA/IHZlcmJhdGltLnByZWNlZGVuY2UgOiBQcmVjZWRlbmNlLlNlcXVlbmNlO1xuICAgICAgICAgICAgcmVzdWx0ID0gcGFyZW50aGVzaXplKHJlc3VsdCwgcHJlYywgcHJlY2VkZW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQsIGV4cHIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvZGVHZW5lcmF0b3IoKSB7XG4gICAgfVxuXG4gICAgLy8gSGVscGVycy5cblxuICAgIENvZGVHZW5lcmF0b3IucHJvdG90eXBlLm1heWJlQmxvY2sgPSBmdW5jdGlvbihzdG10LCBmbGFncykge1xuICAgICAgICB2YXIgcmVzdWx0LCBub0xlYWRpbmdDb21tZW50LCB0aGF0ID0gdGhpcztcblxuICAgICAgICBub0xlYWRpbmdDb21tZW50ID0gIWV4dHJhLmNvbW1lbnQgfHwgIXN0bXQubGVhZGluZ0NvbW1lbnRzO1xuXG4gICAgICAgIGlmIChzdG10LnR5cGUgPT09IFN5bnRheC5CbG9ja1N0YXRlbWVudCAmJiBub0xlYWRpbmdDb21tZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gW3NwYWNlLCB0aGlzLmdlbmVyYXRlU3RhdGVtZW50KHN0bXQsIGZsYWdzKV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RtdC50eXBlID09PSBTeW50YXguRW1wdHlTdGF0ZW1lbnQgJiYgbm9MZWFkaW5nQ29tbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuICc7JztcbiAgICAgICAgfVxuXG4gICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgIG5ld2xpbmUsXG4gICAgICAgICAgICAgICAgYWRkSW5kZW50KHRoYXQuZ2VuZXJhdGVTdGF0ZW1lbnQoc3RtdCwgZmxhZ3MpKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgQ29kZUdlbmVyYXRvci5wcm90b3R5cGUubWF5YmVCbG9ja1N1ZmZpeCA9IGZ1bmN0aW9uIChzdG10LCByZXN1bHQpIHtcbiAgICAgICAgdmFyIGVuZHMgPSBlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpKTtcbiAgICAgICAgaWYgKHN0bXQudHlwZSA9PT0gU3ludGF4LkJsb2NrU3RhdGVtZW50ICYmICghZXh0cmEuY29tbWVudCB8fCAhc3RtdC5sZWFkaW5nQ29tbWVudHMpICYmICFlbmRzKSB7XG4gICAgICAgICAgICByZXR1cm4gW3Jlc3VsdCwgc3BhY2VdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRzKSB7XG4gICAgICAgICAgICByZXR1cm4gW3Jlc3VsdCwgYmFzZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtyZXN1bHQsIG5ld2xpbmUsIGJhc2VdO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUlkZW50aWZpZXIobm9kZSkge1xuICAgICAgICByZXR1cm4gdG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChub2RlLm5hbWUsIG5vZGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlQXN5bmNQcmVmaXgobm9kZSwgc3BhY2VSZXF1aXJlZCkge1xuICAgICAgICByZXR1cm4gbm9kZS5hc3luYyA/ICdhc3luYycgKyAoc3BhY2VSZXF1aXJlZCA/IG5vRW1wdHlTcGFjZSgpIDogc3BhY2UpIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVTdGFyU3VmZml4KG5vZGUpIHtcbiAgICAgICAgdmFyIGlzR2VuZXJhdG9yID0gbm9kZS5nZW5lcmF0b3IgJiYgIWV4dHJhLm1vei5zdGFybGVzc0dlbmVyYXRvcjtcbiAgICAgICAgcmV0dXJuIGlzR2VuZXJhdG9yID8gJyonICsgc3BhY2UgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU1ldGhvZFByZWZpeChwcm9wKSB7XG4gICAgICAgIHZhciBmdW5jID0gcHJvcC52YWx1ZSwgcHJlZml4ID0gJyc7XG4gICAgICAgIGlmIChmdW5jLmFzeW5jKSB7XG4gICAgICAgICAgICBwcmVmaXggKz0gZ2VuZXJhdGVBc3luY1ByZWZpeChmdW5jLCAhcHJvcC5jb21wdXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZ1bmMuZ2VuZXJhdG9yKSB7XG4gICAgICAgICAgICAvLyBhdm9pZCBzcGFjZSBiZWZvcmUgbWV0aG9kIG5hbWVcbiAgICAgICAgICAgIHByZWZpeCArPSBnZW5lcmF0ZVN0YXJTdWZmaXgoZnVuYykgPyAnKicgOiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgIH1cblxuICAgIENvZGVHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlUGF0dGVybiA9IGZ1bmN0aW9uIChub2RlLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSBTeW50YXguSWRlbnRpZmllcikge1xuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlSWRlbnRpZmllcihub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24obm9kZSwgcHJlY2VkZW5jZSwgZmxhZ3MpO1xuICAgIH07XG5cbiAgICBDb2RlR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZUZ1bmN0aW9uUGFyYW1zID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIGksIGl6LCByZXN1bHQsIGhhc0RlZmF1bHQ7XG5cbiAgICAgICAgaGFzRGVmYXVsdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IFN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiAmJlxuICAgICAgICAgICAgICAgICFub2RlLnJlc3QgJiYgKCFub2RlLmRlZmF1bHRzIHx8IG5vZGUuZGVmYXVsdHMubGVuZ3RoID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIG5vZGUucGFyYW1zLmxlbmd0aCA9PT0gMSAmJiBub2RlLnBhcmFtc1swXS50eXBlID09PSBTeW50YXguSWRlbnRpZmllcikge1xuICAgICAgICAgICAgLy8gYXJnID0+IHsgfSBjYXNlXG4gICAgICAgICAgICByZXN1bHQgPSBbZ2VuZXJhdGVBc3luY1ByZWZpeChub2RlLCB0cnVlKSwgZ2VuZXJhdGVJZGVudGlmaWVyKG5vZGUucGFyYW1zWzBdKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSBub2RlLnR5cGUgPT09IFN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA/IFtnZW5lcmF0ZUFzeW5jUHJlZml4KG5vZGUsIGZhbHNlKV0gOiBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcoJyk7XG4gICAgICAgICAgICBpZiAobm9kZS5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIGhhc0RlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBub2RlLnBhcmFtcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0RlZmF1bHQgJiYgbm9kZS5kZWZhdWx0c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2VuZXJhdGVBc3NpZ25tZW50KG5vZGUucGFyYW1zW2ldLCBub2RlLmRlZmF1bHRzW2ldLCAnPScsIFByZWNlZGVuY2UuQXNzaWdubWVudCwgRV9UVFQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlUGF0dGVybihub2RlLnBhcmFtc1tpXSwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBpeikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZS5yZXN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucGFyYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcuLi4nKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChnZW5lcmF0ZUlkZW50aWZpZXIobm9kZS5yZXN0KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcpJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBDb2RlR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZUZ1bmN0aW9uQm9keSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciByZXN1bHQsIGV4cHI7XG5cbiAgICAgICAgcmVzdWx0ID0gdGhpcy5nZW5lcmF0ZUZ1bmN0aW9uUGFyYW1zKG5vZGUpO1xuXG4gICAgICAgIGlmIChub2RlLnR5cGUgPT09IFN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goc3BhY2UpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJz0+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZS5leHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChzcGFjZSk7XG4gICAgICAgICAgICBleHByID0gdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24obm9kZS5ib2R5LCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIEVfVFRUKTtcbiAgICAgICAgICAgIGlmIChleHByLnRvU3RyaW5nKCkuY2hhckF0KDApID09PSAneycpIHtcbiAgICAgICAgICAgICAgICBleHByID0gWycoJywgZXhwciwgJyknXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGV4cHIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5tYXliZUJsb2NrKG5vZGUuYm9keSwgU19UVEZGKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBDb2RlR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZUl0ZXJhdGlvbkZvclN0YXRlbWVudCA9IGZ1bmN0aW9uIChvcGVyYXRvciwgc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFsnZm9yJyArIChzdG10LmF3YWl0ID8gbm9FbXB0eVNwYWNlKCkgKyAnYXdhaXQnIDogJycpICsgc3BhY2UgKyAnKCddLCB0aGF0ID0gdGhpcztcbiAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc3RtdC5sZWZ0LnR5cGUgPT09IFN5bnRheC5WYXJpYWJsZURlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHN0bXQubGVmdC5raW5kICsgbm9FbXB0eVNwYWNlKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlU3RhdGVtZW50KHN0bXQubGVmdC5kZWNsYXJhdGlvbnNbMF0sIFNfRkZGRikpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LmxlZnQsIFByZWNlZGVuY2UuQ2FsbCwgRV9UVFQpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIG9wZXJhdG9yKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IFtqb2luKFxuICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICB0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnJpZ2h0LCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIEVfVFRUKVxuICAgICAgICAgICAgKSwgJyknXTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMubWF5YmVCbG9jayhzdG10LmJvZHksIGZsYWdzKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIENvZGVHZW5lcmF0b3IucHJvdG90eXBlLmdlbmVyYXRlUHJvcGVydHlLZXkgPSBmdW5jdGlvbiAoZXhwciwgY29tcHV0ZWQpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGlmIChjb21wdXRlZCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJ1snKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIsIFByZWNlZGVuY2UuQXNzaWdubWVudCwgRV9UVFQpKTtcblxuICAgICAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCddJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBDb2RlR2VuZXJhdG9yLnByb3RvdHlwZS5nZW5lcmF0ZUFzc2lnbm1lbnQgPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIG9wZXJhdG9yLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICBpZiAoUHJlY2VkZW5jZS5Bc3NpZ25tZW50IDwgcHJlY2VkZW5jZSkge1xuICAgICAgICAgICAgZmxhZ3MgfD0gRl9BTExPV19JTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUoXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24obGVmdCwgUHJlY2VkZW5jZS5DYWxsLCBmbGFncyksXG4gICAgICAgICAgICAgICAgc3BhY2UgKyBvcGVyYXRvciArIHNwYWNlLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKHJpZ2h0LCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIGZsYWdzKVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFByZWNlZGVuY2UuQXNzaWdubWVudCxcbiAgICAgICAgICAgIHByZWNlZGVuY2VcbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgQ29kZUdlbmVyYXRvci5wcm90b3R5cGUuc2VtaWNvbG9uID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgICAgIGlmICghc2VtaWNvbG9ucyAmJiBmbGFncyAmIEZfU0VNSUNPTE9OX09QVCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnOyc7XG4gICAgfTtcblxuICAgIC8vIFN0YXRlbWVudHMuXG5cbiAgICBDb2RlR2VuZXJhdG9yLlN0YXRlbWVudCA9IHtcblxuICAgICAgICBCbG9ja1N0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2UsIGNvbnRlbnQsIHJlc3VsdCA9IFsneycsIG5ld2xpbmVdLCB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIGZ1bmN0aW9ucyB3aXRob3V0IGFueSBjb2RlXG4gICAgICAgICAgICAgICAgaWYgKHN0bXQuYm9keS5sZW5ndGggPT09IDAgJiYgcHJlc2VydmVCbGFua0xpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gc3RtdC5yYW5nZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlWzFdIC0gcmFuZ2VbMF0gPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gc291cmNlQ29kZS5zdWJzdHJpbmcocmFuZ2VbMF0gKyAxLCByYW5nZVsxXSAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gWyd7J107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjb250ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBpLCBpeiwgZnJhZ21lbnQsIGJvZHlGbGFncztcbiAgICAgICAgICAgICAgICBib2R5RmxhZ3MgPSBTX1RGRkY7XG4gICAgICAgICAgICAgICAgaWYgKGZsYWdzICYgRl9GVU5DX0JPRFkpIHtcbiAgICAgICAgICAgICAgICAgICAgYm9keUZsYWdzIHw9IEZfRElSRUNUSVZFX0NUWDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IHN0bXQuYm9keS5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmVzZXJ2ZUJsYW5rTGluZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBzcGFjZXMgYmVmb3JlIHRoZSBmaXJzdCBsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG10LmJvZHlbMF0ubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gc3RtdC5ib2R5WzBdLmxlYWRpbmdDb21tZW50c1swXS5leHRlbmRlZFJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gc291cmNlQ29kZS5zdWJzdHJpbmcocmFuZ2VbMF0sIHJhbmdlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbJ3snXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0bXQuYm9keVswXS5sZWFkaW5nQ29tbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVCbGFua0xpbmVzKHN0bXQucmFuZ2VbMF0sIHN0bXQuYm9keVswXS5yYW5nZVswXSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBzcGFjZXMgYmV0d2VlbiBsaW5lc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG10LmJvZHlbaSAtIDFdLnRyYWlsaW5nQ29tbWVudHMgICYmICFzdG10LmJvZHlbaV0ubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlQmxhbmtMaW5lcyhzdG10LmJvZHlbaSAtIDFdLnJhbmdlWzFdLCBzdG10LmJvZHlbaV0ucmFuZ2VbMF0sIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGl6IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUZsYWdzIHw9IEZfU0VNSUNPTE9OX09QVDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG10LmJvZHlbaV0ubGVhZGluZ0NvbW1lbnRzICYmIHByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGF0LmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuYm9keVtpXSwgYm9keUZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gYWRkSW5kZW50KHRoYXQuZ2VuZXJhdGVTdGF0ZW1lbnQoc3RtdC5ib2R5W2ldLCBib2R5RmxhZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQoZnJhZ21lbnQpLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJlc2VydmVCbGFua0xpbmVzICYmIGkgPCBpeiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb24ndCBhZGQgYSBuZXcgbGluZSBpZiB0aGVyZSBhcmUgbGVhZGluZyBjb21lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIG5leHQgc3RhdGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG10LmJvZHlbaSArIDFdLmxlYWRpbmdDb21tZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld2xpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIHNwYWNlcyBhZnRlciB0aGUgbGFzdCBsaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaXogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG10LmJvZHlbaV0udHJhaWxpbmdDb21tZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUJsYW5rTGluZXMoc3RtdC5ib2R5W2ldLnJhbmdlWzFdLCBzdG10LnJhbmdlWzFdLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXN1bHQucHVzaChhZGRJbmRlbnQoJ30nKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIEJyZWFrU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIGlmIChzdG10LmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdicmVhayAnICsgc3RtdC5sYWJlbC5uYW1lICsgdGhpcy5zZW1pY29sb24oZmxhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICdicmVhaycgKyB0aGlzLnNlbWljb2xvbihmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQ29udGludWVTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgaWYgKHN0bXQubGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlICcgKyBzdG10LmxhYmVsLm5hbWUgKyB0aGlzLnNlbWljb2xvbihmbGFncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ2NvbnRpbnVlJyArIHRoaXMuc2VtaWNvbG9uKGZsYWdzKTtcbiAgICAgICAgfSxcblxuICAgICAgICBDbGFzc0JvZHk6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFsgJ3snLCBuZXdsaW5lXSwgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKGluZGVudCkge1xuICAgICAgICAgICAgICAgIHZhciBpLCBpejtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGl6ID0gc3RtdC5ib2R5Lmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZW50KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5ib2R5W2ldLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBpeikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld2xpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYmFzZSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnfScpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBDbGFzc0RlY2xhcmF0aW9uOiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGZyYWdtZW50O1xuICAgICAgICAgICAgcmVzdWx0ICA9IFsnY2xhc3MnXTtcbiAgICAgICAgICAgIGlmIChzdG10LmlkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQuaWQsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RtdC5zdXBlckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBqb2luKCdleHRlbmRzJywgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zdXBlckNsYXNzLCBQcmVjZWRlbmNlLlVuYXJ5LCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaChzcGFjZSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuYm9keSwgU19URkZUKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIERpcmVjdGl2ZVN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICBpZiAoZXh0cmEucmF3ICYmIHN0bXQucmF3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0bXQucmF3ICsgdGhpcy5zZW1pY29sb24oZmxhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZURpcmVjdGl2ZShzdG10LmRpcmVjdGl2ZSkgKyB0aGlzLnNlbWljb2xvbihmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRG9XaGlsZVN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICAvLyBCZWNhdXNlIGBkbyA0MiB3aGlsZSAoY29uZClgIGlzIFN5bnRheCBFcnJvci4gV2UgbmVlZCBzZW1pY29sb24uXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gam9pbignZG8nLCB0aGlzLm1heWJlQmxvY2soc3RtdC5ib2R5LCBTX1RGRkYpKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubWF5YmVCbG9ja1N1ZmZpeChzdG10LmJvZHksIHJlc3VsdCk7XG4gICAgICAgICAgICByZXR1cm4gam9pbihyZXN1bHQsIFtcbiAgICAgICAgICAgICAgICAnd2hpbGUnICsgc3BhY2UgKyAnKCcsXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC50ZXN0LCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCksXG4gICAgICAgICAgICAgICAgJyknICsgdGhpcy5zZW1pY29sb24oZmxhZ3MpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSxcblxuICAgICAgICBDYXRjaENsYXVzZTogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBndWFyZDtcblxuICAgICAgICAgICAgICAgIGlmIChzdG10LnBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXRjaCcgKyBzcGFjZSArICcoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQucGFyYW0sIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICcpJ1xuICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG10Lmd1YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBndWFyZCA9IHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQuZ3VhcmQsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5zcGxpY2UoMiwgMCwgJyBpZiAnLCBndWFyZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBbJ2NhdGNoJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLm1heWJlQmxvY2soc3RtdC5ib2R5LCBTX1RGRkYpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRGVidWdnZXJTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuICdkZWJ1Z2dlcicgKyB0aGlzLnNlbWljb2xvbihmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRW1wdHlTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuICc7JztcbiAgICAgICAgfSxcblxuICAgICAgICBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb246IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFsgJ2V4cG9ydCcgXSwgYm9keUZsYWdzO1xuXG4gICAgICAgICAgICBib2R5RmxhZ3MgPSAoZmxhZ3MgJiBGX1NFTUlDT0xPTl9PUFQpID8gU19URkZUIDogU19URkZGO1xuXG4gICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBIb2lzdGFibGVEZWNsYXJhdGlvbltEZWZhdWx0XVxuICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgQXNzaWdubWVudEV4cHJlc3Npb25bSW5dIDtcbiAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCAnZGVmYXVsdCcpO1xuICAgICAgICAgICAgaWYgKGlzU3RhdGVtZW50KHN0bXQuZGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIHRoaXMuZ2VuZXJhdGVTdGF0ZW1lbnQoc3RtdC5kZWNsYXJhdGlvbiwgYm9keUZsYWdzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LmRlY2xhcmF0aW9uLCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIEVfVFRUKSArIHRoaXMuc2VtaWNvbG9uKGZsYWdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIEV4cG9ydE5hbWVkRGVjbGFyYXRpb246IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFsgJ2V4cG9ydCcgXSwgYm9keUZsYWdzLCB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgYm9keUZsYWdzID0gKGZsYWdzICYgRl9TRU1JQ09MT05fT1BUKSA/IFNfVEZGVCA6IFNfVEZGRjtcblxuICAgICAgICAgICAgLy8gZXhwb3J0IFZhcmlhYmxlU3RhdGVtZW50XG4gICAgICAgICAgICAvLyBleHBvcnQgRGVjbGFyYXRpb25bRGVmYXVsdF1cbiAgICAgICAgICAgIGlmIChzdG10LmRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuZGVjbGFyYXRpb24sIGJvZHlGbGFncykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBleHBvcnQgRXhwb3J0Q2xhdXNlW05vUmVmZXJlbmNlXSBGcm9tQ2xhdXNlIDtcbiAgICAgICAgICAgIC8vIGV4cG9ydCBFeHBvcnRDbGF1c2UgO1xuICAgICAgICAgICAgaWYgKHN0bXQuc3BlY2lmaWVycykge1xuICAgICAgICAgICAgICAgIGlmIChzdG10LnNwZWNpZmllcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCAneycgKyBzcGFjZSArICd9Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdG10LnNwZWNpZmllcnNbMF0udHlwZSA9PT0gU3ludGF4LkV4cG9ydEJhdGNoU3BlY2lmaWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnNwZWNpZmllcnNbMF0sIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsICd7Jyk7XG4gICAgICAgICAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKGluZGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIGl6O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IHN0bXQuc3BlY2lmaWVycy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnNwZWNpZmllcnNbaV0sIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgaXopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJywnICsgbmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYmFzZSArICd9Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0bXQuc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnZnJvbScgKyBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1vZHVsZVNwZWNpZmllclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zb3VyY2UsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VtaWNvbG9uKGZsYWdzKVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLnNlbWljb2xvbihmbGFncykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRXhwb3J0QWxsRGVjbGFyYXRpb246IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgLy8gZXhwb3J0ICogRnJvbUNsYXVzZSA7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICdleHBvcnQnICsgc3BhY2UsXG4gICAgICAgICAgICAgICAgJyonICsgc3BhY2UsXG4gICAgICAgICAgICAgICAgJ2Zyb20nICsgc3BhY2UsXG4gICAgICAgICAgICAgICAgLy8gTW9kdWxlU3BlY2lmaWVyXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zb3VyY2UsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWljb2xvbihmbGFncylcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgRXhwcmVzc2lvblN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBmcmFnbWVudDtcblxuICAgICAgICAgICAgZnVuY3Rpb24gaXNDbGFzc1ByZWZpeGVkKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgICAgICAgICAgaWYgKGZyYWdtZW50LnNsaWNlKDAsIDUpICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29kZSA9IGZyYWdtZW50LmNoYXJDb2RlQXQoNSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvZGUgPT09IDB4N0IgIC8qICd7JyAqLyB8fCBlc3V0aWxzLmNvZGUuaXNXaGl0ZVNwYWNlKGNvZGUpIHx8IGVzdXRpbHMuY29kZS5pc0xpbmVUZXJtaW5hdG9yKGNvZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uUHJlZml4ZWQoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZTtcbiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQuc2xpY2UoMCwgOCkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb2RlID0gZnJhZ21lbnQuY2hhckNvZGVBdCg4KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZSA9PT0gMHgyOCAvKiAnKCcgKi8gfHwgZXN1dGlscy5jb2RlLmlzV2hpdGVTcGFjZShjb2RlKSB8fCBjb2RlID09PSAweDJBICAvKiAnKicgKi8gfHwgZXN1dGlscy5jb2RlLmlzTGluZVRlcm1pbmF0b3IoY29kZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzQXN5bmNQcmVmaXhlZChmcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBjb2RlLCBpLCBpejtcbiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQuc2xpY2UoMCwgNSkgIT09ICdhc3luYycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWVzdXRpbHMuY29kZS5pc1doaXRlU3BhY2UoZnJhZ21lbnQuY2hhckNvZGVBdCg1KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSA2LCBpeiA9IGZyYWdtZW50Lmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlc3V0aWxzLmNvZGUuaXNXaGl0ZVNwYWNlKGZyYWdtZW50LmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaXopIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZnJhZ21lbnQuc2xpY2UoaSwgaSArIDgpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29kZSA9IGZyYWdtZW50LmNoYXJDb2RlQXQoaSArIDgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlID09PSAweDI4IC8qICcoJyAqLyB8fCBlc3V0aWxzLmNvZGUuaXNXaGl0ZVNwYWNlKGNvZGUpIHx8IGNvZGUgPT09IDB4MkEgIC8qICcqJyAqLyB8fCBlc3V0aWxzLmNvZGUuaXNMaW5lVGVybWluYXRvcihjb2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0ID0gW3RoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQuZXhwcmVzc2lvbiwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpXTtcbiAgICAgICAgICAgIC8vIDEyLjQgJ3snLCAnZnVuY3Rpb24nLCAnY2xhc3MnIGlzIG5vdCBhbGxvd2VkIGluIHRoaXMgcG9zaXRpb24uXG4gICAgICAgICAgICAvLyB3cmFwIGV4cHJlc3Npb24gd2l0aCBwYXJlbnRoZXNlc1xuICAgICAgICAgICAgZnJhZ21lbnQgPSB0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKHJlc3VsdCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGlmIChmcmFnbWVudC5jaGFyQ29kZUF0KDApID09PSAweDdCICAvKiAneycgKi8gfHwgIC8vIE9iamVjdEV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgaXNDbGFzc1ByZWZpeGVkKGZyYWdtZW50KSB8fFxuICAgICAgICAgICAgICAgICAgICBpc0Z1bmN0aW9uUHJlZml4ZWQoZnJhZ21lbnQpIHx8XG4gICAgICAgICAgICAgICAgICAgIGlzQXN5bmNQcmVmaXhlZChmcmFnbWVudCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGRpcmVjdGl2ZSAmJiAoZmxhZ3MgJiBGX0RJUkVDVElWRV9DVFgpICYmIHN0bXQuZXhwcmVzc2lvbi50eXBlID09PSBTeW50YXguTGl0ZXJhbCAmJiB0eXBlb2Ygc3RtdC5leHByZXNzaW9uLnZhbHVlID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbJygnLCByZXN1bHQsICcpJyArIHRoaXMuc2VtaWNvbG9uKGZsYWdzKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuc2VtaWNvbG9uKGZsYWdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIEltcG9ydERlY2xhcmF0aW9uOiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIC8vIEVTNjogMTUuMi4xIHZhbGlkIGltcG9ydCBkZWNsYXJhdGlvbnM6XG4gICAgICAgICAgICAvLyAgICAgLSBpbXBvcnQgSW1wb3J0Q2xhdXNlIEZyb21DbGF1c2UgO1xuICAgICAgICAgICAgLy8gICAgIC0gaW1wb3J0IE1vZHVsZVNwZWNpZmllciA7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBjdXJzb3IsIHRoYXQgPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBJbXBvcnRDbGF1c2UgaXMgcHJlc2VudCxcbiAgICAgICAgICAgIC8vIHRoaXMgc2hvdWxkIGJlIGBpbXBvcnQgTW9kdWxlU3BlY2lmaWVyYCBzbyBza2lwIGBmcm9tYFxuICAgICAgICAgICAgLy8gTW9kdWxlU3BlY2lmaWVyIGlzIFN0cmluZ0xpdGVyYWwuXG4gICAgICAgICAgICBpZiAoc3RtdC5zcGVjaWZpZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIGltcG9ydCBNb2R1bGVTcGVjaWZpZXIgO1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICdpbXBvcnQnLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gTW9kdWxlU3BlY2lmaWVyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQuc291cmNlLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VtaWNvbG9uKGZsYWdzKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGltcG9ydCBJbXBvcnRDbGF1c2UgRnJvbUNsYXVzZSA7XG4gICAgICAgICAgICByZXN1bHQgPSBbXG4gICAgICAgICAgICAgICAgJ2ltcG9ydCdcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBjdXJzb3IgPSAwO1xuXG4gICAgICAgICAgICAvLyBJbXBvcnRlZEJpbmRpbmdcbiAgICAgICAgICAgIGlmIChzdG10LnNwZWNpZmllcnNbY3Vyc29yXS50eXBlID09PSBTeW50YXguSW1wb3J0RGVmYXVsdFNwZWNpZmllcikge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnNwZWNpZmllcnNbY3Vyc29yXSwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgKytjdXJzb3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdG10LnNwZWNpZmllcnNbY3Vyc29yXSkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJzb3IgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJywnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RtdC5zcGVjaWZpZXJzW2N1cnNvcl0udHlwZSA9PT0gU3ludGF4LkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBOYW1lU3BhY2VJbXBvcnRcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnNwZWNpZmllcnNbY3Vyc29yXSwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5hbWVkSW1wb3J0c1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzcGFjZSArICd7Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKChzdG10LnNwZWNpZmllcnMubGVuZ3RoIC0gY3Vyc29yKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0IHsgLi4uIH0gZnJvbSBcIi4uLlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc3BhY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zcGVjaWZpZXJzW2N1cnNvcl0sIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzcGFjZSArICd9JyArIHNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGltcG9ydCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAuLi4sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAuLi4sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9IGZyb20gXCIuLi5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKGluZGVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBpejtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjdXJzb3IsIGl6ID0gc3RtdC5zcGVjaWZpZXJzLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zcGVjaWZpZXJzW2ldLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBpeikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJywnICsgbmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW5kc1dpdGhMaW5lVGVybWluYXRvcih0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKHJlc3VsdCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJhc2UgKyAnfScgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBbXG4gICAgICAgICAgICAgICAgJ2Zyb20nICsgc3BhY2UsXG4gICAgICAgICAgICAgICAgLy8gTW9kdWxlU3BlY2lmaWVyXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5zb3VyY2UsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWljb2xvbihmbGFncylcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBWYXJpYWJsZURlY2xhcmF0b3I6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIGl0ZW1GbGFncyA9IChmbGFncyAmIEZfQUxMT1dfSU4pID8gRV9UVFQgOiBFX0ZUVDtcbiAgICAgICAgICAgIGlmIChzdG10LmluaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LmlkLCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIGl0ZW1GbGFncyksXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAnPScsXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LmluaXQsIFByZWNlZGVuY2UuQXNzaWdubWVudCwgaXRlbUZsYWdzKVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVBhdHRlcm4oc3RtdC5pZCwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBpdGVtRmxhZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFZhcmlhYmxlRGVjbGFyYXRpb246IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgLy8gVmFyaWFibGVEZWNsYXJhdG9yIGlzIHR5cGVkIGFzIFN0YXRlbWVudCxcbiAgICAgICAgICAgIC8vIGJ1dCBqb2luZWQgd2l0aCBjb21tYSAobm90IExpbmVUZXJtaW5hdG9yKS5cbiAgICAgICAgICAgIC8vIFNvIGlmIGNvbW1lbnQgaXMgYXR0YWNoZWQgdG8gdGFyZ2V0IG5vZGUsIHdlIHNob3VsZCBzcGVjaWFsaXplLlxuICAgICAgICAgICAgdmFyIHJlc3VsdCwgaSwgaXosIG5vZGUsIGJvZHlGbGFncywgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IFsgc3RtdC5raW5kIF07XG5cbiAgICAgICAgICAgIGJvZHlGbGFncyA9IChmbGFncyAmIEZfQUxMT1dfSU4pID8gU19URkZGIDogU19GRkZGO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBibG9jaygpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gc3RtdC5kZWNsYXJhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGV4dHJhLmNvbW1lbnQgJiYgbm9kZS5sZWFkaW5nQ29tbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChhZGRJbmRlbnQodGhhdC5nZW5lcmF0ZVN0YXRlbWVudChub2RlLCBib2R5RmxhZ3MpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9FbXB0eVNwYWNlKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlU3RhdGVtZW50KG5vZGUsIGJvZHlGbGFncykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDEsIGl6ID0gc3RtdC5kZWNsYXJhdGlvbnMubGVuZ3RoOyBpIDwgaXo7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gc3RtdC5kZWNsYXJhdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChleHRyYS5jb21tZW50ICYmIG5vZGUubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyBuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFkZEluZGVudCh0aGF0LmdlbmVyYXRlU3RhdGVtZW50KG5vZGUsIGJvZHlGbGFncykpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcsJyArIHNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoYXQuZ2VuZXJhdGVTdGF0ZW1lbnQobm9kZSwgYm9keUZsYWdzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdG10LmRlY2xhcmF0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgd2l0aEluZGVudChibG9jayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJsb2NrKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuc2VtaWNvbG9uKGZsYWdzKSk7XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgVGhyb3dTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIFtqb2luKFxuICAgICAgICAgICAgICAgICd0aHJvdycsXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5hcmd1bWVudCwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpXG4gICAgICAgICAgICApLCB0aGlzLnNlbWljb2xvbihmbGFncyldO1xuICAgICAgICB9LFxuXG4gICAgICAgIFRyeVN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBpLCBpeiwgZ3VhcmRlZEhhbmRsZXJzO1xuXG4gICAgICAgICAgICByZXN1bHQgPSBbJ3RyeScsIHRoaXMubWF5YmVCbG9jayhzdG10LmJsb2NrLCBTX1RGRkYpXTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubWF5YmVCbG9ja1N1ZmZpeChzdG10LmJsb2NrLCByZXN1bHQpO1xuXG4gICAgICAgICAgICBpZiAoc3RtdC5oYW5kbGVycykge1xuICAgICAgICAgICAgICAgIC8vIG9sZCBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IHN0bXQuaGFuZGxlcnMubGVuZ3RoOyBpIDwgaXo7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKHJlc3VsdCwgdGhpcy5nZW5lcmF0ZVN0YXRlbWVudChzdG10LmhhbmRsZXJzW2ldLCBTX1RGRkYpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0bXQuZmluYWxpemVyIHx8IGkgKyAxICE9PSBpeikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tYXliZUJsb2NrU3VmZml4KHN0bXQuaGFuZGxlcnNbaV0uYm9keSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ3VhcmRlZEhhbmRsZXJzID0gc3RtdC5ndWFyZGVkSGFuZGxlcnMgfHwgW107XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IGd1YXJkZWRIYW5kbGVycy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlU3RhdGVtZW50KGd1YXJkZWRIYW5kbGVyc1tpXSwgU19URkZGKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdG10LmZpbmFsaXplciB8fCBpICsgMSAhPT0gaXopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubWF5YmVCbG9ja1N1ZmZpeChndWFyZGVkSGFuZGxlcnNbaV0uYm9keSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG5ldyBpbnRlcmZhY2VcbiAgICAgICAgICAgICAgICBpZiAoc3RtdC5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0bXQuaGFuZGxlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGl6ID0gc3RtdC5oYW5kbGVyLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKHJlc3VsdCwgdGhpcy5nZW5lcmF0ZVN0YXRlbWVudChzdG10LmhhbmRsZXJbaV0sIFNfVEZGRikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG10LmZpbmFsaXplciB8fCBpICsgMSAhPT0gaXopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tYXliZUJsb2NrU3VmZml4KHN0bXQuaGFuZGxlcltpXS5ib2R5LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuaGFuZGxlciwgU19URkZGKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RtdC5maW5hbGl6ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1heWJlQmxvY2tTdWZmaXgoc3RtdC5oYW5kbGVyLmJvZHksIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RtdC5maW5hbGl6ZXIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKHJlc3VsdCwgWydmaW5hbGx5JywgdGhpcy5tYXliZUJsb2NrKHN0bXQuZmluYWxpemVyLCBTX1RGRkYpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIFN3aXRjaFN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBmcmFnbWVudCwgaSwgaXosIGJvZHlGbGFncywgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB3aXRoSW5kZW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbXG4gICAgICAgICAgICAgICAgICAgICdzd2l0Y2gnICsgc3BhY2UgKyAnKCcsXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQuZGlzY3JpbWluYW50LCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCksXG4gICAgICAgICAgICAgICAgICAgICcpJyArIHNwYWNlICsgJ3snICsgbmV3bGluZVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzdG10LmNhc2VzKSB7XG4gICAgICAgICAgICAgICAgYm9keUZsYWdzID0gU19URkZGO1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGl6ID0gc3RtdC5jYXNlcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBpeiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlGbGFncyB8PSBGX1NFTUlDT0xPTl9PUFQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBhZGRJbmRlbnQodGhpcy5nZW5lcmF0ZVN0YXRlbWVudChzdG10LmNhc2VzW2ldLCBib2R5RmxhZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChmcmFnbWVudCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld2xpbmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYWRkSW5kZW50KCd9JykpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBTd2l0Y2hDYXNlOiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGZyYWdtZW50LCBpLCBpeiwgYm9keUZsYWdzLCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChzdG10LnRlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgam9pbignY2FzZScsIHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQudGVzdCwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICc6J1xuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFsnZGVmYXVsdDonXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICBpeiA9IHN0bXQuY29uc2VxdWVudC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGl6ICYmIHN0bXQuY29uc2VxdWVudFswXS50eXBlID09PSBTeW50YXguQmxvY2tTdGF0ZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGF0Lm1heWJlQmxvY2soc3RtdC5jb25zZXF1ZW50WzBdLCBTX1RGRkYpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGkgPSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBpeiAmJiAhZW5kc1dpdGhMaW5lVGVybWluYXRvcih0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKHJlc3VsdCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYm9keUZsYWdzID0gU19URkZGO1xuICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgaXo7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaXogLSAxICYmIGZsYWdzICYgRl9TRU1JQ09MT05fT1BUKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5RmxhZ3MgfD0gRl9TRU1JQ09MT05fT1BUO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gYWRkSW5kZW50KHRoYXQuZ2VuZXJhdGVTdGF0ZW1lbnQoc3RtdC5jb25zZXF1ZW50W2ldLCBib2R5RmxhZ3MpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSArIDEgIT09IGl6ICYmICFlbmRzV2l0aExpbmVUZXJtaW5hdG9yKHRvU291cmNlTm9kZVdoZW5OZWVkZWQoZnJhZ21lbnQpLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBJZlN0YXRlbWVudDogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBib2R5RmxhZ3MsIHNlbWljb2xvbk9wdGlvbmFsLCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ2lmJyArIHNwYWNlICsgJygnLFxuICAgICAgICAgICAgICAgICAgICB0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LnRlc3QsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VtaWNvbG9uT3B0aW9uYWwgPSBmbGFncyAmIEZfU0VNSUNPTE9OX09QVDtcbiAgICAgICAgICAgIGJvZHlGbGFncyA9IFNfVEZGRjtcbiAgICAgICAgICAgIGlmIChzZW1pY29sb25PcHRpb25hbCkge1xuICAgICAgICAgICAgICAgIGJvZHlGbGFncyB8PSBGX1NFTUlDT0xPTl9PUFQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RtdC5hbHRlcm5hdGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLm1heWJlQmxvY2soc3RtdC5jb25zZXF1ZW50LCBTX1RGRkYpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLm1heWJlQmxvY2tTdWZmaXgoc3RtdC5jb25zZXF1ZW50LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIGlmIChzdG10LmFsdGVybmF0ZS50eXBlID09PSBTeW50YXguSWZTdGF0ZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIFsnZWxzZSAnLCB0aGlzLmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuYWx0ZXJuYXRlLCBib2R5RmxhZ3MpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsIGpvaW4oJ2Vsc2UnLCB0aGlzLm1heWJlQmxvY2soc3RtdC5hbHRlcm5hdGUsIGJvZHlGbGFncykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMubWF5YmVCbG9jayhzdG10LmNvbnNlcXVlbnQsIGJvZHlGbGFncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBGb3JTdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCwgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB3aXRoSW5kZW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbJ2ZvcicgKyBzcGFjZSArICcoJ107XG4gICAgICAgICAgICAgICAgaWYgKHN0bXQuaW5pdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RtdC5pbml0LnR5cGUgPT09IFN5bnRheC5WYXJpYWJsZURlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlU3RhdGVtZW50KHN0bXQuaW5pdCwgU19GRkZGKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGX0FMTE9XX0lOIGJlY29tZXMgZmFsc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihzdG10LmluaXQsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfRlRUKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnOycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJzsnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RtdC50ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC50ZXN0LCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnOycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCc7Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHN0bXQudXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNwYWNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC51cGRhdGUsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcpJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJyknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5tYXliZUJsb2NrKHN0bXQuYm9keSwgZmxhZ3MgJiBGX1NFTUlDT0xPTl9PUFQgPyBTX1RGRlQgOiBTX1RGRkYpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRm9ySW5TdGF0ZW1lbnQ6IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVJdGVyYXRpb25Gb3JTdGF0ZW1lbnQoJ2luJywgc3RtdCwgZmxhZ3MgJiBGX1NFTUlDT0xPTl9PUFQgPyBTX1RGRlQgOiBTX1RGRkYpO1xuICAgICAgICB9LFxuXG4gICAgICAgIEZvck9mU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlSXRlcmF0aW9uRm9yU3RhdGVtZW50KCdvZicsIHN0bXQsIGZsYWdzICYgRl9TRU1JQ09MT05fT1BUID8gU19URkZUIDogU19URkZGKTtcbiAgICAgICAgfSxcblxuICAgICAgICBMYWJlbGVkU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBbc3RtdC5sYWJlbC5uYW1lICsgJzonLCB0aGlzLm1heWJlQmxvY2soc3RtdC5ib2R5LCBmbGFncyAmIEZfU0VNSUNPTE9OX09QVCA/IFNfVEZGVCA6IFNfVEZGRildO1xuICAgICAgICB9LFxuXG4gICAgICAgIFByb2dyYW06IGZ1bmN0aW9uIChzdG10LCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCwgZnJhZ21lbnQsIGksIGl6LCBib2R5RmxhZ3M7XG4gICAgICAgICAgICBpeiA9IHN0bXQuYm9keS5sZW5ndGg7XG4gICAgICAgICAgICByZXN1bHQgPSBbc2FmZUNvbmNhdGVuYXRpb24gJiYgaXogPiAwID8gJ1xcbicgOiAnJ107XG4gICAgICAgICAgICBib2R5RmxhZ3MgPSBTX1RGVEY7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXo7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICghc2FmZUNvbmNhdGVuYXRpb24gJiYgaSA9PT0gaXogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlGbGFncyB8PSBGX1NFTUlDT0xPTl9PUFQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBoYW5kbGUgc3BhY2VzIGJlZm9yZSB0aGUgZmlyc3QgbGluZVxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG10LmJvZHlbMF0ubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVCbGFua0xpbmVzKHN0bXQucmFuZ2VbMF0sIHN0bXQuYm9keVtpXS5yYW5nZVswXSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBzcGFjZXMgYmV0d2VlbiBsaW5lc1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RtdC5ib2R5W2kgLSAxXS50cmFpbGluZ0NvbW1lbnRzICYmICFzdG10LmJvZHlbaV0ubGVhZGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVCbGFua0xpbmVzKHN0bXQuYm9keVtpIC0gMV0ucmFuZ2VbMV0sIHN0bXQuYm9keVtpXS5yYW5nZVswXSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gYWRkSW5kZW50KHRoaXMuZ2VuZXJhdGVTdGF0ZW1lbnQoc3RtdC5ib2R5W2ldLCBib2R5RmxhZ3MpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgaXogJiYgIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChmcmFnbWVudCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXNlcnZlQmxhbmtMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdG10LmJvZHlbaSArIDFdLmxlYWRpbmdDb21tZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ld2xpbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocHJlc2VydmVCbGFua0xpbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBzcGFjZXMgYWZ0ZXIgdGhlIGxhc3QgbGluZVxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaXogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0bXQuYm9keVtpXS50cmFpbGluZ0NvbW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVCbGFua0xpbmVzKHN0bXQuYm9keVtpXS5yYW5nZVsxXSwgc3RtdC5yYW5nZVsxXSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgRnVuY3Rpb25EZWNsYXJhdGlvbjogZnVuY3Rpb24gKHN0bXQsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXN5bmNQcmVmaXgoc3RtdCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZVN0YXJTdWZmaXgoc3RtdCkgfHwgbm9FbXB0eVNwYWNlKCksXG4gICAgICAgICAgICAgICAgc3RtdC5pZCA/IGdlbmVyYXRlSWRlbnRpZmllcihzdG10LmlkKSA6ICcnLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVGdW5jdGlvbkJvZHkoc3RtdClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgUmV0dXJuU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIGlmIChzdG10LmFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtqb2luKFxuICAgICAgICAgICAgICAgICAgICAncmV0dXJuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5hcmd1bWVudCwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpXG4gICAgICAgICAgICAgICAgKSwgdGhpcy5zZW1pY29sb24oZmxhZ3MpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbJ3JldHVybicgKyB0aGlzLnNlbWljb2xvbihmbGFncyldO1xuICAgICAgICB9LFxuXG4gICAgICAgIFdoaWxlU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgICAgICAnd2hpbGUnICsgc3BhY2UgKyAnKCcsXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKHN0bXQudGVzdCwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpLFxuICAgICAgICAgICAgICAgICAgICAnKSdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLm1heWJlQmxvY2soc3RtdC5ib2R5LCBmbGFncyAmIEZfU0VNSUNPTE9OX09QVCA/IFNfVEZGVCA6IFNfVEZGRikpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBXaXRoU3RhdGVtZW50OiBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgICAgICAnd2l0aCcgKyBzcGFjZSArICcoJyxcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oc3RtdC5vYmplY3QsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSxcbiAgICAgICAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5tYXliZUJsb2NrKHN0bXQuYm9keSwgZmxhZ3MgJiBGX1NFTUlDT0xPTl9PUFQgPyBTX1RGRlQgOiBTX1RGRkYpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBtZXJnZShDb2RlR2VuZXJhdG9yLnByb3RvdHlwZSwgQ29kZUdlbmVyYXRvci5TdGF0ZW1lbnQpO1xuXG4gICAgLy8gRXhwcmVzc2lvbnMuXG5cbiAgICBDb2RlR2VuZXJhdG9yLkV4cHJlc3Npb24gPSB7XG5cbiAgICAgICAgU2VxdWVuY2VFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGksIGl6O1xuICAgICAgICAgICAgaWYgKFByZWNlZGVuY2UuU2VxdWVuY2UgPCBwcmVjZWRlbmNlKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gRl9BTExPV19JTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBleHByLmV4cHJlc3Npb25zLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmV4cHJlc3Npb25zW2ldLCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIGZsYWdzKSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgaXopIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJywnICsgc3BhY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUocmVzdWx0LCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBBc3NpZ25tZW50RXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZUFzc2lnbm1lbnQoZXhwci5sZWZ0LCBleHByLnJpZ2h0LCBleHByLm9wZXJhdG9yLCBwcmVjZWRlbmNlLCBmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQXJyb3dGdW5jdGlvbkV4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudGhlc2l6ZSh0aGlzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5KGV4cHIpLCBQcmVjZWRlbmNlLkFycm93RnVuY3Rpb24sIHByZWNlZGVuY2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIENvbmRpdGlvbmFsRXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICBpZiAoUHJlY2VkZW5jZS5Db25kaXRpb25hbCA8IHByZWNlZGVuY2UpIHtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSBGX0FMTE9XX0lOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudGhlc2l6ZShcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIudGVzdCwgUHJlY2VkZW5jZS5Mb2dpY2FsT1IsIGZsYWdzKSxcbiAgICAgICAgICAgICAgICAgICAgc3BhY2UgKyAnPycgKyBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5jb25zZXF1ZW50LCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIGZsYWdzKSxcbiAgICAgICAgICAgICAgICAgICAgc3BhY2UgKyAnOicgKyBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5hbHRlcm5hdGUsIFByZWNlZGVuY2UuQXNzaWdubWVudCwgZmxhZ3MpXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBQcmVjZWRlbmNlLkNvbmRpdGlvbmFsLFxuICAgICAgICAgICAgICAgIHByZWNlZGVuY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgTG9naWNhbEV4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuQmluYXJ5RXhwcmVzc2lvbihleHByLCBwcmVjZWRlbmNlLCBmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQmluYXJ5RXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBsZWZ0UHJlY2VkZW5jZSwgcmlnaHRQcmVjZWRlbmNlLCBjdXJyZW50UHJlY2VkZW5jZSwgZnJhZ21lbnQsIGxlZnRTb3VyY2U7XG4gICAgICAgICAgICBjdXJyZW50UHJlY2VkZW5jZSA9IEJpbmFyeVByZWNlZGVuY2VbZXhwci5vcGVyYXRvcl07XG4gICAgICAgICAgICBsZWZ0UHJlY2VkZW5jZSA9IGV4cHIub3BlcmF0b3IgPT09ICcqKicgPyBQcmVjZWRlbmNlLlBvc3RmaXggOiBjdXJyZW50UHJlY2VkZW5jZTtcbiAgICAgICAgICAgIHJpZ2h0UHJlY2VkZW5jZSA9IGV4cHIub3BlcmF0b3IgPT09ICcqKicgPyBjdXJyZW50UHJlY2VkZW5jZSA6IGN1cnJlbnRQcmVjZWRlbmNlICsgMTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQcmVjZWRlbmNlIDwgcHJlY2VkZW5jZSkge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IEZfQUxMT1dfSU47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5sZWZ0LCBsZWZ0UHJlY2VkZW5jZSwgZmxhZ3MpO1xuXG4gICAgICAgICAgICBsZWZ0U291cmNlID0gZnJhZ21lbnQudG9TdHJpbmcoKTtcblxuICAgICAgICAgICAgaWYgKGxlZnRTb3VyY2UuY2hhckNvZGVBdChsZWZ0U291cmNlLmxlbmd0aCAtIDEpID09PSAweDJGIC8qIC8gKi8gJiYgZXN1dGlscy5jb2RlLmlzSWRlbnRpZmllclBhcnRFUzUoZXhwci5vcGVyYXRvci5jaGFyQ29kZUF0KDApKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtmcmFnbWVudCwgbm9FbXB0eVNwYWNlKCksIGV4cHIub3BlcmF0b3JdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKGZyYWdtZW50LCBleHByLm9wZXJhdG9yKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLnJpZ2h0LCByaWdodFByZWNlZGVuY2UsIGZsYWdzKTtcblxuICAgICAgICAgICAgaWYgKGV4cHIub3BlcmF0b3IgPT09ICcvJyAmJiBmcmFnbWVudC50b1N0cmluZygpLmNoYXJBdCgwKSA9PT0gJy8nIHx8XG4gICAgICAgICAgICBleHByLm9wZXJhdG9yLnNsaWNlKC0xKSA9PT0gJzwnICYmIGZyYWdtZW50LnRvU3RyaW5nKCkuc2xpY2UoMCwgMykgPT09ICchLS0nKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgJy8nIGNvbmNhdHMgd2l0aCAnLycgb3IgYDxgIGNvbmNhdHMgd2l0aCBgIS0tYCwgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgY29tbWVudCBzdGFydFxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vRW1wdHlTcGFjZSgpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleHByLm9wZXJhdG9yID09PSAnaW4nICYmICEoZmxhZ3MgJiBGX0FMTE9XX0lOKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJygnLCByZXN1bHQsICcpJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKHJlc3VsdCwgY3VycmVudFByZWNlZGVuY2UsIHByZWNlZGVuY2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIENhbGxFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGksIGl6O1xuXG4gICAgICAgICAgICAvLyBGX0FMTE9XX1VOUEFSQVRIX05FVyBiZWNvbWVzIGZhbHNlLlxuICAgICAgICAgICAgcmVzdWx0ID0gW3RoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuY2FsbGVlLCBQcmVjZWRlbmNlLkNhbGwsIEVfVFRGKV07XG5cbiAgICAgICAgICAgIGlmIChleHByLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJz8uJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcoJyk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IGV4cHJbJ2FyZ3VtZW50cyddLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByWydhcmd1bWVudHMnXVtpXSwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGl6KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcsJyArIHNwYWNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnKScpO1xuXG4gICAgICAgICAgICBpZiAoIShmbGFncyAmIEZfQUxMT1dfQ0FMTCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWycoJywgcmVzdWx0LCAnKSddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKHJlc3VsdCwgUHJlY2VkZW5jZS5DYWxsLCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBDaGFpbkV4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgaWYgKFByZWNlZGVuY2UuT3B0aW9uYWxDaGFpbmluZyA8IHByZWNlZGVuY2UpIHtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSBGX0FMTE9XX0NBTEw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmV4cHJlc3Npb24sIFByZWNlZGVuY2UuT3B0aW9uYWxDaGFpbmluZywgZmxhZ3MpO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKHJlc3VsdCwgUHJlY2VkZW5jZS5PcHRpb25hbENoYWluaW5nLCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBOZXdFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGxlbmd0aCwgaSwgaXosIGl0ZW1GbGFncztcbiAgICAgICAgICAgIGxlbmd0aCA9IGV4cHJbJ2FyZ3VtZW50cyddLmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gRl9BTExPV19DQUxMIGJlY29tZXMgZmFsc2UuXG4gICAgICAgICAgICAvLyBGX0FMTE9XX1VOUEFSQVRIX05FVyBtYXkgYmVjb21lIGZhbHNlLlxuICAgICAgICAgICAgaXRlbUZsYWdzID0gKGZsYWdzICYgRl9BTExPV19VTlBBUkFUSF9ORVcgJiYgIXBhcmVudGhlc2VzICYmIGxlbmd0aCA9PT0gMCkgPyBFX1RGVCA6IEVfVEZGO1xuXG4gICAgICAgICAgICByZXN1bHQgPSBqb2luKFxuICAgICAgICAgICAgICAgICduZXcnLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuY2FsbGVlLCBQcmVjZWRlbmNlLk5ldywgaXRlbUZsYWdzKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKCEoZmxhZ3MgJiBGX0FMTE9XX1VOUEFSQVRIX05FVykgfHwgcGFyZW50aGVzZXMgfHwgbGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcoJyk7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBsZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHJbJ2FyZ3VtZW50cyddW2ldLCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGl6KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJyknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudGhlc2l6ZShyZXN1bHQsIFByZWNlZGVuY2UuTmV3LCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBNZW1iZXJFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGZyYWdtZW50O1xuXG4gICAgICAgICAgICAvLyBGX0FMTE9XX1VOUEFSQVRIX05FVyBiZWNvbWVzIGZhbHNlLlxuICAgICAgICAgICAgcmVzdWx0ID0gW3RoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIub2JqZWN0LCBQcmVjZWRlbmNlLkNhbGwsIChmbGFncyAmIEZfQUxMT1dfQ0FMTCkgPyBFX1RURiA6IEVfVEZGKV07XG5cbiAgICAgICAgICAgIGlmIChleHByLmNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cHIub3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJz8uJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJ1snKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLnByb3BlcnR5LCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBmbGFncyAmIEZfQUxMT1dfQ0FMTCA/IEVfVFRUIDogRV9URlQpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnXScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIWV4cHIub3B0aW9uYWwgJiYgZXhwci5vYmplY3QudHlwZSA9PT0gU3ludGF4LkxpdGVyYWwgJiYgdHlwZW9mIGV4cHIub2JqZWN0LnZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgYWxsIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIC8vICAgMS4gTm8gZmxvYXRpbmcgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gICAyLiBEb24ndCBoYXZlIGV4cG9uZW50c1xuICAgICAgICAgICAgICAgICAgICAvLyAgIDMuIFRoZSBsYXN0IGNoYXJhY3RlciBpcyBhIGRlY2ltYWwgZGlnaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gICA0LiBOb3QgaGV4YWRlY2ltYWwgT1Igb2N0YWwgbnVtYmVyIGxpdGVyYWxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGFkZCBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuaW5kZXhPZignLicpIDwgMCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEvW2VFeFhdLy50ZXN0KGZyYWdtZW50KSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzdXRpbHMuY29kZS5pc0RlY2ltYWxEaWdpdChmcmFnbWVudC5jaGFyQ29kZUF0KGZyYWdtZW50Lmxlbmd0aCAtIDEpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEoZnJhZ21lbnQubGVuZ3RoID49IDIgJiYgZnJhZ21lbnQuY2hhckNvZGVBdCgwKSA9PT0gNDgpICAvLyAnMCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZXhwci5vcHRpb25hbCA/ICc/LicgOiAnLicpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGdlbmVyYXRlSWRlbnRpZmllcihleHByLnByb3BlcnR5KSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUocmVzdWx0LCBQcmVjZWRlbmNlLk1lbWJlciwgcHJlY2VkZW5jZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgTWV0YVByb3BlcnR5OiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHR5cGVvZiBleHByLm1ldGEgPT09IFwic3RyaW5nXCIgPyBleHByLm1ldGEgOiBnZW5lcmF0ZUlkZW50aWZpZXIoZXhwci5tZXRhKSk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnLicpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godHlwZW9mIGV4cHIucHJvcGVydHkgPT09IFwic3RyaW5nXCIgPyBleHByLnByb3BlcnR5IDogZ2VuZXJhdGVJZGVudGlmaWVyKGV4cHIucHJvcGVydHkpKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUocmVzdWx0LCBQcmVjZWRlbmNlLk1lbWJlciwgcHJlY2VkZW5jZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgVW5hcnlFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGZyYWdtZW50LCByaWdodENoYXJDb2RlLCBsZWZ0U291cmNlLCBsZWZ0Q2hhckNvZGU7XG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuYXJndW1lbnQsIFByZWNlZGVuY2UuVW5hcnksIEVfVFRUKTtcblxuICAgICAgICAgICAgaWYgKHNwYWNlID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4oZXhwci5vcGVyYXRvciwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbZXhwci5vcGVyYXRvcl07XG4gICAgICAgICAgICAgICAgaWYgKGV4cHIub3BlcmF0b3IubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWxldGUsIHZvaWQsIHR5cGVvZlxuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgYHR5cGVvZiBbXWAsIG5vdCBgdHlwZW9mW11gXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJldmVudCBpbnNlcnRpbmcgc3BhY2VzIGJldHdlZW4gb3BlcmF0b3IgYW5kIGFyZ3VtZW50IGlmIGl0IGlzIHVubmVjZXNzYXJ5XG4gICAgICAgICAgICAgICAgICAgIC8vIGxpa2UsIGAhY29uZGBcbiAgICAgICAgICAgICAgICAgICAgbGVmdFNvdXJjZSA9IHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBsZWZ0Q2hhckNvZGUgPSBsZWZ0U291cmNlLmNoYXJDb2RlQXQobGVmdFNvdXJjZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRDaGFyQ29kZSA9IGZyYWdtZW50LnRvU3RyaW5nKCkuY2hhckNvZGVBdCgwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKChsZWZ0Q2hhckNvZGUgPT09IDB4MkIgIC8qICsgKi8gfHwgbGVmdENoYXJDb2RlID09PSAweDJEICAvKiAtICovKSAmJiBsZWZ0Q2hhckNvZGUgPT09IHJpZ2h0Q2hhckNvZGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGVzdXRpbHMuY29kZS5pc0lkZW50aWZpZXJQYXJ0RVM1KGxlZnRDaGFyQ29kZSkgJiYgZXN1dGlscy5jb2RlLmlzSWRlbnRpZmllclBhcnRFUzUocmlnaHRDaGFyQ29kZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub0VtcHR5U3BhY2UoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKHJlc3VsdCwgUHJlY2VkZW5jZS5VbmFyeSwgcHJlY2VkZW5jZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgWWllbGRFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoZXhwci5kZWxlZ2F0ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICd5aWVsZConO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAneWllbGQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4cHIuYXJndW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuYXJndW1lbnQsIFByZWNlZGVuY2UuWWllbGQsIEVfVFRUKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKHJlc3VsdCwgUHJlY2VkZW5jZS5ZaWVsZCwgcHJlY2VkZW5jZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQXdhaXRFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBqb2luKFxuICAgICAgICAgICAgICAgIGV4cHIuYWxsID8gJ2F3YWl0KicgOiAnYXdhaXQnLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuYXJndW1lbnQsIFByZWNlZGVuY2UuQXdhaXQsIEVfVFRUKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUocmVzdWx0LCBQcmVjZWRlbmNlLkF3YWl0LCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBVcGRhdGVFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIGlmIChleHByLnByZWZpeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUoXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIub3BlcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmFyZ3VtZW50LCBQcmVjZWRlbmNlLlVuYXJ5LCBFX1RUVClcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgUHJlY2VkZW5jZS5VbmFyeSxcbiAgICAgICAgICAgICAgICAgICAgcHJlY2VkZW5jZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50aGVzaXplKFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5hcmd1bWVudCwgUHJlY2VkZW5jZS5Qb3N0Zml4LCBFX1RUVCksXG4gICAgICAgICAgICAgICAgICAgIGV4cHIub3BlcmF0b3JcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFByZWNlZGVuY2UuUG9zdGZpeCxcbiAgICAgICAgICAgICAgICBwcmVjZWRlbmNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuXG4gICAgICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlQXN5bmNQcmVmaXgoZXhwciwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChleHByLmlkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZ2VuZXJhdGVTdGFyU3VmZml4KGV4cHIpIHx8IG5vRW1wdHlTcGFjZSgpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChnZW5lcmF0ZUlkZW50aWZpZXIoZXhwci5pZCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChnZW5lcmF0ZVN0YXJTdWZmaXgoZXhwcikgfHwgc3BhY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZW5lcmF0ZUZ1bmN0aW9uQm9keShleHByKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIEFycmF5UGF0dGVybjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5BcnJheUV4cHJlc3Npb24oZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MsIHRydWUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIEFycmF5RXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzLCBpc1BhdHRlcm4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIG11bHRpbGluZSwgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIWV4cHIuZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtdWx0aWxpbmUgPSBpc1BhdHRlcm4gPyBmYWxzZSA6IGV4cHIuZWxlbWVudHMubGVuZ3RoID4gMTtcbiAgICAgICAgICAgIHJlc3VsdCA9IFsnWycsIG11bHRpbGluZSA/IG5ld2xpbmUgOiAnJ107XG4gICAgICAgICAgICB3aXRoSW5kZW50KGZ1bmN0aW9uIChpbmRlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgaXo7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBleHByLmVsZW1lbnRzLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleHByLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goaW5kZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICsgMSA9PT0gaXopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobXVsdGlsaW5lID8gaW5kZW50IDogJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5lbGVtZW50c1tpXSwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGl6KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyAobXVsdGlsaW5lID8gbmV3bGluZSA6IHNwYWNlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChtdWx0aWxpbmUgJiYgIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQpLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaChtdWx0aWxpbmUgPyBiYXNlIDogJycpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goJ10nKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgUmVzdEVsZW1lbnQ6IGZ1bmN0aW9uKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gJy4uLicgKyB0aGlzLmdlbmVyYXRlUGF0dGVybihleHByLmFyZ3VtZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICBDbGFzc0V4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCwgZnJhZ21lbnQ7XG4gICAgICAgICAgICByZXN1bHQgPSBbJ2NsYXNzJ107XG4gICAgICAgICAgICBpZiAoZXhwci5pZCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmlkLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4cHIuc3VwZXJDbGFzcykge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gam9pbignZXh0ZW5kcycsIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuc3VwZXJDbGFzcywgUHJlY2VkZW5jZS5VbmFyeSwgRV9UVFQpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKHJlc3VsdCwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goc3BhY2UpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZW5lcmF0ZVN0YXRlbWVudChleHByLmJvZHksIFNfVEZGVCkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBNZXRob2REZWZpbml0aW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQsIGZyYWdtZW50O1xuICAgICAgICAgICAgaWYgKGV4cHJbJ3N0YXRpYyddKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gWydzdGF0aWMnICsgc3BhY2VdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChleHByLmtpbmQgPT09ICdnZXQnIHx8IGV4cHIua2luZCA9PT0gJ3NldCcpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IFtcbiAgICAgICAgICAgICAgICAgICAgam9pbihleHByLmtpbmQsIHRoaXMuZ2VuZXJhdGVQcm9wZXJ0eUtleShleHByLmtleSwgZXhwci5jb21wdXRlZCkpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5KGV4cHIudmFsdWUpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBbXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTWV0aG9kUHJlZml4KGV4cHIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlUHJvcGVydHlLZXkoZXhwci5rZXksIGV4cHIuY29tcHV0ZWQpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5KGV4cHIudmFsdWUpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqb2luKHJlc3VsdCwgZnJhZ21lbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFByb3BlcnR5OiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIGlmIChleHByLmtpbmQgPT09ICdnZXQnIHx8IGV4cHIua2luZCA9PT0gJ3NldCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICBleHByLmtpbmQsIG5vRW1wdHlTcGFjZSgpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlUHJvcGVydHlLZXkoZXhwci5rZXksIGV4cHIuY29tcHV0ZWQpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5KGV4cHIudmFsdWUpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4cHIuc2hvcnRoYW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cHIudmFsdWUudHlwZSA9PT0gXCJBc3NpZ25tZW50UGF0dGVyblwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkFzc2lnbm1lbnRQYXR0ZXJuKGV4cHIudmFsdWUsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVQcm9wZXJ0eUtleShleHByLmtleSwgZXhwci5jb21wdXRlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleHByLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTWV0aG9kUHJlZml4KGV4cHIpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlUHJvcGVydHlLZXkoZXhwci5rZXksIGV4cHIuY29tcHV0ZWQpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5KGV4cHIudmFsdWUpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlUHJvcGVydHlLZXkoZXhwci5rZXksIGV4cHIuY29tcHV0ZWQpLFxuICAgICAgICAgICAgICAgICc6JyArIHNwYWNlLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIudmFsdWUsIFByZWNlZGVuY2UuQXNzaWdubWVudCwgRV9UVFQpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9LFxuXG4gICAgICAgIE9iamVjdEV4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIG11bHRpbGluZSwgcmVzdWx0LCBmcmFnbWVudCwgdGhhdCA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmICghZXhwci5wcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAne30nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbXVsdGlsaW5lID0gZXhwci5wcm9wZXJ0aWVzLmxlbmd0aCA+IDE7XG5cbiAgICAgICAgICAgIHdpdGhJbmRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gdGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5wcm9wZXJ0aWVzWzBdLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFtdWx0aWxpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBpc3N1ZXMgNFxuICAgICAgICAgICAgICAgIC8vIERvIG5vdCB0cmFuc2Zvcm0gZnJvbVxuICAgICAgICAgICAgICAgIC8vICAgZGVqYXZ1LkNsYXNzLmRlY2xhcmUoe1xuICAgICAgICAgICAgICAgIC8vICAgICAgIG1ldGhvZDI6IGZ1bmN0aW9uICgpIHt9XG4gICAgICAgICAgICAgICAgLy8gICB9KTtcbiAgICAgICAgICAgICAgICAvLyB0b1xuICAgICAgICAgICAgICAgIC8vICAgZGVqYXZ1LkNsYXNzLmRlY2xhcmUoe21ldGhvZDI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICB9fSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNMaW5lVGVybWluYXRvcih0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKGZyYWdtZW50KS50b1N0cmluZygpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWyAneycsIHNwYWNlLCBmcmFnbWVudCwgc3BhY2UsICd9JyBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoaW5kZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIGl6O1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFsgJ3snLCBuZXdsaW5lLCBpbmRlbnQsIGZyYWdtZW50IF07XG5cbiAgICAgICAgICAgICAgICBpZiAobXVsdGlsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKCcsJyArIG5ld2xpbmUpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxLCBpeiA9IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpbmRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhhdC5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5wcm9wZXJ0aWVzW2ldLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgKyAxIDwgaXopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyBuZXdsaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWVuZHNXaXRoTGluZVRlcm1pbmF0b3IodG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQpLnRvU3RyaW5nKCkpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3bGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQucHVzaChiYXNlKTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKCd9Jyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIEFzc2lnbm1lbnRQYXR0ZXJuOiBmdW5jdGlvbihleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVBc3NpZ25tZW50KGV4cHIubGVmdCwgZXhwci5yaWdodCwgJz0nLCBwcmVjZWRlbmNlLCBmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgT2JqZWN0UGF0dGVybjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0LCBpLCBpeiwgbXVsdGlsaW5lLCBwcm9wZXJ0eSwgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoIWV4cHIucHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3t9JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbXVsdGlsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXhwci5wcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gZXhwci5wcm9wZXJ0aWVzWzBdO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkudHlwZSA9PT0gU3ludGF4LlByb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgICYmIHByb3BlcnR5LnZhbHVlLnR5cGUgIT09IFN5bnRheC5JZGVudGlmaWVyXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpbGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpeiA9IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5ID0gZXhwci5wcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS50eXBlID09PSBTeW50YXguUHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFwcm9wZXJ0eS5zaG9ydGhhbmRcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBbJ3snLCBtdWx0aWxpbmUgPyBuZXdsaW5lIDogJycgXTtcblxuICAgICAgICAgICAgd2l0aEluZGVudChmdW5jdGlvbiAoaW5kZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIGl6O1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGl6ID0gZXhwci5wcm9wZXJ0aWVzLmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobXVsdGlsaW5lID8gaW5kZW50IDogJycpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGF0LmdlbmVyYXRlRXhwcmVzc2lvbihleHByLnByb3BlcnRpZXNbaV0sIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICsgMSA8IGl6KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcgKyAobXVsdGlsaW5lID8gbmV3bGluZSA6IHNwYWNlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG11bHRpbGluZSAmJiAhZW5kc1dpdGhMaW5lVGVybWluYXRvcih0b1NvdXJjZU5vZGVXaGVuTmVlZGVkKHJlc3VsdCkudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChuZXdsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG11bHRpbGluZSA/IGJhc2UgOiAnJyk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCgnfScpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBUaGlzRXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RoaXMnO1xuICAgICAgICB9LFxuXG4gICAgICAgIFN1cGVyOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiAnc3VwZXInO1xuICAgICAgICB9LFxuXG4gICAgICAgIElkZW50aWZpZXI6IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlSWRlbnRpZmllcihleHByKTtcbiAgICAgICAgfSxcblxuICAgICAgICBJbXBvcnREZWZhdWx0U3BlY2lmaWVyOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZUlkZW50aWZpZXIoZXhwci5pZCB8fCBleHByLmxvY2FsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXI6IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFsnKiddO1xuICAgICAgICAgICAgdmFyIGlkID0gZXhwci5pZCB8fCBleHByLmxvY2FsO1xuICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc3BhY2UgKyAnYXMnICsgbm9FbXB0eVNwYWNlKCkgKyBnZW5lcmF0ZUlkZW50aWZpZXIoaWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgSW1wb3J0U3BlY2lmaWVyOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciBpbXBvcnRlZCA9IGV4cHIuaW1wb3J0ZWQ7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gWyBpbXBvcnRlZC5uYW1lIF07XG4gICAgICAgICAgICB2YXIgbG9jYWwgPSBleHByLmxvY2FsO1xuICAgICAgICAgICAgaWYgKGxvY2FsICYmIGxvY2FsLm5hbWUgIT09IGltcG9ydGVkLm5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub0VtcHR5U3BhY2UoKSArICdhcycgKyBub0VtcHR5U3BhY2UoKSArIGdlbmVyYXRlSWRlbnRpZmllcihsb2NhbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBFeHBvcnRTcGVjaWZpZXI6IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIGxvY2FsID0gZXhwci5sb2NhbDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbIGxvY2FsLm5hbWUgXTtcbiAgICAgICAgICAgIHZhciBleHBvcnRlZCA9IGV4cHIuZXhwb3J0ZWQ7XG4gICAgICAgICAgICBpZiAoZXhwb3J0ZWQgJiYgZXhwb3J0ZWQubmFtZSAhPT0gbG9jYWwubmFtZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vRW1wdHlTcGFjZSgpICsgJ2FzJyArIG5vRW1wdHlTcGFjZSgpICsgZ2VuZXJhdGVJZGVudGlmaWVyKGV4cG9ydGVkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIExpdGVyYWw6IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJhdztcbiAgICAgICAgICAgIGlmIChleHByLmhhc093blByb3BlcnR5KCdyYXcnKSAmJiBwYXJzZSAmJiBleHRyYS5yYXcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByYXcgPSBwYXJzZShleHByLnJhdykuYm9keVswXS5leHByZXNzaW9uO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3LnR5cGUgPT09IFN5bnRheC5MaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmF3LnZhbHVlID09PSBleHByLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4cHIucmF3O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBub3QgdXNlIHJhdyBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4cHIucmVnZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICcvJyArIGV4cHIucmVnZXgucGF0dGVybiArICcvJyArIGV4cHIucmVnZXguZmxhZ3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChleHByLnZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHByLnZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVTdHJpbmcoZXhwci52YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwci52YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVOdW1iZXIoZXhwci52YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwci52YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cHIudmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVSZWdFeHAoZXhwci52YWx1ZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgR2VuZXJhdG9yRXhwcmVzc2lvbjogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db21wcmVoZW5zaW9uRXhwcmVzc2lvbihleHByLCBwcmVjZWRlbmNlLCBmbGFncyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgQ29tcHJlaGVuc2lvbkV4cHJlc3Npb246IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgLy8gR2VuZXJhdG9yRXhwcmVzc2lvbiBzaG91bGQgYmUgcGFyZW50aGVzaXplZCB3aXRoICguLi4pLCBDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiB3aXRoIFsuLi5dXG4gICAgICAgICAgICAvLyBEdWUgdG8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODgzNDY4IHBvc2l0aW9uIG9mIGV4cHIuYm9keSBjYW4gZGlmZmVyIGluIFNwaWRlcm1vbmtleSBhbmQgRVM2XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQsIGksIGl6LCBmcmFnbWVudCwgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICByZXN1bHQgPSAoZXhwci50eXBlID09PSBTeW50YXguR2VuZXJhdG9yRXhwcmVzc2lvbikgPyBbJygnXSA6IFsnWyddO1xuXG4gICAgICAgICAgICBpZiAoZXh0cmEubW96LmNvbXByZWhlbnNpb25FeHByZXNzaW9uU3RhcnRzV2l0aEFzc2lnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuYm9keSwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXhwci5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICB3aXRoSW5kZW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBleHByLmJsb2Nrcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IHRoYXQuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIuYmxvY2tzW2ldLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IDAgfHwgZXh0cmEubW96LmNvbXByZWhlbnNpb25FeHByZXNzaW9uU3RhcnRzV2l0aEFzc2lnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBqb2luKHJlc3VsdCwgZnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4cHIuZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gam9pbihyZXN1bHQsICdpZicgKyBzcGFjZSk7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmZpbHRlciwgUHJlY2VkZW5jZS5TZXF1ZW5jZSwgRV9UVFQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBbICcoJywgZnJhZ21lbnQsICcpJyBdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFleHRyYS5tb3ouY29tcHJlaGVuc2lvbkV4cHJlc3Npb25TdGFydHNXaXRoQXNzaWdubWVudCkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5ib2R5LCBQcmVjZWRlbmNlLkFzc2lnbm1lbnQsIEVfVFRUKTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGpvaW4ocmVzdWx0LCBmcmFnbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKChleHByLnR5cGUgPT09IFN5bnRheC5HZW5lcmF0b3JFeHByZXNzaW9uKSA/ICcpJyA6ICddJyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIENvbXByZWhlbnNpb25CbG9jazogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQ7XG4gICAgICAgICAgICBpZiAoZXhwci5sZWZ0LnR5cGUgPT09IFN5bnRheC5WYXJpYWJsZURlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSBbXG4gICAgICAgICAgICAgICAgICAgIGV4cHIubGVmdC5raW5kLCBub0VtcHR5U3BhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVN0YXRlbWVudChleHByLmxlZnQuZGVjbGFyYXRpb25zWzBdLCBTX0ZGRkYpXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQgPSB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmxlZnQsIFByZWNlZGVuY2UuQ2FsbCwgRV9UVFQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmcmFnbWVudCA9IGpvaW4oZnJhZ21lbnQsIGV4cHIub2YgPyAnb2YnIDogJ2luJyk7XG4gICAgICAgICAgICBmcmFnbWVudCA9IGpvaW4oZnJhZ21lbnQsIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIucmlnaHQsIFByZWNlZGVuY2UuU2VxdWVuY2UsIEVfVFRUKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBbICdmb3InICsgc3BhY2UgKyAnKCcsIGZyYWdtZW50LCAnKScgXTtcbiAgICAgICAgfSxcblxuICAgICAgICBTcHJlYWRFbGVtZW50OiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgJy4uLicsXG4gICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5hcmd1bWVudCwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVClcbiAgICAgICAgICAgIF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciBpdGVtRmxhZ3MgPSBFX1RURjtcbiAgICAgICAgICAgIGlmICghKGZsYWdzICYgRl9BTExPV19DQUxMKSkge1xuICAgICAgICAgICAgICAgIGl0ZW1GbGFncyA9IEVfVEZGO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLnRhZywgUHJlY2VkZW5jZS5DYWxsLCBpdGVtRmxhZ3MpLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVFeHByZXNzaW9uKGV4cHIucXVhc2ksIFByZWNlZGVuY2UuUHJpbWFyeSwgRV9GRlQpXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIHBhcmVudGhlc2l6ZShyZXN1bHQsIFByZWNlZGVuY2UuVGFnZ2VkVGVtcGxhdGUsIHByZWNlZGVuY2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFRlbXBsYXRlRWxlbWVudDogZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgICAgICAvLyBEb24ndCB1c2UgXCJjb29rZWRcIi4gU2luY2UgdGFnZ2VkIHRlbXBsYXRlIGNhbiB1c2UgcmF3IHRlbXBsYXRlXG4gICAgICAgICAgICAvLyByZXByZXNlbnRhdGlvbi4gU28gaWYgd2UgZG8gc28sIGl0IGJyZWFrcyB0aGUgc2NyaXB0IHNlbWFudGljcy5cbiAgICAgICAgICAgIHJldHVybiBleHByLnZhbHVlLnJhdztcbiAgICAgICAgfSxcblxuICAgICAgICBUZW1wbGF0ZUxpdGVyYWw6IGZ1bmN0aW9uIChleHByLCBwcmVjZWRlbmNlLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCwgaSwgaXo7XG4gICAgICAgICAgICByZXN1bHQgPSBbICdgJyBdO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgaXogPSBleHByLnF1YXNpcy5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZW5lcmF0ZUV4cHJlc3Npb24oZXhwci5xdWFzaXNbaV0sIFByZWNlZGVuY2UuUHJpbWFyeSwgRV9UVFQpKTtcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPCBpeikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnJHsnICsgc3BhY2UpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLmV4cHJlc3Npb25zW2ldLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCkpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzcGFjZSArICd9Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2goJ2AnKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgTW9kdWxlU3BlY2lmaWVyOiBmdW5jdGlvbiAoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLkxpdGVyYWwoZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpO1xuICAgICAgICB9LFxuXG4gICAgICAgIEltcG9ydEV4cHJlc3Npb246IGZ1bmN0aW9uKGV4cHIsIHByZWNlZGVuY2UsIGZsYWcpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRoZXNpemUoW1xuICAgICAgICAgICAgICAgICdpbXBvcnQoJyxcbiAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlRXhwcmVzc2lvbihleHByLnNvdXJjZSwgUHJlY2VkZW5jZS5Bc3NpZ25tZW50LCBFX1RUVCksXG4gICAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgICBdLCBQcmVjZWRlbmNlLkNhbGwsIHByZWNlZGVuY2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG1lcmdlKENvZGVHZW5lcmF0b3IucHJvdG90eXBlLCBDb2RlR2VuZXJhdG9yLkV4cHJlc3Npb24pO1xuXG4gICAgQ29kZUdlbmVyYXRvci5wcm90b3R5cGUuZ2VuZXJhdGVFeHByZXNzaW9uID0gZnVuY3Rpb24gKGV4cHIsIHByZWNlZGVuY2UsIGZsYWdzKSB7XG4gICAgICAgIHZhciByZXN1bHQsIHR5cGU7XG5cbiAgICAgICAgdHlwZSA9IGV4cHIudHlwZSB8fCBTeW50YXguUHJvcGVydHk7XG5cbiAgICAgICAgaWYgKGV4dHJhLnZlcmJhdGltICYmIGV4cHIuaGFzT3duUHJvcGVydHkoZXh0cmEudmVyYmF0aW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVWZXJiYXRpbShleHByLCBwcmVjZWRlbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdCA9IHRoaXNbdHlwZV0oZXhwciwgcHJlY2VkZW5jZSwgZmxhZ3MpO1xuXG5cbiAgICAgICAgaWYgKGV4dHJhLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFkZENvbW1lbnRzKGV4cHIsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0LCBleHByKTtcbiAgICB9O1xuXG4gICAgQ29kZUdlbmVyYXRvci5wcm90b3R5cGUuZ2VuZXJhdGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoc3RtdCwgZmxhZ3MpIHtcbiAgICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICAgIGZyYWdtZW50O1xuXG4gICAgICAgIHJlc3VsdCA9IHRoaXNbc3RtdC50eXBlXShzdG10LCBmbGFncyk7XG5cbiAgICAgICAgLy8gQXR0YWNoIGNvbW1lbnRzXG5cbiAgICAgICAgaWYgKGV4dHJhLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFkZENvbW1lbnRzKHN0bXQsIHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudCA9IHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS50b1N0cmluZygpO1xuICAgICAgICBpZiAoc3RtdC50eXBlID09PSBTeW50YXguUHJvZ3JhbSAmJiAhc2FmZUNvbmNhdGVuYXRpb24gJiYgbmV3bGluZSA9PT0gJycgJiYgIGZyYWdtZW50LmNoYXJBdChmcmFnbWVudC5sZW5ndGggLSAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHNvdXJjZU1hcCA/IHRvU291cmNlTm9kZVdoZW5OZWVkZWQocmVzdWx0KS5yZXBsYWNlUmlnaHQoL1xccyskLywgJycpIDogZnJhZ21lbnQucmVwbGFjZSgvXFxzKyQvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9Tb3VyY2VOb2RlV2hlbk5lZWRlZChyZXN1bHQsIHN0bXQpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUludGVybmFsKG5vZGUpIHtcbiAgICAgICAgdmFyIGNvZGVnZW47XG5cbiAgICAgICAgY29kZWdlbiA9IG5ldyBDb2RlR2VuZXJhdG9yKCk7XG4gICAgICAgIGlmIChpc1N0YXRlbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvZGVnZW4uZ2VuZXJhdGVTdGF0ZW1lbnQobm9kZSwgU19URkZGKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0V4cHJlc3Npb24obm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2RlZ2VuLmdlbmVyYXRlRXhwcmVzc2lvbihub2RlLCBQcmVjZWRlbmNlLlNlcXVlbmNlLCBFX1RUVCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlOiAnICsgbm9kZS50eXBlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZShub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCksIHJlc3VsdCwgcGFpcjtcblxuICAgICAgICBpZiAob3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBPYnNvbGV0ZSBvcHRpb25zXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gICBgb3B0aW9ucy5pbmRlbnRgXG4gICAgICAgICAgICAvLyAgIGBvcHRpb25zLmJhc2VgXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSW5zdGVhZCBvZiB0aGVtLCB3ZSBjYW4gdXNlIGBvcHRpb24uZm9ybWF0LmluZGVudGAuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuaW5kZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zLmZvcm1hdC5pbmRlbnQuc3R5bGUgPSBvcHRpb25zLmluZGVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5iYXNlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRPcHRpb25zLmZvcm1hdC5pbmRlbnQuYmFzZSA9IG9wdGlvbnMuYmFzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wdGlvbnMgPSB1cGRhdGVEZWVwbHkoZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaW5kZW50ID0gb3B0aW9ucy5mb3JtYXQuaW5kZW50LnN0eWxlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmJhc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYmFzZSA9IG9wdGlvbnMuYmFzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmFzZSA9IHN0cmluZ1JlcGVhdChpbmRlbnQsIG9wdGlvbnMuZm9ybWF0LmluZGVudC5iYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICAgICAgICAgIGluZGVudCA9IG9wdGlvbnMuZm9ybWF0LmluZGVudC5zdHlsZTtcbiAgICAgICAgICAgIGJhc2UgPSBzdHJpbmdSZXBlYXQoaW5kZW50LCBvcHRpb25zLmZvcm1hdC5pbmRlbnQuYmFzZSk7XG4gICAgICAgIH1cbiAgICAgICAganNvbiA9IG9wdGlvbnMuZm9ybWF0Lmpzb247XG4gICAgICAgIHJlbnVtYmVyID0gb3B0aW9ucy5mb3JtYXQucmVudW1iZXI7XG4gICAgICAgIGhleGFkZWNpbWFsID0ganNvbiA/IGZhbHNlIDogb3B0aW9ucy5mb3JtYXQuaGV4YWRlY2ltYWw7XG4gICAgICAgIHF1b3RlcyA9IGpzb24gPyAnZG91YmxlJyA6IG9wdGlvbnMuZm9ybWF0LnF1b3RlcztcbiAgICAgICAgZXNjYXBlbGVzcyA9IG9wdGlvbnMuZm9ybWF0LmVzY2FwZWxlc3M7XG4gICAgICAgIG5ld2xpbmUgPSBvcHRpb25zLmZvcm1hdC5uZXdsaW5lO1xuICAgICAgICBzcGFjZSA9IG9wdGlvbnMuZm9ybWF0LnNwYWNlO1xuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQuY29tcGFjdCkge1xuICAgICAgICAgICAgbmV3bGluZSA9IHNwYWNlID0gaW5kZW50ID0gYmFzZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudGhlc2VzID0gb3B0aW9ucy5mb3JtYXQucGFyZW50aGVzZXM7XG4gICAgICAgIHNlbWljb2xvbnMgPSBvcHRpb25zLmZvcm1hdC5zZW1pY29sb25zO1xuICAgICAgICBzYWZlQ29uY2F0ZW5hdGlvbiA9IG9wdGlvbnMuZm9ybWF0LnNhZmVDb25jYXRlbmF0aW9uO1xuICAgICAgICBkaXJlY3RpdmUgPSBvcHRpb25zLmRpcmVjdGl2ZTtcbiAgICAgICAgcGFyc2UgPSBqc29uID8gbnVsbCA6IG9wdGlvbnMucGFyc2U7XG4gICAgICAgIHNvdXJjZU1hcCA9IG9wdGlvbnMuc291cmNlTWFwO1xuICAgICAgICBzb3VyY2VDb2RlID0gb3B0aW9ucy5zb3VyY2VDb2RlO1xuICAgICAgICBwcmVzZXJ2ZUJsYW5rTGluZXMgPSBvcHRpb25zLmZvcm1hdC5wcmVzZXJ2ZUJsYW5rTGluZXMgJiYgc291cmNlQ29kZSAhPT0gbnVsbDtcbiAgICAgICAgZXh0cmEgPSBvcHRpb25zO1xuXG4gICAgICAgIGlmIChzb3VyY2VNYXApIHtcbiAgICAgICAgICAgIGlmICghZXhwb3J0cy5icm93c2VyKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXNzdW1lIGVudmlyb25tZW50IGlzIG5vZGUuanNcbiAgICAgICAgICAgICAgICAvLyBBbmQgcHJldmVudCBmcm9tIGluY2x1ZGluZyBzb3VyY2UtbWFwIGJ5IGJyb3dzZXJpZnlcbiAgICAgICAgICAgICAgICBTb3VyY2VOb2RlID0gcmVxdWlyZSgnc291cmNlLW1hcCcpLlNvdXJjZU5vZGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFNvdXJjZU5vZGUgPSBnbG9iYWwuc291cmNlTWFwLlNvdXJjZU5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBnZW5lcmF0ZUludGVybmFsKG5vZGUpO1xuXG4gICAgICAgIGlmICghc291cmNlTWFwKSB7XG4gICAgICAgICAgICBwYWlyID0ge2NvZGU6IHJlc3VsdC50b1N0cmluZygpLCBtYXA6IG51bGx9O1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc291cmNlTWFwV2l0aENvZGUgPyBwYWlyIDogcGFpci5jb2RlO1xuICAgICAgICB9XG5cblxuICAgICAgICBwYWlyID0gcmVzdWx0LnRvU3RyaW5nV2l0aFNvdXJjZU1hcCh7XG4gICAgICAgICAgICBmaWxlOiBvcHRpb25zLmZpbGUsXG4gICAgICAgICAgICBzb3VyY2VSb290OiBvcHRpb25zLnNvdXJjZU1hcFJvb3RcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc291cmNlQ29udGVudCkge1xuICAgICAgICAgICAgcGFpci5tYXAuc2V0U291cmNlQ29udGVudChvcHRpb25zLnNvdXJjZU1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5zb3VyY2VDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNvdXJjZU1hcFdpdGhDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFpcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWlyLm1hcC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIEZPUk1BVF9NSU5JRlkgPSB7XG4gICAgICAgIGluZGVudDoge1xuICAgICAgICAgICAgc3R5bGU6ICcnLFxuICAgICAgICAgICAgYmFzZTogMFxuICAgICAgICB9LFxuICAgICAgICByZW51bWJlcjogdHJ1ZSxcbiAgICAgICAgaGV4YWRlY2ltYWw6IHRydWUsXG4gICAgICAgIHF1b3RlczogJ2F1dG8nLFxuICAgICAgICBlc2NhcGVsZXNzOiB0cnVlLFxuICAgICAgICBjb21wYWN0OiB0cnVlLFxuICAgICAgICBwYXJlbnRoZXNlczogZmFsc2UsXG4gICAgICAgIHNlbWljb2xvbnM6IGZhbHNlXG4gICAgfTtcblxuICAgIEZPUk1BVF9ERUZBVUxUUyA9IGdldERlZmF1bHRPcHRpb25zKCkuZm9ybWF0O1xuXG4gICAgZXhwb3J0cy52ZXJzaW9uID0gcmVxdWlyZSgnLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuICAgIGV4cG9ydHMuZ2VuZXJhdGUgPSBnZW5lcmF0ZTtcbiAgICBleHBvcnRzLmF0dGFjaENvbW1lbnRzID0gZXN0cmF2ZXJzZS5hdHRhY2hDb21tZW50cztcbiAgICBleHBvcnRzLlByZWNlZGVuY2UgPSB1cGRhdGVEZWVwbHkoe30sIFByZWNlZGVuY2UpO1xuICAgIGV4cG9ydHMuYnJvd3NlciA9IGZhbHNlO1xuICAgIGV4cG9ydHMuRk9STUFUX01JTklGWSA9IEZPUk1BVF9NSU5JRlk7XG4gICAgZXhwb3J0cy5GT1JNQVRfREVGQVVMVFMgPSBGT1JNQVRfREVGQVVMVFM7XG59KCkpO1xuLyogdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDogKi9cbiIsIi8qXG4gIENvcHlyaWdodCAoQykgMjAxMi0yMDEzIFl1c3VrZSBTdXp1a2kgPHV0YXRhbmUudGVhQGdtYWlsLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDEyIEFyaXlhIEhpZGF5YXQgPGFyaXlhLmhpZGF5YXRAZ21haWwuY29tPlxuXG4gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcbiAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG4vKmpzbGludCB2YXJzOmZhbHNlLCBiaXR3aXNlOnRydWUqL1xuLypqc2hpbnQgaW5kZW50OjQqL1xuLypnbG9iYWwgZXhwb3J0czp0cnVlKi9cbihmdW5jdGlvbiBjbG9uZShleHBvcnRzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFN5bnRheCxcbiAgICAgICAgVmlzaXRvck9wdGlvbixcbiAgICAgICAgVmlzaXRvcktleXMsXG4gICAgICAgIEJSRUFLLFxuICAgICAgICBTS0lQLFxuICAgICAgICBSRU1PVkU7XG5cbiAgICBmdW5jdGlvbiBkZWVwQ29weShvYmopIHtcbiAgICAgICAgdmFyIHJldCA9IHt9LCBrZXksIHZhbDtcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldFtrZXldID0gZGVlcENvcHkodmFsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRba2V5XSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICAvLyBiYXNlZCBvbiBMTFZNIGxpYmMrKyB1cHBlcl9ib3VuZCAvIGxvd2VyX2JvdW5kXG4gICAgLy8gTUlUIExpY2Vuc2VcblxuICAgIGZ1bmN0aW9uIHVwcGVyQm91bmQoYXJyYXksIGZ1bmMpIHtcbiAgICAgICAgdmFyIGRpZmYsIGxlbiwgaSwgY3VycmVudDtcblxuICAgICAgICBsZW4gPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChsZW4pIHtcbiAgICAgICAgICAgIGRpZmYgPSBsZW4gPj4+IDE7XG4gICAgICAgICAgICBjdXJyZW50ID0gaSArIGRpZmY7XG4gICAgICAgICAgICBpZiAoZnVuYyhhcnJheVtjdXJyZW50XSkpIHtcbiAgICAgICAgICAgICAgICBsZW4gPSBkaWZmO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpID0gY3VycmVudCArIDE7XG4gICAgICAgICAgICAgICAgbGVuIC09IGRpZmYgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIFN5bnRheCA9IHtcbiAgICAgICAgQXNzaWdubWVudEV4cHJlc3Npb246ICdBc3NpZ25tZW50RXhwcmVzc2lvbicsXG4gICAgICAgIEFzc2lnbm1lbnRQYXR0ZXJuOiAnQXNzaWdubWVudFBhdHRlcm4nLFxuICAgICAgICBBcnJheUV4cHJlc3Npb246ICdBcnJheUV4cHJlc3Npb24nLFxuICAgICAgICBBcnJheVBhdHRlcm46ICdBcnJheVBhdHRlcm4nLFxuICAgICAgICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyxcbiAgICAgICAgQXdhaXRFeHByZXNzaW9uOiAnQXdhaXRFeHByZXNzaW9uJywgLy8gQ0FVVElPTjogSXQncyBkZWZlcnJlZCB0byBFUzcuXG4gICAgICAgIEJsb2NrU3RhdGVtZW50OiAnQmxvY2tTdGF0ZW1lbnQnLFxuICAgICAgICBCaW5hcnlFeHByZXNzaW9uOiAnQmluYXJ5RXhwcmVzc2lvbicsXG4gICAgICAgIEJyZWFrU3RhdGVtZW50OiAnQnJlYWtTdGF0ZW1lbnQnLFxuICAgICAgICBDYWxsRXhwcmVzc2lvbjogJ0NhbGxFeHByZXNzaW9uJyxcbiAgICAgICAgQ2F0Y2hDbGF1c2U6ICdDYXRjaENsYXVzZScsXG4gICAgICAgIENoYWluRXhwcmVzc2lvbjogJ0NoYWluRXhwcmVzc2lvbicsXG4gICAgICAgIENsYXNzQm9keTogJ0NsYXNzQm9keScsXG4gICAgICAgIENsYXNzRGVjbGFyYXRpb246ICdDbGFzc0RlY2xhcmF0aW9uJyxcbiAgICAgICAgQ2xhc3NFeHByZXNzaW9uOiAnQ2xhc3NFeHByZXNzaW9uJyxcbiAgICAgICAgQ29tcHJlaGVuc2lvbkJsb2NrOiAnQ29tcHJlaGVuc2lvbkJsb2NrJywgIC8vIENBVVRJT046IEl0J3MgZGVmZXJyZWQgdG8gRVM3LlxuICAgICAgICBDb21wcmVoZW5zaW9uRXhwcmVzc2lvbjogJ0NvbXByZWhlbnNpb25FeHByZXNzaW9uJywgIC8vIENBVVRJT046IEl0J3MgZGVmZXJyZWQgdG8gRVM3LlxuICAgICAgICBDb25kaXRpb25hbEV4cHJlc3Npb246ICdDb25kaXRpb25hbEV4cHJlc3Npb24nLFxuICAgICAgICBDb250aW51ZVN0YXRlbWVudDogJ0NvbnRpbnVlU3RhdGVtZW50JyxcbiAgICAgICAgRGVidWdnZXJTdGF0ZW1lbnQ6ICdEZWJ1Z2dlclN0YXRlbWVudCcsXG4gICAgICAgIERpcmVjdGl2ZVN0YXRlbWVudDogJ0RpcmVjdGl2ZVN0YXRlbWVudCcsXG4gICAgICAgIERvV2hpbGVTdGF0ZW1lbnQ6ICdEb1doaWxlU3RhdGVtZW50JyxcbiAgICAgICAgRW1wdHlTdGF0ZW1lbnQ6ICdFbXB0eVN0YXRlbWVudCcsXG4gICAgICAgIEV4cG9ydEFsbERlY2xhcmF0aW9uOiAnRXhwb3J0QWxsRGVjbGFyYXRpb24nLFxuICAgICAgICBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb246ICdFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24nLFxuICAgICAgICBFeHBvcnROYW1lZERlY2xhcmF0aW9uOiAnRXhwb3J0TmFtZWREZWNsYXJhdGlvbicsXG4gICAgICAgIEV4cG9ydFNwZWNpZmllcjogJ0V4cG9ydFNwZWNpZmllcicsXG4gICAgICAgIEV4cHJlc3Npb25TdGF0ZW1lbnQ6ICdFeHByZXNzaW9uU3RhdGVtZW50JyxcbiAgICAgICAgRm9yU3RhdGVtZW50OiAnRm9yU3RhdGVtZW50JyxcbiAgICAgICAgRm9ySW5TdGF0ZW1lbnQ6ICdGb3JJblN0YXRlbWVudCcsXG4gICAgICAgIEZvck9mU3RhdGVtZW50OiAnRm9yT2ZTdGF0ZW1lbnQnLFxuICAgICAgICBGdW5jdGlvbkRlY2xhcmF0aW9uOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicsXG4gICAgICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogJ0Z1bmN0aW9uRXhwcmVzc2lvbicsXG4gICAgICAgIEdlbmVyYXRvckV4cHJlc3Npb246ICdHZW5lcmF0b3JFeHByZXNzaW9uJywgIC8vIENBVVRJT046IEl0J3MgZGVmZXJyZWQgdG8gRVM3LlxuICAgICAgICBJZGVudGlmaWVyOiAnSWRlbnRpZmllcicsXG4gICAgICAgIElmU3RhdGVtZW50OiAnSWZTdGF0ZW1lbnQnLFxuICAgICAgICBJbXBvcnRFeHByZXNzaW9uOiAnSW1wb3J0RXhwcmVzc2lvbicsXG4gICAgICAgIEltcG9ydERlY2xhcmF0aW9uOiAnSW1wb3J0RGVjbGFyYXRpb24nLFxuICAgICAgICBJbXBvcnREZWZhdWx0U3BlY2lmaWVyOiAnSW1wb3J0RGVmYXVsdFNwZWNpZmllcicsXG4gICAgICAgIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjogJ0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllcicsXG4gICAgICAgIEltcG9ydFNwZWNpZmllcjogJ0ltcG9ydFNwZWNpZmllcicsXG4gICAgICAgIExpdGVyYWw6ICdMaXRlcmFsJyxcbiAgICAgICAgTGFiZWxlZFN0YXRlbWVudDogJ0xhYmVsZWRTdGF0ZW1lbnQnLFxuICAgICAgICBMb2dpY2FsRXhwcmVzc2lvbjogJ0xvZ2ljYWxFeHByZXNzaW9uJyxcbiAgICAgICAgTWVtYmVyRXhwcmVzc2lvbjogJ01lbWJlckV4cHJlc3Npb24nLFxuICAgICAgICBNZXRhUHJvcGVydHk6ICdNZXRhUHJvcGVydHknLFxuICAgICAgICBNZXRob2REZWZpbml0aW9uOiAnTWV0aG9kRGVmaW5pdGlvbicsXG4gICAgICAgIE1vZHVsZVNwZWNpZmllcjogJ01vZHVsZVNwZWNpZmllcicsXG4gICAgICAgIE5ld0V4cHJlc3Npb246ICdOZXdFeHByZXNzaW9uJyxcbiAgICAgICAgT2JqZWN0RXhwcmVzc2lvbjogJ09iamVjdEV4cHJlc3Npb24nLFxuICAgICAgICBPYmplY3RQYXR0ZXJuOiAnT2JqZWN0UGF0dGVybicsXG4gICAgICAgIFByaXZhdGVJZGVudGlmaWVyOiAnUHJpdmF0ZUlkZW50aWZpZXInLFxuICAgICAgICBQcm9ncmFtOiAnUHJvZ3JhbScsXG4gICAgICAgIFByb3BlcnR5OiAnUHJvcGVydHknLFxuICAgICAgICBQcm9wZXJ0eURlZmluaXRpb246ICdQcm9wZXJ0eURlZmluaXRpb24nLFxuICAgICAgICBSZXN0RWxlbWVudDogJ1Jlc3RFbGVtZW50JyxcbiAgICAgICAgUmV0dXJuU3RhdGVtZW50OiAnUmV0dXJuU3RhdGVtZW50JyxcbiAgICAgICAgU2VxdWVuY2VFeHByZXNzaW9uOiAnU2VxdWVuY2VFeHByZXNzaW9uJyxcbiAgICAgICAgU3ByZWFkRWxlbWVudDogJ1NwcmVhZEVsZW1lbnQnLFxuICAgICAgICBTdXBlcjogJ1N1cGVyJyxcbiAgICAgICAgU3dpdGNoU3RhdGVtZW50OiAnU3dpdGNoU3RhdGVtZW50JyxcbiAgICAgICAgU3dpdGNoQ2FzZTogJ1N3aXRjaENhc2UnLFxuICAgICAgICBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb246ICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nLFxuICAgICAgICBUZW1wbGF0ZUVsZW1lbnQ6ICdUZW1wbGF0ZUVsZW1lbnQnLFxuICAgICAgICBUZW1wbGF0ZUxpdGVyYWw6ICdUZW1wbGF0ZUxpdGVyYWwnLFxuICAgICAgICBUaGlzRXhwcmVzc2lvbjogJ1RoaXNFeHByZXNzaW9uJyxcbiAgICAgICAgVGhyb3dTdGF0ZW1lbnQ6ICdUaHJvd1N0YXRlbWVudCcsXG4gICAgICAgIFRyeVN0YXRlbWVudDogJ1RyeVN0YXRlbWVudCcsXG4gICAgICAgIFVuYXJ5RXhwcmVzc2lvbjogJ1VuYXJ5RXhwcmVzc2lvbicsXG4gICAgICAgIFVwZGF0ZUV4cHJlc3Npb246ICdVcGRhdGVFeHByZXNzaW9uJyxcbiAgICAgICAgVmFyaWFibGVEZWNsYXJhdGlvbjogJ1ZhcmlhYmxlRGVjbGFyYXRpb24nLFxuICAgICAgICBWYXJpYWJsZURlY2xhcmF0b3I6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuICAgICAgICBXaGlsZVN0YXRlbWVudDogJ1doaWxlU3RhdGVtZW50JyxcbiAgICAgICAgV2l0aFN0YXRlbWVudDogJ1dpdGhTdGF0ZW1lbnQnLFxuICAgICAgICBZaWVsZEV4cHJlc3Npb246ICdZaWVsZEV4cHJlc3Npb24nXG4gICAgfTtcblxuICAgIFZpc2l0b3JLZXlzID0ge1xuICAgICAgICBBc3NpZ25tZW50RXhwcmVzc2lvbjogWydsZWZ0JywgJ3JpZ2h0J10sXG4gICAgICAgIEFzc2lnbm1lbnRQYXR0ZXJuOiBbJ2xlZnQnLCAncmlnaHQnXSxcbiAgICAgICAgQXJyYXlFeHByZXNzaW9uOiBbJ2VsZW1lbnRzJ10sXG4gICAgICAgIEFycmF5UGF0dGVybjogWydlbGVtZW50cyddLFxuICAgICAgICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogWydwYXJhbXMnLCAnYm9keSddLFxuICAgICAgICBBd2FpdEV4cHJlc3Npb246IFsnYXJndW1lbnQnXSwgLy8gQ0FVVElPTjogSXQncyBkZWZlcnJlZCB0byBFUzcuXG4gICAgICAgIEJsb2NrU3RhdGVtZW50OiBbJ2JvZHknXSxcbiAgICAgICAgQmluYXJ5RXhwcmVzc2lvbjogWydsZWZ0JywgJ3JpZ2h0J10sXG4gICAgICAgIEJyZWFrU3RhdGVtZW50OiBbJ2xhYmVsJ10sXG4gICAgICAgIENhbGxFeHByZXNzaW9uOiBbJ2NhbGxlZScsICdhcmd1bWVudHMnXSxcbiAgICAgICAgQ2F0Y2hDbGF1c2U6IFsncGFyYW0nLCAnYm9keSddLFxuICAgICAgICBDaGFpbkV4cHJlc3Npb246IFsnZXhwcmVzc2lvbiddLFxuICAgICAgICBDbGFzc0JvZHk6IFsnYm9keSddLFxuICAgICAgICBDbGFzc0RlY2xhcmF0aW9uOiBbJ2lkJywgJ3N1cGVyQ2xhc3MnLCAnYm9keSddLFxuICAgICAgICBDbGFzc0V4cHJlc3Npb246IFsnaWQnLCAnc3VwZXJDbGFzcycsICdib2R5J10sXG4gICAgICAgIENvbXByZWhlbnNpb25CbG9jazogWydsZWZ0JywgJ3JpZ2h0J10sICAvLyBDQVVUSU9OOiBJdCdzIGRlZmVycmVkIHRvIEVTNy5cbiAgICAgICAgQ29tcHJlaGVuc2lvbkV4cHJlc3Npb246IFsnYmxvY2tzJywgJ2ZpbHRlcicsICdib2R5J10sICAvLyBDQVVUSU9OOiBJdCdzIGRlZmVycmVkIHRvIEVTNy5cbiAgICAgICAgQ29uZGl0aW9uYWxFeHByZXNzaW9uOiBbJ3Rlc3QnLCAnY29uc2VxdWVudCcsICdhbHRlcm5hdGUnXSxcbiAgICAgICAgQ29udGludWVTdGF0ZW1lbnQ6IFsnbGFiZWwnXSxcbiAgICAgICAgRGVidWdnZXJTdGF0ZW1lbnQ6IFtdLFxuICAgICAgICBEaXJlY3RpdmVTdGF0ZW1lbnQ6IFtdLFxuICAgICAgICBEb1doaWxlU3RhdGVtZW50OiBbJ2JvZHknLCAndGVzdCddLFxuICAgICAgICBFbXB0eVN0YXRlbWVudDogW10sXG4gICAgICAgIEV4cG9ydEFsbERlY2xhcmF0aW9uOiBbJ3NvdXJjZSddLFxuICAgICAgICBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb246IFsnZGVjbGFyYXRpb24nXSxcbiAgICAgICAgRXhwb3J0TmFtZWREZWNsYXJhdGlvbjogWydkZWNsYXJhdGlvbicsICdzcGVjaWZpZXJzJywgJ3NvdXJjZSddLFxuICAgICAgICBFeHBvcnRTcGVjaWZpZXI6IFsnZXhwb3J0ZWQnLCAnbG9jYWwnXSxcbiAgICAgICAgRXhwcmVzc2lvblN0YXRlbWVudDogWydleHByZXNzaW9uJ10sXG4gICAgICAgIEZvclN0YXRlbWVudDogWydpbml0JywgJ3Rlc3QnLCAndXBkYXRlJywgJ2JvZHknXSxcbiAgICAgICAgRm9ySW5TdGF0ZW1lbnQ6IFsnbGVmdCcsICdyaWdodCcsICdib2R5J10sXG4gICAgICAgIEZvck9mU3RhdGVtZW50OiBbJ2xlZnQnLCAncmlnaHQnLCAnYm9keSddLFxuICAgICAgICBGdW5jdGlvbkRlY2xhcmF0aW9uOiBbJ2lkJywgJ3BhcmFtcycsICdib2R5J10sXG4gICAgICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogWydpZCcsICdwYXJhbXMnLCAnYm9keSddLFxuICAgICAgICBHZW5lcmF0b3JFeHByZXNzaW9uOiBbJ2Jsb2NrcycsICdmaWx0ZXInLCAnYm9keSddLCAgLy8gQ0FVVElPTjogSXQncyBkZWZlcnJlZCB0byBFUzcuXG4gICAgICAgIElkZW50aWZpZXI6IFtdLFxuICAgICAgICBJZlN0YXRlbWVudDogWyd0ZXN0JywgJ2NvbnNlcXVlbnQnLCAnYWx0ZXJuYXRlJ10sXG4gICAgICAgIEltcG9ydEV4cHJlc3Npb246IFsnc291cmNlJ10sXG4gICAgICAgIEltcG9ydERlY2xhcmF0aW9uOiBbJ3NwZWNpZmllcnMnLCAnc291cmNlJ10sXG4gICAgICAgIEltcG9ydERlZmF1bHRTcGVjaWZpZXI6IFsnbG9jYWwnXSxcbiAgICAgICAgSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyOiBbJ2xvY2FsJ10sXG4gICAgICAgIEltcG9ydFNwZWNpZmllcjogWydpbXBvcnRlZCcsICdsb2NhbCddLFxuICAgICAgICBMaXRlcmFsOiBbXSxcbiAgICAgICAgTGFiZWxlZFN0YXRlbWVudDogWydsYWJlbCcsICdib2R5J10sXG4gICAgICAgIExvZ2ljYWxFeHByZXNzaW9uOiBbJ2xlZnQnLCAncmlnaHQnXSxcbiAgICAgICAgTWVtYmVyRXhwcmVzc2lvbjogWydvYmplY3QnLCAncHJvcGVydHknXSxcbiAgICAgICAgTWV0YVByb3BlcnR5OiBbJ21ldGEnLCAncHJvcGVydHknXSxcbiAgICAgICAgTWV0aG9kRGVmaW5pdGlvbjogWydrZXknLCAndmFsdWUnXSxcbiAgICAgICAgTW9kdWxlU3BlY2lmaWVyOiBbXSxcbiAgICAgICAgTmV3RXhwcmVzc2lvbjogWydjYWxsZWUnLCAnYXJndW1lbnRzJ10sXG4gICAgICAgIE9iamVjdEV4cHJlc3Npb246IFsncHJvcGVydGllcyddLFxuICAgICAgICBPYmplY3RQYXR0ZXJuOiBbJ3Byb3BlcnRpZXMnXSxcbiAgICAgICAgUHJpdmF0ZUlkZW50aWZpZXI6IFtdLFxuICAgICAgICBQcm9ncmFtOiBbJ2JvZHknXSxcbiAgICAgICAgUHJvcGVydHk6IFsna2V5JywgJ3ZhbHVlJ10sXG4gICAgICAgIFByb3BlcnR5RGVmaW5pdGlvbjogWydrZXknLCAndmFsdWUnXSxcbiAgICAgICAgUmVzdEVsZW1lbnQ6IFsgJ2FyZ3VtZW50JyBdLFxuICAgICAgICBSZXR1cm5TdGF0ZW1lbnQ6IFsnYXJndW1lbnQnXSxcbiAgICAgICAgU2VxdWVuY2VFeHByZXNzaW9uOiBbJ2V4cHJlc3Npb25zJ10sXG4gICAgICAgIFNwcmVhZEVsZW1lbnQ6IFsnYXJndW1lbnQnXSxcbiAgICAgICAgU3VwZXI6IFtdLFxuICAgICAgICBTd2l0Y2hTdGF0ZW1lbnQ6IFsnZGlzY3JpbWluYW50JywgJ2Nhc2VzJ10sXG4gICAgICAgIFN3aXRjaENhc2U6IFsndGVzdCcsICdjb25zZXF1ZW50J10sXG4gICAgICAgIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjogWyd0YWcnLCAncXVhc2knXSxcbiAgICAgICAgVGVtcGxhdGVFbGVtZW50OiBbXSxcbiAgICAgICAgVGVtcGxhdGVMaXRlcmFsOiBbJ3F1YXNpcycsICdleHByZXNzaW9ucyddLFxuICAgICAgICBUaGlzRXhwcmVzc2lvbjogW10sXG4gICAgICAgIFRocm93U3RhdGVtZW50OiBbJ2FyZ3VtZW50J10sXG4gICAgICAgIFRyeVN0YXRlbWVudDogWydibG9jaycsICdoYW5kbGVyJywgJ2ZpbmFsaXplciddLFxuICAgICAgICBVbmFyeUV4cHJlc3Npb246IFsnYXJndW1lbnQnXSxcbiAgICAgICAgVXBkYXRlRXhwcmVzc2lvbjogWydhcmd1bWVudCddLFxuICAgICAgICBWYXJpYWJsZURlY2xhcmF0aW9uOiBbJ2RlY2xhcmF0aW9ucyddLFxuICAgICAgICBWYXJpYWJsZURlY2xhcmF0b3I6IFsnaWQnLCAnaW5pdCddLFxuICAgICAgICBXaGlsZVN0YXRlbWVudDogWyd0ZXN0JywgJ2JvZHknXSxcbiAgICAgICAgV2l0aFN0YXRlbWVudDogWydvYmplY3QnLCAnYm9keSddLFxuICAgICAgICBZaWVsZEV4cHJlc3Npb246IFsnYXJndW1lbnQnXVxuICAgIH07XG5cbiAgICAvLyB1bmlxdWUgaWRcbiAgICBCUkVBSyA9IHt9O1xuICAgIFNLSVAgPSB7fTtcbiAgICBSRU1PVkUgPSB7fTtcblxuICAgIFZpc2l0b3JPcHRpb24gPSB7XG4gICAgICAgIEJyZWFrOiBCUkVBSyxcbiAgICAgICAgU2tpcDogU0tJUCxcbiAgICAgICAgUmVtb3ZlOiBSRU1PVkVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gUmVmZXJlbmNlKHBhcmVudCwga2V5KSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICB9XG5cbiAgICBSZWZlcmVuY2UucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5wYXJlbnRbdGhpcy5rZXldID0gbm9kZTtcbiAgICB9O1xuXG4gICAgUmVmZXJlbmNlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMucGFyZW50KSkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQuc3BsaWNlKHRoaXMua2V5LCAxKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlKG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIEVsZW1lbnQobm9kZSwgcGF0aCwgd3JhcCwgcmVmKSB7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgICAgIHRoaXMud3JhcCA9IHdyYXA7XG4gICAgICAgIHRoaXMucmVmID0gcmVmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoKSB7IH1cblxuICAgIC8vIEFQSTpcbiAgICAvLyByZXR1cm4gcHJvcGVydHkgcGF0aCBhcnJheSBmcm9tIHJvb3QgdG8gY3VycmVudCBub2RlXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucGF0aCA9IGZ1bmN0aW9uIHBhdGgoKSB7XG4gICAgICAgIHZhciBpLCBpeiwgaiwganosIHJlc3VsdCwgZWxlbWVudDtcblxuICAgICAgICBmdW5jdGlvbiBhZGRUb1BhdGgocmVzdWx0LCBwYXRoKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGp6ID0gcGF0aC5sZW5ndGg7IGogPCBqejsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhdGhbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByb290IG5vZGVcbiAgICAgICAgaWYgKCF0aGlzLl9fY3VycmVudC5wYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpcnN0IG5vZGUgaXMgc2VudGluZWwsIHNlY29uZCBub2RlIGlzIHJvb3QgZWxlbWVudFxuICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMiwgaXogPSB0aGlzLl9fbGVhdmVsaXN0Lmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSB0aGlzLl9fbGVhdmVsaXN0W2ldO1xuICAgICAgICAgICAgYWRkVG9QYXRoKHJlc3VsdCwgZWxlbWVudC5wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRUb1BhdGgocmVzdWx0LCB0aGlzLl9fY3VycmVudC5wYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLy8gQVBJOlxuICAgIC8vIHJldHVybiB0eXBlIG9mIGN1cnJlbnQgbm9kZVxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5jdXJyZW50KCk7XG4gICAgICAgIHJldHVybiBub2RlLnR5cGUgfHwgdGhpcy5fX2N1cnJlbnQud3JhcDtcbiAgICB9O1xuXG4gICAgLy8gQVBJOlxuICAgIC8vIHJldHVybiBhcnJheSBvZiBwYXJlbnQgZWxlbWVudHNcbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5wYXJlbnRzID0gZnVuY3Rpb24gcGFyZW50cygpIHtcbiAgICAgICAgdmFyIGksIGl6LCByZXN1bHQ7XG5cbiAgICAgICAgLy8gZmlyc3Qgbm9kZSBpcyBzZW50aW5lbFxuICAgICAgICByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMSwgaXogPSB0aGlzLl9fbGVhdmVsaXN0Lmxlbmd0aDsgaSA8IGl6OyArK2kpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuX19sZWF2ZWxpc3RbaV0ubm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBBUEk6XG4gICAgLy8gcmV0dXJuIGN1cnJlbnQgbm9kZVxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbiBjdXJyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2N1cnJlbnQubm9kZTtcbiAgICB9O1xuXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuX19leGVjdXRlID0gZnVuY3Rpb24gX19leGVjdXRlKGNhbGxiYWNrLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBwcmV2aW91cywgcmVzdWx0O1xuXG4gICAgICAgIHJlc3VsdCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBwcmV2aW91cyAgPSB0aGlzLl9fY3VycmVudDtcbiAgICAgICAgdGhpcy5fX2N1cnJlbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9fc3RhdGUgPSBudWxsO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwodGhpcywgZWxlbWVudC5ub2RlLCB0aGlzLl9fbGVhdmVsaXN0W3RoaXMuX19sZWF2ZWxpc3QubGVuZ3RoIC0gMV0ubm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fX2N1cnJlbnQgPSBwcmV2aW91cztcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBBUEk6XG4gICAgLy8gbm90aWZ5IGNvbnRyb2wgc2tpcCAvIGJyZWFrXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KGZsYWcpIHtcbiAgICAgICAgdGhpcy5fX3N0YXRlID0gZmxhZztcbiAgICB9O1xuXG4gICAgLy8gQVBJOlxuICAgIC8vIHNraXAgY2hpbGQgbm9kZXMgb2YgY3VycmVudCBub2RlXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ub3RpZnkoU0tJUCk7XG4gICAgfTtcblxuICAgIC8vIEFQSTpcbiAgICAvLyBicmVhayB0cmF2ZXJzYWxzXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGVbJ2JyZWFrJ10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5KEJSRUFLKTtcbiAgICB9O1xuXG4gICAgLy8gQVBJOlxuICAgIC8vIHJlbW92ZSBub2RlXG4gICAgQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5vdGlmeShSRU1PVkUpO1xuICAgIH07XG5cbiAgICBDb250cm9sbGVyLnByb3RvdHlwZS5fX2luaXRpYWxpemUgPSBmdW5jdGlvbihyb290LCB2aXNpdG9yKSB7XG4gICAgICAgIHRoaXMudmlzaXRvciA9IHZpc2l0b3I7XG4gICAgICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgICAgIHRoaXMuX193b3JrbGlzdCA9IFtdO1xuICAgICAgICB0aGlzLl9fbGVhdmVsaXN0ID0gW107XG4gICAgICAgIHRoaXMuX19jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX3N0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fX2ZhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgaWYgKHZpc2l0b3IuZmFsbGJhY2sgPT09ICdpdGVyYXRpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9fZmFsbGJhY2sgPSBPYmplY3Qua2V5cztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmlzaXRvci5mYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fX2ZhbGxiYWNrID0gdmlzaXRvci5mYWxsYmFjaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19rZXlzID0gVmlzaXRvcktleXM7XG4gICAgICAgIGlmICh2aXNpdG9yLmtleXMpIHtcbiAgICAgICAgICAgIHRoaXMuX19rZXlzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHRoaXMuX19rZXlzKSwgdmlzaXRvci5rZXlzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygbm9kZS50eXBlID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Byb3BlcnR5KG5vZGVUeXBlLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIChub2RlVHlwZSA9PT0gU3ludGF4Lk9iamVjdEV4cHJlc3Npb24gfHwgbm9kZVR5cGUgPT09IFN5bnRheC5PYmplY3RQYXR0ZXJuKSAmJiAncHJvcGVydGllcycgPT09IGtleTtcbiAgICB9XG4gIFxuICAgIGZ1bmN0aW9uIGNhbmRpZGF0ZUV4aXN0c0luTGVhdmVMaXN0KGxlYXZlbGlzdCwgY2FuZGlkYXRlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBsZWF2ZWxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGlmIChsZWF2ZWxpc3RbaV0ubm9kZSA9PT0gY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnRyYXZlcnNlID0gZnVuY3Rpb24gdHJhdmVyc2Uocm9vdCwgdmlzaXRvcikge1xuICAgICAgICB2YXIgd29ya2xpc3QsXG4gICAgICAgICAgICBsZWF2ZWxpc3QsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG5vZGVUeXBlLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICAgIGN1cnJlbnQyLFxuICAgICAgICAgICAgY2FuZGlkYXRlcyxcbiAgICAgICAgICAgIGNhbmRpZGF0ZSxcbiAgICAgICAgICAgIHNlbnRpbmVsO1xuXG4gICAgICAgIHRoaXMuX19pbml0aWFsaXplKHJvb3QsIHZpc2l0b3IpO1xuXG4gICAgICAgIHNlbnRpbmVsID0ge307XG5cbiAgICAgICAgLy8gcmVmZXJlbmNlXG4gICAgICAgIHdvcmtsaXN0ID0gdGhpcy5fX3dvcmtsaXN0O1xuICAgICAgICBsZWF2ZWxpc3QgPSB0aGlzLl9fbGVhdmVsaXN0O1xuXG4gICAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgICAgd29ya2xpc3QucHVzaChuZXcgRWxlbWVudChyb290LCBudWxsLCBudWxsLCBudWxsKSk7XG4gICAgICAgIGxlYXZlbGlzdC5wdXNoKG5ldyBFbGVtZW50KG51bGwsIG51bGwsIG51bGwsIG51bGwpKTtcblxuICAgICAgICB3aGlsZSAod29ya2xpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gd29ya2xpc3QucG9wKCk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSBzZW50aW5lbCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBsZWF2ZWxpc3QucG9wKCk7XG5cbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLl9fZXhlY3V0ZSh2aXNpdG9yLmxlYXZlLCBlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fc3RhdGUgPT09IEJSRUFLIHx8IHJldCA9PT0gQlJFQUspIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQubm9kZSkge1xuXG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5fX2V4ZWN1dGUodmlzaXRvci5lbnRlciwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX3N0YXRlID09PSBCUkVBSyB8fCByZXQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB3b3JrbGlzdC5wdXNoKHNlbnRpbmVsKTtcbiAgICAgICAgICAgICAgICBsZWF2ZWxpc3QucHVzaChlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fc3RhdGUgPT09IFNLSVAgfHwgcmV0ID09PSBTS0lQKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG5vZGUgPSBlbGVtZW50Lm5vZGU7XG4gICAgICAgICAgICAgICAgbm9kZVR5cGUgPSBub2RlLnR5cGUgfHwgZWxlbWVudC53cmFwO1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMgPSB0aGlzLl9fa2V5c1tub2RlVHlwZV07XG4gICAgICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9fZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMgPSB0aGlzLl9fZmFsbGJhY2sobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlICcgKyBub2RlVHlwZSArICcuJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY2FuZGlkYXRlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgd2hpbGUgKChjdXJyZW50IC09IDEpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gY2FuZGlkYXRlc1tjdXJyZW50XTtcbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlID0gbm9kZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjYW5kaWRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50MiA9IGNhbmRpZGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGN1cnJlbnQyIC09IDEpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNhbmRpZGF0ZVtjdXJyZW50Ml0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZUV4aXN0c0luTGVhdmVMaXN0KGxlYXZlbGlzdCwgY2FuZGlkYXRlW2N1cnJlbnQyXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Byb3BlcnR5KG5vZGVUeXBlLCBjYW5kaWRhdGVzW2N1cnJlbnRdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbmV3IEVsZW1lbnQoY2FuZGlkYXRlW2N1cnJlbnQyXSwgW2tleSwgY3VycmVudDJdLCAnUHJvcGVydHknLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzTm9kZShjYW5kaWRhdGVbY3VycmVudDJdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbmV3IEVsZW1lbnQoY2FuZGlkYXRlW2N1cnJlbnQyXSwgW2tleSwgY3VycmVudDJdLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3QucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc05vZGUoY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZUV4aXN0c0luTGVhdmVMaXN0KGxlYXZlbGlzdCwgY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3QucHVzaChuZXcgRWxlbWVudChjYW5kaWRhdGUsIGtleSwgbnVsbCwgbnVsbCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHJvb3QsIHZpc2l0b3IpIHtcbiAgICAgICAgdmFyIHdvcmtsaXN0LFxuICAgICAgICAgICAgbGVhdmVsaXN0LFxuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG5vZGVUeXBlLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICBjdXJyZW50MixcbiAgICAgICAgICAgIGNhbmRpZGF0ZXMsXG4gICAgICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgICAgICBzZW50aW5lbCxcbiAgICAgICAgICAgIG91dGVyLFxuICAgICAgICAgICAga2V5O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW0oZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIG5leHRFbGVtLFxuICAgICAgICAgICAgICAgIHBhcmVudDtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQucmVmLnJlbW92ZSgpKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgcmVmZXJlbmNlIGlzIGFuIGVsZW1lbnQgb2YgYW4gYXJyYXkuXG4gICAgICAgICAgICAgICAga2V5ID0gZWxlbWVudC5yZWYua2V5O1xuICAgICAgICAgICAgICAgIHBhcmVudCA9IGVsZW1lbnQucmVmLnBhcmVudDtcblxuICAgICAgICAgICAgICAgIC8vIElmIHJlbW92ZWQgZnJvbSBhcnJheSwgdGhlbiBkZWNyZWFzZSBmb2xsb3dpbmcgaXRlbXMnIGtleXMuXG4gICAgICAgICAgICAgICAgaSA9IHdvcmtsaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHRFbGVtID0gd29ya2xpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0RWxlbS5yZWYgJiYgbmV4dEVsZW0ucmVmLnBhcmVudCA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAgKG5leHRFbGVtLnJlZi5rZXkgPCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC0tbmV4dEVsZW0ucmVmLmtleTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19pbml0aWFsaXplKHJvb3QsIHZpc2l0b3IpO1xuXG4gICAgICAgIHNlbnRpbmVsID0ge307XG5cbiAgICAgICAgLy8gcmVmZXJlbmNlXG4gICAgICAgIHdvcmtsaXN0ID0gdGhpcy5fX3dvcmtsaXN0O1xuICAgICAgICBsZWF2ZWxpc3QgPSB0aGlzLl9fbGVhdmVsaXN0O1xuXG4gICAgICAgIC8vIGluaXRpYWxpemVcbiAgICAgICAgb3V0ZXIgPSB7XG4gICAgICAgICAgICByb290OiByb290XG4gICAgICAgIH07XG4gICAgICAgIGVsZW1lbnQgPSBuZXcgRWxlbWVudChyb290LCBudWxsLCBudWxsLCBuZXcgUmVmZXJlbmNlKG91dGVyLCAncm9vdCcpKTtcbiAgICAgICAgd29ya2xpc3QucHVzaChlbGVtZW50KTtcbiAgICAgICAgbGVhdmVsaXN0LnB1c2goZWxlbWVudCk7XG5cbiAgICAgICAgd2hpbGUgKHdvcmtsaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IHdvcmtsaXN0LnBvcCgpO1xuXG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gc2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gbGVhdmVsaXN0LnBvcCgpO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy5fX2V4ZWN1dGUodmlzaXRvci5sZWF2ZSwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBub2RlIG1heSBiZSByZXBsYWNlZCB3aXRoIG51bGwsXG4gICAgICAgICAgICAgICAgLy8gc28gZGlzdGluZ3Vpc2ggYmV0d2VlbiB1bmRlZmluZWQgYW5kIG51bGwgaW4gdGhpcyBwbGFjZVxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT09IEJSRUFLICYmIHRhcmdldCAhPT0gU0tJUCAmJiB0YXJnZXQgIT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICAvLyByZXBsYWNlXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVmLnJlcGxhY2UodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX3N0YXRlID09PSBSRU1PVkUgfHwgdGFyZ2V0ID09PSBSRU1PVkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fX3N0YXRlID09PSBCUkVBSyB8fCB0YXJnZXQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvdXRlci5yb290O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFyZ2V0ID0gdGhpcy5fX2V4ZWN1dGUodmlzaXRvci5lbnRlciwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIG5vZGUgbWF5IGJlIHJlcGxhY2VkIHdpdGggbnVsbCxcbiAgICAgICAgICAgIC8vIHNvIGRpc3Rpbmd1aXNoIGJldHdlZW4gdW5kZWZpbmVkIGFuZCBudWxsIGluIHRoaXMgcGxhY2VcbiAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT09IEJSRUFLICYmIHRhcmdldCAhPT0gU0tJUCAmJiB0YXJnZXQgIT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2VcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlZi5yZXBsYWNlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5ub2RlID0gdGFyZ2V0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fX3N0YXRlID09PSBSRU1PVkUgfHwgdGFyZ2V0ID09PSBSRU1PVkUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQubm9kZSA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9fc3RhdGUgPT09IEJSRUFLIHx8IHRhcmdldCA9PT0gQlJFQUspIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0ZXIucm9vdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbm9kZSBtYXkgYmUgbnVsbFxuICAgICAgICAgICAgbm9kZSA9IGVsZW1lbnQubm9kZTtcbiAgICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JrbGlzdC5wdXNoKHNlbnRpbmVsKTtcbiAgICAgICAgICAgIGxlYXZlbGlzdC5wdXNoKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fX3N0YXRlID09PSBTS0lQIHx8IHRhcmdldCA9PT0gU0tJUCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub2RlVHlwZSA9IG5vZGUudHlwZSB8fCBlbGVtZW50LndyYXA7XG4gICAgICAgICAgICBjYW5kaWRhdGVzID0gdGhpcy5fX2tleXNbbm9kZVR5cGVdO1xuICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX19mYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVzID0gdGhpcy5fX2ZhbGxiYWNrKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlIHR5cGUgJyArIG5vZGVUeXBlICsgJy4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjYW5kaWRhdGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlICgoY3VycmVudCAtPSAxKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAga2V5ID0gY2FuZGlkYXRlc1tjdXJyZW50XTtcbiAgICAgICAgICAgICAgICBjYW5kaWRhdGUgPSBub2RlW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50MiA9IGNhbmRpZGF0ZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoY3VycmVudDIgLT0gMSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYW5kaWRhdGVbY3VycmVudDJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNQcm9wZXJ0eShub2RlVHlwZSwgY2FuZGlkYXRlc1tjdXJyZW50XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbmV3IEVsZW1lbnQoY2FuZGlkYXRlW2N1cnJlbnQyXSwgW2tleSwgY3VycmVudDJdLCAnUHJvcGVydHknLCBuZXcgUmVmZXJlbmNlKGNhbmRpZGF0ZSwgY3VycmVudDIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOb2RlKGNhbmRpZGF0ZVtjdXJyZW50Ml0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IG5ldyBFbGVtZW50KGNhbmRpZGF0ZVtjdXJyZW50Ml0sIFtrZXksIGN1cnJlbnQyXSwgbnVsbCwgbmV3IFJlZmVyZW5jZShjYW5kaWRhdGUsIGN1cnJlbnQyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3QucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOb2RlKGNhbmRpZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgd29ya2xpc3QucHVzaChuZXcgRWxlbWVudChjYW5kaWRhdGUsIGtleSwgbnVsbCwgbmV3IFJlZmVyZW5jZShub2RlLCBrZXkpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG91dGVyLnJvb3Q7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKHJvb3QsIHZpc2l0b3IpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcigpO1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci50cmF2ZXJzZShyb290LCB2aXNpdG9yKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlKHJvb3QsIHZpc2l0b3IpIHtcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlcigpO1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci5yZXBsYWNlKHJvb3QsIHZpc2l0b3IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZENvbW1lbnRSYW5nZShjb21tZW50LCB0b2tlbnMpIHtcbiAgICAgICAgdmFyIHRhcmdldDtcblxuICAgICAgICB0YXJnZXQgPSB1cHBlckJvdW5kKHRva2VucywgZnVuY3Rpb24gc2VhcmNoKHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4ucmFuZ2VbMF0gPiBjb21tZW50LnJhbmdlWzBdO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb21tZW50LmV4dGVuZGVkUmFuZ2UgPSBbY29tbWVudC5yYW5nZVswXSwgY29tbWVudC5yYW5nZVsxXV07XG5cbiAgICAgICAgaWYgKHRhcmdldCAhPT0gdG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgY29tbWVudC5leHRlbmRlZFJhbmdlWzFdID0gdG9rZW5zW3RhcmdldF0ucmFuZ2VbMF07XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQgLT0gMTtcbiAgICAgICAgaWYgKHRhcmdldCA+PSAwKSB7XG4gICAgICAgICAgICBjb21tZW50LmV4dGVuZGVkUmFuZ2VbMF0gPSB0b2tlbnNbdGFyZ2V0XS5yYW5nZVsxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21tZW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGF0dGFjaENvbW1lbnRzKHRyZWUsIHByb3ZpZGVkQ29tbWVudHMsIHRva2Vucykge1xuICAgICAgICAvLyBBdCBmaXJzdCwgd2Ugc2hvdWxkIGNhbGN1bGF0ZSBleHRlbmRlZCBjb21tZW50IHJhbmdlcy5cbiAgICAgICAgdmFyIGNvbW1lbnRzID0gW10sIGNvbW1lbnQsIGxlbiwgaSwgY3Vyc29yO1xuXG4gICAgICAgIGlmICghdHJlZS5yYW5nZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhdHRhY2hDb21tZW50cyBuZWVkcyByYW5nZSBpbmZvcm1hdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdG9rZW5zIGFycmF5IGlzIGVtcHR5LCB3ZSBhdHRhY2ggY29tbWVudHMgdG8gdHJlZSBhcyAnbGVhZGluZ0NvbW1lbnRzJ1xuICAgICAgICBpZiAoIXRva2Vucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChwcm92aWRlZENvbW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHByb3ZpZGVkQ29tbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudCA9IGRlZXBDb3B5KHByb3ZpZGVkQ29tbWVudHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50LmV4dGVuZGVkUmFuZ2UgPSBbMCwgdHJlZS5yYW5nZVswXV07XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goY29tbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyZWUubGVhZGluZ0NvbW1lbnRzID0gY29tbWVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJlZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHByb3ZpZGVkQ29tbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goZXh0ZW5kQ29tbWVudFJhbmdlKGRlZXBDb3B5KHByb3ZpZGVkQ29tbWVudHNbaV0pLCB0b2tlbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoaXMgaXMgYmFzZWQgb24gSm9obiBGcmVlbWFuJ3MgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIGN1cnNvciA9IDA7XG4gICAgICAgIHRyYXZlcnNlKHRyZWUsIHtcbiAgICAgICAgICAgIGVudGVyOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb21tZW50O1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvciA8IGNvbW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY29tbWVudHNbY3Vyc29yXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQuZXh0ZW5kZWRSYW5nZVsxXSA+IG5vZGUucmFuZ2VbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQuZXh0ZW5kZWRSYW5nZVsxXSA9PT0gbm9kZS5yYW5nZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlLmxlYWRpbmdDb21tZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmxlYWRpbmdDb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMuc3BsaWNlKGN1cnNvciwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgb3V0IG9mIG93bmVkIG5vZGVcbiAgICAgICAgICAgICAgICBpZiAoY3Vyc29yID09PSBjb21tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3JPcHRpb24uQnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzW2N1cnNvcl0uZXh0ZW5kZWRSYW5nZVswXSA+IG5vZGUucmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3JPcHRpb24uU2tpcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGN1cnNvciA9IDA7XG4gICAgICAgIHRyYXZlcnNlKHRyZWUsIHtcbiAgICAgICAgICAgIGxlYXZlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBjb21tZW50O1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGN1cnNvciA8IGNvbW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY29tbWVudHNbY3Vyc29yXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucmFuZ2VbMV0gPCBjb21tZW50LmV4dGVuZGVkUmFuZ2VbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucmFuZ2VbMV0gPT09IGNvbW1lbnQuZXh0ZW5kZWRSYW5nZVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFub2RlLnRyYWlsaW5nQ29tbWVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRyYWlsaW5nQ29tbWVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudHJhaWxpbmdDb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMuc3BsaWNlKGN1cnNvciwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3IgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgb3V0IG9mIG93bmVkIG5vZGVcbiAgICAgICAgICAgICAgICBpZiAoY3Vyc29yID09PSBjb21tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3JPcHRpb24uQnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbW1lbnRzW2N1cnNvcl0uZXh0ZW5kZWRSYW5nZVswXSA+IG5vZGUucmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFZpc2l0b3JPcHRpb24uU2tpcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0cmVlO1xuICAgIH1cblxuICAgIGV4cG9ydHMuU3ludGF4ID0gU3ludGF4O1xuICAgIGV4cG9ydHMudHJhdmVyc2UgPSB0cmF2ZXJzZTtcbiAgICBleHBvcnRzLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGV4cG9ydHMuYXR0YWNoQ29tbWVudHMgPSBhdHRhY2hDb21tZW50cztcbiAgICBleHBvcnRzLlZpc2l0b3JLZXlzID0gVmlzaXRvcktleXM7XG4gICAgZXhwb3J0cy5WaXNpdG9yT3B0aW9uID0gVmlzaXRvck9wdGlvbjtcbiAgICBleHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyO1xuICAgIGV4cG9ydHMuY2xvbmVFbnZpcm9ubWVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNsb25lKHt9KTsgfTtcblxuICAgIHJldHVybiBleHBvcnRzO1xufShleHBvcnRzKSk7XG4vKiB2aW06IHNldCBzdz00IHRzPTQgZXQgdHc9ODAgOiAqL1xuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJlc3ByaW1hXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImVzcHJpbWFcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG5cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG5cblxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0Lypcblx0ICBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzLCBodHRwczovL2pzLmZvdW5kYXRpb24vXG5cblx0ICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcblx0ICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuXHQgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuXHQgICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdCAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG5cdCAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcblx0ICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuXHQgIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG5cdCAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuXHQgIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG5cdCAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuXHQgIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG5cdCAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuXHQgIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuXHQgIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG5cdCAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG5cdCAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cblx0Ki9cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHR2YXIgY29tbWVudF9oYW5kbGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHR2YXIganN4X3BhcnNlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblx0dmFyIHBhcnNlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0dmFyIHRva2VuaXplcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XG5cdGZ1bmN0aW9uIHBhcnNlKGNvZGUsIG9wdGlvbnMsIGRlbGVnYXRlKSB7XG5cdCAgICB2YXIgY29tbWVudEhhbmRsZXIgPSBudWxsO1xuXHQgICAgdmFyIHByb3h5RGVsZWdhdGUgPSBmdW5jdGlvbiAobm9kZSwgbWV0YWRhdGEpIHtcblx0ICAgICAgICBpZiAoZGVsZWdhdGUpIHtcblx0ICAgICAgICAgICAgZGVsZWdhdGUobm9kZSwgbWV0YWRhdGEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY29tbWVudEhhbmRsZXIpIHtcblx0ICAgICAgICAgICAgY29tbWVudEhhbmRsZXIudmlzaXQobm9kZSwgbWV0YWRhdGEpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICB2YXIgcGFyc2VyRGVsZWdhdGUgPSAodHlwZW9mIGRlbGVnYXRlID09PSAnZnVuY3Rpb24nKSA/IHByb3h5RGVsZWdhdGUgOiBudWxsO1xuXHQgICAgdmFyIGNvbGxlY3RDb21tZW50ID0gZmFsc2U7XG5cdCAgICBpZiAob3B0aW9ucykge1xuXHQgICAgICAgIGNvbGxlY3RDb21tZW50ID0gKHR5cGVvZiBvcHRpb25zLmNvbW1lbnQgPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmNvbW1lbnQpO1xuXHQgICAgICAgIHZhciBhdHRhY2hDb21tZW50ID0gKHR5cGVvZiBvcHRpb25zLmF0dGFjaENvbW1lbnQgPT09ICdib29sZWFuJyAmJiBvcHRpb25zLmF0dGFjaENvbW1lbnQpO1xuXHQgICAgICAgIGlmIChjb2xsZWN0Q29tbWVudCB8fCBhdHRhY2hDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGNvbW1lbnRIYW5kbGVyID0gbmV3IGNvbW1lbnRfaGFuZGxlcl8xLkNvbW1lbnRIYW5kbGVyKCk7XG5cdCAgICAgICAgICAgIGNvbW1lbnRIYW5kbGVyLmF0dGFjaCA9IGF0dGFjaENvbW1lbnQ7XG5cdCAgICAgICAgICAgIG9wdGlvbnMuY29tbWVudCA9IHRydWU7XG5cdCAgICAgICAgICAgIHBhcnNlckRlbGVnYXRlID0gcHJveHlEZWxlZ2F0ZTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdCAgICB2YXIgaXNNb2R1bGUgPSBmYWxzZTtcblx0ICAgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnNvdXJjZVR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgaXNNb2R1bGUgPSAob3B0aW9ucy5zb3VyY2VUeXBlID09PSAnbW9kdWxlJyk7XG5cdCAgICB9XG5cdCAgICB2YXIgcGFyc2VyO1xuXHQgICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMuanN4ID09PSAnYm9vbGVhbicgJiYgb3B0aW9ucy5qc3gpIHtcblx0ICAgICAgICBwYXJzZXIgPSBuZXcganN4X3BhcnNlcl8xLkpTWFBhcnNlcihjb2RlLCBvcHRpb25zLCBwYXJzZXJEZWxlZ2F0ZSk7XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgICBwYXJzZXIgPSBuZXcgcGFyc2VyXzEuUGFyc2VyKGNvZGUsIG9wdGlvbnMsIHBhcnNlckRlbGVnYXRlKTtcblx0ICAgIH1cblx0ICAgIHZhciBwcm9ncmFtID0gaXNNb2R1bGUgPyBwYXJzZXIucGFyc2VNb2R1bGUoKSA6IHBhcnNlci5wYXJzZVNjcmlwdCgpO1xuXHQgICAgdmFyIGFzdCA9IHByb2dyYW07XG5cdCAgICBpZiAoY29sbGVjdENvbW1lbnQgJiYgY29tbWVudEhhbmRsZXIpIHtcblx0ICAgICAgICBhc3QuY29tbWVudHMgPSBjb21tZW50SGFuZGxlci5jb21tZW50cztcblx0ICAgIH1cblx0ICAgIGlmIChwYXJzZXIuY29uZmlnLnRva2Vucykge1xuXHQgICAgICAgIGFzdC50b2tlbnMgPSBwYXJzZXIudG9rZW5zO1xuXHQgICAgfVxuXHQgICAgaWYgKHBhcnNlci5jb25maWcudG9sZXJhbnQpIHtcblx0ICAgICAgICBhc3QuZXJyb3JzID0gcGFyc2VyLmVycm9ySGFuZGxlci5lcnJvcnM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gYXN0O1xuXHR9XG5cdGV4cG9ydHMucGFyc2UgPSBwYXJzZTtcblx0ZnVuY3Rpb24gcGFyc2VNb2R1bGUoY29kZSwgb3B0aW9ucywgZGVsZWdhdGUpIHtcblx0ICAgIHZhciBwYXJzaW5nT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdCAgICBwYXJzaW5nT3B0aW9ucy5zb3VyY2VUeXBlID0gJ21vZHVsZSc7XG5cdCAgICByZXR1cm4gcGFyc2UoY29kZSwgcGFyc2luZ09wdGlvbnMsIGRlbGVnYXRlKTtcblx0fVxuXHRleHBvcnRzLnBhcnNlTW9kdWxlID0gcGFyc2VNb2R1bGU7XG5cdGZ1bmN0aW9uIHBhcnNlU2NyaXB0KGNvZGUsIG9wdGlvbnMsIGRlbGVnYXRlKSB7XG5cdCAgICB2YXIgcGFyc2luZ09wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHQgICAgcGFyc2luZ09wdGlvbnMuc291cmNlVHlwZSA9ICdzY3JpcHQnO1xuXHQgICAgcmV0dXJuIHBhcnNlKGNvZGUsIHBhcnNpbmdPcHRpb25zLCBkZWxlZ2F0ZSk7XG5cdH1cblx0ZXhwb3J0cy5wYXJzZVNjcmlwdCA9IHBhcnNlU2NyaXB0O1xuXHRmdW5jdGlvbiB0b2tlbml6ZShjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkge1xuXHQgICAgdmFyIHRva2VuaXplciA9IG5ldyB0b2tlbml6ZXJfMS5Ub2tlbml6ZXIoY29kZSwgb3B0aW9ucyk7XG5cdCAgICB2YXIgdG9rZW5zO1xuXHQgICAgdG9rZW5zID0gW107XG5cdCAgICB0cnkge1xuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2VuaXplci5nZXROZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0b2tlbiA9IGRlbGVnYXRlKHRva2VuKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgY2F0Y2ggKGUpIHtcblx0ICAgICAgICB0b2tlbml6ZXIuZXJyb3JIYW5kbGVyLnRvbGVyYXRlKGUpO1xuXHQgICAgfVxuXHQgICAgaWYgKHRva2VuaXplci5lcnJvckhhbmRsZXIudG9sZXJhbnQpIHtcblx0ICAgICAgICB0b2tlbnMuZXJyb3JzID0gdG9rZW5pemVyLmVycm9ycygpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHRva2Vucztcblx0fVxuXHRleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemU7XG5cdHZhciBzeW50YXhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdGV4cG9ydHMuU3ludGF4ID0gc3ludGF4XzEuU3ludGF4O1xuXHQvLyBTeW5jIHdpdGggKi5qc29uIG1hbmlmZXN0cy5cblx0ZXhwb3J0cy52ZXJzaW9uID0gJzQuMC4xJztcblxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0dmFyIHN5bnRheF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0dmFyIENvbW1lbnRIYW5kbGVyID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIENvbW1lbnRIYW5kbGVyKCkge1xuXHQgICAgICAgIHRoaXMuYXR0YWNoID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5jb21tZW50cyA9IFtdO1xuXHQgICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcblx0ICAgICAgICB0aGlzLmxlYWRpbmcgPSBbXTtcblx0ICAgICAgICB0aGlzLnRyYWlsaW5nID0gW107XG5cdCAgICB9XG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUuaW5zZXJ0SW5uZXJDb21tZW50cyA9IGZ1bmN0aW9uIChub2RlLCBtZXRhZGF0YSkge1xuXHQgICAgICAgIC8vICBpbm5uZXJDb21tZW50cyBmb3IgcHJvcGVydGllcyBlbXB0eSBibG9ja1xuXHQgICAgICAgIC8vICBgZnVuY3Rpb24gYSgpIHsvKiogY29tbWVudHMgKipcXC99YFxuXHQgICAgICAgIGlmIChub2RlLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5CbG9ja1N0YXRlbWVudCAmJiBub2RlLmJvZHkubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHZhciBpbm5lckNvbW1lbnRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlYWRpbmcubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHRoaXMubGVhZGluZ1tpXTtcblx0ICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YS5lbmQub2Zmc2V0ID49IGVudHJ5LnN0YXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5uZXJDb21tZW50cy51bnNoaWZ0KGVudHJ5LmNvbW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubGVhZGluZy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFpbGluZy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGlubmVyQ29tbWVudHMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlLmlubmVyQ29tbWVudHMgPSBpbm5lckNvbW1lbnRzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIENvbW1lbnRIYW5kbGVyLnByb3RvdHlwZS5maW5kVHJhaWxpbmdDb21tZW50cyA9IGZ1bmN0aW9uIChtZXRhZGF0YSkge1xuXHQgICAgICAgIHZhciB0cmFpbGluZ0NvbW1lbnRzID0gW107XG5cdCAgICAgICAgaWYgKHRoaXMudHJhaWxpbmcubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy50cmFpbGluZy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGVudHJ5XzEgPSB0aGlzLnRyYWlsaW5nW2ldO1xuXHQgICAgICAgICAgICAgICAgaWYgKGVudHJ5XzEuc3RhcnQgPj0gbWV0YWRhdGEuZW5kLm9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRyYWlsaW5nQ29tbWVudHMudW5zaGlmdChlbnRyeV8xLmNvbW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMudHJhaWxpbmcubGVuZ3RoID0gMDtcblx0ICAgICAgICAgICAgcmV0dXJuIHRyYWlsaW5nQ29tbWVudHM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBlbnRyeSA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcblx0ICAgICAgICBpZiAoZW50cnkgJiYgZW50cnkubm9kZS50cmFpbGluZ0NvbW1lbnRzKSB7XG5cdCAgICAgICAgICAgIHZhciBmaXJzdENvbW1lbnQgPSBlbnRyeS5ub2RlLnRyYWlsaW5nQ29tbWVudHNbMF07XG5cdCAgICAgICAgICAgIGlmIChmaXJzdENvbW1lbnQgJiYgZmlyc3RDb21tZW50LnJhbmdlWzBdID49IG1ldGFkYXRhLmVuZC5vZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIHRyYWlsaW5nQ29tbWVudHMgPSBlbnRyeS5ub2RlLnRyYWlsaW5nQ29tbWVudHM7XG5cdCAgICAgICAgICAgICAgICBkZWxldGUgZW50cnkubm9kZS50cmFpbGluZ0NvbW1lbnRzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0cmFpbGluZ0NvbW1lbnRzO1xuXHQgICAgfTtcblx0ICAgIENvbW1lbnRIYW5kbGVyLnByb3RvdHlwZS5maW5kTGVhZGluZ0NvbW1lbnRzID0gZnVuY3Rpb24gKG1ldGFkYXRhKSB7XG5cdCAgICAgICAgdmFyIGxlYWRpbmdDb21tZW50cyA9IFtdO1xuXHQgICAgICAgIHZhciB0YXJnZXQ7XG5cdCAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5zdGFydCA+PSBtZXRhZGF0YS5zdGFydC5vZmZzZXQpIHtcblx0ICAgICAgICAgICAgICAgIHRhcmdldCA9IGVudHJ5Lm5vZGU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRhcmdldCkge1xuXHQgICAgICAgICAgICB2YXIgY291bnQgPSB0YXJnZXQubGVhZGluZ0NvbW1lbnRzID8gdGFyZ2V0LmxlYWRpbmdDb21tZW50cy5sZW5ndGggOiAwO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gY291bnQgLSAxOyBpID49IDA7IC0taSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0YXJnZXQubGVhZGluZ0NvbW1lbnRzW2ldO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNvbW1lbnQucmFuZ2VbMV0gPD0gbWV0YWRhdGEuc3RhcnQub2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGVhZGluZ0NvbW1lbnRzLnVuc2hpZnQoY29tbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmxlYWRpbmdDb21tZW50cy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRhcmdldC5sZWFkaW5nQ29tbWVudHMgJiYgdGFyZ2V0LmxlYWRpbmdDb21tZW50cy5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQubGVhZGluZ0NvbW1lbnRzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBsZWFkaW5nQ29tbWVudHM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlYWRpbmcubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0ICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5sZWFkaW5nW2ldO1xuXHQgICAgICAgICAgICBpZiAoZW50cnkuc3RhcnQgPD0gbWV0YWRhdGEuc3RhcnQub2Zmc2V0KSB7XG5cdCAgICAgICAgICAgICAgICBsZWFkaW5nQ29tbWVudHMudW5zaGlmdChlbnRyeS5jb21tZW50KTtcblx0ICAgICAgICAgICAgICAgIHRoaXMubGVhZGluZy5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxlYWRpbmdDb21tZW50cztcblx0ICAgIH07XG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUudmlzaXROb2RlID0gZnVuY3Rpb24gKG5vZGUsIG1ldGFkYXRhKSB7XG5cdCAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LlByb2dyYW0gJiYgbm9kZS5ib2R5Lmxlbmd0aCA+IDApIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmluc2VydElubmVyQ29tbWVudHMobm9kZSwgbWV0YWRhdGEpO1xuXHQgICAgICAgIHZhciB0cmFpbGluZ0NvbW1lbnRzID0gdGhpcy5maW5kVHJhaWxpbmdDb21tZW50cyhtZXRhZGF0YSk7XG5cdCAgICAgICAgdmFyIGxlYWRpbmdDb21tZW50cyA9IHRoaXMuZmluZExlYWRpbmdDb21tZW50cyhtZXRhZGF0YSk7XG5cdCAgICAgICAgaWYgKGxlYWRpbmdDb21tZW50cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIG5vZGUubGVhZGluZ0NvbW1lbnRzID0gbGVhZGluZ0NvbW1lbnRzO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodHJhaWxpbmdDb21tZW50cy5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgICAgIG5vZGUudHJhaWxpbmdDb21tZW50cyA9IHRyYWlsaW5nQ29tbWVudHM7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG5cdCAgICAgICAgICAgIG5vZGU6IG5vZGUsXG5cdCAgICAgICAgICAgIHN0YXJ0OiBtZXRhZGF0YS5zdGFydC5vZmZzZXRcblx0ICAgICAgICB9KTtcblx0ICAgIH07XG5cdCAgICBDb21tZW50SGFuZGxlci5wcm90b3R5cGUudmlzaXRDb21tZW50ID0gZnVuY3Rpb24gKG5vZGUsIG1ldGFkYXRhKSB7XG5cdCAgICAgICAgdmFyIHR5cGUgPSAobm9kZS50eXBlWzBdID09PSAnTCcpID8gJ0xpbmUnIDogJ0Jsb2NrJztcblx0ICAgICAgICB2YXIgY29tbWVudCA9IHtcblx0ICAgICAgICAgICAgdHlwZTogdHlwZSxcblx0ICAgICAgICAgICAgdmFsdWU6IG5vZGUudmFsdWVcblx0ICAgICAgICB9O1xuXHQgICAgICAgIGlmIChub2RlLnJhbmdlKSB7XG5cdCAgICAgICAgICAgIGNvbW1lbnQucmFuZ2UgPSBub2RlLnJhbmdlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAobm9kZS5sb2MpIHtcblx0ICAgICAgICAgICAgY29tbWVudC5sb2MgPSBub2RlLmxvYztcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuXHQgICAgICAgIGlmICh0aGlzLmF0dGFjaCkge1xuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB7XG5cdCAgICAgICAgICAgICAgICBjb21tZW50OiB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbm9kZS52YWx1ZSxcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZTogW21ldGFkYXRhLnN0YXJ0Lm9mZnNldCwgbWV0YWRhdGEuZW5kLm9mZnNldF1cblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBzdGFydDogbWV0YWRhdGEuc3RhcnQub2Zmc2V0XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGlmIChub2RlLmxvYykge1xuXHQgICAgICAgICAgICAgICAgZW50cnkuY29tbWVudC5sb2MgPSBub2RlLmxvYztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBub2RlLnR5cGUgPSB0eXBlO1xuXHQgICAgICAgICAgICB0aGlzLmxlYWRpbmcucHVzaChlbnRyeSk7XG5cdCAgICAgICAgICAgIHRoaXMudHJhaWxpbmcucHVzaChlbnRyeSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIENvbW1lbnRIYW5kbGVyLnByb3RvdHlwZS52aXNpdCA9IGZ1bmN0aW9uIChub2RlLCBtZXRhZGF0YSkge1xuXHQgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdMaW5lQ29tbWVudCcpIHtcblx0ICAgICAgICAgICAgdGhpcy52aXNpdENvbW1lbnQobm9kZSwgbWV0YWRhdGEpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdCbG9ja0NvbW1lbnQnKSB7XG5cdCAgICAgICAgICAgIHRoaXMudmlzaXRDb21tZW50KG5vZGUsIG1ldGFkYXRhKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5hdHRhY2gpIHtcblx0ICAgICAgICAgICAgdGhpcy52aXNpdE5vZGUobm9kZSwgbWV0YWRhdGEpO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gQ29tbWVudEhhbmRsZXI7XG5cdH0oKSk7XG5cdGV4cG9ydHMuQ29tbWVudEhhbmRsZXIgPSBDb21tZW50SGFuZGxlcjtcblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0ZXhwb3J0cy5TeW50YXggPSB7XG5cdCAgICBBc3NpZ25tZW50RXhwcmVzc2lvbjogJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJyxcblx0ICAgIEFzc2lnbm1lbnRQYXR0ZXJuOiAnQXNzaWdubWVudFBhdHRlcm4nLFxuXHQgICAgQXJyYXlFeHByZXNzaW9uOiAnQXJyYXlFeHByZXNzaW9uJyxcblx0ICAgIEFycmF5UGF0dGVybjogJ0FycmF5UGF0dGVybicsXG5cdCAgICBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjogJ0Fycm93RnVuY3Rpb25FeHByZXNzaW9uJyxcblx0ICAgIEF3YWl0RXhwcmVzc2lvbjogJ0F3YWl0RXhwcmVzc2lvbicsXG5cdCAgICBCbG9ja1N0YXRlbWVudDogJ0Jsb2NrU3RhdGVtZW50Jyxcblx0ICAgIEJpbmFyeUV4cHJlc3Npb246ICdCaW5hcnlFeHByZXNzaW9uJyxcblx0ICAgIEJyZWFrU3RhdGVtZW50OiAnQnJlYWtTdGF0ZW1lbnQnLFxuXHQgICAgQ2FsbEV4cHJlc3Npb246ICdDYWxsRXhwcmVzc2lvbicsXG5cdCAgICBDYXRjaENsYXVzZTogJ0NhdGNoQ2xhdXNlJyxcblx0ICAgIENsYXNzQm9keTogJ0NsYXNzQm9keScsXG5cdCAgICBDbGFzc0RlY2xhcmF0aW9uOiAnQ2xhc3NEZWNsYXJhdGlvbicsXG5cdCAgICBDbGFzc0V4cHJlc3Npb246ICdDbGFzc0V4cHJlc3Npb24nLFxuXHQgICAgQ29uZGl0aW9uYWxFeHByZXNzaW9uOiAnQ29uZGl0aW9uYWxFeHByZXNzaW9uJyxcblx0ICAgIENvbnRpbnVlU3RhdGVtZW50OiAnQ29udGludWVTdGF0ZW1lbnQnLFxuXHQgICAgRG9XaGlsZVN0YXRlbWVudDogJ0RvV2hpbGVTdGF0ZW1lbnQnLFxuXHQgICAgRGVidWdnZXJTdGF0ZW1lbnQ6ICdEZWJ1Z2dlclN0YXRlbWVudCcsXG5cdCAgICBFbXB0eVN0YXRlbWVudDogJ0VtcHR5U3RhdGVtZW50Jyxcblx0ICAgIEV4cG9ydEFsbERlY2xhcmF0aW9uOiAnRXhwb3J0QWxsRGVjbGFyYXRpb24nLFxuXHQgICAgRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uOiAnRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uJyxcblx0ICAgIEV4cG9ydE5hbWVkRGVjbGFyYXRpb246ICdFeHBvcnROYW1lZERlY2xhcmF0aW9uJyxcblx0ICAgIEV4cG9ydFNwZWNpZmllcjogJ0V4cG9ydFNwZWNpZmllcicsXG5cdCAgICBFeHByZXNzaW9uU3RhdGVtZW50OiAnRXhwcmVzc2lvblN0YXRlbWVudCcsXG5cdCAgICBGb3JTdGF0ZW1lbnQ6ICdGb3JTdGF0ZW1lbnQnLFxuXHQgICAgRm9yT2ZTdGF0ZW1lbnQ6ICdGb3JPZlN0YXRlbWVudCcsXG5cdCAgICBGb3JJblN0YXRlbWVudDogJ0ZvckluU3RhdGVtZW50Jyxcblx0ICAgIEZ1bmN0aW9uRGVjbGFyYXRpb246ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyxcblx0ICAgIEZ1bmN0aW9uRXhwcmVzc2lvbjogJ0Z1bmN0aW9uRXhwcmVzc2lvbicsXG5cdCAgICBJZGVudGlmaWVyOiAnSWRlbnRpZmllcicsXG5cdCAgICBJZlN0YXRlbWVudDogJ0lmU3RhdGVtZW50Jyxcblx0ICAgIEltcG9ydERlY2xhcmF0aW9uOiAnSW1wb3J0RGVjbGFyYXRpb24nLFxuXHQgICAgSW1wb3J0RGVmYXVsdFNwZWNpZmllcjogJ0ltcG9ydERlZmF1bHRTcGVjaWZpZXInLFxuXHQgICAgSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyOiAnSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyJyxcblx0ICAgIEltcG9ydFNwZWNpZmllcjogJ0ltcG9ydFNwZWNpZmllcicsXG5cdCAgICBMaXRlcmFsOiAnTGl0ZXJhbCcsXG5cdCAgICBMYWJlbGVkU3RhdGVtZW50OiAnTGFiZWxlZFN0YXRlbWVudCcsXG5cdCAgICBMb2dpY2FsRXhwcmVzc2lvbjogJ0xvZ2ljYWxFeHByZXNzaW9uJyxcblx0ICAgIE1lbWJlckV4cHJlc3Npb246ICdNZW1iZXJFeHByZXNzaW9uJyxcblx0ICAgIE1ldGFQcm9wZXJ0eTogJ01ldGFQcm9wZXJ0eScsXG5cdCAgICBNZXRob2REZWZpbml0aW9uOiAnTWV0aG9kRGVmaW5pdGlvbicsXG5cdCAgICBOZXdFeHByZXNzaW9uOiAnTmV3RXhwcmVzc2lvbicsXG5cdCAgICBPYmplY3RFeHByZXNzaW9uOiAnT2JqZWN0RXhwcmVzc2lvbicsXG5cdCAgICBPYmplY3RQYXR0ZXJuOiAnT2JqZWN0UGF0dGVybicsXG5cdCAgICBQcm9ncmFtOiAnUHJvZ3JhbScsXG5cdCAgICBQcm9wZXJ0eTogJ1Byb3BlcnR5Jyxcblx0ICAgIFJlc3RFbGVtZW50OiAnUmVzdEVsZW1lbnQnLFxuXHQgICAgUmV0dXJuU3RhdGVtZW50OiAnUmV0dXJuU3RhdGVtZW50Jyxcblx0ICAgIFNlcXVlbmNlRXhwcmVzc2lvbjogJ1NlcXVlbmNlRXhwcmVzc2lvbicsXG5cdCAgICBTcHJlYWRFbGVtZW50OiAnU3ByZWFkRWxlbWVudCcsXG5cdCAgICBTdXBlcjogJ1N1cGVyJyxcblx0ICAgIFN3aXRjaENhc2U6ICdTd2l0Y2hDYXNlJyxcblx0ICAgIFN3aXRjaFN0YXRlbWVudDogJ1N3aXRjaFN0YXRlbWVudCcsXG5cdCAgICBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb246ICdUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24nLFxuXHQgICAgVGVtcGxhdGVFbGVtZW50OiAnVGVtcGxhdGVFbGVtZW50Jyxcblx0ICAgIFRlbXBsYXRlTGl0ZXJhbDogJ1RlbXBsYXRlTGl0ZXJhbCcsXG5cdCAgICBUaGlzRXhwcmVzc2lvbjogJ1RoaXNFeHByZXNzaW9uJyxcblx0ICAgIFRocm93U3RhdGVtZW50OiAnVGhyb3dTdGF0ZW1lbnQnLFxuXHQgICAgVHJ5U3RhdGVtZW50OiAnVHJ5U3RhdGVtZW50Jyxcblx0ICAgIFVuYXJ5RXhwcmVzc2lvbjogJ1VuYXJ5RXhwcmVzc2lvbicsXG5cdCAgICBVcGRhdGVFeHByZXNzaW9uOiAnVXBkYXRlRXhwcmVzc2lvbicsXG5cdCAgICBWYXJpYWJsZURlY2xhcmF0aW9uOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG5cdCAgICBWYXJpYWJsZURlY2xhcmF0b3I6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuXHQgICAgV2hpbGVTdGF0ZW1lbnQ6ICdXaGlsZVN0YXRlbWVudCcsXG5cdCAgICBXaXRoU3RhdGVtZW50OiAnV2l0aFN0YXRlbWVudCcsXG5cdCAgICBZaWVsZEV4cHJlc3Npb246ICdZaWVsZEV4cHJlc3Npb24nXG5cdH07XG5cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0dmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcblx0ICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG5cdCAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcblx0ICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuXHQgICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuXHQgICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcblx0ICAgIH07XG5cdH0pKCk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0dmFyIGNoYXJhY3Rlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0dmFyIEpTWE5vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHR2YXIganN4X3N5bnRheF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0dmFyIE5vZGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHR2YXIgcGFyc2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHR2YXIgdG9rZW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHR2YXIgeGh0bWxfZW50aXRpZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xuXHR0b2tlbl8xLlRva2VuTmFtZVsxMDAgLyogSWRlbnRpZmllciAqL10gPSAnSlNYSWRlbnRpZmllcic7XG5cdHRva2VuXzEuVG9rZW5OYW1lWzEwMSAvKiBUZXh0ICovXSA9ICdKU1hUZXh0Jztcblx0Ly8gRnVsbHkgcXVhbGlmaWVkIGVsZW1lbnQgbmFtZSwgZS5nLiA8c3ZnOnBhdGg+IHJldHVybnMgXCJzdmc6cGF0aFwiXG5cdGZ1bmN0aW9uIGdldFF1YWxpZmllZEVsZW1lbnROYW1lKGVsZW1lbnROYW1lKSB7XG5cdCAgICB2YXIgcXVhbGlmaWVkTmFtZTtcblx0ICAgIHN3aXRjaCAoZWxlbWVudE5hbWUudHlwZSkge1xuXHQgICAgICAgIGNhc2UganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hJZGVudGlmaWVyOlxuXHQgICAgICAgICAgICB2YXIgaWQgPSBlbGVtZW50TmFtZTtcblx0ICAgICAgICAgICAgcXVhbGlmaWVkTmFtZSA9IGlkLm5hbWU7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hOYW1lc3BhY2VkTmFtZTpcblx0ICAgICAgICAgICAgdmFyIG5zID0gZWxlbWVudE5hbWU7XG5cdCAgICAgICAgICAgIHF1YWxpZmllZE5hbWUgPSBnZXRRdWFsaWZpZWRFbGVtZW50TmFtZShucy5uYW1lc3BhY2UpICsgJzonICtcblx0ICAgICAgICAgICAgICAgIGdldFF1YWxpZmllZEVsZW1lbnROYW1lKG5zLm5hbWUpO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICBjYXNlIGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYTWVtYmVyRXhwcmVzc2lvbjpcblx0ICAgICAgICAgICAgdmFyIGV4cHIgPSBlbGVtZW50TmFtZTtcblx0ICAgICAgICAgICAgcXVhbGlmaWVkTmFtZSA9IGdldFF1YWxpZmllZEVsZW1lbnROYW1lKGV4cHIub2JqZWN0KSArICcuJyArXG5cdCAgICAgICAgICAgICAgICBnZXRRdWFsaWZpZWRFbGVtZW50TmFtZShleHByLnByb3BlcnR5KTtcblx0ICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgIH1cblx0ICAgIHJldHVybiBxdWFsaWZpZWROYW1lO1xuXHR9XG5cdHZhciBKU1hQYXJzZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuXHQgICAgX19leHRlbmRzKEpTWFBhcnNlciwgX3N1cGVyKTtcblx0ICAgIGZ1bmN0aW9uIEpTWFBhcnNlcihjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkge1xuXHQgICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBjb2RlLCBvcHRpb25zLCBkZWxlZ2F0ZSkgfHwgdGhpcztcblx0ICAgIH1cblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VQcmltYXJ5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5tYXRjaCgnPCcpID8gdGhpcy5wYXJzZUpTWFJvb3QoKSA6IF9zdXBlci5wcm90b3R5cGUucGFyc2VQcmltYXJ5RXhwcmVzc2lvbi5jYWxsKHRoaXMpO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUuc3RhcnRKU1ggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgLy8gVW53aW5kIHRoZSBzY2FubmVyIGJlZm9yZSB0aGUgbG9va2FoZWFkIHRva2VuLlxuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5pbmRleCA9IHRoaXMuc3RhcnRNYXJrZXIuaW5kZXg7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIgPSB0aGlzLnN0YXJ0TWFya2VyLmxpbmU7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLmxpbmVTdGFydCA9IHRoaXMuc3RhcnRNYXJrZXIuaW5kZXggLSB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbjtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmZpbmlzaEpTWCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBQcmltZSB0aGUgbmV4dCBsb29rYWhlYWQuXG5cdCAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnJlZW50ZXJKU1ggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5zdGFydEpTWCgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0SlNYKCd9Jyk7XG5cdCAgICAgICAgLy8gUG9wIHRoZSBjbG9zaW5nICd9JyBhZGRlZCBmcm9tIHRoZSBsb29rYWhlYWQuXG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLnRva2Vucykge1xuXHQgICAgICAgICAgICB0aGlzLnRva2Vucy5wb3AoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5jcmVhdGVKU1hOb2RlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgaW5kZXg6IHRoaXMuc2Nhbm5lci5pbmRleCxcblx0ICAgICAgICAgICAgbGluZTogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5jcmVhdGVKU1hDaGlsZE5vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgaW5kZXg6IHRoaXMuc2Nhbm5lci5pbmRleCxcblx0ICAgICAgICAgICAgbGluZTogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5zY2FuWEhUTUxFbnRpdHkgPSBmdW5jdGlvbiAocXVvdGUpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gJyYnO1xuXHQgICAgICAgIHZhciB2YWxpZCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHRlcm1pbmF0ZWQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgbnVtZXJpYyA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBoZXggPSBmYWxzZTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YoKSAmJiB2YWxpZCAmJiAhdGVybWluYXRlZCkge1xuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF07XG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gcXVvdGUpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSAoY2ggPT09ICc7Jyk7XG5cdCAgICAgICAgICAgIHJlc3VsdCArPSBjaDtcblx0ICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIGlmICghdGVybWluYXRlZCkge1xuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChyZXN1bHQubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBlLmcuICcmIzEyMzsnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWMgPSAoY2ggPT09ICcjJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bWVyaWMpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gJyYjeDQxOydcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhleCA9IChjaCA9PT0gJ3gnKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gaGV4IHx8IGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWVyaWMgPSBudW1lcmljICYmICFoZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSB2YWxpZCAmJiAhKG51bWVyaWMgJiYgIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gdmFsaWQgJiYgIShoZXggJiYgIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0hleERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHZhbGlkICYmIHRlcm1pbmF0ZWQgJiYgcmVzdWx0Lmxlbmd0aCA+IDIpIHtcblx0ICAgICAgICAgICAgLy8gZS5nLiAnJiN4NDE7JyBiZWNvbWVzIGp1c3QgJyN4NDEnXG5cdCAgICAgICAgICAgIHZhciBzdHIgPSByZXN1bHQuc3Vic3RyKDEsIHJlc3VsdC5sZW5ndGggLSAyKTtcblx0ICAgICAgICAgICAgaWYgKG51bWVyaWMgJiYgc3RyLmxlbmd0aCA+IDEpIHtcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoc3RyLnN1YnN0cigxKSwgMTApKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChoZXggJiYgc3RyLmxlbmd0aCA+IDIpIHtcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCA9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoJzAnICsgc3RyLnN1YnN0cigxKSwgMTYpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICghbnVtZXJpYyAmJiAhaGV4ICYmIHhodG1sX2VudGl0aWVzXzEuWEhUTUxFbnRpdGllc1tzdHJdKSB7XG5cdCAgICAgICAgICAgICAgICByZXN1bHQgPSB4aHRtbF9lbnRpdGllc18xLlhIVE1MRW50aXRpZXNbc3RyXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfTtcblx0ICAgIC8vIFNjYW4gdGhlIG5leHQgSlNYIHRva2VuLiBUaGlzIHJlcGxhY2VzIFNjYW5uZXIjbGV4IHdoZW4gaW4gSlNYIG1vZGUuXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmxleEpTWCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtcblx0ICAgICAgICAvLyA8ID4gLyA6ID0geyB9XG5cdCAgICAgICAgaWYgKGNwID09PSA2MCB8fCBjcCA9PT0gNjIgfHwgY3AgPT09IDQ3IHx8IGNwID09PSA1OCB8fCBjcCA9PT0gNjEgfHwgY3AgPT09IDEyMyB8fCBjcCA9PT0gMTI1KSB7XG5cdCAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdO1xuXHQgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgdHlwZTogNyAvKiBQdW5jdHVhdG9yICovLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMuc2Nhbm5lci5saW5lU3RhcnQsXG5cdCAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5zY2FubmVyLmluZGV4IC0gMSxcblx0ICAgICAgICAgICAgICAgIGVuZDogdGhpcy5zY2FubmVyLmluZGV4XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIFwiICdcblx0ICAgICAgICBpZiAoY3AgPT09IDM0IHx8IGNwID09PSAzOSkge1xuXHQgICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIHZhciBxdW90ZSA9IHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4KytdO1xuXHQgICAgICAgICAgICB2YXIgc3RyID0gJyc7XG5cdCAgICAgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZigpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleCsrXTtcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gcXVvdGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnJicpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdGhpcy5zY2FuWEhUTUxFbnRpdHkocXVvdGUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiA4IC8qIFN0cmluZ0xpdGVyYWwgKi8sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogc3RyLFxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMuc2Nhbm5lci5saW5lU3RhcnQsXG5cdCAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHRoaXMuc2Nhbm5lci5pbmRleFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyAuLi4gb3IgLlxuXHQgICAgICAgIGlmIChjcCA9PT0gNDYpIHtcblx0ICAgICAgICAgICAgdmFyIG4xID0gdGhpcy5zY2FubmVyLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuc2Nhbm5lci5pbmRleCArIDEpO1xuXHQgICAgICAgICAgICB2YXIgbjIgPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4ICsgMik7XG5cdCAgICAgICAgICAgIHZhciB2YWx1ZSA9IChuMSA9PT0gNDYgJiYgbjIgPT09IDQ2KSA/ICcuLi4nIDogJy4nO1xuXHQgICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5pbmRleCArPSB2YWx1ZS5sZW5ndGg7XG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiA3IC8qIFB1bmN0dWF0b3IgKi8sXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG5cdCAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcblx0ICAgICAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5zY2FubmVyLmxpbmVTdGFydCxcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcblx0ICAgICAgICAgICAgICAgIGVuZDogdGhpcy5zY2FubmVyLmluZGV4XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIGBcblx0ICAgICAgICBpZiAoY3AgPT09IDk2KSB7XG5cdCAgICAgICAgICAgIC8vIE9ubHkgcGxhY2Vob2xkZXIsIHNpbmNlIGl0IHdpbGwgYmUgcmVzY2FubmVkIGFzIGEgcmVhbCBhc3NpZ25tZW50IGV4cHJlc3Npb24uXG5cdCAgICAgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiAxMCAvKiBUZW1wbGF0ZSAqLyxcblx0ICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcblx0ICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLnNjYW5uZXIubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc2Nhbm5lci5pbmRleCxcblx0ICAgICAgICAgICAgICAgIGVuZDogdGhpcy5zY2FubmVyLmluZGV4XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIElkZW50aWZlciBjYW4gbm90IGNvbnRhaW4gYmFja3NsYXNoIChjaGFyIGNvZGUgOTIpLlxuXHQgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQoY3ApICYmIChjcCAhPT0gOTIpKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgICAgIHdoaWxlICghdGhpcy5zY2FubmVyLmVvZigpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNjYW5uZXIuc291cmNlLmNoYXJDb2RlQXQodGhpcy5zY2FubmVyLmluZGV4KTtcblx0ICAgICAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjaCkgJiYgKGNoICE9PSA5MikpIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSA0NSkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIEh5cGhlbiAoY2hhciBjb2RlIDQ1KSBjYW4gYmUgcGFydCBvZiBhbiBpZGVudGlmaWVyLlxuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5zY2FubmVyLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZShzdGFydCwgdGhpcy5zY2FubmVyLmluZGV4KTtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHR5cGU6IDEwMCAvKiBJZGVudGlmaWVyICovLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6IGlkLFxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMuc2Nhbm5lci5saW5lU3RhcnQsXG5cdCAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHRoaXMuc2Nhbm5lci5pbmRleFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5zY2FubmVyLmxleCgpO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUubmV4dEpTWFRva2VuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlci5pbmRleCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sZXhKU1goKTtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuY29sdW1uID0gdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydDtcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4odG9rZW4pKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRva2VuO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUubmV4dEpTWFRleHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlci5pbmRleCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbiA9IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnQ7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zY2FubmVyLmluZGV4O1xuXHQgICAgICAgIHZhciB0ZXh0ID0gJyc7XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLnNjYW5uZXIuZW9mKCkpIHtcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAoY2ggPT09ICd7JyB8fCBjaCA9PT0gJzwnKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICArK3RoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICAgICAgdGV4dCArPSBjaDtcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XG5cdCAgICAgICAgICAgICAgICArK3RoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLnNjYW5uZXIuc291cmNlW3RoaXMuc2Nhbm5lci5pbmRleF0gPT09ICdcXG4nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIubGluZVN0YXJ0ID0gdGhpcy5zY2FubmVyLmluZGV4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlci5pbmRleCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlci5jb2x1bW4gPSB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0O1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHtcblx0ICAgICAgICAgICAgdHlwZTogMTAxIC8qIFRleHQgKi8sXG5cdCAgICAgICAgICAgIHZhbHVlOiB0ZXh0LFxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLnNjYW5uZXIubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5zY2FubmVyLmluZGV4XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBpZiAoKHRleHQubGVuZ3RoID4gMCkgJiYgdGhpcy5jb25maWcudG9rZW5zKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2godGhpcy5jb252ZXJ0VG9rZW4odG9rZW4pKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRva2VuO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGVla0pTWFRva2VuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc2Nhbm5lci5zYXZlU3RhdGUoKTtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIuc2NhbkNvbW1lbnRzKCk7XG5cdCAgICAgICAgdmFyIG5leHQgPSB0aGlzLmxleEpTWCgpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5yZXN0b3JlU3RhdGUoc3RhdGUpO1xuXHQgICAgICAgIHJldHVybiBuZXh0O1xuXHQgICAgfTtcblx0ICAgIC8vIEV4cGVjdCB0aGUgbmV4dCBKU1ggdG9rZW4gdG8gbWF0Y2ggdGhlIHNwZWNpZmllZCBwdW5jdHVhdG9yLlxuXHQgICAgLy8gSWYgbm90LCBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmV4cGVjdEpTWCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dEpTWFRva2VuKCk7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09IDcgLyogUHVuY3R1YXRvciAqLyB8fCB0b2tlbi52YWx1ZSAhPT0gdmFsdWUpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8vIFJldHVybiB0cnVlIGlmIHRoZSBuZXh0IEpTWCB0b2tlbiBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgcHVuY3R1YXRvci5cblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUubWF0Y2hKU1ggPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICB2YXIgbmV4dCA9IHRoaXMucGVla0pTWFRva2VuKCk7XG5cdCAgICAgICAgcmV0dXJuIG5leHQudHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIG5leHQudmFsdWUgPT09IHZhbHVlO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0SlNYVG9rZW4oKTtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gMTAwIC8qIElkZW50aWZpZXIgKi8pIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWElkZW50aWZpZXIodG9rZW4udmFsdWUpKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYRWxlbWVudE5hbWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB2YXIgZWxlbWVudE5hbWUgPSB0aGlzLnBhcnNlSlNYSWRlbnRpZmllcigpO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoSlNYKCc6JykpIHtcblx0ICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGVsZW1lbnROYW1lO1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnOicpO1xuXHQgICAgICAgICAgICB2YXIgbmFtZV8xID0gdGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgZWxlbWVudE5hbWUgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWE5hbWVzcGFjZWROYW1lKG5hbWVzcGFjZSwgbmFtZV8xKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hKU1goJy4nKSkge1xuXHQgICAgICAgICAgICB3aGlsZSAodGhpcy5tYXRjaEpTWCgnLicpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gZWxlbWVudE5hbWU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLicpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5wYXJzZUpTWElkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnROYW1lID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZWxlbWVudE5hbWU7XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB2YXIgYXR0cmlidXRlTmFtZTtcblx0ICAgICAgICB2YXIgaWRlbnRpZmllciA9IHRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hKU1goJzonKSkge1xuXHQgICAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gaWRlbnRpZmllcjtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3RKU1goJzonKTtcblx0ICAgICAgICAgICAgdmFyIG5hbWVfMiA9IHRoaXMucGFyc2VKU1hJZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWE5hbWVzcGFjZWROYW1lKG5hbWVzcGFjZSwgbmFtZV8yKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lID0gaWRlbnRpZmllcjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWU7XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWFN0cmluZ0xpdGVyYWxBdHRyaWJ1dGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLm5leHRKU1hUb2tlbigpO1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSA4IC8qIFN0cmluZ0xpdGVyYWwgKi8pIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByYXcgPSB0aGlzLmdldFRva2VuUmF3KHRva2VuKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5MaXRlcmFsKHRva2VuLnZhbHVlLCByYXcpKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYRXhwcmVzc2lvbkF0dHJpYnV0ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0SlNYKCd7Jyk7XG5cdCAgICAgICAgdGhpcy5maW5pc2hKU1goKTtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcignSlNYIGF0dHJpYnV0ZXMgbXVzdCBvbmx5IGJlIGFzc2lnbmVkIGEgbm9uLWVtcHR5IGV4cHJlc3Npb24nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICB0aGlzLnJlZW50ZXJKU1goKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hFeHByZXNzaW9uQ29udGFpbmVyKGV4cHJlc3Npb24pKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hKU1goJ3snKSA/IHRoaXMucGFyc2VKU1hFeHByZXNzaW9uQXR0cmlidXRlKCkgOlxuXHQgICAgICAgICAgICB0aGlzLm1hdGNoSlNYKCc8JykgPyB0aGlzLnBhcnNlSlNYRWxlbWVudCgpIDogdGhpcy5wYXJzZUpTWFN0cmluZ0xpdGVyYWxBdHRyaWJ1dGUoKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYTmFtZVZhbHVlQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XG5cdCAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlSlNYQXR0cmlidXRlTmFtZSgpO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hKU1goJz0nKSkge1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPScpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VKU1hBdHRyaWJ1dGVWYWx1ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hBdHRyaWJ1dGUobmFtZSwgdmFsdWUpKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYU3ByZWFkQXR0cmlidXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJ3snKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLi4uJyk7XG5cdCAgICAgICAgdGhpcy5maW5pc2hKU1goKTtcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICB0aGlzLnJlZW50ZXJKU1goKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hTcHJlYWRBdHRyaWJ1dGUoYXJndW1lbnQpKTtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYQXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgYXR0cmlidXRlcyA9IFtdO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaEpTWCgnLycpICYmICF0aGlzLm1hdGNoSlNYKCc+JykpIHtcblx0ICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IHRoaXMubWF0Y2hKU1goJ3snKSA/IHRoaXMucGFyc2VKU1hTcHJlYWRBdHRyaWJ1dGUoKSA6XG5cdCAgICAgICAgICAgICAgICB0aGlzLnBhcnNlSlNYTmFtZVZhbHVlQXR0cmlidXRlKCk7XG5cdCAgICAgICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyaWJ1dGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlSlNYT3BlbmluZ0VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPCcpO1xuXHQgICAgICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZUpTWEVsZW1lbnROYW1lKCk7XG5cdCAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLnBhcnNlSlNYQXR0cmlidXRlcygpO1xuXHQgICAgICAgIHZhciBzZWxmQ2xvc2luZyA9IHRoaXMubWF0Y2hKU1goJy8nKTtcblx0ICAgICAgICBpZiAoc2VsZkNsb3NpbmcpIHtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3RKU1goJy8nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3RKU1goJz4nKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hPcGVuaW5nRWxlbWVudChuYW1lLCBzZWxmQ2xvc2luZywgYXR0cmlidXRlcykpO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hCb3VuZGFyeUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPCcpO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoSlNYKCcvJykpIHtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3RKU1goJy8nKTtcblx0ICAgICAgICAgICAgdmFyIG5hbWVfMyA9IHRoaXMucGFyc2VKU1hFbGVtZW50TmFtZSgpO1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPicpO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hDbG9zaW5nRWxlbWVudChuYW1lXzMpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlSlNYRWxlbWVudE5hbWUoKTtcblx0ICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHRoaXMucGFyc2VKU1hBdHRyaWJ1dGVzKCk7XG5cdCAgICAgICAgdmFyIHNlbGZDbG9zaW5nID0gdGhpcy5tYXRjaEpTWCgnLycpO1xuXHQgICAgICAgIGlmIChzZWxmQ2xvc2luZykge1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEpTWCgnLycpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgnPicpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWE9wZW5pbmdFbGVtZW50KG5hbWUsIHNlbGZDbG9zaW5nLCBhdHRyaWJ1dGVzKSk7XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEVtcHR5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYQ2hpbGROb2RlKCk7XG5cdCAgICAgICAgdGhpcy5jb2xsZWN0Q29tbWVudHMoKTtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuaW5kZXggPSB0aGlzLnNjYW5uZXIuaW5kZXg7XG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIuY29sdW1uID0gdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydDtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hFbXB0eUV4cHJlc3Npb24oKSk7XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEV4cHJlc3Npb25Db250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEpTWCgneycpO1xuXHQgICAgICAgIHZhciBleHByZXNzaW9uO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoSlNYKCd9JykpIHtcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VKU1hFbXB0eUV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3RKU1goJ30nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuZmluaXNoSlNYKCk7XG5cdCAgICAgICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgdGhpcy5yZWVudGVySlNYKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWEV4cHJlc3Npb25Db250YWluZXIoZXhwcmVzc2lvbikpO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YoKSkge1xuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlSlNYQ2hpbGROb2RlKCk7XG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dEpTWFRleHQoKTtcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnN0YXJ0IDwgdG9rZW4uZW5kKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XG5cdCAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBKU1hOb2RlLkpTWFRleHQodG9rZW4udmFsdWUsIHJhdykpO1xuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5zb3VyY2VbdGhpcy5zY2FubmVyLmluZGV4XSA9PT0gJ3snKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gdGhpcy5wYXJzZUpTWEV4cHJlc3Npb25Db250YWluZXIoKTtcblx0ICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY29udGFpbmVyKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBjaGlsZHJlbjtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29tcGxleEpTWEVsZW1lbnQgPSBmdW5jdGlvbiAoZWwpIHtcblx0ICAgICAgICB2YXIgc3RhY2sgPSBbXTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuc2Nhbm5lci5lb2YoKSkge1xuXHQgICAgICAgICAgICBlbC5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuLmNvbmNhdCh0aGlzLnBhcnNlSlNYQ2hpbGRyZW4oKSk7XG5cdCAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVKU1hDaGlsZE5vZGUoKTtcblx0ICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBhcnNlSlNYQm91bmRhcnlFbGVtZW50KCk7XG5cdCAgICAgICAgICAgIGlmIChlbGVtZW50LnR5cGUgPT09IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYT3BlbmluZ0VsZW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBvcGVuaW5nID0gZWxlbWVudDtcblx0ICAgICAgICAgICAgICAgIGlmIChvcGVuaW5nLnNlbGZDbG9zaW5nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgSlNYTm9kZS5KU1hFbGVtZW50KG9wZW5pbmcsIFtdLCBudWxsKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZWwuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGVsKTtcblx0ICAgICAgICAgICAgICAgICAgICBlbCA9IHsgbm9kZTogbm9kZSwgb3BlbmluZzogb3BlbmluZywgY2xvc2luZzogbnVsbCwgY2hpbGRyZW46IFtdIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hDbG9zaW5nRWxlbWVudCkge1xuXHQgICAgICAgICAgICAgICAgZWwuY2xvc2luZyA9IGVsZW1lbnQ7XG5cdCAgICAgICAgICAgICAgICB2YXIgb3Blbl8xID0gZ2V0UXVhbGlmaWVkRWxlbWVudE5hbWUoZWwub3BlbmluZy5uYW1lKTtcblx0ICAgICAgICAgICAgICAgIHZhciBjbG9zZV8xID0gZ2V0UXVhbGlmaWVkRWxlbWVudE5hbWUoZWwuY2xvc2luZy5uYW1lKTtcblx0ICAgICAgICAgICAgICAgIGlmIChvcGVuXzEgIT09IGNsb3NlXzEpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IoJ0V4cGVjdGVkIGNvcnJlc3BvbmRpbmcgSlNYIGNsb3NpbmcgdGFnIGZvciAlMCcsIG9wZW5fMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuZmluYWxpemUoZWwubm9kZSwgbmV3IEpTWE5vZGUuSlNYRWxlbWVudChlbC5vcGVuaW5nLCBlbC5jaGlsZHJlbiwgZWwuY2xvc2luZykpO1xuXHQgICAgICAgICAgICAgICAgICAgIGVsID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG5cdCAgICAgICAgICAgICAgICAgICAgZWwuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZWw7XG5cdCAgICB9O1xuXHQgICAgSlNYUGFyc2VyLnByb3RvdHlwZS5wYXJzZUpTWEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZUpTWE5vZGUoKTtcblx0ICAgICAgICB2YXIgb3BlbmluZyA9IHRoaXMucGFyc2VKU1hPcGVuaW5nRWxlbWVudCgpO1xuXHQgICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXHQgICAgICAgIHZhciBjbG9zaW5nID0gbnVsbDtcblx0ICAgICAgICBpZiAoIW9wZW5pbmcuc2VsZkNsb3NpbmcpIHtcblx0ICAgICAgICAgICAgdmFyIGVsID0gdGhpcy5wYXJzZUNvbXBsZXhKU1hFbGVtZW50KHsgbm9kZTogbm9kZSwgb3BlbmluZzogb3BlbmluZywgY2xvc2luZzogY2xvc2luZywgY2hpbGRyZW46IGNoaWxkcmVuIH0pO1xuXHQgICAgICAgICAgICBjaGlsZHJlbiA9IGVsLmNoaWxkcmVuO1xuXHQgICAgICAgICAgICBjbG9zaW5nID0gZWwuY2xvc2luZztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IEpTWE5vZGUuSlNYRWxlbWVudChvcGVuaW5nLCBjaGlsZHJlbiwgY2xvc2luZykpO1xuXHQgICAgfTtcblx0ICAgIEpTWFBhcnNlci5wcm90b3R5cGUucGFyc2VKU1hSb290ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8vIFBvcCB0aGUgb3BlbmluZyAnPCcgYWRkZWQgZnJvbSB0aGUgbG9va2FoZWFkLlxuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy50b2tlbnMpIHtcblx0ICAgICAgICAgICAgdGhpcy50b2tlbnMucG9wKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuc3RhcnRKU1goKTtcblx0ICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VKU1hFbGVtZW50KCk7XG5cdCAgICAgICAgdGhpcy5maW5pc2hKU1goKTtcblx0ICAgICAgICByZXR1cm4gZWxlbWVudDtcblx0ICAgIH07XG5cdCAgICBKU1hQYXJzZXIucHJvdG90eXBlLmlzU3RhcnRPZkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuaXNTdGFydE9mRXhwcmVzc2lvbi5jYWxsKHRoaXMpIHx8IHRoaXMubWF0Y2goJzwnKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gSlNYUGFyc2VyO1xuXHR9KHBhcnNlcl8xLlBhcnNlcikpO1xuXHRleHBvcnRzLkpTWFBhcnNlciA9IEpTWFBhcnNlcjtcblxuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0Ly8gU2VlIGFsc28gdG9vbHMvZ2VuZXJhdGUtdW5pY29kZS1yZWdleC5qcy5cblx0dmFyIFJlZ2V4ID0ge1xuXHQgICAgLy8gVW5pY29kZSB2OC4wLjAgTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQ6XG5cdCAgICBOb25Bc2NpaUlkZW50aWZpZXJTdGFydDogL1tcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4QTAtXFx1MDhCNFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YxXFx1MUNGNVxcdTFDRjZcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlCLVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFRlxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRFxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMzAtXFx1REY0QVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDODAtXFx1RENBRlxcdURDQzRcXHVEQ0M1XFx1RENDN1xcdUREODAtXFx1RERBRVxcdURERDgtXFx1REREQlxcdURFMDAtXFx1REUyRlxcdURFNDRcXHVERTgwLVxcdURFQUFcXHVERjAwLVxcdURGMTldfFxcdUQ4MDZbXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdURFQzAtXFx1REVGOF18XFx1RDgwOFtcXHVEQzAwLVxcdURGOTldfFxcdUQ4MDlbXFx1REMwMC1cXHVEQzZFXFx1REM4MC1cXHVERDQzXXxbXFx1RDgwQ1xcdUQ4NDAtXFx1RDg2OFxcdUQ4NkEtXFx1RDg2Q1xcdUQ4NkYtXFx1RDg3Ml1bXFx1REMwMC1cXHVERkZGXXxcXHVEODBEW1xcdURDMDAtXFx1REMyRV18XFx1RDgxMVtcXHVEQzAwLVxcdURFNDZdfFxcdUQ4MUFbXFx1REMwMC1cXHVERTM4XFx1REU0MC1cXHVERTVFXFx1REVEMC1cXHVERUVEXFx1REYwMC1cXHVERjJGXFx1REY0MC1cXHVERjQzXFx1REY2My1cXHVERjc3XFx1REY3RC1cXHVERjhGXXxcXHVEODFCW1xcdURGMDAtXFx1REY0NFxcdURGNTBcXHVERjkzLVxcdURGOUZdfFxcdUQ4MkNbXFx1REMwMFxcdURDMDFdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0vLFxuXHQgICAgLy8gVW5pY29kZSB2OC4wLjAgTm9uQXNjaWlJZGVudGlmaWVyUGFydDpcblx0ICAgIE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6IC9bXFx4QUFcXHhCNVxceEI3XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDMwMC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4Ni1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0ODMtXFx1MDQ4N1xcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjEwLVxcdTA2MUFcXHUwNjIwLVxcdTA2NjlcXHUwNjZFLVxcdTA2RDNcXHUwNkQ1LVxcdTA2RENcXHUwNkRGLVxcdTA2RThcXHUwNkVBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMC1cXHUwNzRBXFx1MDc0RC1cXHUwN0IxXFx1MDdDMC1cXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgyRFxcdTA4NDAtXFx1MDg1QlxcdTA4QTAtXFx1MDhCNFxcdTA4RTMtXFx1MDk2M1xcdTA5NjYtXFx1MDk2RlxcdTA5NzEtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkMtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlFNi1cXHUwOUYxXFx1MEEwMS1cXHUwQTAzXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTNDXFx1MEEzRS1cXHUwQTQyXFx1MEE0N1xcdTBBNDhcXHUwQTRCLVxcdTBBNERcXHUwQTUxXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCQy1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRTYtXFx1MEFFRlxcdTBBRjlcXHUwQjAxLVxcdTBCMDNcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzQy1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYzXFx1MEI2Ni1cXHUwQjZGXFx1MEI3MVxcdTBCODJcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCQkUtXFx1MEJDMlxcdTBCQzYtXFx1MEJDOFxcdTBCQ0EtXFx1MEJDRFxcdTBCRDBcXHUwQkQ3XFx1MEJFNi1cXHUwQkVGXFx1MEMwMC1cXHUwQzAzXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRC1cXHUwQzQ0XFx1MEM0Ni1cXHUwQzQ4XFx1MEM0QS1cXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzU4LVxcdTBDNUFcXHUwQzYwLVxcdTBDNjNcXHUwQzY2LVxcdTBDNkZcXHUwQzgxLVxcdTBDODNcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JDLVxcdTBDQzRcXHUwQ0M2LVxcdTBDQzhcXHUwQ0NBLVxcdTBDQ0RcXHUwQ0Q1XFx1MENENlxcdTBDREVcXHUwQ0UwLVxcdTBDRTNcXHUwQ0U2LVxcdTBDRUZcXHUwQ0YxXFx1MENGMlxcdTBEMDEtXFx1MEQwM1xcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0QtXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RVxcdTBENTdcXHUwRDVGLVxcdTBENjNcXHUwRDY2LVxcdTBENkZcXHUwRDdBLVxcdTBEN0ZcXHUwRDgyXFx1MEQ4M1xcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRENBXFx1MERDRi1cXHUwREQ0XFx1MERENlxcdTBERDgtXFx1MERERlxcdTBERTYtXFx1MERFRlxcdTBERjJcXHUwREYzXFx1MEUwMS1cXHUwRTNBXFx1MEU0MC1cXHUwRTRFXFx1MEU1MC1cXHUwRTU5XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjlcXHUwRUJCLVxcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVDOC1cXHUwRUNEXFx1MEVEMC1cXHUwRUQ5XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGMThcXHUwRjE5XFx1MEYyMC1cXHUwRjI5XFx1MEYzNVxcdTBGMzdcXHUwRjM5XFx1MEYzRS1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY3MS1cXHUwRjg0XFx1MEY4Ni1cXHUwRjk3XFx1MEY5OS1cXHUwRkJDXFx1MEZDNlxcdTEwMDAtXFx1MTA0OVxcdTEwNTAtXFx1MTA5RFxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzVELVxcdTEzNUZcXHUxMzY5LVxcdTEzNzFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTRcXHUxNzIwLVxcdTE3MzRcXHUxNzQwLVxcdTE3NTNcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzcyXFx1MTc3M1xcdTE3ODAtXFx1MTdEM1xcdTE3RDdcXHUxN0RDXFx1MTdERFxcdTE3RTAtXFx1MTdFOVxcdTE4MEItXFx1MTgwRFxcdTE4MTAtXFx1MTgxOVxcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5MjAtXFx1MTkyQlxcdTE5MzAtXFx1MTkzQlxcdTE5NDYtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTE5RDAtXFx1MTlEQVxcdTFBMDAtXFx1MUExQlxcdTFBMjAtXFx1MUE1RVxcdTFBNjAtXFx1MUE3Q1xcdTFBN0YtXFx1MUE4OVxcdTFBOTAtXFx1MUE5OVxcdTFBQTdcXHUxQUIwLVxcdTFBQkRcXHUxQjAwLVxcdTFCNEJcXHUxQjUwLVxcdTFCNTlcXHUxQjZCLVxcdTFCNzNcXHUxQjgwLVxcdTFCRjNcXHUxQzAwLVxcdTFDMzdcXHUxQzQwLVxcdTFDNDlcXHUxQzRELVxcdTFDN0RcXHUxQ0QwLVxcdTFDRDJcXHUxQ0Q0LVxcdTFDRjZcXHUxQ0Y4XFx1MUNGOVxcdTFEMDAtXFx1MURGNVxcdTFERkMtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDBDXFx1MjAwRFxcdTIwM0ZcXHUyMDQwXFx1MjA1NFxcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjBEMC1cXHUyMERDXFx1MjBFMVxcdTIwRTUtXFx1MjBGMFxcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDdGLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyREUwLVxcdTJERkZcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMkZcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDk5LVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRDVcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MkJcXHVBNjQwLVxcdUE2NkZcXHVBNjc0LVxcdUE2N0RcXHVBNjdGLVxcdUE2RjFcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QURcXHVBN0IwLVxcdUE3QjdcXHVBN0Y3LVxcdUE4MjdcXHVBODQwLVxcdUE4NzNcXHVBODgwLVxcdUE4QzRcXHVBOEQwLVxcdUE4RDlcXHVBOEUwLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE5MDAtXFx1QTkyRFxcdUE5MzAtXFx1QTk1M1xcdUE5NjAtXFx1QTk3Q1xcdUE5ODAtXFx1QTlDMFxcdUE5Q0YtXFx1QTlEOVxcdUE5RTAtXFx1QTlGRVxcdUFBMDAtXFx1QUEzNlxcdUFBNDAtXFx1QUE0RFxcdUFBNTAtXFx1QUE1OVxcdUFBNjAtXFx1QUE3NlxcdUFBN0EtXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFRlxcdUFBRjItXFx1QUFGNlxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2NVxcdUFCNzAtXFx1QUJFQVxcdUFCRUNcXHVBQkVEXFx1QUJGMC1cXHVBQkY5XFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRC1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTAwLVxcdUZFMEZcXHVGRTIwLVxcdUZFMkZcXHVGRTMzXFx1RkUzNFxcdUZFNEQtXFx1RkU0RlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMTAtXFx1RkYxOVxcdUZGMjEtXFx1RkYzQVxcdUZGM0ZcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERDQwLVxcdURENzRcXHVEREZEXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REVFMFxcdURGMDAtXFx1REYxRlxcdURGMzAtXFx1REY0QVxcdURGNTAtXFx1REY3QVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRlxcdURGRDEtXFx1REZENV18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0EwLVxcdURDQTlcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwLVxcdURFMDNcXHVERTA1XFx1REUwNlxcdURFMEMtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzM1xcdURFMzgtXFx1REUzQVxcdURFM0ZcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTZcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA0W1xcdURDMDAtXFx1REM0NlxcdURDNjYtXFx1REM2RlxcdURDN0YtXFx1RENCQVxcdURDRDAtXFx1RENFOFxcdURDRjAtXFx1RENGOVxcdUREMDAtXFx1REQzNFxcdUREMzYtXFx1REQzRlxcdURENTAtXFx1REQ3M1xcdURENzZcXHVERDgwLVxcdUREQzRcXHVERENBLVxcdUREQ0NcXHVEREQwLVxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTM3XFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVFQVxcdURFRjAtXFx1REVGOVxcdURGMDAtXFx1REYwM1xcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNDLVxcdURGNDRcXHVERjQ3XFx1REY0OFxcdURGNEItXFx1REY0RFxcdURGNTBcXHVERjU3XFx1REY1RC1cXHVERjYzXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDODAtXFx1RENDNVxcdURDQzdcXHVEQ0QwLVxcdURDRDlcXHVERDgwLVxcdUREQjVcXHVEREI4LVxcdUREQzBcXHVEREQ4LVxcdURERERcXHVERTAwLVxcdURFNDBcXHVERTQ0XFx1REU1MC1cXHVERTU5XFx1REU4MC1cXHVERUI3XFx1REVDMC1cXHVERUM5XFx1REYwMC1cXHVERjE5XFx1REYxRC1cXHVERjJCXFx1REYzMC1cXHVERjM5XXxcXHVEODA2W1xcdURDQTAtXFx1RENFOVxcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDMDAtXFx1REM2RVxcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJdW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFNjAtXFx1REU2OVxcdURFRDAtXFx1REVFRFxcdURFRjAtXFx1REVGNFxcdURGMDAtXFx1REYzNlxcdURGNDAtXFx1REY0M1xcdURGNTAtXFx1REY1OVxcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwLVxcdURGN0VcXHVERjhGLVxcdURGOUZdfFxcdUQ4MkNbXFx1REMwMFxcdURDMDFdfFxcdUQ4MkZbXFx1REMwMC1cXHVEQzZBXFx1REM3MC1cXHVEQzdDXFx1REM4MC1cXHVEQzg4XFx1REM5MC1cXHVEQzk5XFx1REM5RFxcdURDOUVdfFxcdUQ4MzRbXFx1REQ2NS1cXHVERDY5XFx1REQ2RC1cXHVERDcyXFx1REQ3Qi1cXHVERDgyXFx1REQ4NS1cXHVERDhCXFx1RERBQS1cXHVEREFEXFx1REU0Mi1cXHVERTQ0XXxcXHVEODM1W1xcdURDMDAtXFx1REM1NFxcdURDNTYtXFx1REM5Q1xcdURDOUVcXHVEQzlGXFx1RENBMlxcdURDQTVcXHVEQ0E2XFx1RENBOS1cXHVEQ0FDXFx1RENBRS1cXHVEQ0I5XFx1RENCQlxcdURDQkQtXFx1RENDM1xcdURDQzUtXFx1REQwNVxcdUREMDctXFx1REQwQVxcdUREMEQtXFx1REQxNFxcdUREMTYtXFx1REQxQ1xcdUREMUUtXFx1REQzOVxcdUREM0ItXFx1REQzRVxcdURENDAtXFx1REQ0NFxcdURENDZcXHVERDRBLVxcdURENTBcXHVERDUyLVxcdURFQTVcXHVERUE4LVxcdURFQzBcXHVERUMyLVxcdURFREFcXHVERURDLVxcdURFRkFcXHVERUZDLVxcdURGMTRcXHVERjE2LVxcdURGMzRcXHVERjM2LVxcdURGNEVcXHVERjUwLVxcdURGNkVcXHVERjcwLVxcdURGODhcXHVERjhBLVxcdURGQThcXHVERkFBLVxcdURGQzJcXHVERkM0LVxcdURGQ0JcXHVERkNFLVxcdURGRkZdfFxcdUQ4MzZbXFx1REUwMC1cXHVERTM2XFx1REUzQi1cXHVERTZDXFx1REU3NVxcdURFODRcXHVERTlCLVxcdURFOUZcXHVERUExLVxcdURFQUZdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1RENEMC1cXHVEQ0Q2XXxcXHVEODNCW1xcdURFMDAtXFx1REUwM1xcdURFMDUtXFx1REUxRlxcdURFMjFcXHVERTIyXFx1REUyNFxcdURFMjdcXHVERTI5LVxcdURFMzJcXHVERTM0LVxcdURFMzdcXHVERTM5XFx1REUzQlxcdURFNDJcXHVERTQ3XFx1REU0OVxcdURFNEJcXHVERTRELVxcdURFNEZcXHVERTUxXFx1REU1MlxcdURFNTRcXHVERTU3XFx1REU1OVxcdURFNUJcXHVERTVEXFx1REU1RlxcdURFNjFcXHVERTYyXFx1REU2NFxcdURFNjctXFx1REU2QVxcdURFNkMtXFx1REU3MlxcdURFNzQtXFx1REU3N1xcdURFNzktXFx1REU3Q1xcdURFN0VcXHVERTgwLVxcdURFODlcXHVERThCLVxcdURFOUJcXHVERUExLVxcdURFQTNcXHVERUE1LVxcdURFQTlcXHVERUFCLVxcdURFQkJdfFxcdUQ4NjlbXFx1REMwMC1cXHVERUQ2XFx1REYwMC1cXHVERkZGXXxcXHVEODZEW1xcdURDMDAtXFx1REYzNFxcdURGNDAtXFx1REZGRl18XFx1RDg2RVtcXHVEQzAwLVxcdURDMURcXHVEQzIwLVxcdURGRkZdfFxcdUQ4NzNbXFx1REMwMC1cXHVERUExXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF18XFx1REI0MFtcXHVERDAwLVxcdURERUZdL1xuXHR9O1xuXHRleHBvcnRzLkNoYXJhY3RlciA9IHtcblx0ICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2UgKi9cblx0ICAgIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIChjcCkge1xuXHQgICAgICAgIHJldHVybiAoY3AgPCAweDEwMDAwKSA/IFN0cmluZy5mcm9tQ2hhckNvZGUoY3ApIDpcblx0ICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MDAgKyAoKGNwIC0gMHgxMDAwMCkgPj4gMTApKSArXG5cdCAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4REMwMCArICgoY3AgLSAweDEwMDAwKSAmIDEwMjMpKTtcblx0ICAgIH0sXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy13aGl0ZS1zcGFjZVxuXHQgICAgaXNXaGl0ZVNwYWNlOiBmdW5jdGlvbiAoY3ApIHtcblx0ICAgICAgICByZXR1cm4gKGNwID09PSAweDIwKSB8fCAoY3AgPT09IDB4MDkpIHx8IChjcCA9PT0gMHgwQikgfHwgKGNwID09PSAweDBDKSB8fCAoY3AgPT09IDB4QTApIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDE2ODAgJiYgWzB4MTY4MCwgMHgyMDAwLCAweDIwMDEsIDB4MjAwMiwgMHgyMDAzLCAweDIwMDQsIDB4MjAwNSwgMHgyMDA2LCAweDIwMDcsIDB4MjAwOCwgMHgyMDA5LCAweDIwMEEsIDB4MjAyRiwgMHgyMDVGLCAweDMwMDAsIDB4RkVGRl0uaW5kZXhPZihjcCkgPj0gMCk7XG5cdCAgICB9LFxuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGluZS10ZXJtaW5hdG9yc1xuXHQgICAgaXNMaW5lVGVybWluYXRvcjogZnVuY3Rpb24gKGNwKSB7XG5cdCAgICAgICAgcmV0dXJuIChjcCA9PT0gMHgwQSkgfHwgKGNwID09PSAweDBEKSB8fCAoY3AgPT09IDB4MjAyOCkgfHwgKGNwID09PSAweDIwMjkpO1xuXHQgICAgfSxcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW5hbWVzLWFuZC1rZXl3b3Jkc1xuXHQgICAgaXNJZGVudGlmaWVyU3RhcnQ6IGZ1bmN0aW9uIChjcCkge1xuXHQgICAgICAgIHJldHVybiAoY3AgPT09IDB4MjQpIHx8IChjcCA9PT0gMHg1RikgfHxcblx0ICAgICAgICAgICAgKGNwID49IDB4NDEgJiYgY3AgPD0gMHg1QSkgfHxcblx0ICAgICAgICAgICAgKGNwID49IDB4NjEgJiYgY3AgPD0gMHg3QSkgfHxcblx0ICAgICAgICAgICAgKGNwID09PSAweDVDKSB8fFxuXHQgICAgICAgICAgICAoKGNwID49IDB4ODApICYmIFJlZ2V4Lk5vbkFzY2lpSWRlbnRpZmllclN0YXJ0LnRlc3QoZXhwb3J0cy5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludChjcCkpKTtcblx0ICAgIH0sXG5cdCAgICBpc0lkZW50aWZpZXJQYXJ0OiBmdW5jdGlvbiAoY3ApIHtcblx0ICAgICAgICByZXR1cm4gKGNwID09PSAweDI0KSB8fCAoY3AgPT09IDB4NUYpIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDQxICYmIGNwIDw9IDB4NUEpIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDYxICYmIGNwIDw9IDB4N0EpIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDMwICYmIGNwIDw9IDB4MzkpIHx8XG5cdCAgICAgICAgICAgIChjcCA9PT0gMHg1QykgfHxcblx0ICAgICAgICAgICAgKChjcCA+PSAweDgwKSAmJiBSZWdleC5Ob25Bc2NpaUlkZW50aWZpZXJQYXJ0LnRlc3QoZXhwb3J0cy5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludChjcCkpKTtcblx0ICAgIH0sXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1saXRlcmFscy1udW1lcmljLWxpdGVyYWxzXG5cdCAgICBpc0RlY2ltYWxEaWdpdDogZnVuY3Rpb24gKGNwKSB7XG5cdCAgICAgICAgcmV0dXJuIChjcCA+PSAweDMwICYmIGNwIDw9IDB4MzkpOyAvLyAwLi45XG5cdCAgICB9LFxuXHQgICAgaXNIZXhEaWdpdDogZnVuY3Rpb24gKGNwKSB7XG5cdCAgICAgICAgcmV0dXJuIChjcCA+PSAweDMwICYmIGNwIDw9IDB4MzkpIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDQxICYmIGNwIDw9IDB4NDYpIHx8XG5cdCAgICAgICAgICAgIChjcCA+PSAweDYxICYmIGNwIDw9IDB4NjYpOyAvLyBhLi5mXG5cdCAgICB9LFxuXHQgICAgaXNPY3RhbERpZ2l0OiBmdW5jdGlvbiAoY3ApIHtcblx0ICAgICAgICByZXR1cm4gKGNwID49IDB4MzAgJiYgY3AgPD0gMHgzNyk7IC8vIDAuLjdcblx0ICAgIH1cblx0fTtcblxuXG4vKioqLyB9LFxuLyogNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0dmFyIGpzeF9zeW50YXhfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdC8qIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlICovXG5cdHZhciBKU1hDbG9zaW5nRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBKU1hDbG9zaW5nRWxlbWVudChuYW1lKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hDbG9zaW5nRWxlbWVudDtcblx0ICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEpTWENsb3NpbmdFbGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWENsb3NpbmdFbGVtZW50ID0gSlNYQ2xvc2luZ0VsZW1lbnQ7XG5cdHZhciBKU1hFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEpTWEVsZW1lbnQob3BlbmluZ0VsZW1lbnQsIGNoaWxkcmVuLCBjbG9zaW5nRWxlbWVudCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYRWxlbWVudDtcblx0ICAgICAgICB0aGlzLm9wZW5pbmdFbGVtZW50ID0gb3BlbmluZ0VsZW1lbnQ7XG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuXHQgICAgICAgIHRoaXMuY2xvc2luZ0VsZW1lbnQgPSBjbG9zaW5nRWxlbWVudDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hFbGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWEVsZW1lbnQgPSBKU1hFbGVtZW50O1xuXHR2YXIgSlNYRW1wdHlFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEpTWEVtcHR5RXhwcmVzc2lvbigpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWEVtcHR5RXhwcmVzc2lvbjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hFbXB0eUV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuSlNYRW1wdHlFeHByZXNzaW9uID0gSlNYRW1wdHlFeHByZXNzaW9uO1xuXHR2YXIgSlNYRXhwcmVzc2lvbkNvbnRhaW5lciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBKU1hFeHByZXNzaW9uQ29udGFpbmVyKGV4cHJlc3Npb24pIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWEV4cHJlc3Npb25Db250YWluZXI7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hFeHByZXNzaW9uQ29udGFpbmVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWEV4cHJlc3Npb25Db250YWluZXIgPSBKU1hFeHByZXNzaW9uQ29udGFpbmVyO1xuXHR2YXIgSlNYSWRlbnRpZmllciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBKU1hJZGVudGlmaWVyKG5hbWUpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWElkZW50aWZpZXI7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hJZGVudGlmaWVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWElkZW50aWZpZXIgPSBKU1hJZGVudGlmaWVyO1xuXHR2YXIgSlNYTWVtYmVyRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBKU1hNZW1iZXJFeHByZXNzaW9uKG9iamVjdCwgcHJvcGVydHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWE1lbWJlckV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdCAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEpTWE1lbWJlckV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuSlNYTWVtYmVyRXhwcmVzc2lvbiA9IEpTWE1lbWJlckV4cHJlc3Npb247XG5cdHZhciBKU1hBdHRyaWJ1dGUgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gSlNYQXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hBdHRyaWJ1dGU7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gSlNYQXR0cmlidXRlO1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWEF0dHJpYnV0ZSA9IEpTWEF0dHJpYnV0ZTtcblx0dmFyIEpTWE5hbWVzcGFjZWROYW1lID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEpTWE5hbWVzcGFjZWROYW1lKG5hbWVzcGFjZSwgbmFtZSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IGpzeF9zeW50YXhfMS5KU1hTeW50YXguSlNYTmFtZXNwYWNlZE5hbWU7XG5cdCAgICAgICAgdGhpcy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG5cdCAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hOYW1lc3BhY2VkTmFtZTtcblx0fSgpKTtcblx0ZXhwb3J0cy5KU1hOYW1lc3BhY2VkTmFtZSA9IEpTWE5hbWVzcGFjZWROYW1lO1xuXHR2YXIgSlNYT3BlbmluZ0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gSlNYT3BlbmluZ0VsZW1lbnQobmFtZSwgc2VsZkNsb3NpbmcsIGF0dHJpYnV0ZXMpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWE9wZW5pbmdFbGVtZW50O1xuXHQgICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cdCAgICAgICAgdGhpcy5zZWxmQ2xvc2luZyA9IHNlbGZDbG9zaW5nO1xuXHQgICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gSlNYT3BlbmluZ0VsZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuSlNYT3BlbmluZ0VsZW1lbnQgPSBKU1hPcGVuaW5nRWxlbWVudDtcblx0dmFyIEpTWFNwcmVhZEF0dHJpYnV0ZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBKU1hTcHJlYWRBdHRyaWJ1dGUoYXJndW1lbnQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBqc3hfc3ludGF4XzEuSlNYU3ludGF4LkpTWFNwcmVhZEF0dHJpYnV0ZTtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gSlNYU3ByZWFkQXR0cmlidXRlO1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWFNwcmVhZEF0dHJpYnV0ZSA9IEpTWFNwcmVhZEF0dHJpYnV0ZTtcblx0dmFyIEpTWFRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gSlNYVGV4dCh2YWx1ZSwgcmF3KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0ganN4X3N5bnRheF8xLkpTWFN5bnRheC5KU1hUZXh0O1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLnJhdyA9IHJhdztcblx0ICAgIH1cblx0ICAgIHJldHVybiBKU1hUZXh0O1xuXHR9KCkpO1xuXHRleHBvcnRzLkpTWFRleHQgPSBKU1hUZXh0O1xuXG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHRleHBvcnRzLkpTWFN5bnRheCA9IHtcblx0ICAgIEpTWEF0dHJpYnV0ZTogJ0pTWEF0dHJpYnV0ZScsXG5cdCAgICBKU1hDbG9zaW5nRWxlbWVudDogJ0pTWENsb3NpbmdFbGVtZW50Jyxcblx0ICAgIEpTWEVsZW1lbnQ6ICdKU1hFbGVtZW50Jyxcblx0ICAgIEpTWEVtcHR5RXhwcmVzc2lvbjogJ0pTWEVtcHR5RXhwcmVzc2lvbicsXG5cdCAgICBKU1hFeHByZXNzaW9uQ29udGFpbmVyOiAnSlNYRXhwcmVzc2lvbkNvbnRhaW5lcicsXG5cdCAgICBKU1hJZGVudGlmaWVyOiAnSlNYSWRlbnRpZmllcicsXG5cdCAgICBKU1hNZW1iZXJFeHByZXNzaW9uOiAnSlNYTWVtYmVyRXhwcmVzc2lvbicsXG5cdCAgICBKU1hOYW1lc3BhY2VkTmFtZTogJ0pTWE5hbWVzcGFjZWROYW1lJyxcblx0ICAgIEpTWE9wZW5pbmdFbGVtZW50OiAnSlNYT3BlbmluZ0VsZW1lbnQnLFxuXHQgICAgSlNYU3ByZWFkQXR0cmlidXRlOiAnSlNYU3ByZWFkQXR0cmlidXRlJyxcblx0ICAgIEpTWFRleHQ6ICdKU1hUZXh0J1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiA3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHR2YXIgc3ludGF4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHQvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuXHR2YXIgQXJyYXlFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFycmF5RXhwcmVzc2lvbihlbGVtZW50cykge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5BcnJheUV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFycmF5RXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5BcnJheUV4cHJlc3Npb24gPSBBcnJheUV4cHJlc3Npb247XG5cdHZhciBBcnJheVBhdHRlcm4gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQXJyYXlQYXR0ZXJuKGVsZW1lbnRzKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycmF5UGF0dGVybjtcblx0ICAgICAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQXJyYXlQYXR0ZXJuO1xuXHR9KCkpO1xuXHRleHBvcnRzLkFycmF5UGF0dGVybiA9IEFycmF5UGF0dGVybjtcblx0dmFyIEFycm93RnVuY3Rpb25FeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFycm93RnVuY3Rpb25FeHByZXNzaW9uKHBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmlkID0gbnVsbDtcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdG9yID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmFzeW5jID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24gPSBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbjtcblx0dmFyIEFzc2lnbm1lbnRFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFzc2lnbm1lbnRFeHByZXNzaW9uKG9wZXJhdG9yLCBsZWZ0LCByaWdodCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Bc3NpZ25tZW50RXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG5cdCAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcblx0ICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQXNzaWdubWVudEV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXNzaWdubWVudEV4cHJlc3Npb24gPSBBc3NpZ25tZW50RXhwcmVzc2lvbjtcblx0dmFyIEFzc2lnbm1lbnRQYXR0ZXJuID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFzc2lnbm1lbnRQYXR0ZXJuKGxlZnQsIHJpZ2h0KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRQYXR0ZXJuO1xuXHQgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFzc2lnbm1lbnRQYXR0ZXJuO1xuXHR9KCkpO1xuXHRleHBvcnRzLkFzc2lnbm1lbnRQYXR0ZXJuID0gQXNzaWdubWVudFBhdHRlcm47XG5cdHZhciBBc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ocGFyYW1zLCBib2R5LCBleHByZXNzaW9uKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycm93RnVuY3Rpb25FeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMuaWQgPSBudWxsO1xuXHQgICAgICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICAgICAgdGhpcy5nZW5lcmF0b3IgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMuYXN5bmMgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQXN5bmNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiA9IEFzeW5jQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5cdHZhciBBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uKGlkLCBwYXJhbXMsIGJvZHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRnVuY3Rpb25EZWNsYXJhdGlvbjtcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XG5cdCAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYXN5bmMgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5Bc3luY0Z1bmN0aW9uRGVjbGFyYXRpb24gPSBBc3luY0Z1bmN0aW9uRGVjbGFyYXRpb247XG5cdHZhciBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBBc3luY0Z1bmN0aW9uRXhwcmVzc2lvbihpZCwgcGFyYW1zLCBib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkZ1bmN0aW9uRXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XG5cdCAgICAgICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgICAgICB0aGlzLmdlbmVyYXRvciA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYXN5bmMgPSB0cnVlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEFzeW5jRnVuY3Rpb25FeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkFzeW5jRnVuY3Rpb25FeHByZXNzaW9uID0gQXN5bmNGdW5jdGlvbkV4cHJlc3Npb247XG5cdHZhciBBd2FpdEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQXdhaXRFeHByZXNzaW9uKGFyZ3VtZW50KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkF3YWl0RXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQXdhaXRFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkF3YWl0RXhwcmVzc2lvbiA9IEF3YWl0RXhwcmVzc2lvbjtcblx0dmFyIEJpbmFyeUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQmluYXJ5RXhwcmVzc2lvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcblx0ICAgICAgICB2YXIgbG9naWNhbCA9IChvcGVyYXRvciA9PT0gJ3x8JyB8fCBvcGVyYXRvciA9PT0gJyYmJyk7XG5cdCAgICAgICAgdGhpcy50eXBlID0gbG9naWNhbCA/IHN5bnRheF8xLlN5bnRheC5Mb2dpY2FsRXhwcmVzc2lvbiA6IHN5bnRheF8xLlN5bnRheC5CaW5hcnlFeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcblx0ICAgICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xuXHQgICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBCaW5hcnlFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkJpbmFyeUV4cHJlc3Npb24gPSBCaW5hcnlFeHByZXNzaW9uO1xuXHR2YXIgQmxvY2tTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQmxvY2tTdGF0ZW1lbnQoYm9keSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5CbG9ja1N0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEJsb2NrU3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkJsb2NrU3RhdGVtZW50ID0gQmxvY2tTdGF0ZW1lbnQ7XG5cdHZhciBCcmVha1N0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBCcmVha1N0YXRlbWVudChsYWJlbCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5CcmVha1N0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQnJlYWtTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuQnJlYWtTdGF0ZW1lbnQgPSBCcmVha1N0YXRlbWVudDtcblx0dmFyIENhbGxFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIENhbGxFeHByZXNzaW9uKGNhbGxlZSwgYXJncykge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5DYWxsRXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmNhbGxlZSA9IGNhbGxlZTtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3M7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQ2FsbEV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQ2FsbEV4cHJlc3Npb24gPSBDYWxsRXhwcmVzc2lvbjtcblx0dmFyIENhdGNoQ2xhdXNlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIENhdGNoQ2xhdXNlKHBhcmFtLCBib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkNhdGNoQ2xhdXNlO1xuXHQgICAgICAgIHRoaXMucGFyYW0gPSBwYXJhbTtcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIENhdGNoQ2xhdXNlO1xuXHR9KCkpO1xuXHRleHBvcnRzLkNhdGNoQ2xhdXNlID0gQ2F0Y2hDbGF1c2U7XG5cdHZhciBDbGFzc0JvZHkgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ2xhc3NCb2R5KGJvZHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQ2xhc3NCb2R5O1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQ2xhc3NCb2R5O1xuXHR9KCkpO1xuXHRleHBvcnRzLkNsYXNzQm9keSA9IENsYXNzQm9keTtcblx0dmFyIENsYXNzRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ2xhc3NEZWNsYXJhdGlvbihpZCwgc3VwZXJDbGFzcywgYm9keSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5DbGFzc0RlY2xhcmF0aW9uO1xuXHQgICAgICAgIHRoaXMuaWQgPSBpZDtcblx0ICAgICAgICB0aGlzLnN1cGVyQ2xhc3MgPSBzdXBlckNsYXNzO1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQ2xhc3NEZWNsYXJhdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5DbGFzc0RlY2xhcmF0aW9uID0gQ2xhc3NEZWNsYXJhdGlvbjtcblx0dmFyIENsYXNzRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBDbGFzc0V4cHJlc3Npb24oaWQsIHN1cGVyQ2xhc3MsIGJvZHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQ2xhc3NFeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMuaWQgPSBpZDtcblx0ICAgICAgICB0aGlzLnN1cGVyQ2xhc3MgPSBzdXBlckNsYXNzO1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gQ2xhc3NFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkNsYXNzRXhwcmVzc2lvbiA9IENsYXNzRXhwcmVzc2lvbjtcblx0dmFyIENvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBDb21wdXRlZE1lbWJlckV4cHJlc3Npb24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5NZW1iZXJFeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMuY29tcHV0ZWQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXHQgICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBDb21wdXRlZE1lbWJlckV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uID0gQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uO1xuXHR2YXIgQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIENvbmRpdGlvbmFsRXhwcmVzc2lvbih0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQ29uZGl0aW9uYWxFeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XG5cdCAgICAgICAgdGhpcy5jb25zZXF1ZW50ID0gY29uc2VxdWVudDtcblx0ICAgICAgICB0aGlzLmFsdGVybmF0ZSA9IGFsdGVybmF0ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBDb25kaXRpb25hbEV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gQ29uZGl0aW9uYWxFeHByZXNzaW9uO1xuXHR2YXIgQ29udGludWVTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ29udGludWVTdGF0ZW1lbnQobGFiZWwpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQ29udGludWVTdGF0ZW1lbnQ7XG5cdCAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIENvbnRpbnVlU3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkNvbnRpbnVlU3RhdGVtZW50ID0gQ29udGludWVTdGF0ZW1lbnQ7XG5cdHZhciBEZWJ1Z2dlclN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEZWJ1Z2dlclN0YXRlbWVudCgpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRGVidWdnZXJTdGF0ZW1lbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRGVidWdnZXJTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRGVidWdnZXJTdGF0ZW1lbnQgPSBEZWJ1Z2dlclN0YXRlbWVudDtcblx0dmFyIERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEaXJlY3RpdmUoZXhwcmVzc2lvbiwgZGlyZWN0aXZlKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cHJlc3Npb25TdGF0ZW1lbnQ7XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmRpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBEaXJlY3RpdmU7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRGlyZWN0aXZlID0gRGlyZWN0aXZlO1xuXHR2YXIgRG9XaGlsZVN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBEb1doaWxlU3RhdGVtZW50KGJvZHksIHRlc3QpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRG9XaGlsZVN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRG9XaGlsZVN0YXRlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5Eb1doaWxlU3RhdGVtZW50ID0gRG9XaGlsZVN0YXRlbWVudDtcblx0dmFyIEVtcHR5U3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEVtcHR5U3RhdGVtZW50KCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5FbXB0eVN0YXRlbWVudDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBFbXB0eVN0YXRlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5FbXB0eVN0YXRlbWVudCA9IEVtcHR5U3RhdGVtZW50O1xuXHR2YXIgRXhwb3J0QWxsRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRXhwb3J0QWxsRGVjbGFyYXRpb24oc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cG9ydEFsbERlY2xhcmF0aW9uO1xuXHQgICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEV4cG9ydEFsbERlY2xhcmF0aW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkV4cG9ydEFsbERlY2xhcmF0aW9uID0gRXhwb3J0QWxsRGVjbGFyYXRpb247XG5cdHZhciBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbjtcblx0ICAgICAgICB0aGlzLmRlY2xhcmF0aW9uID0gZGVjbGFyYXRpb247XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbiA9IEV4cG9ydERlZmF1bHREZWNsYXJhdGlvbjtcblx0dmFyIEV4cG9ydE5hbWVkRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRXhwb3J0TmFtZWREZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgc3BlY2lmaWVycywgc291cmNlKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cG9ydE5hbWVkRGVjbGFyYXRpb247XG5cdCAgICAgICAgdGhpcy5kZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uO1xuXHQgICAgICAgIHRoaXMuc3BlY2lmaWVycyA9IHNwZWNpZmllcnM7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5FeHBvcnROYW1lZERlY2xhcmF0aW9uID0gRXhwb3J0TmFtZWREZWNsYXJhdGlvbjtcblx0dmFyIEV4cG9ydFNwZWNpZmllciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBFeHBvcnRTcGVjaWZpZXIobG9jYWwsIGV4cG9ydGVkKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkV4cG9ydFNwZWNpZmllcjtcblx0ICAgICAgICB0aGlzLmV4cG9ydGVkID0gZXhwb3J0ZWQ7XG5cdCAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEV4cG9ydFNwZWNpZmllcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5FeHBvcnRTcGVjaWZpZXIgPSBFeHBvcnRTcGVjaWZpZXI7XG5cdHZhciBFeHByZXNzaW9uU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEV4cHJlc3Npb25TdGF0ZW1lbnQoZXhwcmVzc2lvbikge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5FeHByZXNzaW9uU3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cHJlc3Npb247XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRXhwcmVzc2lvblN0YXRlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5FeHByZXNzaW9uU3RhdGVtZW50ID0gRXhwcmVzc2lvblN0YXRlbWVudDtcblx0dmFyIEZvckluU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEZvckluU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkZvckluU3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICAgICAgdGhpcy5lYWNoID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRm9ySW5TdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRm9ySW5TdGF0ZW1lbnQgPSBGb3JJblN0YXRlbWVudDtcblx0dmFyIEZvck9mU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEZvck9mU3RhdGVtZW50KGxlZnQsIHJpZ2h0LCBib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkZvck9mU3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMubGVmdCA9IGxlZnQ7XG5cdCAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gRm9yT2ZTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRm9yT2ZTdGF0ZW1lbnQgPSBGb3JPZlN0YXRlbWVudDtcblx0dmFyIEZvclN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBGb3JTdGF0ZW1lbnQoaW5pdCwgdGVzdCwgdXBkYXRlLCBib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkZvclN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmluaXQgPSBpbml0O1xuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XG5cdCAgICAgICAgdGhpcy51cGRhdGUgPSB1cGRhdGU7XG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBGb3JTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuRm9yU3RhdGVtZW50ID0gRm9yU3RhdGVtZW50O1xuXHR2YXIgRnVuY3Rpb25EZWNsYXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBGdW5jdGlvbkRlY2xhcmF0aW9uKGlkLCBwYXJhbXMsIGJvZHksIGdlbmVyYXRvcikge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5GdW5jdGlvbkRlY2xhcmF0aW9uO1xuXHQgICAgICAgIHRoaXMuaWQgPSBpZDtcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYXN5bmMgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBGdW5jdGlvbkRlY2xhcmF0aW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLkZ1bmN0aW9uRGVjbGFyYXRpb24gPSBGdW5jdGlvbkRlY2xhcmF0aW9uO1xuXHR2YXIgRnVuY3Rpb25FeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIEZ1bmN0aW9uRXhwcmVzc2lvbihpZCwgcGFyYW1zLCBib2R5LCBnZW5lcmF0b3IpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguRnVuY3Rpb25FeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMuaWQgPSBpZDtcblx0ICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgICAgIHRoaXMuZ2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuXHQgICAgICAgIHRoaXMuZXhwcmVzc2lvbiA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuYXN5bmMgPSBmYWxzZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBGdW5jdGlvbkV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuRnVuY3Rpb25FeHByZXNzaW9uID0gRnVuY3Rpb25FeHByZXNzaW9uO1xuXHR2YXIgSWRlbnRpZmllciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJZGVudGlmaWVyKG5hbWUpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcjtcblx0ICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIElkZW50aWZpZXI7XG5cdH0oKSk7XG5cdGV4cG9ydHMuSWRlbnRpZmllciA9IElkZW50aWZpZXI7XG5cdHZhciBJZlN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJZlN0YXRlbWVudCh0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguSWZTdGF0ZW1lbnQ7XG5cdCAgICAgICAgdGhpcy50ZXN0ID0gdGVzdDtcblx0ICAgICAgICB0aGlzLmNvbnNlcXVlbnQgPSBjb25zZXF1ZW50O1xuXHQgICAgICAgIHRoaXMuYWx0ZXJuYXRlID0gYWx0ZXJuYXRlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIElmU3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLklmU3RhdGVtZW50ID0gSWZTdGF0ZW1lbnQ7XG5cdHZhciBJbXBvcnREZWNsYXJhdGlvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJbXBvcnREZWNsYXJhdGlvbihzcGVjaWZpZXJzLCBzb3VyY2UpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguSW1wb3J0RGVjbGFyYXRpb247XG5cdCAgICAgICAgdGhpcy5zcGVjaWZpZXJzID0gc3BlY2lmaWVycztcblx0ICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBJbXBvcnREZWNsYXJhdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5JbXBvcnREZWNsYXJhdGlvbiA9IEltcG9ydERlY2xhcmF0aW9uO1xuXHR2YXIgSW1wb3J0RGVmYXVsdFNwZWNpZmllciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJbXBvcnREZWZhdWx0U3BlY2lmaWVyKGxvY2FsKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkltcG9ydERlZmF1bHRTcGVjaWZpZXI7XG5cdCAgICAgICAgdGhpcy5sb2NhbCA9IGxvY2FsO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEltcG9ydERlZmF1bHRTcGVjaWZpZXI7XG5cdH0oKSk7XG5cdGV4cG9ydHMuSW1wb3J0RGVmYXVsdFNwZWNpZmllciA9IEltcG9ydERlZmF1bHRTcGVjaWZpZXI7XG5cdHZhciBJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKGxvY2FsKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcblx0ICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWw7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLkltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcjtcblx0dmFyIEltcG9ydFNwZWNpZmllciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBJbXBvcnRTcGVjaWZpZXIobG9jYWwsIGltcG9ydGVkKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkltcG9ydFNwZWNpZmllcjtcblx0ICAgICAgICB0aGlzLmxvY2FsID0gbG9jYWw7XG5cdCAgICAgICAgdGhpcy5pbXBvcnRlZCA9IGltcG9ydGVkO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIEltcG9ydFNwZWNpZmllcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5JbXBvcnRTcGVjaWZpZXIgPSBJbXBvcnRTcGVjaWZpZXI7XG5cdHZhciBMYWJlbGVkU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIExhYmVsZWRTdGF0ZW1lbnQobGFiZWwsIGJvZHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTGFiZWxlZFN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBMYWJlbGVkU3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLkxhYmVsZWRTdGF0ZW1lbnQgPSBMYWJlbGVkU3RhdGVtZW50O1xuXHR2YXIgTGl0ZXJhbCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBMaXRlcmFsKHZhbHVlLCByYXcpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTGl0ZXJhbDtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdGhpcy5yYXcgPSByYXc7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTGl0ZXJhbDtcblx0fSgpKTtcblx0ZXhwb3J0cy5MaXRlcmFsID0gTGl0ZXJhbDtcblx0dmFyIE1ldGFQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNZXRhUHJvcGVydHkobWV0YSwgcHJvcGVydHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTWV0YVByb3BlcnR5O1xuXHQgICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XG5cdCAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIE1ldGFQcm9wZXJ0eTtcblx0fSgpKTtcblx0ZXhwb3J0cy5NZXRhUHJvcGVydHkgPSBNZXRhUHJvcGVydHk7XG5cdHZhciBNZXRob2REZWZpbml0aW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIE1ldGhvZERlZmluaXRpb24oa2V5LCBjb21wdXRlZCwgdmFsdWUsIGtpbmQsIGlzU3RhdGljKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk1ldGhvZERlZmluaXRpb247XG5cdCAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IGNvbXB1dGVkO1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuXHQgICAgICAgIHRoaXMuc3RhdGljID0gaXNTdGF0aWM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTWV0aG9kRGVmaW5pdGlvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5NZXRob2REZWZpbml0aW9uID0gTWV0aG9kRGVmaW5pdGlvbjtcblx0dmFyIE1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBNb2R1bGUoYm9keSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Qcm9ncmFtO1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICAgICAgdGhpcy5zb3VyY2VUeXBlID0gJ21vZHVsZSc7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTW9kdWxlO1xuXHR9KCkpO1xuXHRleHBvcnRzLk1vZHVsZSA9IE1vZHVsZTtcblx0dmFyIE5ld0V4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gTmV3RXhwcmVzc2lvbihjYWxsZWUsIGFyZ3MpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguTmV3RXhwcmVzc2lvbjtcblx0ICAgICAgICB0aGlzLmNhbGxlZSA9IGNhbGxlZTtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50cyA9IGFyZ3M7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gTmV3RXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5OZXdFeHByZXNzaW9uID0gTmV3RXhwcmVzc2lvbjtcblx0dmFyIE9iamVjdEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gT2JqZWN0RXhwcmVzc2lvbihwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk9iamVjdEV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcblx0ICAgIH1cblx0ICAgIHJldHVybiBPYmplY3RFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLk9iamVjdEV4cHJlc3Npb24gPSBPYmplY3RFeHByZXNzaW9uO1xuXHR2YXIgT2JqZWN0UGF0dGVybiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBPYmplY3RQYXR0ZXJuKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguT2JqZWN0UGF0dGVybjtcblx0ICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIE9iamVjdFBhdHRlcm47XG5cdH0oKSk7XG5cdGV4cG9ydHMuT2JqZWN0UGF0dGVybiA9IE9iamVjdFBhdHRlcm47XG5cdHZhciBQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBQcm9wZXJ0eShraW5kLCBrZXksIGNvbXB1dGVkLCB2YWx1ZSwgbWV0aG9kLCBzaG9ydGhhbmQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguUHJvcGVydHk7XG5cdCAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IGNvbXB1dGVkO1xuXHQgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcblx0ICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuXHQgICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuXHQgICAgICAgIHRoaXMuc2hvcnRoYW5kID0gc2hvcnRoYW5kO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFByb3BlcnR5O1xuXHR9KCkpO1xuXHRleHBvcnRzLlByb3BlcnR5ID0gUHJvcGVydHk7XG5cdHZhciBSZWdleExpdGVyYWwgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmVnZXhMaXRlcmFsKHZhbHVlLCByYXcsIHBhdHRlcm4sIGZsYWdzKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LkxpdGVyYWw7XG5cdCAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuXHQgICAgICAgIHRoaXMucmF3ID0gcmF3O1xuXHQgICAgICAgIHRoaXMucmVnZXggPSB7IHBhdHRlcm46IHBhdHRlcm4sIGZsYWdzOiBmbGFncyB9O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFJlZ2V4TGl0ZXJhbDtcblx0fSgpKTtcblx0ZXhwb3J0cy5SZWdleExpdGVyYWwgPSBSZWdleExpdGVyYWw7XG5cdHZhciBSZXN0RWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBSZXN0RWxlbWVudChhcmd1bWVudCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5SZXN0RWxlbWVudDtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gUmVzdEVsZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuUmVzdEVsZW1lbnQgPSBSZXN0RWxlbWVudDtcblx0dmFyIFJldHVyblN0YXRlbWVudCA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBSZXR1cm5TdGF0ZW1lbnQoYXJndW1lbnQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguUmV0dXJuU3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBSZXR1cm5TdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuUmV0dXJuU3RhdGVtZW50ID0gUmV0dXJuU3RhdGVtZW50O1xuXHR2YXIgU2NyaXB0ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNjcmlwdChib2R5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlByb2dyYW07XG5cdCAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcblx0ICAgICAgICB0aGlzLnNvdXJjZVR5cGUgPSAnc2NyaXB0Jztcblx0ICAgIH1cblx0ICAgIHJldHVybiBTY3JpcHQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuU2NyaXB0ID0gU2NyaXB0O1xuXHR2YXIgU2VxdWVuY2VFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNlcXVlbmNlRXhwcmVzc2lvbihleHByZXNzaW9ucykge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5TZXF1ZW5jZUV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFNlcXVlbmNlRXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5TZXF1ZW5jZUV4cHJlc3Npb24gPSBTZXF1ZW5jZUV4cHJlc3Npb247XG5cdHZhciBTcHJlYWRFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFNwcmVhZEVsZW1lbnQoYXJndW1lbnQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguU3ByZWFkRWxlbWVudDtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gU3ByZWFkRWxlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5TcHJlYWRFbGVtZW50ID0gU3ByZWFkRWxlbWVudDtcblx0dmFyIFN0YXRpY01lbWJlckV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU3RhdGljTWVtYmVyRXhwcmVzc2lvbihvYmplY3QsIHByb3BlcnR5KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4Lk1lbWJlckV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5jb21wdXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuXHQgICAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBTdGF0aWNNZW1iZXJFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLlN0YXRpY01lbWJlckV4cHJlc3Npb24gPSBTdGF0aWNNZW1iZXJFeHByZXNzaW9uO1xuXHR2YXIgU3VwZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU3VwZXIoKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlN1cGVyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFN1cGVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLlN1cGVyID0gU3VwZXI7XG5cdHZhciBTd2l0Y2hDYXNlID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFN3aXRjaENhc2UodGVzdCwgY29uc2VxdWVudCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5Td2l0Y2hDYXNlO1xuXHQgICAgICAgIHRoaXMudGVzdCA9IHRlc3Q7XG5cdCAgICAgICAgdGhpcy5jb25zZXF1ZW50ID0gY29uc2VxdWVudDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBTd2l0Y2hDYXNlO1xuXHR9KCkpO1xuXHRleHBvcnRzLlN3aXRjaENhc2UgPSBTd2l0Y2hDYXNlO1xuXHR2YXIgU3dpdGNoU3RhdGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFN3aXRjaFN0YXRlbWVudChkaXNjcmltaW5hbnQsIGNhc2VzKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlN3aXRjaFN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLmRpc2NyaW1pbmFudCA9IGRpc2NyaW1pbmFudDtcblx0ICAgICAgICB0aGlzLmNhc2VzID0gY2FzZXM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gU3dpdGNoU3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLlN3aXRjaFN0YXRlbWVudCA9IFN3aXRjaFN0YXRlbWVudDtcblx0dmFyIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24odGFnLCBxdWFzaSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy50YWcgPSB0YWc7XG5cdCAgICAgICAgdGhpcy5xdWFzaSA9IHF1YXNpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5UYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24gPSBUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb247XG5cdHZhciBUZW1wbGF0ZUVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGVtcGxhdGVFbGVtZW50KHZhbHVlLCB0YWlsKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlRlbXBsYXRlRWxlbWVudDtcblx0ICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG5cdCAgICAgICAgdGhpcy50YWlsID0gdGFpbDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBUZW1wbGF0ZUVsZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuVGVtcGxhdGVFbGVtZW50ID0gVGVtcGxhdGVFbGVtZW50O1xuXHR2YXIgVGVtcGxhdGVMaXRlcmFsID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRlbXBsYXRlTGl0ZXJhbChxdWFzaXMsIGV4cHJlc3Npb25zKSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlRlbXBsYXRlTGl0ZXJhbDtcblx0ICAgICAgICB0aGlzLnF1YXNpcyA9IHF1YXNpcztcblx0ICAgICAgICB0aGlzLmV4cHJlc3Npb25zID0gZXhwcmVzc2lvbnM7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gVGVtcGxhdGVMaXRlcmFsO1xuXHR9KCkpO1xuXHRleHBvcnRzLlRlbXBsYXRlTGl0ZXJhbCA9IFRlbXBsYXRlTGl0ZXJhbDtcblx0dmFyIFRoaXNFeHByZXNzaW9uID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIGZ1bmN0aW9uIFRoaXNFeHByZXNzaW9uKCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5UaGlzRXhwcmVzc2lvbjtcblx0ICAgIH1cblx0ICAgIHJldHVybiBUaGlzRXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5UaGlzRXhwcmVzc2lvbiA9IFRoaXNFeHByZXNzaW9uO1xuXHR2YXIgVGhyb3dTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVGhyb3dTdGF0ZW1lbnQoYXJndW1lbnQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVGhyb3dTdGF0ZW1lbnQ7XG5cdCAgICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFRocm93U3RhdGVtZW50O1xuXHR9KCkpO1xuXHRleHBvcnRzLlRocm93U3RhdGVtZW50ID0gVGhyb3dTdGF0ZW1lbnQ7XG5cdHZhciBUcnlTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVHJ5U3RhdGVtZW50KGJsb2NrLCBoYW5kbGVyLCBmaW5hbGl6ZXIpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVHJ5U3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMuYmxvY2sgPSBibG9jaztcblx0ICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuXHQgICAgICAgIHRoaXMuZmluYWxpemVyID0gZmluYWxpemVyO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFRyeVN0YXRlbWVudDtcblx0fSgpKTtcblx0ZXhwb3J0cy5UcnlTdGF0ZW1lbnQgPSBUcnlTdGF0ZW1lbnQ7XG5cdHZhciBVbmFyeUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVW5hcnlFeHByZXNzaW9uKG9wZXJhdG9yLCBhcmd1bWVudCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5VbmFyeUV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuXHQgICAgICAgIHRoaXMuYXJndW1lbnQgPSBhcmd1bWVudDtcblx0ICAgICAgICB0aGlzLnByZWZpeCA9IHRydWU7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gVW5hcnlFeHByZXNzaW9uO1xuXHR9KCkpO1xuXHRleHBvcnRzLlVuYXJ5RXhwcmVzc2lvbiA9IFVuYXJ5RXhwcmVzc2lvbjtcblx0dmFyIFVwZGF0ZUV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVXBkYXRlRXhwcmVzc2lvbihvcGVyYXRvciwgYXJndW1lbnQsIHByZWZpeCkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5VcGRhdGVFeHByZXNzaW9uO1xuXHQgICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcblx0ICAgICAgICB0aGlzLmFyZ3VtZW50ID0gYXJndW1lbnQ7XG5cdCAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gVXBkYXRlRXhwcmVzc2lvbjtcblx0fSgpKTtcblx0ZXhwb3J0cy5VcGRhdGVFeHByZXNzaW9uID0gVXBkYXRlRXhwcmVzc2lvbjtcblx0dmFyIFZhcmlhYmxlRGVjbGFyYXRpb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbnMsIGtpbmQpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguVmFyaWFibGVEZWNsYXJhdGlvbjtcblx0ICAgICAgICB0aGlzLmRlY2xhcmF0aW9ucyA9IGRlY2xhcmF0aW9ucztcblx0ICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFZhcmlhYmxlRGVjbGFyYXRpb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuVmFyaWFibGVEZWNsYXJhdGlvbiA9IFZhcmlhYmxlRGVjbGFyYXRpb247XG5cdHZhciBWYXJpYWJsZURlY2xhcmF0b3IgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSB7XG5cdCAgICAgICAgdGhpcy50eXBlID0gc3ludGF4XzEuU3ludGF4LlZhcmlhYmxlRGVjbGFyYXRvcjtcblx0ICAgICAgICB0aGlzLmlkID0gaWQ7XG5cdCAgICAgICAgdGhpcy5pbml0ID0gaW5pdDtcblx0ICAgIH1cblx0ICAgIHJldHVybiBWYXJpYWJsZURlY2xhcmF0b3I7XG5cdH0oKSk7XG5cdGV4cG9ydHMuVmFyaWFibGVEZWNsYXJhdG9yID0gVmFyaWFibGVEZWNsYXJhdG9yO1xuXHR2YXIgV2hpbGVTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2hpbGVTdGF0ZW1lbnQodGVzdCwgYm9keSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5XaGlsZVN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLnRlc3QgPSB0ZXN0O1xuXHQgICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gV2hpbGVTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuV2hpbGVTdGF0ZW1lbnQgPSBXaGlsZVN0YXRlbWVudDtcblx0dmFyIFdpdGhTdGF0ZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gV2l0aFN0YXRlbWVudChvYmplY3QsIGJvZHkpIHtcblx0ICAgICAgICB0aGlzLnR5cGUgPSBzeW50YXhfMS5TeW50YXguV2l0aFN0YXRlbWVudDtcblx0ICAgICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcblx0ICAgICAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIFdpdGhTdGF0ZW1lbnQ7XG5cdH0oKSk7XG5cdGV4cG9ydHMuV2l0aFN0YXRlbWVudCA9IFdpdGhTdGF0ZW1lbnQ7XG5cdHZhciBZaWVsZEV4cHJlc3Npb24gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gWWllbGRFeHByZXNzaW9uKGFyZ3VtZW50LCBkZWxlZ2F0ZSkge1xuXHQgICAgICAgIHRoaXMudHlwZSA9IHN5bnRheF8xLlN5bnRheC5ZaWVsZEV4cHJlc3Npb247XG5cdCAgICAgICAgdGhpcy5hcmd1bWVudCA9IGFyZ3VtZW50O1xuXHQgICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBZaWVsZEV4cHJlc3Npb247XG5cdH0oKSk7XG5cdGV4cG9ydHMuWWllbGRFeHByZXNzaW9uID0gWWllbGRFeHByZXNzaW9uO1xuXG5cbi8qKiovIH0sXG4vKiA4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHR2YXIgYXNzZXJ0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHR2YXIgZXJyb3JfaGFuZGxlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdHZhciBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdHZhciBOb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0dmFyIHNjYW5uZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHR2YXIgc3ludGF4XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHR2YXIgdG9rZW5fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xuXHR2YXIgQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlciA9ICdBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyJztcblx0dmFyIFBhcnNlciA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBQYXJzZXIoY29kZSwgb3B0aW9ucywgZGVsZWdhdGUpIHtcblx0ICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHQgICAgICAgIHRoaXMuY29uZmlnID0ge1xuXHQgICAgICAgICAgICByYW5nZTogKHR5cGVvZiBvcHRpb25zLnJhbmdlID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMucmFuZ2UsXG5cdCAgICAgICAgICAgIGxvYzogKHR5cGVvZiBvcHRpb25zLmxvYyA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLmxvYyxcblx0ICAgICAgICAgICAgc291cmNlOiBudWxsLFxuXHQgICAgICAgICAgICB0b2tlbnM6ICh0eXBlb2Ygb3B0aW9ucy50b2tlbnMgPT09ICdib29sZWFuJykgJiYgb3B0aW9ucy50b2tlbnMsXG5cdCAgICAgICAgICAgIGNvbW1lbnQ6ICh0eXBlb2Ygb3B0aW9ucy5jb21tZW50ID09PSAnYm9vbGVhbicpICYmIG9wdGlvbnMuY29tbWVudCxcblx0ICAgICAgICAgICAgdG9sZXJhbnQ6ICh0eXBlb2Ygb3B0aW9ucy50b2xlcmFudCA9PT0gJ2Jvb2xlYW4nKSAmJiBvcHRpb25zLnRvbGVyYW50XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcubG9jICYmIG9wdGlvbnMuc291cmNlICYmIG9wdGlvbnMuc291cmNlICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY29uZmlnLnNvdXJjZSA9IFN0cmluZyhvcHRpb25zLnNvdXJjZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlciA9IG5ldyBlcnJvcl9oYW5kbGVyXzEuRXJyb3JIYW5kbGVyKCk7XG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhbnQgPSB0aGlzLmNvbmZpZy50b2xlcmFudDtcblx0ICAgICAgICB0aGlzLnNjYW5uZXIgPSBuZXcgc2Nhbm5lcl8xLlNjYW5uZXIoY29kZSwgdGhpcy5lcnJvckhhbmRsZXIpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci50cmFja0NvbW1lbnQgPSB0aGlzLmNvbmZpZy5jb21tZW50O1xuXHQgICAgICAgIHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlID0ge1xuXHQgICAgICAgICAgICAnKSc6IDAsXG5cdCAgICAgICAgICAgICc7JzogMCxcblx0ICAgICAgICAgICAgJywnOiAwLFxuXHQgICAgICAgICAgICAnPSc6IDAsXG5cdCAgICAgICAgICAgICddJzogMCxcblx0ICAgICAgICAgICAgJ3x8JzogMSxcblx0ICAgICAgICAgICAgJyYmJzogMixcblx0ICAgICAgICAgICAgJ3wnOiAzLFxuXHQgICAgICAgICAgICAnXic6IDQsXG5cdCAgICAgICAgICAgICcmJzogNSxcblx0ICAgICAgICAgICAgJz09JzogNixcblx0ICAgICAgICAgICAgJyE9JzogNixcblx0ICAgICAgICAgICAgJz09PSc6IDYsXG5cdCAgICAgICAgICAgICchPT0nOiA2LFxuXHQgICAgICAgICAgICAnPCc6IDcsXG5cdCAgICAgICAgICAgICc+JzogNyxcblx0ICAgICAgICAgICAgJzw9JzogNyxcblx0ICAgICAgICAgICAgJz49JzogNyxcblx0ICAgICAgICAgICAgJzw8JzogOCxcblx0ICAgICAgICAgICAgJz4+JzogOCxcblx0ICAgICAgICAgICAgJz4+Pic6IDgsXG5cdCAgICAgICAgICAgICcrJzogOSxcblx0ICAgICAgICAgICAgJy0nOiA5LFxuXHQgICAgICAgICAgICAnKic6IDExLFxuXHQgICAgICAgICAgICAnLyc6IDExLFxuXHQgICAgICAgICAgICAnJSc6IDExXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aGlzLmxvb2thaGVhZCA9IHtcblx0ICAgICAgICAgICAgdHlwZTogMiAvKiBFT0YgKi8sXG5cdCAgICAgICAgICAgIHZhbHVlOiAnJyxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogMCxcblx0ICAgICAgICAgICAgc3RhcnQ6IDAsXG5cdCAgICAgICAgICAgIGVuZDogMFxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5oYXNMaW5lVGVybWluYXRvciA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dCA9IHtcblx0ICAgICAgICAgICAgaXNNb2R1bGU6IGZhbHNlLFxuXHQgICAgICAgICAgICBhd2FpdDogZmFsc2UsXG5cdCAgICAgICAgICAgIGFsbG93SW46IHRydWUsXG5cdCAgICAgICAgICAgIGFsbG93U3RyaWN0RGlyZWN0aXZlOiB0cnVlLFxuXHQgICAgICAgICAgICBhbGxvd1lpZWxkOiB0cnVlLFxuXHQgICAgICAgICAgICBmaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I6IG51bGwsXG5cdCAgICAgICAgICAgIGlzQXNzaWdubWVudFRhcmdldDogZmFsc2UsXG5cdCAgICAgICAgICAgIGlzQmluZGluZ0VsZW1lbnQ6IGZhbHNlLFxuXHQgICAgICAgICAgICBpbkZ1bmN0aW9uQm9keTogZmFsc2UsXG5cdCAgICAgICAgICAgIGluSXRlcmF0aW9uOiBmYWxzZSxcblx0ICAgICAgICAgICAgaW5Td2l0Y2g6IGZhbHNlLFxuXHQgICAgICAgICAgICBsYWJlbFNldDoge30sXG5cdCAgICAgICAgICAgIHN0cmljdDogZmFsc2Vcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMudG9rZW5zID0gW107XG5cdCAgICAgICAgdGhpcy5zdGFydE1hcmtlciA9IHtcblx0ICAgICAgICAgICAgaW5kZXg6IDAsXG5cdCAgICAgICAgICAgIGxpbmU6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBjb2x1bW46IDBcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlciA9IHtcblx0ICAgICAgICAgICAgaW5kZXg6IDAsXG5cdCAgICAgICAgICAgIGxpbmU6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBjb2x1bW46IDBcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgdGhpcy5sYXN0TWFya2VyID0ge1xuXHQgICAgICAgICAgICBpbmRleDogdGhpcy5zY2FubmVyLmluZGV4LFxuXHQgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcblx0ICAgICAgICAgICAgY29sdW1uOiB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0XG5cdCAgICAgICAgfTtcblx0ICAgIH1cblx0ICAgIFBhcnNlci5wcm90b3R5cGUudGhyb3dFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlRm9ybWF0KSB7XG5cdCAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgICAgIHZhbHVlc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHQgICAgICAgIHZhciBtc2cgPSBtZXNzYWdlRm9ybWF0LnJlcGxhY2UoLyUoXFxkKS9nLCBmdW5jdGlvbiAod2hvbGUsIGlkeCkge1xuXHQgICAgICAgICAgICBhc3NlcnRfMS5hc3NlcnQoaWR4IDwgYXJncy5sZW5ndGgsICdNZXNzYWdlIHJlZmVyZW5jZSBtdXN0IGJlIGluIHJhbmdlJyk7XG5cdCAgICAgICAgICAgIHJldHVybiBhcmdzW2lkeF07XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5sYXN0TWFya2VyLmluZGV4O1xuXHQgICAgICAgIHZhciBsaW5lID0gdGhpcy5sYXN0TWFya2VyLmxpbmU7XG5cdCAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMubGFzdE1hcmtlci5jb2x1bW4gKyAxO1xuXHQgICAgICAgIHRocm93IHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKGluZGV4LCBsaW5lLCBjb2x1bW4sIG1zZyk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS50b2xlcmF0ZUVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2VGb3JtYXQpIHtcblx0ICAgICAgICB2YXIgdmFsdWVzID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcblx0ICAgICAgICAgICAgdmFsdWVzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cdCAgICAgICAgdmFyIG1zZyA9IG1lc3NhZ2VGb3JtYXQucmVwbGFjZSgvJShcXGQpL2csIGZ1bmN0aW9uICh3aG9sZSwgaWR4KSB7XG5cdCAgICAgICAgICAgIGFzc2VydF8xLmFzc2VydChpZHggPCBhcmdzLmxlbmd0aCwgJ01lc3NhZ2UgcmVmZXJlbmNlIG11c3QgYmUgaW4gcmFuZ2UnKTtcblx0ICAgICAgICAgICAgcmV0dXJuIGFyZ3NbaWR4XTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmxhc3RNYXJrZXIuaW5kZXg7XG5cdCAgICAgICAgdmFyIGxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5sYXN0TWFya2VyLmNvbHVtbiArIDE7XG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGVFcnJvcihpbmRleCwgbGluZSwgY29sdW1uLCBtc2cpO1xuXHQgICAgfTtcblx0ICAgIC8vIFRocm93IGFuIGV4Y2VwdGlvbiBiZWNhdXNlIG9mIHRoZSB0b2tlbi5cblx0ICAgIFBhcnNlci5wcm90b3R5cGUudW5leHBlY3RlZFRva2VuRXJyb3IgPSBmdW5jdGlvbiAodG9rZW4sIG1lc3NhZ2UpIHtcblx0ICAgICAgICB2YXIgbXNnID0gbWVzc2FnZSB8fCBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjtcblx0ICAgICAgICB2YXIgdmFsdWU7XG5cdCAgICAgICAgaWYgKHRva2VuKSB7XG5cdCAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xuXHQgICAgICAgICAgICAgICAgbXNnID0gKHRva2VuLnR5cGUgPT09IDIgLyogRU9GICovKSA/IG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5leHBlY3RlZEVPUyA6XG5cdCAgICAgICAgICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRJZGVudGlmaWVyIDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKHRva2VuLnR5cGUgPT09IDYgLyogTnVtZXJpY0xpdGVyYWwgKi8pID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkTnVtYmVyIDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0b2tlbi50eXBlID09PSA4IC8qIFN0cmluZ0xpdGVyYWwgKi8pID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkU3RyaW5nIDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG9rZW4udHlwZSA9PT0gMTAgLyogVGVtcGxhdGUgKi8pID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVGVtcGxhdGUgOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbjtcblx0ICAgICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA0IC8qIEtleXdvcmQgKi8pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzRnV0dXJlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRSZXNlcnZlZDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiB0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFsdWUgPSB0b2tlbi52YWx1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhbHVlID0gJ0lMTEVHQUwnO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBtc2cgPSBtc2cucmVwbGFjZSgnJTAnLCB2YWx1ZSk7XG5cdCAgICAgICAgaWYgKHRva2VuICYmIHR5cGVvZiB0b2tlbi5saW5lTnVtYmVyID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB0b2tlbi5zdGFydDtcblx0ICAgICAgICAgICAgdmFyIGxpbmUgPSB0b2tlbi5saW5lTnVtYmVyO1xuXHQgICAgICAgICAgICB2YXIgbGFzdE1hcmtlckxpbmVTdGFydCA9IHRoaXMubGFzdE1hcmtlci5pbmRleCAtIHRoaXMubGFzdE1hcmtlci5jb2x1bW47XG5cdCAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0b2tlbi5zdGFydCAtIGxhc3RNYXJrZXJMaW5lU3RhcnQgKyAxO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIuY3JlYXRlRXJyb3IoaW5kZXgsIGxpbmUsIGNvbHVtbiwgbXNnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMubGFzdE1hcmtlci5pbmRleDtcblx0ICAgICAgICAgICAgdmFyIGxpbmUgPSB0aGlzLmxhc3RNYXJrZXIubGluZTtcblx0ICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMubGFzdE1hcmtlci5jb2x1bW4gKyAxO1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5lcnJvckhhbmRsZXIuY3JlYXRlRXJyb3IoaW5kZXgsIGxpbmUsIGNvbHVtbiwgbXNnKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS50aHJvd1VuZXhwZWN0ZWRUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbiwgbWVzc2FnZSkge1xuXHQgICAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZFRva2VuRXJyb3IodG9rZW4sIG1lc3NhZ2UpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4gPSBmdW5jdGlvbiAodG9rZW4sIG1lc3NhZ2UpIHtcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlci50b2xlcmF0ZSh0aGlzLnVuZXhwZWN0ZWRUb2tlbkVycm9yKHRva2VuLCBtZXNzYWdlKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5jb2xsZWN0Q29tbWVudHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5jb21tZW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBjb21tZW50cyA9IHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcblx0ICAgICAgICAgICAgaWYgKGNvbW1lbnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5kZWxlZ2F0ZSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21tZW50cy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBlID0gY29tbWVudHNbaV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZS5tdWx0aUxpbmUgPyAnQmxvY2tDb21tZW50JyA6ICdMaW5lQ29tbWVudCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNjYW5uZXIuc291cmNlLnNsaWNlKGUuc2xpY2VbMF0sIGUuc2xpY2VbMV0pXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb25maWcucmFuZ2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yYW5nZSA9IGUucmFuZ2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5sb2MpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5sb2MgPSBlLmxvYztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1ldGFkYXRhID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogZS5sb2Muc3RhcnQubGluZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogZS5sb2Muc3RhcnQuY29sdW1uLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBlLnJhbmdlWzBdXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZDoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogZS5sb2MuZW5kLmxpbmUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGUubG9jLmVuZC5jb2x1bW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IGUucmFuZ2VbMV1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZShub2RlLCBtZXRhZGF0YSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLy8gRnJvbSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiB0byBhbiBleHRlcm5hbCBzdHJ1Y3R1cmVcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuZ2V0VG9rZW5SYXcgPSBmdW5jdGlvbiAodG9rZW4pIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZSh0b2tlbi5zdGFydCwgdG9rZW4uZW5kKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNvbnZlcnRUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHQgICAgICAgIHZhciB0ID0ge1xuXHQgICAgICAgICAgICB0eXBlOiB0b2tlbl8xLlRva2VuTmFtZVt0b2tlbi50eXBlXSxcblx0ICAgICAgICAgICAgdmFsdWU6IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pXG5cdCAgICAgICAgfTtcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcucmFuZ2UpIHtcblx0ICAgICAgICAgICAgdC5yYW5nZSA9IFt0b2tlbi5zdGFydCwgdG9rZW4uZW5kXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvYykge1xuXHQgICAgICAgICAgICB0LmxvYyA9IHtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5zdGFydE1hcmtlci5saW5lLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zdGFydE1hcmtlci5jb2x1bW5cblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLnNjYW5uZXIubGluZU51bWJlcixcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuc2Nhbm5lci5pbmRleCAtIHRoaXMuc2Nhbm5lci5saW5lU3RhcnRcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDkgLyogUmVndWxhckV4cHJlc3Npb24gKi8pIHtcblx0ICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSB0b2tlbi5wYXR0ZXJuO1xuXHQgICAgICAgICAgICB2YXIgZmxhZ3MgPSB0b2tlbi5mbGFncztcblx0ICAgICAgICAgICAgdC5yZWdleCA9IHsgcGF0dGVybjogcGF0dGVybiwgZmxhZ3M6IGZsYWdzIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0O1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUubmV4dFRva2VuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlci5pbmRleCA9IHRoaXMuc2Nhbm5lci5pbmRleDtcblx0ICAgICAgICB0aGlzLmxhc3RNYXJrZXIubGluZSA9IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyO1xuXHQgICAgICAgIHRoaXMubGFzdE1hcmtlci5jb2x1bW4gPSB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0O1xuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XG5cdCAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pbmRleCAhPT0gdGhpcy5zdGFydE1hcmtlci5pbmRleCkge1xuXHQgICAgICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmluZGV4ID0gdGhpcy5zY2FubmVyLmluZGV4O1xuXHQgICAgICAgICAgICB0aGlzLnN0YXJ0TWFya2VyLmxpbmUgPSB0aGlzLnNjYW5uZXIubGluZU51bWJlcjtcblx0ICAgICAgICAgICAgdGhpcy5zdGFydE1hcmtlci5jb2x1bW4gPSB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0O1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgbmV4dCA9IHRoaXMuc2Nhbm5lci5sZXgoKTtcblx0ICAgICAgICB0aGlzLmhhc0xpbmVUZXJtaW5hdG9yID0gKHRva2VuLmxpbmVOdW1iZXIgIT09IG5leHQubGluZU51bWJlcik7XG5cdCAgICAgICAgaWYgKG5leHQgJiYgdGhpcy5jb250ZXh0LnN0cmljdCAmJiBuZXh0LnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChuZXh0LnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgbmV4dC50eXBlID0gNCAvKiBLZXl3b3JkICovO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMubG9va2FoZWFkID0gbmV4dDtcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zICYmIG5leHQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcblx0ICAgICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0aGlzLmNvbnZlcnRUb2tlbihuZXh0KSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0b2tlbjtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLm5leHRSZWdleFRva2VuID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuY29sbGVjdENvbW1lbnRzKCk7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5zY2FubmVyLnNjYW5SZWdFeHAoKTtcblx0ICAgICAgICBpZiAodGhpcy5jb25maWcudG9rZW5zKSB7XG5cdCAgICAgICAgICAgIC8vIFBvcCB0aGUgcHJldmlvdXMgdG9rZW4sICcvJyBvciAnLz0nXG5cdCAgICAgICAgICAgIC8vIFRoaXMgaXMgYWRkZWQgZnJvbSB0aGUgbG9va2FoZWFkIHRva2VuLlxuXHQgICAgICAgICAgICB0aGlzLnRva2Vucy5wb3AoKTtcblx0ICAgICAgICAgICAgdGhpcy50b2tlbnMucHVzaCh0aGlzLmNvbnZlcnRUb2tlbih0b2tlbikpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBQcmltZSB0aGUgbmV4dCBsb29rYWhlYWQuXG5cdCAgICAgICAgdGhpcy5sb29rYWhlYWQgPSB0b2tlbjtcblx0ICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIHJldHVybiB0b2tlbjtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNyZWF0ZU5vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgaW5kZXg6IHRoaXMuc3RhcnRNYXJrZXIuaW5kZXgsXG5cdCAgICAgICAgICAgIGxpbmU6IHRoaXMuc3RhcnRNYXJrZXIubGluZSxcblx0ICAgICAgICAgICAgY29sdW1uOiB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtblxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5zdGFydE5vZGUgPSBmdW5jdGlvbiAodG9rZW4sIGxhc3RMaW5lU3RhcnQpIHtcblx0ICAgICAgICBpZiAobGFzdExpbmVTdGFydCA9PT0gdm9pZCAwKSB7IGxhc3RMaW5lU3RhcnQgPSAwOyB9XG5cdCAgICAgICAgdmFyIGNvbHVtbiA9IHRva2VuLnN0YXJ0IC0gdG9rZW4ubGluZVN0YXJ0O1xuXHQgICAgICAgIHZhciBsaW5lID0gdG9rZW4ubGluZU51bWJlcjtcblx0ICAgICAgICBpZiAoY29sdW1uIDwgMCkge1xuXHQgICAgICAgICAgICBjb2x1bW4gKz0gbGFzdExpbmVTdGFydDtcblx0ICAgICAgICAgICAgbGluZS0tO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICBpbmRleDogdG9rZW4uc3RhcnQsXG5cdCAgICAgICAgICAgIGxpbmU6IGxpbmUsXG5cdCAgICAgICAgICAgIGNvbHVtbjogY29sdW1uXG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmZpbmFsaXplID0gZnVuY3Rpb24gKG1hcmtlciwgbm9kZSkge1xuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy5yYW5nZSkge1xuXHQgICAgICAgICAgICBub2RlLnJhbmdlID0gW21hcmtlci5pbmRleCwgdGhpcy5sYXN0TWFya2VyLmluZGV4XTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY29uZmlnLmxvYykge1xuXHQgICAgICAgICAgICBub2RlLmxvYyA9IHtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogbWFya2VyLmxpbmUsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sdW1uOiBtYXJrZXIuY29sdW1uLFxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGVuZDoge1xuXHQgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGFzdE1hcmtlci5saW5lLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5sYXN0TWFya2VyLmNvbHVtblxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb25maWcuc291cmNlKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlLmxvYy5zb3VyY2UgPSB0aGlzLmNvbmZpZy5zb3VyY2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuZGVsZWdhdGUpIHtcblx0ICAgICAgICAgICAgdmFyIG1ldGFkYXRhID0ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiBtYXJrZXIubGluZSxcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IG1hcmtlci5jb2x1bW4sXG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBtYXJrZXIuaW5kZXhcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxhc3RNYXJrZXIubGluZSxcblx0ICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMubGFzdE1hcmtlci5jb2x1bW4sXG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLmxhc3RNYXJrZXIuaW5kZXhcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZShub2RlLCBtZXRhZGF0YSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBub2RlO1xuXHQgICAgfTtcblx0ICAgIC8vIEV4cGVjdCB0aGUgbmV4dCB0b2tlbiB0byBtYXRjaCB0aGUgc3BlY2lmaWVkIHB1bmN0dWF0b3IuXG5cdCAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cblx0ICAgIFBhcnNlci5wcm90b3R5cGUuZXhwZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gNyAvKiBQdW5jdHVhdG9yICovIHx8IHRva2VuLnZhbHVlICE9PSB2YWx1ZSkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLy8gUXVpZXRseSBleHBlY3QgYSBjb21tYSB3aGVuIGluIHRvbGVyYW50IG1vZGUsIG90aGVyd2lzZSBkZWxlZ2F0ZXMgdG8gZXhwZWN0KCkuXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmV4cGVjdENvbW1hU2VwYXJhdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmNvbmZpZy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiB0b2tlbi52YWx1ZSA9PT0gJywnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiB0b2tlbi52YWx1ZSA9PT0gJzsnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIC8vIEV4cGVjdCB0aGUgbmV4dCB0b2tlbiB0byBtYXRjaCB0aGUgc3BlY2lmaWVkIGtleXdvcmQuXG5cdCAgICAvLyBJZiBub3QsIGFuIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93bi5cblx0ICAgIFBhcnNlci5wcm90b3R5cGUuZXhwZWN0S2V5d29yZCA9IGZ1bmN0aW9uIChrZXl3b3JkKSB7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gNCAvKiBLZXl3b3JkICovIHx8IHRva2VuLnZhbHVlICE9PSBrZXl3b3JkKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odG9rZW4pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICAvLyBSZXR1cm4gdHJ1ZSBpZiB0aGUgbmV4dCB0b2tlbiBtYXRjaGVzIHRoZSBzcGVjaWZpZWQgcHVuY3R1YXRvci5cblx0ICAgIFBhcnNlci5wcm90b3R5cGUubWF0Y2ggPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5sb29rYWhlYWQudHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSB2YWx1ZTtcblx0ICAgIH07XG5cdCAgICAvLyBSZXR1cm4gdHJ1ZSBpZiB0aGUgbmV4dCB0b2tlbiBtYXRjaGVzIHRoZSBzcGVjaWZpZWQga2V5d29yZFxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5tYXRjaEtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxvb2thaGVhZC50eXBlID09PSA0IC8qIEtleXdvcmQgKi8gJiYgdGhpcy5sb29rYWhlYWQudmFsdWUgPT09IGtleXdvcmQ7XG5cdCAgICB9O1xuXHQgICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGNvbnRleHR1YWwga2V5d29yZFxuXHQgICAgLy8gKHdoZXJlIGFuIGlkZW50aWZpZXIgaXMgc29tZXRpbWVzIGEga2V5d29yZCBkZXBlbmRpbmcgb24gdGhlIGNvbnRleHQpXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLm1hdGNoQ29udGV4dHVhbEtleXdvcmQgPSBmdW5jdGlvbiAoa2V5d29yZCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgdGhpcy5sb29rYWhlYWQudmFsdWUgPT09IGtleXdvcmQ7XG5cdCAgICB9O1xuXHQgICAgLy8gUmV0dXJuIHRydWUgaWYgdGhlIG5leHQgdG9rZW4gaXMgYW4gYXNzaWdubWVudCBvcGVyYXRvclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5tYXRjaEFzc2lnbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gNyAvKiBQdW5jdHVhdG9yICovKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG9wID0gdGhpcy5sb29rYWhlYWQudmFsdWU7XG5cdCAgICAgICAgcmV0dXJuIG9wID09PSAnPScgfHxcblx0ICAgICAgICAgICAgb3AgPT09ICcqPScgfHxcblx0ICAgICAgICAgICAgb3AgPT09ICcqKj0nIHx8XG5cdCAgICAgICAgICAgIG9wID09PSAnLz0nIHx8XG5cdCAgICAgICAgICAgIG9wID09PSAnJT0nIHx8XG5cdCAgICAgICAgICAgIG9wID09PSAnKz0nIHx8XG5cdCAgICAgICAgICAgIG9wID09PSAnLT0nIHx8XG5cdCAgICAgICAgICAgIG9wID09PSAnPDw9JyB8fFxuXHQgICAgICAgICAgICBvcCA9PT0gJz4+PScgfHxcblx0ICAgICAgICAgICAgb3AgPT09ICc+Pj49JyB8fFxuXHQgICAgICAgICAgICBvcCA9PT0gJyY9JyB8fFxuXHQgICAgICAgICAgICBvcCA9PT0gJ149JyB8fFxuXHQgICAgICAgICAgICBvcCA9PT0gJ3w9Jztcblx0ICAgIH07XG5cdCAgICAvLyBDb3ZlciBncmFtbWFyIHN1cHBvcnQuXG5cdCAgICAvL1xuXHQgICAgLy8gV2hlbiBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24gcG9zaXRpb24gc3RhcnRzIHdpdGggYW4gbGVmdCBwYXJlbnRoZXNpcywgdGhlIGRldGVybWluYXRpb24gb2YgdGhlIHR5cGVcblx0ICAgIC8vIG9mIHRoZSBzeW50YXggaXMgdG8gYmUgZGVmZXJyZWQgYXJiaXRyYXJpbHkgbG9uZyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBwYXJlbnRoZXNlcyBwYWlyIChwbHVzIGEgbG9va2FoZWFkKVxuXHQgICAgLy8gb3IgdGhlIGZpcnN0IGNvbW1hLiBUaGlzIHNpdHVhdGlvbiBhbHNvIGRlZmVycyB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBhbGwgdGhlIGV4cHJlc3Npb25zIG5lc3RlZCBpbiB0aGUgcGFpci5cblx0ICAgIC8vXG5cdCAgICAvLyBUaGVyZSBhcmUgdGhyZWUgcHJvZHVjdGlvbnMgdGhhdCBjYW4gYmUgcGFyc2VkIGluIGEgcGFyZW50aGVzZXMgcGFpciB0aGF0IG5lZWRzIHRvIGJlIGRldGVybWluZWRcblx0ICAgIC8vIGFmdGVyIHRoZSBvdXRlcm1vc3QgcGFpciBpcyBjbG9zZWQuIFRoZXkgYXJlOlxuXHQgICAgLy9cblx0ICAgIC8vICAgMS4gQXNzaWdubWVudEV4cHJlc3Npb25cblx0ICAgIC8vICAgMi4gQmluZGluZ0VsZW1lbnRzXG5cdCAgICAvLyAgIDMuIEFzc2lnbm1lbnRUYXJnZXRzXG5cdCAgICAvL1xuXHQgICAgLy8gSW4gb3JkZXIgdG8gYXZvaWQgZXhwb25lbnRpYWwgYmFja3RyYWNraW5nLCB3ZSB1c2UgdHdvIGZsYWdzIHRvIGRlbm90ZSBpZiB0aGUgcHJvZHVjdGlvbiBjYW4gYmVcblx0ICAgIC8vIGJpbmRpbmcgZWxlbWVudCBvciBhc3NpZ25tZW50IHRhcmdldC5cblx0ICAgIC8vXG5cdCAgICAvLyBUaGUgdGhyZWUgcHJvZHVjdGlvbnMgaGF2ZSB0aGUgcmVsYXRpb25zaGlwOlxuXHQgICAgLy9cblx0ICAgIC8vICAgQmluZGluZ0VsZW1lbnRzIOKKhiBBc3NpZ25tZW50VGFyZ2V0cyDiioYgQXNzaWdubWVudEV4cHJlc3Npb25cblx0ICAgIC8vXG5cdCAgICAvLyB3aXRoIGEgc2luZ2xlIGV4Y2VwdGlvbiB0aGF0IENvdmVySW5pdGlhbGl6ZWROYW1lIHdoZW4gdXNlZCBkaXJlY3RseSBpbiBhbiBFeHByZXNzaW9uLCBnZW5lcmF0ZXNcblx0ICAgIC8vIGFuIGVhcmx5IGVycm9yLiBUaGVyZWZvcmUsIHdlIG5lZWQgdGhlIHRoaXJkIHN0YXRlLCBmaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IsIHRvIHRyYWNrIHRoZVxuXHQgICAgLy8gZmlyc3QgdXNhZ2Ugb2YgQ292ZXJJbml0aWFsaXplZE5hbWUgYW5kIHJlcG9ydCBpdCB3aGVuIHdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgcGFyZW50aGVzZXMgcGFpci5cblx0ICAgIC8vXG5cdCAgICAvLyBpc29sYXRlQ292ZXJHcmFtbWFyIGZ1bmN0aW9uIHJ1bnMgdGhlIGdpdmVuIHBhcnNlciBmdW5jdGlvbiB3aXRoIGEgbmV3IGNvdmVyIGdyYW1tYXIgY29udGV4dCwgYW5kIGl0IGRvZXMgbm90XG5cdCAgICAvLyBlZmZlY3QgdGhlIGN1cnJlbnQgZmxhZ3MuIFRoaXMgbWVhbnMgdGhlIHByb2R1Y3Rpb24gdGhlIHBhcnNlciBwYXJzZXMgaXMgb25seSB1c2VkIGFzIGFuIGV4cHJlc3Npb24uIFRoZXJlZm9yZVxuXHQgICAgLy8gdGhlIENvdmVySW5pdGlhbGl6ZWROYW1lIGNoZWNrIGlzIGNvbmR1Y3RlZC5cblx0ICAgIC8vXG5cdCAgICAvLyBpbmhlcml0Q292ZXJHcmFtbWFyIGZ1bmN0aW9uIHJ1bnMgdGhlIGdpdmVuIHBhcnNlIGZ1bmN0aW9uIHdpdGggYSBuZXcgY292ZXIgZ3JhbW1hciBjb250ZXh0LCBhbmQgaXQgcHJvcGFnYXRlc1xuXHQgICAgLy8gdGhlIGZsYWdzIG91dHNpZGUgb2YgdGhlIHBhcnNlci4gVGhpcyBtZWFucyB0aGUgcHJvZHVjdGlvbiB0aGUgcGFyc2VyIHBhcnNlcyBpcyB1c2VkIGFzIGEgcGFydCBvZiBhIHBvdGVudGlhbFxuXHQgICAgLy8gcGF0dGVybi4gVGhlIENvdmVySW5pdGlhbGl6ZWROYW1lIGNoZWNrIGlzIGRlZmVycmVkLlxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5pc29sYXRlQ292ZXJHcmFtbWFyID0gZnVuY3Rpb24gKHBhcnNlRnVuY3Rpb24pIHtcblx0ICAgICAgICB2YXIgcHJldmlvdXNJc0JpbmRpbmdFbGVtZW50ID0gdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQ7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzSXNBc3NpZ25tZW50VGFyZ2V0ID0gdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldDtcblx0ICAgICAgICB2YXIgcHJldmlvdXNGaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gbnVsbDtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VGdW5jdGlvbi5jYWxsKHRoaXMpO1xuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gcHJldmlvdXNJc0JpbmRpbmdFbGVtZW50O1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBwcmV2aW91c0lzQXNzaWdubWVudFRhcmdldDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gcHJldmlvdXNGaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmluaGVyaXRDb3ZlckdyYW1tYXIgPSBmdW5jdGlvbiAocGFyc2VGdW5jdGlvbikge1xuXHQgICAgICAgIHZhciBwcmV2aW91c0lzQmluZGluZ0VsZW1lbnQgPSB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudDtcblx0ICAgICAgICB2YXIgcHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQgPSB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0O1xuXHQgICAgICAgIHZhciBwcmV2aW91c0ZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciA9IHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xuXHQgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUZ1bmN0aW9uLmNhbGwodGhpcyk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCAmJiBwcmV2aW91c0lzQmluZGluZ0VsZW1lbnQ7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgJiYgcHJldmlvdXNJc0Fzc2lnbm1lbnRUYXJnZXQ7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmZpcnN0Q292ZXJJbml0aWFsaXplZE5hbWVFcnJvciA9IHByZXZpb3VzRmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yIHx8IHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3I7XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVTZW1pY29sb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJzsnKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICghdGhpcy5oYXNMaW5lVGVybWluYXRvcikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8gJiYgIXRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5sYXN0TWFya2VyLmluZGV4ID0gdGhpcy5zdGFydE1hcmtlci5pbmRleDtcblx0ICAgICAgICAgICAgdGhpcy5sYXN0TWFya2VyLmxpbmUgPSB0aGlzLnN0YXJ0TWFya2VyLmxpbmU7XG5cdCAgICAgICAgICAgIHRoaXMubGFzdE1hcmtlci5jb2x1bW4gPSB0aGlzLnN0YXJ0TWFya2VyLmNvbHVtbjtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJpbWFyeS1leHByZXNzaW9uXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgZXhwcjtcblx0ICAgICAgICB2YXIgdG9rZW4sIHJhdztcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMubG9va2FoZWFkLnR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSAzIC8qIElkZW50aWZpZXIgKi86XG5cdCAgICAgICAgICAgICAgICBpZiAoKHRoaXMuY29udGV4dC5pc01vZHVsZSB8fCB0aGlzLmNvbnRleHQuYXdhaXQpICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSAnYXdhaXQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKSA/IHRoaXMucGFyc2VGdW5jdGlvbkV4cHJlc3Npb24oKSA6IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0aGlzLm5leHRUb2tlbigpLnZhbHVlKSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSA2IC8qIE51bWVyaWNMaXRlcmFsICovOlxuXHQgICAgICAgICAgICBjYXNlIDggLyogU3RyaW5nTGl0ZXJhbCAqLzpcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHRoaXMubG9va2FoZWFkLm9jdGFsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RPY3RhbExpdGVyYWwpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIHJhdyA9IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuTGl0ZXJhbCh0b2tlbi52YWx1ZSwgcmF3KSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAxIC8qIEJvb2xlYW5MaXRlcmFsICovOlxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIHJhdyA9IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuTGl0ZXJhbCh0b2tlbi52YWx1ZSA9PT0gJ3RydWUnLCByYXcpKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIDUgLyogTnVsbExpdGVyYWwgKi86XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5MaXRlcmFsKG51bGwsIHJhdykpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgMTAgLyogVGVtcGxhdGUgKi86XG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVRlbXBsYXRlTGl0ZXJhbCgpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgNyAvKiBQdW5jdHVhdG9yICovOlxuXHQgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxvb2thaGVhZC52YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJygnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VHcm91cEV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdbJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXJyYXlJbml0aWFsaXplcik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3snOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VPYmplY3RJbml0aWFsaXplcik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJy89Jzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZXIuaW5kZXggPSB0aGlzLnN0YXJ0TWFya2VyLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMubmV4dFJlZ2V4VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlJlZ2V4TGl0ZXJhbCh0b2tlbi5yZWdleCwgcmF3LCB0b2tlbi5wYXR0ZXJuLCB0b2tlbi5mbGFncykpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIDQgLyogS2V5d29yZCAqLzpcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LnN0cmljdCAmJiB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCAmJiB0aGlzLm1hdGNoS2V5d29yZCgneWllbGQnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHRoaXMubWF0Y2hLZXl3b3JkKCdsZXQnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklkZW50aWZpZXIodGhpcy5uZXh0VG9rZW4oKS52YWx1ZSkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdmdW5jdGlvbicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCd0aGlzJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGhpc0V4cHJlc3Npb24oKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdjbGFzcycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlQ2xhc3NFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwcjtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS1pbml0aWFsaXplclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNwcmVhZEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnLi4uJyk7XG5cdCAgICAgICAgdmFyIGFyZyA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlNwcmVhZEVsZW1lbnQoYXJnKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFycmF5SW5pdGlhbGl6ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgZWxlbWVudHMgPSBbXTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnWycpO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnXScpKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcsJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG51bGwpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJy4uLicpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGFyc2VTcHJlYWRFbGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ10nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ10nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5BcnJheUV4cHJlc3Npb24oZWxlbWVudHMpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QtaW5pdGlhbGl6ZXJcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VQcm9wZXJ0eU1ldGhvZCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgcHJldmlvdXNTdHJpY3QgPSB0aGlzLmNvbnRleHQuc3RyaWN0O1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlID0gdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZSA9IHBhcmFtcy5zaW1wbGU7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMpO1xuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHBhcmFtcy5maXJzdFJlc3RyaWN0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihwYXJhbXMuZmlyc3RSZXN0cmljdGVkLCBwYXJhbXMubWVzc2FnZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHBhcmFtcy5zdHJpY3RlZCkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHBhcmFtcy5zdHJpY3RlZCwgcGFyYW1zLm1lc3NhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZTtcblx0ICAgICAgICByZXR1cm4gYm9keTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgaXNHZW5lcmF0b3IgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChwYXJhbXMpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBwYXJhbXMucGFyYW1zLCBtZXRob2QsIGlzR2VuZXJhdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5TWV0aG9kQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcblx0ICAgICAgICB2YXIgcHJldmlvdXNBd2FpdCA9IHRoaXMuY29udGV4dC5hd2FpdDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHRydWU7XG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChwYXJhbXMpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHByZXZpb3VzQXdhaXQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24obnVsbCwgcGFyYW1zLnBhcmFtcywgbWV0aG9kKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU9iamVjdFByb3BlcnR5S2V5ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB2YXIga2V5O1xuXHQgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuXHQgICAgICAgICAgICBjYXNlIDggLyogU3RyaW5nTGl0ZXJhbCAqLzpcblx0ICAgICAgICAgICAgY2FzZSA2IC8qIE51bWVyaWNMaXRlcmFsICovOlxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgdG9rZW4ub2N0YWwpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdE9jdGFsTGl0ZXJhbCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB2YXIgcmF3ID0gdGhpcy5nZXRUb2tlblJhdyh0b2tlbik7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkxpdGVyYWwodG9rZW4udmFsdWUsIHJhdykpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgMyAvKiBJZGVudGlmaWVyICovOlxuXHQgICAgICAgICAgICBjYXNlIDEgLyogQm9vbGVhbkxpdGVyYWwgKi86XG5cdCAgICAgICAgICAgIGNhc2UgNSAvKiBOdWxsTGl0ZXJhbCAqLzpcblx0ICAgICAgICAgICAgY2FzZSA0IC8qIEtleXdvcmQgKi86XG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLklkZW50aWZpZXIodG9rZW4udmFsdWUpKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIDcgLyogUHVuY3R1YXRvciAqLzpcblx0ICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gJ1snKSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9IHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odG9rZW4pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGtleTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmlzUHJvcGVydHlLZXkgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiAoa2V5LnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyICYmIGtleS5uYW1lID09PSB2YWx1ZSkgfHxcblx0ICAgICAgICAgICAgKGtleS50eXBlID09PSBzeW50YXhfMS5TeW50YXguTGl0ZXJhbCAmJiBrZXkudmFsdWUgPT09IHZhbHVlKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlT2JqZWN0UHJvcGVydHkgPSBmdW5jdGlvbiAoaGFzUHJvdG8pIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgIHZhciBraW5kO1xuXHQgICAgICAgIHZhciBrZXkgPSBudWxsO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cdCAgICAgICAgdmFyIGNvbXB1dGVkID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBzaG9ydGhhbmQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgaXNBc3luYyA9IGZhbHNlO1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pIHtcblx0ICAgICAgICAgICAgdmFyIGlkID0gdG9rZW4udmFsdWU7XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xuXHQgICAgICAgICAgICBpc0FzeW5jID0gIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IgJiYgKGlkID09PSAnYXN5bmMnKSAmJlxuXHQgICAgICAgICAgICAgICAgIXRoaXMubWF0Y2goJzonKSAmJiAhdGhpcy5tYXRjaCgnKCcpICYmICF0aGlzLm1hdGNoKCcqJykgJiYgIXRoaXMubWF0Y2goJywnKTtcblx0ICAgICAgICAgICAga2V5ID0gaXNBc3luYyA/IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpIDogdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JZGVudGlmaWVyKGlkKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJyonKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgbG9va2FoZWFkUHJvcGVydHlLZXkgPSB0aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLyAmJiAhaXNBc3luYyAmJiB0b2tlbi52YWx1ZSA9PT0gJ2dldCcgJiYgbG9va2FoZWFkUHJvcGVydHlLZXkpIHtcblx0ICAgICAgICAgICAga2luZCA9ICdnZXQnO1xuXHQgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcblx0ICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZUdldHRlck1ldGhvZCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIWlzQXN5bmMgJiYgdG9rZW4udmFsdWUgPT09ICdzZXQnICYmIGxvb2thaGVhZFByb3BlcnR5S2V5KSB7XG5cdCAgICAgICAgICAgIGtpbmQgPSAnc2V0Jztcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VTZXR0ZXJNZXRob2QoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gNyAvKiBQdW5jdHVhdG9yICovICYmIHRva2VuLnZhbHVlID09PSAnKicgJiYgbG9va2FoZWFkUHJvcGVydHlLZXkpIHtcblx0ICAgICAgICAgICAga2luZCA9ICdpbml0Jztcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VHZW5lcmF0b3JNZXRob2QoKTtcblx0ICAgICAgICAgICAgbWV0aG9kID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGlmICgha2V5KSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBraW5kID0gJ2luaXQnO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnOicpICYmICFpc0FzeW5jKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWNvbXB1dGVkICYmIHRoaXMuaXNQcm9wZXJ0eUtleShrZXksICdfX3Byb3RvX18nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChoYXNQcm90by52YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5EdXBsaWNhdGVQcm90b1Byb3BlcnR5KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzUHJvdG8udmFsdWUgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgnKCcpKSB7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IGlzQXN5bmMgPyB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2RBc3luY0Z1bmN0aW9uKCkgOiB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbigpO1xuXHQgICAgICAgICAgICAgICAgbWV0aG9kID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0b2tlbi52YWx1ZSkpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIHNob3J0aGFuZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGluaXQgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXNzaWdubWVudFBhdHRlcm4oaWQsIGluaXQpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHNob3J0aGFuZCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpZDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuUHJvcGVydHkoa2luZCwga2V5LCBjb21wdXRlZCwgdmFsdWUsIG1ldGhvZCwgc2hvcnRoYW5kKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU9iamVjdEluaXRpYWxpemVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcblx0ICAgICAgICB2YXIgcHJvcGVydGllcyA9IFtdO1xuXHQgICAgICAgIHZhciBoYXNQcm90byA9IHsgdmFsdWU6IGZhbHNlIH07XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLm1hdGNoKCd9JykpIHtcblx0ICAgICAgICAgICAgcHJvcGVydGllcy5wdXNoKHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eShoYXNQcm90bykpO1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd9Jyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuT2JqZWN0RXhwcmVzc2lvbihwcm9wZXJ0aWVzKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbHNcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VUZW1wbGF0ZUhlYWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgYXNzZXJ0XzEuYXNzZXJ0KHRoaXMubG9va2FoZWFkLmhlYWQsICdUZW1wbGF0ZSBsaXRlcmFsIG11c3Qgc3RhcnQgd2l0aCBhIHRlbXBsYXRlIGhlYWQnKTtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgdmFyIHJhdyA9IHRva2VuLnZhbHVlO1xuXHQgICAgICAgIHZhciBjb29rZWQgPSB0b2tlbi5jb29rZWQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGVtcGxhdGVFbGVtZW50KHsgcmF3OiByYXcsIGNvb2tlZDogY29va2VkIH0sIHRva2VuLnRhaWwpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVGVtcGxhdGVFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlICE9PSAxMCAvKiBUZW1wbGF0ZSAqLykge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB2YXIgcmF3ID0gdG9rZW4udmFsdWU7XG5cdCAgICAgICAgdmFyIGNvb2tlZCA9IHRva2VuLmNvb2tlZDtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5UZW1wbGF0ZUVsZW1lbnQoeyByYXc6IHJhdywgY29va2VkOiBjb29rZWQgfSwgdG9rZW4udGFpbCkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VUZW1wbGF0ZUxpdGVyYWwgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcblx0ICAgICAgICB2YXIgcXVhc2lzID0gW107XG5cdCAgICAgICAgdmFyIHF1YXNpID0gdGhpcy5wYXJzZVRlbXBsYXRlSGVhZCgpO1xuXHQgICAgICAgIHF1YXNpcy5wdXNoKHF1YXNpKTtcblx0ICAgICAgICB3aGlsZSAoIXF1YXNpLnRhaWwpIHtcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaCh0aGlzLnBhcnNlRXhwcmVzc2lvbigpKTtcblx0ICAgICAgICAgICAgcXVhc2kgPSB0aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KCk7XG5cdCAgICAgICAgICAgIHF1YXNpcy5wdXNoKHF1YXNpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGVtcGxhdGVMaXRlcmFsKHF1YXNpcywgZXhwcmVzc2lvbnMpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1ncm91cGluZy1vcGVyYXRvclxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4gPSBmdW5jdGlvbiAoZXhwcikge1xuXHQgICAgICAgIHN3aXRjaCAoZXhwci50eXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXI6XG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4Lk1lbWJlckV4cHJlc3Npb246XG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LlJlc3RFbGVtZW50OlxuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5Bc3NpZ25tZW50UGF0dGVybjpcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5TcHJlYWRFbGVtZW50OlxuXHQgICAgICAgICAgICAgICAgZXhwci50eXBlID0gc3ludGF4XzEuU3ludGF4LlJlc3RFbGVtZW50O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwci5hcmd1bWVudCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguQXJyYXlFeHByZXNzaW9uOlxuXHQgICAgICAgICAgICAgICAgZXhwci50eXBlID0gc3ludGF4XzEuU3ludGF4LkFycmF5UGF0dGVybjtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwci5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChleHByLmVsZW1lbnRzW2ldICE9PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIuZWxlbWVudHNbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5PYmplY3RFeHByZXNzaW9uOlxuXHQgICAgICAgICAgICAgICAgZXhwci50eXBlID0gc3ludGF4XzEuU3ludGF4Lk9iamVjdFBhdHRlcm47XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHIucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIucHJvcGVydGllc1tpXS52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb246XG5cdCAgICAgICAgICAgICAgICBleHByLnR5cGUgPSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudFBhdHRlcm47XG5cdCAgICAgICAgICAgICAgICBkZWxldGUgZXhwci5vcGVyYXRvcjtcblx0ICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIubGVmdCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIC8vIEFsbG93IG90aGVyIG5vZGUgdHlwZSBmb3IgdG9sZXJhbnQgcGFyc2luZy5cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlR3JvdXBFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBleHByO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcoJyk7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJz0+JykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc9PicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGV4cHIgPSB7XG5cdCAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxuXHQgICAgICAgICAgICAgICAgcGFyYW1zOiBbXSxcblx0ICAgICAgICAgICAgICAgIGFzeW5jOiBmYWxzZVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnLi4uJykpIHtcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlUmVzdEVsZW1lbnQocGFyYW1zKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJz0+JykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnPT4nKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcblx0ICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtleHByXSxcblx0ICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2Vcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYXJyb3cgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcsJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByKTtcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcsJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwcmVzc2lvbnNbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3cgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogZXhwcmVzc2lvbnMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJy4uLicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKHRoaXMucGFyc2VSZXN0RWxlbWVudChwYXJhbXMpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJz0+JykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnPT4nKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oZXhwcmVzc2lvbnNbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyb3cgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogZXhwcmVzc2lvbnMsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IGZhbHNlXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaCh0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycm93KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWFycm93KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TZXF1ZW5jZUV4cHJlc3Npb24oZXhwcmVzc2lvbnMpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoIWFycm93KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnPT4nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwci50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllciAmJiBleHByLm5hbWUgPT09ICd5aWVsZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycm93ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHIgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFtleHByXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2Vcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcnJvdykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwci5leHByZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihleHByLmV4cHJlc3Npb25zW2ldKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihleHByKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbWV0ZXJzID0gKGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LlNlcXVlbmNlRXhwcmVzc2lvbiA/IGV4cHIuZXhwcmVzc2lvbnMgOiBbZXhwcl0pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogcGFyYW1ldGVycyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogZmFsc2Vcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwcjtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1sZWZ0LWhhbmQtc2lkZS1leHByZXNzaW9uc1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUFyZ3VtZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xuXHQgICAgICAgIHZhciBhcmdzID0gW107XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5tYXRjaCgnLi4uJykgPyB0aGlzLnBhcnNlU3ByZWFkRWxlbWVudCgpIDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgIGFyZ3MucHVzaChleHByKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0Q29tbWFTZXBhcmF0b3IoKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xuXHQgICAgICAgIHJldHVybiBhcmdzO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuaXNJZGVudGlmaWVyTmFtZSA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHQgICAgICAgIHJldHVybiB0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gfHxcblx0ICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gNCAvKiBLZXl3b3JkICovIHx8XG5cdCAgICAgICAgICAgIHRva2VuLnR5cGUgPT09IDEgLyogQm9vbGVhbkxpdGVyYWwgKi8gfHxcblx0ICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gNSAvKiBOdWxsTGl0ZXJhbCAqLztcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlSWRlbnRpZmllck5hbWUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIGlmICghdGhpcy5pc0lkZW50aWZpZXJOYW1lKHRva2VuKSkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRva2VuKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0b2tlbi52YWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VOZXdFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGlkID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7XG5cdCAgICAgICAgYXNzZXJ0XzEuYXNzZXJ0KGlkLm5hbWUgPT09ICduZXcnLCAnTmV3IGV4cHJlc3Npb24gbXVzdCBzdGFydCB3aXRoIGBuZXdgJyk7XG5cdCAgICAgICAgdmFyIGV4cHI7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJy4nKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovICYmIHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSAmJiB0aGlzLmxvb2thaGVhZC52YWx1ZSA9PT0gJ3RhcmdldCcpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IG5ldyBOb2RlLk1ldGFQcm9wZXJ0eShpZCwgcHJvcGVydHkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBjYWxsZWUgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICB2YXIgYXJncyA9IHRoaXMubWF0Y2goJygnKSA/IHRoaXMucGFyc2VBcmd1bWVudHMoKSA6IFtdO1xuXHQgICAgICAgICAgICBleHByID0gbmV3IE5vZGUuTmV3RXhwcmVzc2lvbihjYWxsZWUsIGFyZ3MpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIGV4cHIpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBc3luY0FyZ3VtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBhcmcgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yID0gbnVsbDtcblx0ICAgICAgICByZXR1cm4gYXJnO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBc3luY0FyZ3VtZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKCcpO1xuXHQgICAgICAgIHZhciBhcmdzID0gW107XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5tYXRjaCgnLi4uJykgPyB0aGlzLnBhcnNlU3ByZWFkRWxlbWVudCgpIDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzeW5jQXJndW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgYXJncy5wdXNoKGV4cHIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3RDb21tYVNlcGFyYXRvcigpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJyknKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgcmV0dXJuIGFyZ3M7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb25BbGxvd0NhbGwgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICB2YXIgbWF5YmVBc3luYyA9IHRoaXMubWF0Y2hDb250ZXh0dWFsS2V5d29yZCgnYXN5bmMnKTtcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSB0cnVlO1xuXHQgICAgICAgIHZhciBleHByO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnc3VwZXInKSAmJiB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkpIHtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZShleHByLCBuZXcgTm9kZS5TdXBlcigpKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcoJykgJiYgIXRoaXMubWF0Y2goJy4nKSAmJiAhdGhpcy5tYXRjaCgnWycpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLm1hdGNoS2V5d29yZCgnbmV3JykgPyB0aGlzLnBhcnNlTmV3RXhwcmVzc2lvbiA6IHRoaXMucGFyc2VQcmltYXJ5RXhwcmVzc2lvbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcuJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcuJyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TdGF0aWNNZW1iZXJFeHByZXNzaW9uKGV4cHIsIHByb3BlcnR5KSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgnKCcpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYXN5bmNBcnJvdyA9IG1heWJlQXN5bmMgJiYgKHN0YXJ0VG9rZW4ubGluZU51bWJlciA9PT0gdGhpcy5sb29rYWhlYWQubGluZU51bWJlcik7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhc3luY0Fycm93ID8gdGhpcy5wYXJzZUFzeW5jQXJndW1lbnRzKCkgOiB0aGlzLnBhcnNlQXJndW1lbnRzKCk7XG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuQ2FsbEV4cHJlc3Npb24oZXhwciwgYXJncykpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGFzeW5jQXJyb3cgJiYgdGhpcy5tYXRjaCgnPT4nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihhcmdzW2ldKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZXhwciA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlcixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBhcmdzLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgnWycpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnWycpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCddJyk7XG5cdCAgICAgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uKGV4cHIsIHByb3BlcnR5KSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMTAgLyogVGVtcGxhdGUgKi8gJiYgdGhpcy5sb29rYWhlYWQuaGVhZCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHF1YXNpID0gdGhpcy5wYXJzZVRlbXBsYXRlTGl0ZXJhbCgpO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoc3RhcnRUb2tlbiksIG5ldyBOb2RlLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihleHByLCBxdWFzaSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBwcmV2aW91c0FsbG93SW47XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN1cGVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdzdXBlcicpO1xuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnWycpICYmICF0aGlzLm1hdGNoKCcuJykpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlN1cGVyKCkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydCh0aGlzLmNvbnRleHQuYWxsb3dJbiwgJ2NhbGxlZSBvZiBuZXcgZXhwcmVzc2lvbiBhbHdheXMgYWxsb3cgaW4ga2V5d29yZC4nKTtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICB2YXIgZXhwciA9ICh0aGlzLm1hdGNoS2V5d29yZCgnc3VwZXInKSAmJiB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkpID8gdGhpcy5wYXJzZVN1cGVyKCkgOlxuXHQgICAgICAgICAgICB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5tYXRjaEtleXdvcmQoJ25ldycpID8gdGhpcy5wYXJzZU5ld0V4cHJlc3Npb24gOiB0aGlzLnBhcnNlUHJpbWFyeUV4cHJlc3Npb24pO1xuXHQgICAgICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCdbJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCdbJyk7XG5cdCAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJ10nKTtcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbihleHByLCBwcm9wZXJ0eSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJy4nKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJy4nKTtcblx0ICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuU3RhdGljTWVtYmVyRXhwcmVzc2lvbihleHByLCBwcm9wZXJ0eSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDEwIC8qIFRlbXBsYXRlICovICYmIHRoaXMubG9va2FoZWFkLmhlYWQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBxdWFzaSA9IHRoaXMucGFyc2VUZW1wbGF0ZUxpdGVyYWwoKTtcblx0ICAgICAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbihleHByLCBxdWFzaSkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdXBkYXRlLWV4cHJlc3Npb25zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVXBkYXRlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZXhwcjtcblx0ICAgICAgICB2YXIgc3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCcrKycpIHx8IHRoaXMubWF0Y2goJy0tJykpIHtcblx0ICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKTtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgZXhwci50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllciAmJiB0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChleHByLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RMSFNQcmVmaXgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSW52YWxpZExIU0luQXNzaWdubWVudCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIHByZWZpeCA9IHRydWU7XG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlVwZGF0ZUV4cHJlc3Npb24odG9rZW4udmFsdWUsIGV4cHIsIHByZWZpeCkpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yICYmIHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLykge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJysrJykgfHwgdGhpcy5tYXRjaCgnLS0nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGV4cHIudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIgJiYgdGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoZXhwci5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RMSFNQb3N0Zml4KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgb3BlcmF0b3IgPSB0aGlzLm5leHRUb2tlbigpLnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwcmVmaXggPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuVXBkYXRlRXhwcmVzc2lvbihvcGVyYXRvciwgZXhwciwgcHJlZml4KSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdW5hcnktb3BlcmF0b3JzXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXdhaXRFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSB0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXdhaXRFeHByZXNzaW9uKGFyZ3VtZW50KSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVuYXJ5RXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgZXhwcjtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnKycpIHx8IHRoaXMubWF0Y2goJy0nKSB8fCB0aGlzLm1hdGNoKCd+JykgfHwgdGhpcy5tYXRjaCgnIScpIHx8XG5cdCAgICAgICAgICAgIHRoaXMubWF0Y2hLZXl3b3JkKCdkZWxldGUnKSB8fCB0aGlzLm1hdGNoS2V5d29yZCgndm9pZCcpIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCd0eXBlb2YnKSkge1xuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlVW5hcnlFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVW5hcnlFeHByZXNzaW9uKHRva2VuLnZhbHVlLCBleHByKSk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGV4cHIub3BlcmF0b3IgPT09ICdkZWxldGUnICYmIGV4cHIuYXJndW1lbnQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdERlbGV0ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNCaW5kaW5nRWxlbWVudCA9IGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRleHQuYXdhaXQgJiYgdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhd2FpdCcpKSB7XG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLnBhcnNlQXdhaXRFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVVwZGF0ZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUV4cG9uZW50aWF0aW9uRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5pbmhlcml0Q292ZXJHcmFtbWFyKHRoaXMucGFyc2VVbmFyeUV4cHJlc3Npb24pO1xuXHQgICAgICAgIGlmIChleHByLnR5cGUgIT09IHN5bnRheF8xLlN5bnRheC5VbmFyeUV4cHJlc3Npb24gJiYgdGhpcy5tYXRjaCgnKionKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gZmFsc2U7XG5cdCAgICAgICAgICAgIHZhciBsZWZ0ID0gZXhwcjtcblx0ICAgICAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICBleHByID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuQmluYXJ5RXhwcmVzc2lvbignKionLCBsZWZ0LCByaWdodCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwcjtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1leHAtb3BlcmF0b3Jcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW11bHRpcGxpY2F0aXZlLW9wZXJhdG9yc1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWRkaXRpdmUtb3BlcmF0b3JzXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1iaXR3aXNlLXNoaWZ0LW9wZXJhdG9yc1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVsYXRpb25hbC1vcGVyYXRvcnNcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWVxdWFsaXR5LW9wZXJhdG9yc1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYmluYXJ5LWJpdHdpc2Utb3BlcmF0b3JzXG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1iaW5hcnktbG9naWNhbC1vcGVyYXRvcnNcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuYmluYXJ5UHJlY2VkZW5jZSA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHQgICAgICAgIHZhciBvcCA9IHRva2VuLnZhbHVlO1xuXHQgICAgICAgIHZhciBwcmVjZWRlbmNlO1xuXHQgICAgICAgIGlmICh0b2tlbi50eXBlID09PSA3IC8qIFB1bmN0dWF0b3IgKi8pIHtcblx0ICAgICAgICAgICAgcHJlY2VkZW5jZSA9IHRoaXMub3BlcmF0b3JQcmVjZWRlbmNlW29wXSB8fCAwO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSA0IC8qIEtleXdvcmQgKi8pIHtcblx0ICAgICAgICAgICAgcHJlY2VkZW5jZSA9IChvcCA9PT0gJ2luc3RhbmNlb2YnIHx8ICh0aGlzLmNvbnRleHQuYWxsb3dJbiAmJiBvcCA9PT0gJ2luJykpID8gNyA6IDA7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBwcmVjZWRlbmNlID0gMDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHByZWNlZGVuY2U7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJpbmFyeUV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICB2YXIgZXhwciA9IHRoaXMuaW5oZXJpdENvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKTtcblx0ICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICB2YXIgcHJlYyA9IHRoaXMuYmluYXJ5UHJlY2VkZW5jZSh0b2tlbik7XG5cdCAgICAgICAgaWYgKHByZWMgPiAwKSB7XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbc3RhcnRUb2tlbiwgdGhpcy5sb29rYWhlYWRdO1xuXHQgICAgICAgICAgICB2YXIgbGVmdCA9IGV4cHI7XG5cdCAgICAgICAgICAgIHZhciByaWdodCA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgdmFyIHN0YWNrID0gW2xlZnQsIHRva2VuLnZhbHVlLCByaWdodF07XG5cdCAgICAgICAgICAgIHZhciBwcmVjZWRlbmNlcyA9IFtwcmVjXTtcblx0ICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgICAgIHByZWMgPSB0aGlzLmJpbmFyeVByZWNlZGVuY2UodGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHByZWMgPD0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gUmVkdWNlOiBtYWtlIGEgYmluYXJ5IGV4cHJlc3Npb24gZnJvbSB0aGUgdGhyZWUgdG9wbW9zdCBlbnRyaWVzLlxuXHQgICAgICAgICAgICAgICAgd2hpbGUgKChzdGFjay5sZW5ndGggPiAyKSAmJiAocHJlYyA8PSBwcmVjZWRlbmNlc1twcmVjZWRlbmNlcy5sZW5ndGggLSAxXSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICByaWdodCA9IHN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBvcGVyYXRvciA9IHN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHByZWNlZGVuY2VzLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgICBtYXJrZXJzLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUobWFya2Vyc1ttYXJrZXJzLmxlbmd0aCAtIDFdKTtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQmluYXJ5RXhwcmVzc2lvbihvcGVyYXRvciwgbGVmdCwgcmlnaHQpKSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBTaGlmdC5cblx0ICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5uZXh0VG9rZW4oKS52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICBwcmVjZWRlbmNlcy5wdXNoKHByZWMpO1xuXHQgICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VFeHBvbmVudGlhdGlvbkV4cHJlc3Npb24pKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBGaW5hbCByZWR1Y2UgdG8gY2xlYW4tdXAgdGhlIHN0YWNrLlxuXHQgICAgICAgICAgICB2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7XG5cdCAgICAgICAgICAgIGV4cHIgPSBzdGFja1tpXTtcblx0ICAgICAgICAgICAgdmFyIGxhc3RNYXJrZXIgPSBtYXJrZXJzLnBvcCgpO1xuXHQgICAgICAgICAgICB3aGlsZSAoaSA+IDEpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBtYXJrZXJzLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhc3RMaW5lU3RhcnQgPSBsYXN0TWFya2VyICYmIGxhc3RNYXJrZXIubGluZVN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZShtYXJrZXIsIGxhc3RMaW5lU3RhcnQpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG9wZXJhdG9yID0gc3RhY2tbaSAtIDFdO1xuXHQgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQmluYXJ5RXhwcmVzc2lvbihvcGVyYXRvciwgc3RhY2tbaSAtIDJdLCBleHByKSk7XG5cdCAgICAgICAgICAgICAgICBpIC09IDI7XG5cdCAgICAgICAgICAgICAgICBsYXN0TWFya2VyID0gbWFya2VyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBleHByO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNvbmRpdGlvbmFsLW9wZXJhdG9yXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzdGFydFRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgdmFyIGV4cHIgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUJpbmFyeUV4cHJlc3Npb24pO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCc/JykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dJbiA9IHRoaXMuY29udGV4dC5hbGxvd0luO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dJbiA9IHRydWU7XG5cdCAgICAgICAgICAgIHZhciBjb25zZXF1ZW50ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnOicpO1xuXHQgICAgICAgICAgICB2YXIgYWx0ZXJuYXRlID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5Db25kaXRpb25hbEV4cHJlc3Npb24oZXhwciwgY29uc2VxdWVudCwgYWx0ZXJuYXRlKSk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXNzaWdubWVudC1vcGVyYXRvcnNcblx0ICAgIFBhcnNlci5wcm90b3R5cGUuY2hlY2tQYXR0ZXJuUGFyYW0gPSBmdW5jdGlvbiAob3B0aW9ucywgcGFyYW0pIHtcblx0ICAgICAgICBzd2l0Y2ggKHBhcmFtLnR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcjpcblx0ICAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGVQYXJhbShvcHRpb25zLCBwYXJhbSwgcGFyYW0ubmFtZSk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguUmVzdEVsZW1lbnQ6XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUGF0dGVyblBhcmFtKG9wdGlvbnMsIHBhcmFtLmFyZ3VtZW50KTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIHN5bnRheF8xLlN5bnRheC5Bc3NpZ25tZW50UGF0dGVybjpcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0ob3B0aW9ucywgcGFyYW0ubGVmdCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguQXJyYXlQYXR0ZXJuOlxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbS5lbGVtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS5lbGVtZW50c1tpXSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrUGF0dGVyblBhcmFtKG9wdGlvbnMsIHBhcmFtLmVsZW1lbnRzW2ldKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBzeW50YXhfMS5TeW50YXguT2JqZWN0UGF0dGVybjpcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW0ucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0ob3B0aW9ucywgcGFyYW0ucHJvcGVydGllc1tpXS52YWx1ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvcHRpb25zLnNpbXBsZSA9IG9wdGlvbnMuc2ltcGxlICYmIChwYXJhbSBpbnN0YW5jZW9mIE5vZGUuSWRlbnRpZmllcik7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5yZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdCA9IGZ1bmN0aW9uIChleHByKSB7XG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFtleHByXTtcblx0ICAgICAgICB2YXIgb3B0aW9ucztcblx0ICAgICAgICB2YXIgYXN5bmNBcnJvdyA9IGZhbHNlO1xuXHQgICAgICAgIHN3aXRjaCAoZXhwci50eXBlKSB7XG5cdCAgICAgICAgICAgIGNhc2Ugc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXI6XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyOlxuXHQgICAgICAgICAgICAgICAgcGFyYW1zID0gZXhwci5wYXJhbXM7XG5cdCAgICAgICAgICAgICAgICBhc3luY0Fycm93ID0gZXhwci5hc3luYztcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIG9wdGlvbnMgPSB7XG5cdCAgICAgICAgICAgIHNpbXBsZTogdHJ1ZSxcblx0ICAgICAgICAgICAgcGFyYW1TZXQ6IHt9XG5cdCAgICAgICAgfTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7ICsraSkge1xuXHQgICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbaV07XG5cdCAgICAgICAgICAgIGlmIChwYXJhbS50eXBlID09PSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudFBhdHRlcm4pIHtcblx0ICAgICAgICAgICAgICAgIGlmIChwYXJhbS5yaWdodC50eXBlID09PSBzeW50YXhfMS5TeW50YXguWWllbGRFeHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtLnJpZ2h0LmFyZ3VtZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBwYXJhbS5yaWdodC50eXBlID0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXI7XG5cdCAgICAgICAgICAgICAgICAgICAgcGFyYW0ucmlnaHQubmFtZSA9ICd5aWVsZCc7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhcmFtLnJpZ2h0LmFyZ3VtZW50O1xuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbS5yaWdodC5kZWxlZ2F0ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChhc3luY0Fycm93ICYmIHBhcmFtLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyICYmIHBhcmFtLm5hbWUgPT09ICdhd2FpdCcpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuUGFyYW0ob3B0aW9ucywgcGFyYW0pO1xuXHQgICAgICAgICAgICBwYXJhbXNbaV0gPSBwYXJhbTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgfHwgIXRoaXMuY29udGV4dC5hbGxvd1lpZWxkKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgKytpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAocGFyYW0udHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LllpZWxkRXhwcmVzc2lvbikge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChvcHRpb25zLm1lc3NhZ2UgPT09IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1EdXBlKSB7XG5cdCAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMuY29udGV4dC5zdHJpY3QgPyBvcHRpb25zLnN0cmljdGVkIDogb3B0aW9ucy5maXJzdFJlc3RyaWN0ZWQ7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odG9rZW4sIG9wdGlvbnMubWVzc2FnZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIHNpbXBsZTogb3B0aW9ucy5zaW1wbGUsXG5cdCAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuXHQgICAgICAgICAgICBzdHJpY3RlZDogb3B0aW9ucy5zdHJpY3RlZCxcblx0ICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCxcblx0ICAgICAgICAgICAgbWVzc2FnZTogb3B0aW9ucy5tZXNzYWdlXG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGV4cHI7XG5cdCAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCAmJiB0aGlzLm1hdGNoS2V5d29yZCgneWllbGQnKSkge1xuXHQgICAgICAgICAgICBleHByID0gdGhpcy5wYXJzZVlpZWxkRXhwcmVzc2lvbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gc3RhcnRUb2tlbjtcblx0ICAgICAgICAgICAgZXhwciA9IHRoaXMucGFyc2VDb25kaXRpb25hbEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLyAmJiAodG9rZW4ubGluZU51bWJlciA9PT0gdGhpcy5sb29rYWhlYWQubGluZU51bWJlcikgJiYgdG9rZW4udmFsdWUgPT09ICdhc3luYycpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gfHwgdGhpcy5tYXRjaEtleXdvcmQoJ3lpZWxkJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYXJnID0gdGhpcy5wYXJzZVByaW1hcnlFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oYXJnKTtcblx0ICAgICAgICAgICAgICAgICAgICBleHByID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBcnJvd1BhcmFtZXRlclBsYWNlSG9sZGVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFthcmddLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZVxuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGV4cHIudHlwZSA9PT0gQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlciB8fCB0aGlzLm1hdGNoKCc9PicpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJvdy1mdW5jdGlvbi1kZWZpbml0aW9uc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQXNzaWdubWVudFRhcmdldCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHZhciBpc0FzeW5jID0gZXhwci5hc3luYztcblx0ICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpcy5yZWludGVycHJldEFzQ292ZXJGb3JtYWxzTGlzdChleHByKTtcblx0ICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dTdHJpY3REaXJlY3RpdmUgPSB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gbGlzdC5zaW1wbGU7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0F3YWl0ID0gdGhpcy5jb250ZXh0LmF3YWl0O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSBpc0FzeW5jO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoc3RhcnRUb2tlbik7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBlY3QoJz0+Jyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJ3snKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbiA9IGJvZHkudHlwZSAhPT0gc3ludGF4XzEuU3ludGF4LkJsb2NrU3RhdGVtZW50O1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGxpc3QuZmlyc3RSZXN0cmljdGVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obGlzdC5maXJzdFJlc3RyaWN0ZWQsIGxpc3QubWVzc2FnZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGxpc3Quc3RyaWN0ZWQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihsaXN0LnN0cmljdGVkLCBsaXN0Lm1lc3NhZ2UpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBleHByID0gaXNBc3luYyA/IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXN5bmNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihsaXN0LnBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikpIDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5BcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbihsaXN0LnBhcmFtcywgYm9keSwgZXhwcmVzc2lvbikpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJpY3QgPSBwcmV2aW91c1N0cmljdDtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHByZXZpb3VzQXdhaXQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaEFzc2lnbigpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRMSFNJbkFzc2lnbm1lbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBleHByLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGV4cHI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChpZC5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RMSFNBc3NpZ25tZW50KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZChpZC5uYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnPScpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmlzQmluZGluZ0VsZW1lbnQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuKGV4cHIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wZXJhdG9yID0gdG9rZW4udmFsdWU7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgICAgICAgICAgZXhwciA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoc3RhcnRUb2tlbiksIG5ldyBOb2RlLkFzc2lnbm1lbnRFeHByZXNzaW9uKG9wZXJhdG9yLCBleHByLCByaWdodCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBleHByO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNvbW1hLW9wZXJhdG9yXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJywnKSkge1xuXHQgICAgICAgICAgICB2YXIgZXhwcmVzc2lvbnMgPSBbXTtcblx0ICAgICAgICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByKTtcblx0ICAgICAgICAgICAgd2hpbGUgKHRoaXMubG9va2FoZWFkLnR5cGUgIT09IDIgLyogRU9GICovKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWF0Y2goJywnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zLnB1c2godGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbikpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGV4cHIgPSB0aGlzLmZpbmFsaXplKHRoaXMuc3RhcnROb2RlKHN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TZXF1ZW5jZUV4cHJlc3Npb24oZXhwcmVzc2lvbnMpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGV4cHI7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYmxvY2tcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhdGVtZW50O1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pc0JpbmRpbmdFbGVtZW50ID0gdHJ1ZTtcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gNCAvKiBLZXl3b3JkICovKSB7XG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2V4cG9ydCc6XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNNb2R1bGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsRXhwb3J0RGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRXhwb3J0RGVjbGFyYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2ltcG9ydCc6XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNNb2R1bGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLmxvb2thaGVhZCwgbWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlSW1wb3J0RGVjbGFyYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnN0Jzpcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uKHsgaW5Gb3I6IGZhbHNlIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdjbGFzcyc6XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUNsYXNzRGVjbGFyYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2xldCc6XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5pc0xleGljYWxEZWNsYXJhdGlvbigpID8gdGhpcy5wYXJzZUxleGljYWxEZWNsYXJhdGlvbih7IGluRm9yOiBmYWxzZSB9KSA6IHRoaXMucGFyc2VTdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBzdGF0ZW1lbnQ7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcblx0ICAgICAgICB2YXIgYmxvY2sgPSBbXTtcblx0ICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBibG9jay5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5CbG9ja1N0YXRlbWVudChibG9jaykpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxldC1hbmQtY29uc3QtZGVjbGFyYXRpb25zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTGV4aWNhbEJpbmRpbmcgPSBmdW5jdGlvbiAoa2luZCwgb3B0aW9ucykge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuXHQgICAgICAgIHZhciBpZCA9IHRoaXMucGFyc2VQYXR0ZXJuKHBhcmFtcywga2luZCk7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgaWQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKGlkLm5hbWUpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RWYXJOYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgaW5pdCA9IG51bGw7XG5cdCAgICAgICAgaWYgKGtpbmQgPT09ICdjb25zdCcpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoS2V5d29yZCgnaW4nKSAmJiAhdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnPScpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5EZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplciwgJ2NvbnN0Jyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoKCFvcHRpb25zLmluRm9yICYmIGlkLnR5cGUgIT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyKSB8fCB0aGlzLm1hdGNoKCc9JykpIHtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3QoJz0nKTtcblx0ICAgICAgICAgICAgaW5pdCA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0b3IoaWQsIGluaXQpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQmluZGluZ0xpc3QgPSBmdW5jdGlvbiAoa2luZCwgb3B0aW9ucykge1xuXHQgICAgICAgIHZhciBsaXN0ID0gW3RoaXMucGFyc2VMZXhpY2FsQmluZGluZyhraW5kLCBvcHRpb25zKV07XG5cdCAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2goJywnKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICBsaXN0LnB1c2godGhpcy5wYXJzZUxleGljYWxCaW5kaW5nKGtpbmQsIG9wdGlvbnMpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxpc3Q7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5pc0xleGljYWxEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnNjYW5uZXIuc2F2ZVN0YXRlKCk7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO1xuXHQgICAgICAgIHZhciBuZXh0ID0gdGhpcy5zY2FubmVyLmxleCgpO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5yZXN0b3JlU3RhdGUoc3RhdGUpO1xuXHQgICAgICAgIHJldHVybiAobmV4dC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pIHx8XG5cdCAgICAgICAgICAgIChuZXh0LnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiBuZXh0LnZhbHVlID09PSAnWycpIHx8XG5cdCAgICAgICAgICAgIChuZXh0LnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiBuZXh0LnZhbHVlID09PSAneycpIHx8XG5cdCAgICAgICAgICAgIChuZXh0LnR5cGUgPT09IDQgLyogS2V5d29yZCAqLyAmJiBuZXh0LnZhbHVlID09PSAnbGV0JykgfHxcblx0ICAgICAgICAgICAgKG5leHQudHlwZSA9PT0gNCAvKiBLZXl3b3JkICovICYmIG5leHQudmFsdWUgPT09ICd5aWVsZCcpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VMZXhpY2FsRGVjbGFyYXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGtpbmQgPSB0aGlzLm5leHRUb2tlbigpLnZhbHVlO1xuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydChraW5kID09PSAnbGV0JyB8fCBraW5kID09PSAnY29uc3QnLCAnTGV4aWNhbCBkZWNsYXJhdGlvbiBtdXN0IGJlIGVpdGhlciBsZXQgb3IgY29uc3QnKTtcblx0ICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KGtpbmQsIG9wdGlvbnMpO1xuXHQgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCBraW5kKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGVzdHJ1Y3R1cmluZy1iaW5kaW5nLXBhdHRlcm5zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQmluZGluZ1Jlc3RFbGVtZW50ID0gZnVuY3Rpb24gKHBhcmFtcywga2luZCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJy4uLicpO1xuXHQgICAgICAgIHZhciBhcmcgPSB0aGlzLnBhcnNlUGF0dGVybihwYXJhbXMsIGtpbmQpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlJlc3RFbGVtZW50KGFyZykpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VBcnJheVBhdHRlcm4gPSBmdW5jdGlvbiAocGFyYW1zLCBraW5kKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnWycpO1xuXHQgICAgICAgIHZhciBlbGVtZW50cyA9IFtdO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnXScpKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcsJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICBlbGVtZW50cy5wdXNoKG51bGwpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJy4uLicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLnBhcnNlQmluZGluZ1Jlc3RFbGVtZW50KHBhcmFtcywga2luZCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh0aGlzLnBhcnNlUGF0dGVybldpdGhEZWZhdWx0KHBhcmFtcywga2luZCkpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCddJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnLCcpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCddJyk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXJyYXlQYXR0ZXJuKGVsZW1lbnRzKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVByb3BlcnR5UGF0dGVybiA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBjb21wdXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBzaG9ydGhhbmQgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgbWV0aG9kID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIGtleTtcblx0ICAgICAgICB2YXIgdmFsdWU7XG5cdCAgICAgICAgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykge1xuXHQgICAgICAgICAgICB2YXIga2V5VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXHQgICAgICAgICAgICB2YXIgaW5pdCA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcihrZXlUb2tlbi52YWx1ZSkpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnPScpKSB7XG5cdCAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChrZXlUb2tlbik7XG5cdCAgICAgICAgICAgICAgICBzaG9ydGhhbmQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoa2V5VG9rZW4pLCBuZXcgTm9kZS5Bc3NpZ25tZW50UGF0dGVybihpbml0LCBleHByKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoIXRoaXMubWF0Y2goJzonKSkge1xuXHQgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goa2V5VG9rZW4pO1xuXHQgICAgICAgICAgICAgICAgc2hvcnRoYW5kID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gaW5pdDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQocGFyYW1zLCBraW5kKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnOicpO1xuXHQgICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQocGFyYW1zLCBraW5kKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuUHJvcGVydHkoJ2luaXQnLCBrZXksIGNvbXB1dGVkLCB2YWx1ZSwgbWV0aG9kLCBzaG9ydGhhbmQpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlT2JqZWN0UGF0dGVybiA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gW107XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ3snKTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2godGhpcy5wYXJzZVByb3BlcnR5UGF0dGVybihwYXJhbXMsIGtpbmQpKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCd9JykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5PYmplY3RQYXR0ZXJuKHByb3BlcnRpZXMpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlUGF0dGVybiA9IGZ1bmN0aW9uIChwYXJhbXMsIGtpbmQpIHtcblx0ICAgICAgICB2YXIgcGF0dGVybjtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnWycpKSB7XG5cdCAgICAgICAgICAgIHBhdHRlcm4gPSB0aGlzLnBhcnNlQXJyYXlQYXR0ZXJuKHBhcmFtcywga2luZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJ3snKSkge1xuXHQgICAgICAgICAgICBwYXR0ZXJuID0gdGhpcy5wYXJzZU9iamVjdFBhdHRlcm4ocGFyYW1zLCBraW5kKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnbGV0JykgJiYgKGtpbmQgPT09ICdjb25zdCcgfHwga2luZCA9PT0gJ2xldCcpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkLCBtZXNzYWdlc18xLk1lc3NhZ2VzLkxldEluTGV4aWNhbEJpbmRpbmcpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHBhcmFtcy5wdXNoKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgcGF0dGVybiA9IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoa2luZCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBwYXR0ZXJuO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQgPSBmdW5jdGlvbiAocGFyYW1zLCBraW5kKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0VG9rZW4gPSB0aGlzLmxvb2thaGVhZDtcblx0ICAgICAgICB2YXIgcGF0dGVybiA9IHRoaXMucGFyc2VQYXR0ZXJuKHBhcmFtcywga2luZCk7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJz0nKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbik7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xuXHQgICAgICAgICAgICBwYXR0ZXJuID0gdGhpcy5maW5hbGl6ZSh0aGlzLnN0YXJ0Tm9kZShzdGFydFRva2VuKSwgbmV3IE5vZGUuQXNzaWdubWVudFBhdHRlcm4ocGF0dGVybiwgcmlnaHQpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHBhdHRlcm47XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdmFyaWFibGUtc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyID0gZnVuY3Rpb24gKGtpbmQpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLyAmJiB0b2tlbi52YWx1ZSA9PT0gJ3lpZWxkJykge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodG9rZW4udHlwZSAhPT0gMyAvKiBJZGVudGlmaWVyICovKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHRva2VuLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLyAmJiB0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgfHwgdG9rZW4udmFsdWUgIT09ICdsZXQnIHx8IGtpbmQgIT09ICd2YXInKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoKHRoaXMuY29udGV4dC5pc01vZHVsZSB8fCB0aGlzLmNvbnRleHQuYXdhaXQpICYmIHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLyAmJiB0b2tlbi52YWx1ZSA9PT0gJ2F3YWl0Jykge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSWRlbnRpZmllcih0b2tlbi52YWx1ZSkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSBbXTtcblx0ICAgICAgICB2YXIgaWQgPSB0aGlzLnBhcnNlUGF0dGVybihwYXJhbXMsICd2YXInKTtcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBpZC50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQoaWQubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFZhck5hbWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBpbml0ID0gbnVsbDtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnPScpKSB7XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIGluaXQgPSB0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoaWQudHlwZSAhPT0gc3ludGF4XzEuU3ludGF4LklkZW50aWZpZXIgJiYgIW9wdGlvbnMuaW5Gb3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3QoJz0nKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdG9yKGlkLCBpbml0KSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVZhcmlhYmxlRGVjbGFyYXRpb25MaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICB2YXIgb3B0ID0geyBpbkZvcjogb3B0aW9ucy5pbkZvciB9O1xuXHQgICAgICAgIHZhciBsaXN0ID0gW107XG5cdCAgICAgICAgbGlzdC5wdXNoKHRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uKG9wdCkpO1xuXHQgICAgICAgIHdoaWxlICh0aGlzLm1hdGNoKCcsJykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgbGlzdC5wdXNoKHRoaXMucGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uKG9wdCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gbGlzdDtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVmFyaWFibGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3ZhcicpO1xuXHQgICAgICAgIHZhciBkZWNsYXJhdGlvbnMgPSB0aGlzLnBhcnNlVmFyaWFibGVEZWNsYXJhdGlvbkxpc3QoeyBpbkZvcjogZmFsc2UgfSk7XG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbnMsICd2YXInKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZW1wdHktc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRW1wdHlTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnOycpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkVtcHR5U3RhdGVtZW50KCkpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWV4cHJlc3Npb24tc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pZi1zdGF0ZW1lbnRcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VJZkNsYXVzZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiB0aGlzLm1hdGNoS2V5d29yZCgnZnVuY3Rpb24nKSkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUlmU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGNvbnNlcXVlbnQ7XG5cdCAgICAgICAgdmFyIGFsdGVybmF0ZSA9IG51bGw7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpZicpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcoJyk7XG5cdCAgICAgICAgdmFyIHRlc3QgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpICYmIHRoaXMuY29uZmlnLnRvbGVyYW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7XG5cdCAgICAgICAgICAgIGNvbnNlcXVlbnQgPSB0aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLCBuZXcgTm9kZS5FbXB0eVN0YXRlbWVudCgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgICAgIGNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlSWZDbGF1c2UoKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdlbHNlJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICBhbHRlcm5hdGUgPSB0aGlzLnBhcnNlSWZDbGF1c2UoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JZlN0YXRlbWVudCh0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kby13aGlsZS1zdGF0ZW1lbnRcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VEb1doaWxlU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdkbycpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0luSXRlcmF0aW9uID0gdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHRydWU7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uID0gcHJldmlvdXNJbkl0ZXJhdGlvbjtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3doaWxlJyk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICB2YXIgdGVzdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykgJiYgdGhpcy5jb25maWcudG9sZXJhbnQpIHtcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCc7JykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRG9XaGlsZVN0YXRlbWVudChib2R5LCB0ZXN0KSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtd2hpbGUtc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlV2hpbGVTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgYm9keTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3doaWxlJyk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICB2YXIgdGVzdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcpJykgJiYgdGhpcy5jb25maWcudG9sZXJhbnQpIHtcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0aGlzLm5leHRUb2tlbigpKTtcblx0ICAgICAgICAgICAgYm9keSA9IHRoaXMuZmluYWxpemUodGhpcy5jcmVhdGVOb2RlKCksIG5ldyBOb2RlLkVtcHR5U3RhdGVtZW50KCkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcblx0ICAgICAgICAgICAgdmFyIHByZXZpb3VzSW5JdGVyYXRpb24gPSB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb247XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHRydWU7XG5cdCAgICAgICAgICAgIGJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHByZXZpb3VzSW5JdGVyYXRpb247XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLldoaWxlU3RhdGVtZW50KHRlc3QsIGJvZHkpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mb3Itc3RhdGVtZW50XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1mb3ItaW4tYW5kLWZvci1vZi1zdGF0ZW1lbnRzXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRm9yU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBpbml0ID0gbnVsbDtcblx0ICAgICAgICB2YXIgdGVzdCA9IG51bGw7XG5cdCAgICAgICAgdmFyIHVwZGF0ZSA9IG51bGw7XG5cdCAgICAgICAgdmFyIGZvckluID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgbGVmdCwgcmlnaHQ7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ZvcicpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcoJyk7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJzsnKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCd2YXInKSkge1xuXHQgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0FsbG93SW4gPSB0aGlzLmNvbnRleHQuYWxsb3dJbjtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gdGhpcy5wYXJzZVZhcmlhYmxlRGVjbGFyYXRpb25MaXN0KHsgaW5Gb3I6IHRydWUgfSk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dJbiA9IHByZXZpb3VzQWxsb3dJbjtcblx0ICAgICAgICAgICAgICAgIGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID09PSAxICYmIHRoaXMubWF0Y2hLZXl3b3JkKCdpbicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGRlY2wgPSBkZWNsYXJhdGlvbnNbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2wuaW5pdCAmJiAoZGVjbC5pZC50eXBlID09PSBzeW50YXhfMS5TeW50YXguQXJyYXlQYXR0ZXJuIHx8IGRlY2wuaWQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4Lk9iamVjdFBhdHRlcm4gfHwgdGhpcy5jb250ZXh0LnN0cmljdCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuRm9ySW5PZkxvb3BJbml0aWFsaXplciwgJ2Zvci1pbicpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xuXHQgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgZGVjbGFyYXRpb25zWzBdLmluaXQgPT09IG51bGwgJiYgdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuZmluYWxpemUoaW5pdCwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbnMsICd2YXInKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcblx0ICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGluaXQgPSBudWxsO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvckluID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywgJ3ZhcicpKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnOycpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdjb25zdCcpIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCdsZXQnKSkge1xuXHQgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGtpbmQgPSB0aGlzLm5leHRUb2tlbigpLnZhbHVlO1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHRoaXMubG9va2FoZWFkLnZhbHVlID09PSAnaW4nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuZmluYWxpemUoaW5pdCwgbmV3IE5vZGUuSWRlbnRpZmllcihraW5kKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcblx0ICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0luID0gdGhpcy5jb250ZXh0LmFsbG93SW47XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KGtpbmQsIHsgaW5Gb3I6IHRydWUgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBwcmV2aW91c0FsbG93SW47XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgZGVjbGFyYXRpb25zWzBdLmluaXQgPT09IG51bGwgJiYgdGhpcy5tYXRjaEtleXdvcmQoJ2luJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuZmluYWxpemUoaW5pdCwgbmV3IE5vZGUuVmFyaWFibGVEZWNsYXJhdGlvbihkZWNsYXJhdGlvbnMsIGtpbmQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGluaXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiYgZGVjbGFyYXRpb25zWzBdLmluaXQgPT09IG51bGwgJiYgdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdvZicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmZpbmFsaXplKGluaXQsIG5ldyBOb2RlLlZhcmlhYmxlRGVjbGFyYXRpb24oZGVjbGFyYXRpb25zLCBraW5kKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSBpbml0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbml0ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9ySW4gPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbml0ID0gdGhpcy5maW5hbGl6ZShpbml0LCBuZXcgTm9kZS5WYXJpYWJsZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9ucywga2luZCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbml0U3RhcnRUb2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dJbiA9IHRoaXMuY29udGV4dC5hbGxvd0luO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93SW4gPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIGluaXQgPSB0aGlzLmluaGVyaXRDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd0luID0gcHJldmlvdXNBbGxvd0luO1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdpbicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRleHQuaXNBc3NpZ25tZW50VGFyZ2V0IHx8IGluaXQudHlwZSA9PT0gc3ludGF4XzEuU3ludGF4LkFzc2lnbm1lbnRFeHByZXNzaW9uKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRMSFNJbkZvckluKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlaW50ZXJwcmV0RXhwcmVzc2lvbkFzUGF0dGVybihpbml0KTtcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gaW5pdDtcblx0ICAgICAgICAgICAgICAgICAgICByaWdodCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5pdCA9IG51bGw7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ29mJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pc0Fzc2lnbm1lbnRUYXJnZXQgfHwgaW5pdC50eXBlID09PSBzeW50YXhfMS5TeW50YXguQXNzaWdubWVudEV4cHJlc3Npb24pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZUVycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSW52YWxpZExIU0luRm9yTG9vcCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWludGVycHJldEV4cHJlc3Npb25Bc1BhdHRlcm4oaW5pdCk7XG5cdCAgICAgICAgICAgICAgICAgICAgbGVmdCA9IGluaXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgICAgICAgICBpbml0ID0gbnVsbDtcblx0ICAgICAgICAgICAgICAgICAgICBmb3JJbiA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJywnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdFNlcSA9IFtpbml0XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMubWF0Y2goJywnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRTZXEucHVzaCh0aGlzLmlzb2xhdGVDb3ZlckdyYW1tYXIodGhpcy5wYXJzZUFzc2lnbm1lbnRFeHByZXNzaW9uKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5pdCA9IHRoaXMuZmluYWxpemUodGhpcy5zdGFydE5vZGUoaW5pdFN0YXJ0VG9rZW4pLCBuZXcgTm9kZS5TZXF1ZW5jZUV4cHJlc3Npb24oaW5pdFNlcSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnOycpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCc7JykpIHtcblx0ICAgICAgICAgICAgICAgIHRlc3QgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCc7Jyk7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpKSB7XG5cdCAgICAgICAgICAgICAgICB1cGRhdGUgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBib2R5O1xuXHQgICAgICAgIGlmICghdGhpcy5tYXRjaCgnKScpICYmIHRoaXMuY29uZmlnLnRvbGVyYW50KSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7XG5cdCAgICAgICAgICAgIGJvZHkgPSB0aGlzLmZpbmFsaXplKHRoaXMuY3JlYXRlTm9kZSgpLCBuZXcgTm9kZS5FbXB0eVN0YXRlbWVudCgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgICAgIHZhciBwcmV2aW91c0luSXRlcmF0aW9uID0gdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSB0cnVlO1xuXHQgICAgICAgICAgICBib2R5ID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VTdGF0ZW1lbnQpO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb24gPSBwcmV2aW91c0luSXRlcmF0aW9uO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykgP1xuXHQgICAgICAgICAgICB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZvclN0YXRlbWVudChpbml0LCB0ZXN0LCB1cGRhdGUsIGJvZHkpKSA6XG5cdCAgICAgICAgICAgIGZvckluID8gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5Gb3JJblN0YXRlbWVudChsZWZ0LCByaWdodCwgYm9keSkpIDpcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRm9yT2ZTdGF0ZW1lbnQobGVmdCwgcmlnaHQsIGJvZHkpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jb250aW51ZS1zdGF0ZW1lbnRcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDb250aW51ZVN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnY29udGludWUnKTtcblx0ICAgICAgICB2YXIgbGFiZWwgPSBudWxsO1xuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcblx0ICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXHQgICAgICAgICAgICBsYWJlbCA9IGlkO1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gJyQnICsgaWQubmFtZTtcblx0ICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LCBrZXkpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5Vbmtub3duTGFiZWwsIGlkLm5hbWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgIGlmIChsYWJlbCA9PT0gbnVsbCAmJiAhdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLklsbGVnYWxDb250aW51ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNvbnRpbnVlU3RhdGVtZW50KGxhYmVsKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYnJlYWstc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQnJlYWtTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2JyZWFrJyk7XG5cdCAgICAgICAgdmFyIGxhYmVsID0gbnVsbDtcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovICYmICF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yKSB7XG5cdCAgICAgICAgICAgIHZhciBpZCA9IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgdmFyIGtleSA9ICckJyArIGlkLm5hbWU7XG5cdCAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY29udGV4dC5sYWJlbFNldCwga2V5KSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuVW5rbm93bkxhYmVsLCBpZC5uYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBsYWJlbCA9IGlkO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcblx0ICAgICAgICBpZiAobGFiZWwgPT09IG51bGwgJiYgIXRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiAmJiAhdGhpcy5jb250ZXh0LmluU3dpdGNoKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLklsbGVnYWxCcmVhayk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkJyZWFrU3RhdGVtZW50KGxhYmVsKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmV0dXJuLXN0YXRlbWVudFxuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVJldHVyblN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsUmV0dXJuKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3JldHVybicpO1xuXHQgICAgICAgIHZhciBoYXNBcmd1bWVudCA9ICghdGhpcy5tYXRjaCgnOycpICYmICF0aGlzLm1hdGNoKCd9JykgJiZcblx0ICAgICAgICAgICAgIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IgJiYgdGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHx8XG5cdCAgICAgICAgICAgIHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDggLyogU3RyaW5nTGl0ZXJhbCAqLyB8fFxuXHQgICAgICAgICAgICB0aGlzLmxvb2thaGVhZC50eXBlID09PSAxMCAvKiBUZW1wbGF0ZSAqLztcblx0ICAgICAgICB2YXIgYXJndW1lbnQgPSBoYXNBcmd1bWVudCA/IHRoaXMucGFyc2VFeHByZXNzaW9uKCkgOiBudWxsO1xuXHQgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlJldHVyblN0YXRlbWVudChhcmd1bWVudCkpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXdpdGgtc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlV2l0aFN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RNb2RlV2l0aCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGJvZHk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd3aXRoJyk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICB2YXIgb2JqZWN0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJyknKSAmJiB0aGlzLmNvbmZpZy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xuXHQgICAgICAgICAgICBib2R5ID0gdGhpcy5maW5hbGl6ZSh0aGlzLmNyZWF0ZU5vZGUoKSwgbmV3IE5vZGUuRW1wdHlTdGF0ZW1lbnQoKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xuXHQgICAgICAgICAgICBib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudCgpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5XaXRoU3RhdGVtZW50KG9iamVjdCwgYm9keSkpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN3aXRjaC1zdGF0ZW1lbnRcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTd2l0Y2hDYXNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIHRlc3Q7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0JykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgdGVzdCA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2Nhc2UnKTtcblx0ICAgICAgICAgICAgdGVzdCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCc6Jyk7XG5cdCAgICAgICAgdmFyIGNvbnNlcXVlbnQgPSBbXTtcblx0ICAgICAgICB3aGlsZSAodHJ1ZSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnfScpIHx8IHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0JykgfHwgdGhpcy5tYXRjaEtleXdvcmQoJ2Nhc2UnKSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY29uc2VxdWVudC5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuU3dpdGNoQ2FzZSh0ZXN0LCBjb25zZXF1ZW50KSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVN3aXRjaFN0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc3dpdGNoJyk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICB2YXIgZGlzY3JpbWluYW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgnKScpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0luU3dpdGNoID0gdGhpcy5jb250ZXh0LmluU3dpdGNoO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pblN3aXRjaCA9IHRydWU7XG5cdCAgICAgICAgdmFyIGNhc2VzID0gW107XG5cdCAgICAgICAgdmFyIGRlZmF1bHRGb3VuZCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd7Jyk7XG5cdCAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIGNsYXVzZSA9IHRoaXMucGFyc2VTd2l0Y2hDYXNlKCk7XG5cdCAgICAgICAgICAgIGlmIChjbGF1c2UudGVzdCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRGb3VuZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLk11bHRpcGxlRGVmYXVsdHNJblN3aXRjaCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0Rm91bmQgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNhc2VzLnB1c2goY2xhdXNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5Td2l0Y2ggPSBwcmV2aW91c0luU3dpdGNoO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlN3aXRjaFN0YXRlbWVudChkaXNjcmltaW5hbnQsIGNhc2VzKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGFiZWxsZWQtc3RhdGVtZW50c1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUxhYmVsbGVkU3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuXHQgICAgICAgIHZhciBzdGF0ZW1lbnQ7XG5cdCAgICAgICAgaWYgKChleHByLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5JZGVudGlmaWVyKSAmJiB0aGlzLm1hdGNoKCc6JykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgdmFyIGlkID0gZXhwcjtcblx0ICAgICAgICAgICAgdmFyIGtleSA9ICckJyArIGlkLm5hbWU7XG5cdCAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb250ZXh0LmxhYmVsU2V0LCBrZXkpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5SZWRlY2xhcmF0aW9uLCAnTGFiZWwnLCBpZC5uYW1lKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQubGFiZWxTZXRba2V5XSA9IHRydWU7XG5cdCAgICAgICAgICAgIHZhciBib2R5ID0gdm9pZCAwO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2NsYXNzJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgICAgICAgICAgYm9keSA9IHRoaXMucGFyc2VDbGFzc0RlY2xhcmF0aW9uKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2Z1bmN0aW9uJykpIHtcblx0ICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChkZWNsYXJhdGlvbi5nZW5lcmF0b3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLkdlbmVyYXRvckluTGVnYWN5Q29udGV4dCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBib2R5ID0gZGVjbGFyYXRpb247XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQubGFiZWxTZXRba2V5XTtcblx0ICAgICAgICAgICAgc3RhdGVtZW50ID0gbmV3IE5vZGUuTGFiZWxlZFN0YXRlbWVudChpZCwgYm9keSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0aGlzLmNvbnN1bWVTZW1pY29sb24oKTtcblx0ICAgICAgICAgICAgc3RhdGVtZW50ID0gbmV3IE5vZGUuRXhwcmVzc2lvblN0YXRlbWVudChleHByKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgc3RhdGVtZW50KTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10aHJvdy1zdGF0ZW1lbnRcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VUaHJvd1N0YXRlbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgndGhyb3cnKTtcblx0ICAgICAgICBpZiAodGhpcy5oYXNMaW5lVGVybWluYXRvcikge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5OZXdsaW5lQWZ0ZXJUaHJvdyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBhcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuVGhyb3dTdGF0ZW1lbnQoYXJndW1lbnQpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10cnktc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2F0Y2hDbGF1c2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2NhdGNoJyk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaCgnKScpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcGFyYW1zID0gW107XG5cdCAgICAgICAgdmFyIHBhcmFtID0gdGhpcy5wYXJzZVBhdHRlcm4ocGFyYW1zKTtcblx0ICAgICAgICB2YXIgcGFyYW1NYXAgPSB7fTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gJyQnICsgcGFyYW1zW2ldLnZhbHVlO1xuXHQgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmFtTWFwLCBrZXkpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5EdXBsaWNhdGVCaW5kaW5nLCBwYXJhbXNbaV0udmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHBhcmFtTWFwW2tleV0gPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCAmJiBwYXJhbS50eXBlID09PSBzeW50YXhfMS5TeW50YXguSWRlbnRpZmllcikge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQocGFyYW0ubmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdENhdGNoVmFyaWFibGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcpJyk7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlQmxvY2soKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5DYXRjaENsYXVzZShwYXJhbSwgYm9keSkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VGaW5hbGx5Q2xhdXNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZmluYWxseScpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLnBhcnNlQmxvY2soKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlVHJ5U3RhdGVtZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0cnknKTtcblx0ICAgICAgICB2YXIgYmxvY2sgPSB0aGlzLnBhcnNlQmxvY2soKTtcblx0ICAgICAgICB2YXIgaGFuZGxlciA9IHRoaXMubWF0Y2hLZXl3b3JkKCdjYXRjaCcpID8gdGhpcy5wYXJzZUNhdGNoQ2xhdXNlKCkgOiBudWxsO1xuXHQgICAgICAgIHZhciBmaW5hbGl6ZXIgPSB0aGlzLm1hdGNoS2V5d29yZCgnZmluYWxseScpID8gdGhpcy5wYXJzZUZpbmFsbHlDbGF1c2UoKSA6IG51bGw7XG5cdCAgICAgICAgaWYgKCFoYW5kbGVyICYmICFmaW5hbGl6ZXIpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuTm9DYXRjaE9yRmluYWxseSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlRyeVN0YXRlbWVudChibG9jaywgaGFuZGxlciwgZmluYWxpemVyKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZGVidWdnZXItc3RhdGVtZW50XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRGVidWdnZXJTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2RlYnVnZ2VyJyk7XG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRGVidWdnZXJTdGF0ZW1lbnQoKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS1zdGF0ZW1lbnRzLWFuZC1kZWNsYXJhdGlvbnNcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXRlbWVudDtcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMubG9va2FoZWFkLnR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSAxIC8qIEJvb2xlYW5MaXRlcmFsICovOlxuXHQgICAgICAgICAgICBjYXNlIDUgLyogTnVsbExpdGVyYWwgKi86XG5cdCAgICAgICAgICAgIGNhc2UgNiAvKiBOdW1lcmljTGl0ZXJhbCAqLzpcblx0ICAgICAgICAgICAgY2FzZSA4IC8qIFN0cmluZ0xpdGVyYWwgKi86XG5cdCAgICAgICAgICAgIGNhc2UgMTAgLyogVGVtcGxhdGUgKi86XG5cdCAgICAgICAgICAgIGNhc2UgOSAvKiBSZWd1bGFyRXhwcmVzc2lvbiAqLzpcblx0ICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSA3IC8qIFB1bmN0dWF0b3IgKi86XG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmxvb2thaGVhZC52YWx1ZTtcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ3snKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUJsb2NrKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gJygnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnOycpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAzIC8qIElkZW50aWZpZXIgKi86XG5cdCAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpID8gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24oKSA6IHRoaXMucGFyc2VMYWJlbGxlZFN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgNCAvKiBLZXl3b3JkICovOlxuXHQgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxvb2thaGVhZC52YWx1ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JyZWFrJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUJyZWFrU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnRpbnVlJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUNvbnRpbnVlU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlYnVnZ2VyJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZURlYnVnZ2VyU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZURvV2hpbGVTdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnZm9yJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUZvclN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdmdW5jdGlvbic6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VGdW5jdGlvbkRlY2xhcmF0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lmJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUlmU3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JldHVybic6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3dpdGNoJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVN3aXRjaFN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd0aHJvdyc6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VUaHJvd1N0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd0cnknOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Zhcic6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VWYXJpYWJsZVN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd3aGlsZSc6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMucGFyc2VXaGlsZVN0YXRlbWVudCgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd3aXRoJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZVdpdGhTdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIHN0YXRlbWVudCA9IHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5sb29rYWhlYWQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gc3RhdGVtZW50O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWRlZmluaXRpb25zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd7Jyk7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlRGlyZWN0aXZlUHJvbG9ndWVzKCk7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzTGFiZWxTZXQgPSB0aGlzLmNvbnRleHQubGFiZWxTZXQ7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5JdGVyYXRpb24gPSB0aGlzLmNvbnRleHQuaW5JdGVyYXRpb247XG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5Td2l0Y2ggPSB0aGlzLmNvbnRleHQuaW5Td2l0Y2g7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzSW5GdW5jdGlvbkJvZHkgPSB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmxhYmVsU2V0ID0ge307XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluSXRlcmF0aW9uID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluU3dpdGNoID0gZmFsc2U7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5ID0gdHJ1ZTtcblx0ICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgYm9keS5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQubGFiZWxTZXQgPSBwcmV2aW91c0xhYmVsU2V0O1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5pbkl0ZXJhdGlvbiA9IHByZXZpb3VzSW5JdGVyYXRpb247XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmluU3dpdGNoID0gcHJldmlvdXNJblN3aXRjaDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaW5GdW5jdGlvbkJvZHkgPSBwcmV2aW91c0luRnVuY3Rpb25Cb2R5O1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkJsb2NrU3RhdGVtZW50KGJvZHkpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnZhbGlkYXRlUGFyYW0gPSBmdW5jdGlvbiAob3B0aW9ucywgcGFyYW0sIG5hbWUpIHtcblx0ICAgICAgICB2YXIga2V5ID0gJyQnICsgbmFtZTtcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0ZWQgPSBwYXJhbTtcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5wYXJhbVNldCwga2V5KSkge1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3RlZCA9IHBhcmFtO1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAoIW9wdGlvbnMuZmlyc3RSZXN0cmljdGVkKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZChuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5maXJzdFJlc3RyaWN0ZWQgPSBwYXJhbTtcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0UGFyYW1OYW1lO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2Nhbm5lci5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQobmFtZSkpIHtcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyc3RSZXN0cmljdGVkID0gcGFyYW07XG5cdCAgICAgICAgICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucy5wYXJhbVNldCwga2V5KSkge1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5zdHJpY3RlZCA9IHBhcmFtO1xuXHQgICAgICAgICAgICAgICAgb3B0aW9ucy5tZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RQYXJhbUR1cGU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICAgICAgICBpZiAodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucy5wYXJhbVNldCwga2V5LCB7IHZhbHVlOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgb3B0aW9ucy5wYXJhbVNldFtrZXldID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVJlc3RFbGVtZW50ID0gZnVuY3Rpb24gKHBhcmFtcykge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJy4uLicpO1xuXHQgICAgICAgIHZhciBhcmcgPSB0aGlzLnBhcnNlUGF0dGVybihwYXJhbXMpO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoKCc9JykpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuRGVmYXVsdFJlc3RQYXJhbWV0ZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJyknKSkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5QYXJhbWV0ZXJBZnRlclJlc3RQYXJhbWV0ZXIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5SZXN0RWxlbWVudChhcmcpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRm9ybWFsUGFyYW1ldGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgICAgICB2YXIgcGFyYW1zID0gW107XG5cdCAgICAgICAgdmFyIHBhcmFtID0gdGhpcy5tYXRjaCgnLi4uJykgPyB0aGlzLnBhcnNlUmVzdEVsZW1lbnQocGFyYW1zKSA6IHRoaXMucGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQocGFyYW1zKTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICB0aGlzLnZhbGlkYXRlUGFyYW0ob3B0aW9ucywgcGFyYW1zW2ldLCBwYXJhbXNbaV0udmFsdWUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBvcHRpb25zLnNpbXBsZSA9IG9wdGlvbnMuc2ltcGxlICYmIChwYXJhbSBpbnN0YW5jZW9mIE5vZGUuSWRlbnRpZmllcik7XG5cdCAgICAgICAgb3B0aW9ucy5wYXJhbXMucHVzaChwYXJhbSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUZvcm1hbFBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoZmlyc3RSZXN0cmljdGVkKSB7XG5cdCAgICAgICAgdmFyIG9wdGlvbnM7XG5cdCAgICAgICAgb3B0aW9ucyA9IHtcblx0ICAgICAgICAgICAgc2ltcGxlOiB0cnVlLFxuXHQgICAgICAgICAgICBwYXJhbXM6IFtdLFxuXHQgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQ6IGZpcnN0UmVzdHJpY3RlZFxuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJygnKTtcblx0ICAgICAgICBpZiAoIXRoaXMubWF0Y2goJyknKSkge1xuXHQgICAgICAgICAgICBvcHRpb25zLnBhcmFtU2V0ID0ge307XG5cdCAgICAgICAgICAgIHdoaWxlICh0aGlzLmxvb2thaGVhZC50eXBlICE9PSAyIC8qIEVPRiAqLykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcihvcHRpb25zKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcpJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnKScpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJyknKTtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICBzaW1wbGU6IG9wdGlvbnMuc2ltcGxlLFxuXHQgICAgICAgICAgICBwYXJhbXM6IG9wdGlvbnMucGFyYW1zLFxuXHQgICAgICAgICAgICBzdHJpY3RlZDogb3B0aW9ucy5zdHJpY3RlZCxcblx0ICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkOiBvcHRpb25zLmZpcnN0UmVzdHJpY3RlZCxcblx0ICAgICAgICAgICAgbWVzc2FnZTogb3B0aW9ucy5tZXNzYWdlXG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLm1hdGNoQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzeW5jJyk7XG5cdCAgICAgICAgaWYgKG1hdGNoKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuc2Nhbm5lci5zYXZlU3RhdGUoKTtcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLnNjYW5Db21tZW50cygpO1xuXHQgICAgICAgICAgICB2YXIgbmV4dCA9IHRoaXMuc2Nhbm5lci5sZXgoKTtcblx0ICAgICAgICAgICAgdGhpcy5zY2FubmVyLnJlc3RvcmVTdGF0ZShzdGF0ZSk7XG5cdCAgICAgICAgICAgIG1hdGNoID0gKHN0YXRlLmxpbmVOdW1iZXIgPT09IG5leHQubGluZU51bWJlcikgJiYgKG5leHQudHlwZSA9PT0gNCAvKiBLZXl3b3JkICovKSAmJiAobmV4dC52YWx1ZSA9PT0gJ2Z1bmN0aW9uJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBtYXRjaDtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChpZGVudGlmaWVySXNPcHRpb25hbCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGlzQXN5bmMgPSB0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzeW5jJyk7XG5cdCAgICAgICAgaWYgKGlzQXN5bmMpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmdW5jdGlvbicpO1xuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IGlzQXN5bmMgPyBmYWxzZSA6IHRoaXMubWF0Y2goJyonKTtcblx0ICAgICAgICBpZiAoaXNHZW5lcmF0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG1lc3NhZ2U7XG5cdCAgICAgICAgdmFyIGlkID0gbnVsbDtcblx0ICAgICAgICB2YXIgZmlyc3RSZXN0cmljdGVkID0gbnVsbDtcblx0ICAgICAgICBpZiAoIWlkZW50aWZpZXJJc09wdGlvbmFsIHx8ICF0aGlzLm1hdGNoKCcoJykpIHtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgICAgIGlkID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0LnN0cmljdCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci5pc1Jlc3RyaWN0ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odG9rZW4sIG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZCh0b2tlbi52YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RGdW5jdGlvbk5hbWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLnNjYW5uZXIuaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkKHRva2VuLnZhbHVlKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xuXHQgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdFJlc2VydmVkV29yZDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd0F3YWl0ID0gdGhpcy5jb250ZXh0LmF3YWl0O1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSBpc0FzeW5jO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gIWlzR2VuZXJhdG9yO1xuXHQgICAgICAgIHZhciBmb3JtYWxQYXJhbWV0ZXJzID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoZmlyc3RSZXN0cmljdGVkKTtcblx0ICAgICAgICB2YXIgcGFyYW1zID0gZm9ybWFsUGFyYW1ldGVycy5wYXJhbXM7XG5cdCAgICAgICAgdmFyIHN0cmljdGVkID0gZm9ybWFsUGFyYW1ldGVycy5zdHJpY3RlZDtcblx0ICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSBmb3JtYWxQYXJhbWV0ZXJzLmZpcnN0UmVzdHJpY3RlZDtcblx0ICAgICAgICBpZiAoZm9ybWFsUGFyYW1ldGVycy5tZXNzYWdlKSB7XG5cdCAgICAgICAgICAgIG1lc3NhZ2UgPSBmb3JtYWxQYXJhbWV0ZXJzLm1lc3NhZ2U7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dTdHJpY3REaXJlY3RpdmUgPSB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmU7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gZm9ybWFsUGFyYW1ldGVycy5zaW1wbGU7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlRnVuY3Rpb25Tb3VyY2VFbGVtZW50cygpO1xuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIGZpcnN0UmVzdHJpY3RlZCkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKGZpcnN0UmVzdHJpY3RlZCwgbWVzc2FnZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh0aGlzLmNvbnRleHQuc3RyaWN0ICYmIHN0cmljdGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oc3RyaWN0ZWQsIG1lc3NhZ2UpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93U3RyaWN0RGlyZWN0aXZlID0gcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYXdhaXQgPSBwcmV2aW91c0FsbG93QXdhaXQ7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBwcmV2aW91c0FsbG93WWllbGQ7XG5cdCAgICAgICAgcmV0dXJuIGlzQXN5bmMgPyB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkFzeW5jRnVuY3Rpb25EZWNsYXJhdGlvbihpZCwgcGFyYW1zLCBib2R5KSkgOlxuXHQgICAgICAgICAgICB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRGVjbGFyYXRpb24oaWQsIHBhcmFtcywgYm9keSwgaXNHZW5lcmF0b3IpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRnVuY3Rpb25FeHByZXNzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGlzQXN5bmMgPSB0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzeW5jJyk7XG5cdCAgICAgICAgaWYgKGlzQXN5bmMpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmdW5jdGlvbicpO1xuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IGlzQXN5bmMgPyBmYWxzZSA6IHRoaXMubWF0Y2goJyonKTtcblx0ICAgICAgICBpZiAoaXNHZW5lcmF0b3IpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG1lc3NhZ2U7XG5cdCAgICAgICAgdmFyIGlkID0gbnVsbDtcblx0ICAgICAgICB2YXIgZmlyc3RSZXN0cmljdGVkO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93QXdhaXQgPSB0aGlzLmNvbnRleHQuYXdhaXQ7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IGlzQXN5bmM7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSAhaXNHZW5lcmF0b3I7XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCcoJykpIHtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgICAgIGlkID0gKCF0aGlzLmNvbnRleHQuc3RyaWN0ICYmICFpc0dlbmVyYXRvciAmJiB0aGlzLm1hdGNoS2V5d29yZCgneWllbGQnKSkgPyB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKSA6IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjYW5uZXIuaXNSZXN0cmljdGVkV29yZCh0b2tlbi52YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKHRva2VuLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdEZ1bmN0aW9uTmFtZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2FubmVyLmlzUmVzdHJpY3RlZFdvcmQodG9rZW4udmFsdWUpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZmlyc3RSZXN0cmljdGVkID0gdG9rZW47XG5cdCAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzXzEuTWVzc2FnZXMuU3RyaWN0RnVuY3Rpb25OYW1lO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5zY2FubmVyLmlzU3RyaWN0TW9kZVJlc2VydmVkV29yZCh0b2tlbi52YWx1ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmaXJzdFJlc3RyaWN0ZWQgPSB0b2tlbjtcblx0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5TdHJpY3RSZXNlcnZlZFdvcmQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGZvcm1hbFBhcmFtZXRlcnMgPSB0aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycyhmaXJzdFJlc3RyaWN0ZWQpO1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSBmb3JtYWxQYXJhbWV0ZXJzLnBhcmFtcztcblx0ICAgICAgICB2YXIgc3RyaWN0ZWQgPSBmb3JtYWxQYXJhbWV0ZXJzLnN0cmljdGVkO1xuXHQgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IGZvcm1hbFBhcmFtZXRlcnMuZmlyc3RSZXN0cmljdGVkO1xuXHQgICAgICAgIGlmIChmb3JtYWxQYXJhbWV0ZXJzLm1lc3NhZ2UpIHtcblx0ICAgICAgICAgICAgbWVzc2FnZSA9IGZvcm1hbFBhcmFtZXRlcnMubWVzc2FnZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIHByZXZpb3VzU3RyaWN0ID0gdGhpcy5jb250ZXh0LnN0cmljdDtcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1N0cmljdERpcmVjdGl2ZSA9IHRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBmb3JtYWxQYXJhbWV0ZXJzLnNpbXBsZTtcblx0ICAgICAgICB2YXIgYm9keSA9IHRoaXMucGFyc2VGdW5jdGlvblNvdXJjZUVsZW1lbnRzKCk7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgZmlyc3RSZXN0cmljdGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oZmlyc3RSZXN0cmljdGVkLCBtZXNzYWdlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5zdHJpY3QgJiYgc3RyaWN0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbihzdHJpY3RlZCwgbWVzc2FnZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuY29udGV4dC5zdHJpY3QgPSBwcmV2aW91c1N0cmljdDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dTdHJpY3REaXJlY3RpdmUgPSBwcmV2aW91c0FsbG93U3RyaWN0RGlyZWN0aXZlO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hd2FpdCA9IHByZXZpb3VzQWxsb3dBd2FpdDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcblx0ICAgICAgICByZXR1cm4gaXNBc3luYyA/IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24oaWQsIHBhcmFtcywgYm9keSkpIDpcblx0ICAgICAgICAgICAgdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5GdW5jdGlvbkV4cHJlc3Npb24oaWQsIHBhcmFtcywgYm9keSwgaXNHZW5lcmF0b3IpKTtcblx0ICAgIH07XG5cdCAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1kaXJlY3RpdmUtcHJvbG9ndWVzLWFuZC10aGUtdXNlLXN0cmljdC1kaXJlY3RpdmVcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VEaXJlY3RpdmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG5cdCAgICAgICAgdmFyIGRpcmVjdGl2ZSA9IChleHByLnR5cGUgPT09IHN5bnRheF8xLlN5bnRheC5MaXRlcmFsKSA/IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pLnNsaWNlKDEsIC0xKSA6IG51bGw7XG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgZGlyZWN0aXZlID8gbmV3IE5vZGUuRGlyZWN0aXZlKGV4cHIsIGRpcmVjdGl2ZSkgOiBuZXcgTm9kZS5FeHByZXNzaW9uU3RhdGVtZW50KGV4cHIpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlRGlyZWN0aXZlUHJvbG9ndWVzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBmaXJzdFJlc3RyaWN0ZWQgPSBudWxsO1xuXHQgICAgICAgIHZhciBib2R5ID0gW107XG5cdCAgICAgICAgd2hpbGUgKHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9PSA4IC8qIFN0cmluZ0xpdGVyYWwgKi8pIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZW1lbnQgPSB0aGlzLnBhcnNlRGlyZWN0aXZlKCk7XG5cdCAgICAgICAgICAgIGJvZHkucHVzaChzdGF0ZW1lbnQpO1xuXHQgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gc3RhdGVtZW50LmRpcmVjdGl2ZTtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkaXJlY3RpdmUgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoZGlyZWN0aXZlID09PSAndXNlIHN0cmljdCcpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJpY3QgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgaWYgKGZpcnN0UmVzdHJpY3RlZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4oZmlyc3RSZXN0cmljdGVkLCBtZXNzYWdlc18xLk1lc3NhZ2VzLlN0cmljdE9jdGFsTGl0ZXJhbCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udGV4dC5hbGxvd1N0cmljdERpcmVjdGl2ZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4odG9rZW4sIG1lc3NhZ2VzXzEuTWVzc2FnZXMuSWxsZWdhbExhbmd1YWdlTW9kZURpcmVjdGl2ZSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWZpcnN0UmVzdHJpY3RlZCAmJiB0b2tlbi5vY3RhbCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0UmVzdHJpY3RlZCA9IHRva2VuO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBib2R5O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW1ldGhvZC1kZWZpbml0aW9uc1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5xdWFsaWZpZWRQcm9wZXJ0eU5hbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcblx0ICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSAzIC8qIElkZW50aWZpZXIgKi86XG5cdCAgICAgICAgICAgIGNhc2UgOCAvKiBTdHJpbmdMaXRlcmFsICovOlxuXHQgICAgICAgICAgICBjYXNlIDEgLyogQm9vbGVhbkxpdGVyYWwgKi86XG5cdCAgICAgICAgICAgIGNhc2UgNSAvKiBOdWxsTGl0ZXJhbCAqLzpcblx0ICAgICAgICAgICAgY2FzZSA2IC8qIE51bWVyaWNMaXRlcmFsICovOlxuXHQgICAgICAgICAgICBjYXNlIDQgLyogS2V5d29yZCAqLzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICBjYXNlIDcgLyogUHVuY3R1YXRvciAqLzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbi52YWx1ZSA9PT0gJ1snO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlR2V0dGVyTWV0aG9kID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGlzR2VuZXJhdG9yID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gIWlzR2VuZXJhdG9yO1xuXHQgICAgICAgIHZhciBmb3JtYWxQYXJhbWV0ZXJzID0gdGhpcy5wYXJzZUZvcm1hbFBhcmFtZXRlcnMoKTtcblx0ICAgICAgICBpZiAoZm9ybWFsUGFyYW1ldGVycy5wYXJhbXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5CYWRHZXR0ZXJBcml0eSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBtZXRob2QgPSB0aGlzLnBhcnNlUHJvcGVydHlNZXRob2QoZm9ybWFsUGFyYW1ldGVycyk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBwcmV2aW91c0FsbG93WWllbGQ7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRnVuY3Rpb25FeHByZXNzaW9uKG51bGwsIGZvcm1hbFBhcmFtZXRlcnMucGFyYW1zLCBtZXRob2QsIGlzR2VuZXJhdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZVNldHRlck1ldGhvZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBpc0dlbmVyYXRvciA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBwcmV2aW91c0FsbG93WWllbGQgPSB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZDtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9ICFpc0dlbmVyYXRvcjtcblx0ICAgICAgICB2YXIgZm9ybWFsUGFyYW1ldGVycyA9IHRoaXMucGFyc2VGb3JtYWxQYXJhbWV0ZXJzKCk7XG5cdCAgICAgICAgaWYgKGZvcm1hbFBhcmFtZXRlcnMucGFyYW1zLmxlbmd0aCAhPT0gMSkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5CYWRTZXR0ZXJBcml0eSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGZvcm1hbFBhcmFtZXRlcnMucGFyYW1zWzBdIGluc3RhbmNlb2YgTm9kZS5SZXN0RWxlbWVudCkge1xuXHQgICAgICAgICAgICB0aGlzLnRvbGVyYXRlRXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5CYWRTZXR0ZXJSZXN0UGFyYW1ldGVyKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChmb3JtYWxQYXJhbWV0ZXJzKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5GdW5jdGlvbkV4cHJlc3Npb24obnVsbCwgZm9ybWFsUGFyYW1ldGVycy5wYXJhbXMsIG1ldGhvZCwgaXNHZW5lcmF0b3IpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlR2VuZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGlzR2VuZXJhdG9yID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgcHJldmlvdXNBbGxvd1lpZWxkID0gdGhpcy5jb250ZXh0LmFsbG93WWllbGQ7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSB0cnVlO1xuXHQgICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnBhcnNlRm9ybWFsUGFyYW1ldGVycygpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZChwYXJhbXMpO1xuXHQgICAgICAgIHRoaXMuY29udGV4dC5hbGxvd1lpZWxkID0gcHJldmlvdXNBbGxvd1lpZWxkO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkZ1bmN0aW9uRXhwcmVzc2lvbihudWxsLCBwYXJhbXMucGFyYW1zLCBtZXRob2QsIGlzR2VuZXJhdG9yKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2VuZXJhdG9yLWZ1bmN0aW9uLWRlZmluaXRpb25zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLmlzU3RhcnRPZkV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmxvb2thaGVhZC52YWx1ZTtcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMubG9va2FoZWFkLnR5cGUpIHtcblx0ICAgICAgICAgICAgY2FzZSA3IC8qIFB1bmN0dWF0b3IgKi86XG5cdCAgICAgICAgICAgICAgICBzdGFydCA9ICh2YWx1ZSA9PT0gJ1snKSB8fCAodmFsdWUgPT09ICcoJykgfHwgKHZhbHVlID09PSAneycpIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgKHZhbHVlID09PSAnKycpIHx8ICh2YWx1ZSA9PT0gJy0nKSB8fFxuXHQgICAgICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJyEnKSB8fCAodmFsdWUgPT09ICd+JykgfHxcblx0ICAgICAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcrKycpIHx8ICh2YWx1ZSA9PT0gJy0tJykgfHxcblx0ICAgICAgICAgICAgICAgICAgICAodmFsdWUgPT09ICcvJykgfHwgKHZhbHVlID09PSAnLz0nKTsgLy8gcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWxcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlIDQgLyogS2V5d29yZCAqLzpcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHZhbHVlID09PSAnY2xhc3MnKSB8fCAodmFsdWUgPT09ICdkZWxldGUnKSB8fFxuXHQgICAgICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykgfHwgKHZhbHVlID09PSAnbGV0JykgfHwgKHZhbHVlID09PSAnbmV3JykgfHxcblx0ICAgICAgICAgICAgICAgICAgICAodmFsdWUgPT09ICdzdXBlcicpIHx8ICh2YWx1ZSA9PT0gJ3RoaXMnKSB8fCAodmFsdWUgPT09ICd0eXBlb2YnKSB8fFxuXHQgICAgICAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gJ3ZvaWQnKSB8fCAodmFsdWUgPT09ICd5aWVsZCcpO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHN0YXJ0O1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VZaWVsZEV4cHJlc3Npb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3lpZWxkJyk7XG5cdCAgICAgICAgdmFyIGFyZ3VtZW50ID0gbnVsbDtcblx0ICAgICAgICB2YXIgZGVsZWdhdGUgPSBmYWxzZTtcblx0ICAgICAgICBpZiAoIXRoaXMuaGFzTGluZVRlcm1pbmF0b3IpIHtcblx0ICAgICAgICAgICAgdmFyIHByZXZpb3VzQWxsb3dZaWVsZCA9IHRoaXMuY29udGV4dC5hbGxvd1lpZWxkO1xuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICBkZWxlZ2F0ZSA9IHRoaXMubWF0Y2goJyonKTtcblx0ICAgICAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgYXJndW1lbnQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzU3RhcnRPZkV4cHJlc3Npb24oKSkge1xuXHQgICAgICAgICAgICAgICAgYXJndW1lbnQgPSB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNvbnRleHQuYWxsb3dZaWVsZCA9IHByZXZpb3VzQWxsb3dZaWVsZDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuWWllbGRFeHByZXNzaW9uKGFyZ3VtZW50LCBkZWxlZ2F0ZSkpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNsYXNzLWRlZmluaXRpb25zXG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2xhc3NFbGVtZW50ID0gZnVuY3Rpb24gKGhhc0NvbnN0cnVjdG9yKSB7XG5cdCAgICAgICAgdmFyIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIga2luZCA9ICcnO1xuXHQgICAgICAgIHZhciBrZXkgPSBudWxsO1xuXHQgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7XG5cdCAgICAgICAgdmFyIGNvbXB1dGVkID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBpc1N0YXRpYyA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBpc0FzeW5jID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2goJyonKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICB2YXIgaWQgPSBrZXk7XG5cdCAgICAgICAgICAgIGlmIChpZC5uYW1lID09PSAnc3RhdGljJyAmJiAodGhpcy5xdWFsaWZpZWRQcm9wZXJ0eU5hbWUodGhpcy5sb29rYWhlYWQpIHx8IHRoaXMubWF0Y2goJyonKSkpIHtcblx0ICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5sb29rYWhlYWQ7XG5cdCAgICAgICAgICAgICAgICBpc1N0YXRpYyA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCcqJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gdGhpcy5wYXJzZU9iamVjdFByb3BlcnR5S2V5KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pICYmICF0aGlzLmhhc0xpbmVUZXJtaW5hdG9yICYmICh0b2tlbi52YWx1ZSA9PT0gJ2FzeW5jJykpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBwdW5jdHVhdG9yID0gdGhpcy5sb29rYWhlYWQudmFsdWU7XG5cdCAgICAgICAgICAgICAgICBpZiAocHVuY3R1YXRvciAhPT0gJzonICYmIHB1bmN0dWF0b3IgIT09ICcoJyAmJiBwdW5jdHVhdG9yICE9PSAnKicpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpc0FzeW5jID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRoaXMubG9va2FoZWFkO1xuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8gJiYgdG9rZW4udmFsdWUgPT09ICdjb25zdHJ1Y3RvcicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5Db25zdHJ1Y3RvcklzQXN5bmMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgbG9va2FoZWFkUHJvcGVydHlLZXkgPSB0aGlzLnF1YWxpZmllZFByb3BlcnR5TmFtZSh0aGlzLmxvb2thaGVhZCk7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDMgLyogSWRlbnRpZmllciAqLykge1xuXHQgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT09ICdnZXQnICYmIGxvb2thaGVhZFByb3BlcnR5S2V5KSB7XG5cdCAgICAgICAgICAgICAgICBraW5kID0gJ2dldCc7XG5cdCAgICAgICAgICAgICAgICBjb21wdXRlZCA9IHRoaXMubWF0Y2goJ1snKTtcblx0ICAgICAgICAgICAgICAgIGtleSA9IHRoaXMucGFyc2VPYmplY3RQcm9wZXJ0eUtleSgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFsbG93WWllbGQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZUdldHRlck1ldGhvZCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRva2VuLnZhbHVlID09PSAnc2V0JyAmJiBsb29rYWhlYWRQcm9wZXJ0eUtleSkge1xuXHQgICAgICAgICAgICAgICAga2luZCA9ICdzZXQnO1xuXHQgICAgICAgICAgICAgICAgY29tcHV0ZWQgPSB0aGlzLm1hdGNoKCdbJyk7XG5cdCAgICAgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5wYXJzZVNldHRlck1ldGhvZCgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyAmJiB0b2tlbi52YWx1ZSA9PT0gJyonICYmIGxvb2thaGVhZFByb3BlcnR5S2V5KSB7XG5cdCAgICAgICAgICAgIGtpbmQgPSAnaW5pdCc7XG5cdCAgICAgICAgICAgIGNvbXB1dGVkID0gdGhpcy5tYXRjaCgnWycpO1xuXHQgICAgICAgICAgICBrZXkgPSB0aGlzLnBhcnNlT2JqZWN0UHJvcGVydHlLZXkoKTtcblx0ICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnBhcnNlR2VuZXJhdG9yTWV0aG9kKCk7XG5cdCAgICAgICAgICAgIG1ldGhvZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICgha2luZCAmJiBrZXkgJiYgdGhpcy5tYXRjaCgnKCcpKSB7XG5cdCAgICAgICAgICAgIGtpbmQgPSAnaW5pdCc7XG5cdCAgICAgICAgICAgIHZhbHVlID0gaXNBc3luYyA/IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZEFzeW5jRnVuY3Rpb24oKSA6IHRoaXMucGFyc2VQcm9wZXJ0eU1ldGhvZEZ1bmN0aW9uKCk7XG5cdCAgICAgICAgICAgIG1ldGhvZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICgha2luZCkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGtpbmQgPT09ICdpbml0Jykge1xuXHQgICAgICAgICAgICBraW5kID0gJ21ldGhvZCc7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghY29tcHV0ZWQpIHtcblx0ICAgICAgICAgICAgaWYgKGlzU3RhdGljICYmIHRoaXMuaXNQcm9wZXJ0eUtleShrZXksICdwcm90b3R5cGUnKSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5TdGF0aWNQcm90b3R5cGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghaXNTdGF0aWMgJiYgdGhpcy5pc1Byb3BlcnR5S2V5KGtleSwgJ2NvbnN0cnVjdG9yJykpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChraW5kICE9PSAnbWV0aG9kJyB8fCAhbWV0aG9kIHx8ICh2YWx1ZSAmJiB2YWx1ZS5nZW5lcmF0b3IpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5Db25zdHJ1Y3RvclNwZWNpYWxNZXRob2QpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGhhc0NvbnN0cnVjdG9yLnZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbih0b2tlbiwgbWVzc2FnZXNfMS5NZXNzYWdlcy5EdXBsaWNhdGVDb25zdHJ1Y3Rvcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBoYXNDb25zdHJ1Y3Rvci52YWx1ZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBraW5kID0gJ2NvbnN0cnVjdG9yJztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5NZXRob2REZWZpbml0aW9uKGtleSwgY29tcHV0ZWQsIHZhbHVlLCBraW5kLCBpc1N0YXRpYykpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VDbGFzc0VsZW1lbnRMaXN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBib2R5ID0gW107XG5cdCAgICAgICAgdmFyIGhhc0NvbnN0cnVjdG9yID0geyB2YWx1ZTogZmFsc2UgfTtcblx0ICAgICAgICB0aGlzLmV4cGVjdCgneycpO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5tYXRjaCgnfScpKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoKCc7JykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBib2R5LnB1c2godGhpcy5wYXJzZUNsYXNzRWxlbWVudChoYXNDb25zdHJ1Y3RvcikpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd9Jyk7XG5cdCAgICAgICAgcmV0dXJuIGJvZHk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNsYXNzQm9keSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBlbGVtZW50TGlzdCA9IHRoaXMucGFyc2VDbGFzc0VsZW1lbnRMaXN0KCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQ2xhc3NCb2R5KGVsZW1lbnRMaXN0KSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNsYXNzRGVjbGFyYXRpb24gPSBmdW5jdGlvbiAoaWRlbnRpZmllcklzT3B0aW9uYWwpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LnN0cmljdCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdjbGFzcycpO1xuXHQgICAgICAgIHZhciBpZCA9IChpZGVudGlmaWVySXNPcHRpb25hbCAmJiAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMyAvKiBJZGVudGlmaWVyICovKSkgPyBudWxsIDogdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXHQgICAgICAgIHZhciBzdXBlckNsYXNzID0gbnVsbDtcblx0ICAgICAgICBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2V4dGVuZHMnKSkge1xuXHQgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICBzdXBlckNsYXNzID0gdGhpcy5pc29sYXRlQ292ZXJHcmFtbWFyKHRoaXMucGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIGNsYXNzQm9keSA9IHRoaXMucGFyc2VDbGFzc0JvZHkoKTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gcHJldmlvdXNTdHJpY3Q7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuQ2xhc3NEZWNsYXJhdGlvbihpZCwgc3VwZXJDbGFzcywgY2xhc3NCb2R5KSk7XG5cdCAgICB9O1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNsYXNzRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBwcmV2aW91c1N0cmljdCA9IHRoaXMuY29udGV4dC5zdHJpY3Q7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LnN0cmljdCA9IHRydWU7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdjbGFzcycpO1xuXHQgICAgICAgIHZhciBpZCA9ICh0aGlzLmxvb2thaGVhZC50eXBlID09PSAzIC8qIElkZW50aWZpZXIgKi8pID8gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpIDogbnVsbDtcblx0ICAgICAgICB2YXIgc3VwZXJDbGFzcyA9IG51bGw7XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdleHRlbmRzJykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgc3VwZXJDbGFzcyA9IHRoaXMuaXNvbGF0ZUNvdmVyR3JhbW1hcih0aGlzLnBhcnNlTGVmdEhhbmRTaWRlRXhwcmVzc2lvbkFsbG93Q2FsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBjbGFzc0JvZHkgPSB0aGlzLnBhcnNlQ2xhc3NCb2R5KCk7XG5cdCAgICAgICAgdGhpcy5jb250ZXh0LnN0cmljdCA9IHByZXZpb3VzU3RyaWN0O1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkNsYXNzRXhwcmVzc2lvbihpZCwgc3VwZXJDbGFzcywgY2xhc3NCb2R5KSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc2NyaXB0c1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbW9kdWxlc1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1vZHVsZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuc3RyaWN0ID0gdHJ1ZTtcblx0ICAgICAgICB0aGlzLmNvbnRleHQuaXNNb2R1bGUgPSB0cnVlO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lci5pc01vZHVsZSA9IHRydWU7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgYm9keSA9IHRoaXMucGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMoKTtcblx0ICAgICAgICB3aGlsZSAodGhpcy5sb29rYWhlYWQudHlwZSAhPT0gMiAvKiBFT0YgKi8pIHtcblx0ICAgICAgICAgICAgYm9keS5wdXNoKHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuTW9kdWxlKGJvZHkpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlU2NyaXB0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGJvZHkgPSB0aGlzLnBhcnNlRGlyZWN0aXZlUHJvbG9ndWVzKCk7XG5cdCAgICAgICAgd2hpbGUgKHRoaXMubG9va2FoZWFkLnR5cGUgIT09IDIgLyogRU9GICovKSB7XG5cdCAgICAgICAgICAgIGJvZHkucHVzaCh0aGlzLnBhcnNlU3RhdGVtZW50TGlzdEl0ZW0oKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLlNjcmlwdChib2R5KSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaW1wb3J0c1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZU1vZHVsZVNwZWNpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlICE9PSA4IC8qIFN0cmluZ0xpdGVyYWwgKi8pIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuSW52YWxpZE1vZHVsZVNwZWNpZmllcik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciB0b2tlbiA9IHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgdmFyIHJhdyA9IHRoaXMuZ2V0VG9rZW5SYXcodG9rZW4pO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmZpbmFsaXplKG5vZGUsIG5ldyBOb2RlLkxpdGVyYWwodG9rZW4udmFsdWUsIHJhdykpO1xuXHQgICAgfTtcblx0ICAgIC8vIGltcG9ydCB7PGZvbyBhcyBiYXI+fSAuLi47XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlSW1wb3J0U3BlY2lmaWVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdmFyIGltcG9ydGVkO1xuXHQgICAgICAgIHZhciBsb2NhbDtcblx0ICAgICAgICBpZiAodGhpcy5sb29rYWhlYWQudHlwZSA9PT0gMyAvKiBJZGVudGlmaWVyICovKSB7XG5cdCAgICAgICAgICAgIGltcG9ydGVkID0gdGhpcy5wYXJzZVZhcmlhYmxlSWRlbnRpZmllcigpO1xuXHQgICAgICAgICAgICBsb2NhbCA9IGltcG9ydGVkO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhcycpKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgbG9jYWwgPSB0aGlzLnBhcnNlVmFyaWFibGVJZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIGltcG9ydGVkID0gdGhpcy5wYXJzZUlkZW50aWZpZXJOYW1lKCk7XG5cdCAgICAgICAgICAgIGxvY2FsID0gaW1wb3J0ZWQ7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzJykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICBsb2NhbCA9IHRoaXMucGFyc2VWYXJpYWJsZUlkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4odGhpcy5uZXh0VG9rZW4oKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSW1wb3J0U3BlY2lmaWVyKGxvY2FsLCBpbXBvcnRlZCkpO1xuXHQgICAgfTtcblx0ICAgIC8vIHtmb28sIGJhciBhcyBiYXN9XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlTmFtZWRJbXBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCd7Jyk7XG5cdCAgICAgICAgdmFyIHNwZWNpZmllcnMgPSBbXTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2godGhpcy5wYXJzZUltcG9ydFNwZWNpZmllcigpKTtcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCd9JykpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhwZWN0KCcsJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5leHBlY3QoJ30nKTtcblx0ICAgICAgICByZXR1cm4gc3BlY2lmaWVycztcblx0ICAgIH07XG5cdCAgICAvLyBpbXBvcnQgPGZvbz4gLi4uO1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUltcG9ydERlZmF1bHRTcGVjaWZpZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmNyZWF0ZU5vZGUoKTtcblx0ICAgICAgICB2YXIgbG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JbXBvcnREZWZhdWx0U3BlY2lmaWVyKGxvY2FsKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaW1wb3J0IDwqIGFzIGZvbz4gLi4uO1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0KCcqJyk7XG5cdCAgICAgICAgaWYgKCF0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzJykpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2VzXzEuTWVzc2FnZXMuTm9Bc0FmdGVySW1wb3J0TmFtZXNwYWNlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICB2YXIgbG9jYWwgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5JbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIobG9jYWwpKTtcblx0ICAgIH07XG5cdCAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlSW1wb3J0RGVjbGFyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY29udGV4dC5pbkZ1bmN0aW9uQm9keSkge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZXNfMS5NZXNzYWdlcy5JbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24pO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnaW1wb3J0Jyk7XG5cdCAgICAgICAgdmFyIHNyYztcblx0ICAgICAgICB2YXIgc3BlY2lmaWVycyA9IFtdO1xuXHQgICAgICAgIGlmICh0aGlzLmxvb2thaGVhZC50eXBlID09PSA4IC8qIFN0cmluZ0xpdGVyYWwgKi8pIHtcblx0ICAgICAgICAgICAgLy8gaW1wb3J0ICdmb28nO1xuXHQgICAgICAgICAgICBzcmMgPSB0aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgneycpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBpbXBvcnQge2Jhcn1cblx0ICAgICAgICAgICAgICAgIHNwZWNpZmllcnMgPSBzcGVjaWZpZXJzLmNvbmNhdCh0aGlzLnBhcnNlTmFtZWRJbXBvcnRzKCkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMubWF0Y2goJyonKSkge1xuXHQgICAgICAgICAgICAgICAgLy8gaW1wb3J0ICogYXMgZm9vXG5cdCAgICAgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2godGhpcy5wYXJzZUltcG9ydE5hbWVzcGFjZVNwZWNpZmllcigpKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzSWRlbnRpZmllck5hbWUodGhpcy5sb29rYWhlYWQpICYmICF0aGlzLm1hdGNoS2V5d29yZCgnZGVmYXVsdCcpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBpbXBvcnQgZm9vXG5cdCAgICAgICAgICAgICAgICBzcGVjaWZpZXJzLnB1c2godGhpcy5wYXJzZUltcG9ydERlZmF1bHRTcGVjaWZpZXIoKSk7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnLCcpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXRjaCgnKicpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIGltcG9ydCBmb28sICogYXMgZm9vXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1hdGNoKCd7JykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW1wb3J0IGZvbywge2Jhcn1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lmaWVycyA9IHNwZWNpZmllcnMuY29uY2F0KHRoaXMucGFyc2VOYW1lZEltcG9ydHMoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubmV4dFRva2VuKCkpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdmcm9tJykpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5sb29rYWhlYWQudmFsdWUgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiA6IG1lc3NhZ2VzXzEuTWVzc2FnZXMuTWlzc2luZ0Zyb21DbGF1c2U7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgdGhpcy5sb29rYWhlYWQudmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIHNyYyA9IHRoaXMucGFyc2VNb2R1bGVTcGVjaWZpZXIoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuSW1wb3J0RGVjbGFyYXRpb24oc3BlY2lmaWVycywgc3JjKSk7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZXhwb3J0c1xuXHQgICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUV4cG9ydFNwZWNpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgbm9kZSA9IHRoaXMuY3JlYXRlTm9kZSgpO1xuXHQgICAgICAgIHZhciBsb2NhbCA9IHRoaXMucGFyc2VJZGVudGlmaWVyTmFtZSgpO1xuXHQgICAgICAgIHZhciBleHBvcnRlZCA9IGxvY2FsO1xuXHQgICAgICAgIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2FzJykpIHtcblx0ICAgICAgICAgICAgdGhpcy5uZXh0VG9rZW4oKTtcblx0ICAgICAgICAgICAgZXhwb3J0ZWQgPSB0aGlzLnBhcnNlSWRlbnRpZmllck5hbWUoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0U3BlY2lmaWVyKGxvY2FsLCBleHBvcnRlZCkpO1xuXHQgICAgfTtcblx0ICAgIFBhcnNlci5wcm90b3R5cGUucGFyc2VFeHBvcnREZWNsYXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5jb250ZXh0LmluRnVuY3Rpb25Cb2R5KSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLklsbGVnYWxFeHBvcnREZWNsYXJhdGlvbik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBub2RlID0gdGhpcy5jcmVhdGVOb2RlKCk7XG5cdCAgICAgICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHBvcnQnKTtcblx0ICAgICAgICB2YXIgZXhwb3J0RGVjbGFyYXRpb247XG5cdCAgICAgICAgaWYgKHRoaXMubWF0Y2hLZXl3b3JkKCdkZWZhdWx0JykpIHtcblx0ICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgLi4uXG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoS2V5d29yZCgnZnVuY3Rpb24nKSkge1xuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9vICgpIHt9XG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7fVxuXHQgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24odHJ1ZSk7XG5cdCAgICAgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEtleXdvcmQoJ2NsYXNzJykpIHtcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCBkZWZhdWx0IGNsYXNzIGZvbyB7fVxuXHQgICAgICAgICAgICAgICAgdmFyIGRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUNsYXNzRGVjbGFyYXRpb24odHJ1ZSk7XG5cdCAgICAgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdhc3luYycpKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBmICgpIHt9XG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoKSB7fVxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQgYXN5bmMgeCA9PiB4XG5cdCAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB0aGlzLm1hdGNoQXN5bmNGdW5jdGlvbigpID8gdGhpcy5wYXJzZUZ1bmN0aW9uRGVjbGFyYXRpb24odHJ1ZSkgOiB0aGlzLnBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24oKTtcblx0ICAgICAgICAgICAgICAgIGV4cG9ydERlY2xhcmF0aW9uID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24oZGVjbGFyYXRpb24pKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2Zyb20nKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiwgdGhpcy5sb29rYWhlYWQudmFsdWUpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IGRlZmF1bHQge307XG5cdCAgICAgICAgICAgICAgICAvLyBleHBvcnQgZGVmYXVsdCBbXTtcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCBkZWZhdWx0ICgxICsgMik7XG5cdCAgICAgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB0aGlzLm1hdGNoKCd7JykgPyB0aGlzLnBhcnNlT2JqZWN0SW5pdGlhbGl6ZXIoKSA6XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaCgnWycpID8gdGhpcy5wYXJzZUFycmF5SW5pdGlhbGl6ZXIoKSA6IHRoaXMucGFyc2VBc3NpZ25tZW50RXhwcmVzc2lvbigpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaCgnKicpKSB7XG5cdCAgICAgICAgICAgIC8vIGV4cG9ydCAqIGZyb20gJ2Zvbyc7XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tYXRjaENvbnRleHR1YWxLZXl3b3JkKCdmcm9tJykpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdGhpcy5sb29rYWhlYWQudmFsdWUgPyBtZXNzYWdlc18xLk1lc3NhZ2VzLlVuZXhwZWN0ZWRUb2tlbiA6IG1lc3NhZ2VzXzEuTWVzc2FnZXMuTWlzc2luZ0Zyb21DbGF1c2U7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnRocm93RXJyb3IobWVzc2FnZSwgdGhpcy5sb29rYWhlYWQudmFsdWUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMubmV4dFRva2VuKCk7XG5cdCAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLnBhcnNlTW9kdWxlU3BlY2lmaWVyKCk7XG5cdCAgICAgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0QWxsRGVjbGFyYXRpb24oc3JjKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKHRoaXMubG9va2FoZWFkLnR5cGUgPT09IDQgLyogS2V5d29yZCAqLykge1xuXHQgICAgICAgICAgICAvLyBleHBvcnQgdmFyIGYgPSAxO1xuXHQgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB2b2lkIDA7XG5cdCAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sb29rYWhlYWQudmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2xldCc6XG5cdCAgICAgICAgICAgICAgICBjYXNlICdjb25zdCc6XG5cdCAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlTGV4aWNhbERlY2xhcmF0aW9uKHsgaW5Gb3I6IGZhbHNlIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAndmFyJzpcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2NsYXNzJzpcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcblx0ICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKHRoaXMubG9va2FoZWFkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0TmFtZWREZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgW10sIG51bGwpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5tYXRjaEFzeW5jRnVuY3Rpb24oKSkge1xuXHQgICAgICAgICAgICB2YXIgZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbigpO1xuXHQgICAgICAgICAgICBleHBvcnREZWNsYXJhdGlvbiA9IHRoaXMuZmluYWxpemUobm9kZSwgbmV3IE5vZGUuRXhwb3J0TmFtZWREZWNsYXJhdGlvbihkZWNsYXJhdGlvbiwgW10sIG51bGwpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHZhciBzcGVjaWZpZXJzID0gW107XG5cdCAgICAgICAgICAgIHZhciBzb3VyY2UgPSBudWxsO1xuXHQgICAgICAgICAgICB2YXIgaXNFeHBvcnRGcm9tSWRlbnRpZmllciA9IGZhbHNlO1xuXHQgICAgICAgICAgICB0aGlzLmV4cGVjdCgneycpO1xuXHQgICAgICAgICAgICB3aGlsZSAoIXRoaXMubWF0Y2goJ30nKSkge1xuXHQgICAgICAgICAgICAgICAgaXNFeHBvcnRGcm9tSWRlbnRpZmllciA9IGlzRXhwb3J0RnJvbUlkZW50aWZpZXIgfHwgdGhpcy5tYXRjaEtleXdvcmQoJ2RlZmF1bHQnKTtcblx0ICAgICAgICAgICAgICAgIHNwZWNpZmllcnMucHVzaCh0aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVyKCkpO1xuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoKCd9JykpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4cGVjdCgnLCcpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuZXhwZWN0KCd9Jyk7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1hdGNoQ29udGV4dHVhbEtleXdvcmQoJ2Zyb20nKSkge1xuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IHtkZWZhdWx0fSBmcm9tICdmb28nO1xuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IHtmb299IGZyb20gJ2Zvbyc7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm5leHRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgc291cmNlID0gdGhpcy5wYXJzZU1vZHVsZVNwZWNpZmllcigpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb25zdW1lU2VtaWNvbG9uKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoaXNFeHBvcnRGcm9tSWRlbnRpZmllcikge1xuXHQgICAgICAgICAgICAgICAgLy8gZXhwb3J0IHtkZWZhdWx0fTsgLy8gbWlzc2luZyBmcm9tQ2xhdXNlXG5cdCAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMubG9va2FoZWFkLnZhbHVlID8gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW4gOiBtZXNzYWdlc18xLk1lc3NhZ2VzLk1pc3NpbmdGcm9tQ2xhdXNlO1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd0Vycm9yKG1lc3NhZ2UsIHRoaXMubG9va2FoZWFkLnZhbHVlKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIGV4cG9ydCB7Zm9vfTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZVNlbWljb2xvbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGV4cG9ydERlY2xhcmF0aW9uID0gdGhpcy5maW5hbGl6ZShub2RlLCBuZXcgTm9kZS5FeHBvcnROYW1lZERlY2xhcmF0aW9uKG51bGwsIHNwZWNpZmllcnMsIHNvdXJjZSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZXhwb3J0RGVjbGFyYXRpb247XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFBhcnNlcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG5cblxuLyoqKi8gfSxcbi8qIDkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHQvLyBFbnN1cmUgdGhlIGNvbmRpdGlvbiBpcyB0cnVlLCBvdGhlcndpc2UgdGhyb3cgYW4gZXJyb3IuXG5cdC8vIFRoaXMgaXMgb25seSB0byBoYXZlIGEgYmV0dGVyIGNvbnRyYWN0IHNlbWFudGljLCBpLmUuIGFub3RoZXIgc2FmZXR5IG5ldFxuXHQvLyB0byBjYXRjaCBhIGxvZ2ljIGVycm9yLiBUaGUgY29uZGl0aW9uIHNoYWxsIGJlIGZ1bGZpbGxlZCBpbiBub3JtYWwgY2FzZS5cblx0Ly8gRG8gTk9UIHVzZSB0aGlzIHRvIGVuZm9yY2UgYSBjZXJ0YWluIGNvbmRpdGlvbiBvbiBhbnkgdXNlciBpbnB1dC5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHRmdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG5cdCAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblx0ICAgIGlmICghY29uZGl0aW9uKSB7XG5cdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBU1NFUlQ6ICcgKyBtZXNzYWdlKTtcblx0ICAgIH1cblx0fVxuXHRleHBvcnRzLmFzc2VydCA9IGFzc2VydDtcblxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHQvKiB0c2xpbnQ6ZGlzYWJsZTptYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdHZhciBFcnJvckhhbmRsZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gRXJyb3JIYW5kbGVyKCkge1xuXHQgICAgICAgIHRoaXMuZXJyb3JzID0gW107XG5cdCAgICAgICAgdGhpcy50b2xlcmFudCA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgRXJyb3JIYW5kbGVyLnByb3RvdHlwZS5yZWNvcmRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpO1xuXHQgICAgfTtcblx0ICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUudG9sZXJhdGUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgICAgICBpZiAodGhpcy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICB0aGlzLnJlY29yZEVycm9yKGVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IGVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLmNvbnN0cnVjdEVycm9yID0gZnVuY3Rpb24gKG1zZywgY29sdW1uKSB7XG5cdCAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1zZyk7XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChiYXNlKSB7XG5cdCAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cdCAgICAgICAgICAgIGlmIChPYmplY3QuY3JlYXRlICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuXHQgICAgICAgICAgICAgICAgZXJyb3IgPSBPYmplY3QuY3JlYXRlKGJhc2UpO1xuXHQgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnY29sdW1uJywgeyB2YWx1ZTogY29sdW1uIH0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cdCAgICAgICAgcmV0dXJuIGVycm9yO1xuXHQgICAgfTtcblx0ICAgIEVycm9ySGFuZGxlci5wcm90b3R5cGUuY3JlYXRlRXJyb3IgPSBmdW5jdGlvbiAoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pIHtcblx0ICAgICAgICB2YXIgbXNnID0gJ0xpbmUgJyArIGxpbmUgKyAnOiAnICsgZGVzY3JpcHRpb247XG5cdCAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jb25zdHJ1Y3RFcnJvcihtc2csIGNvbCk7XG5cdCAgICAgICAgZXJyb3IuaW5kZXggPSBpbmRleDtcblx0ICAgICAgICBlcnJvci5saW5lTnVtYmVyID0gbGluZTtcblx0ICAgICAgICBlcnJvci5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuXHQgICAgICAgIHJldHVybiBlcnJvcjtcblx0ICAgIH07XG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnRocm93RXJyb3IgPSBmdW5jdGlvbiAoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pIHtcblx0ICAgICAgICB0aHJvdyB0aGlzLmNyZWF0ZUVycm9yKGluZGV4LCBsaW5lLCBjb2wsIGRlc2NyaXB0aW9uKTtcblx0ICAgIH07XG5cdCAgICBFcnJvckhhbmRsZXIucHJvdG90eXBlLnRvbGVyYXRlRXJyb3IgPSBmdW5jdGlvbiAoaW5kZXgsIGxpbmUsIGNvbCwgZGVzY3JpcHRpb24pIHtcblx0ICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKGluZGV4LCBsaW5lLCBjb2wsIGRlc2NyaXB0aW9uKTtcblx0ICAgICAgICBpZiAodGhpcy50b2xlcmFudCkge1xuXHQgICAgICAgICAgICB0aGlzLnJlY29yZEVycm9yKGVycm9yKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRocm93IGVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICByZXR1cm4gRXJyb3JIYW5kbGVyO1xuXHR9KCkpO1xuXHRleHBvcnRzLkVycm9ySGFuZGxlciA9IEVycm9ySGFuZGxlcjtcblxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdC8vIEVycm9yIG1lc3NhZ2VzIHNob3VsZCBiZSBpZGVudGljYWwgdG8gVjguXG5cdGV4cG9ydHMuTWVzc2FnZXMgPSB7XG5cdCAgICBCYWRHZXR0ZXJBcml0eTogJ0dldHRlciBtdXN0IG5vdCBoYXZlIGFueSBmb3JtYWwgcGFyYW1ldGVycycsXG5cdCAgICBCYWRTZXR0ZXJBcml0eTogJ1NldHRlciBtdXN0IGhhdmUgZXhhY3RseSBvbmUgZm9ybWFsIHBhcmFtZXRlcicsXG5cdCAgICBCYWRTZXR0ZXJSZXN0UGFyYW1ldGVyOiAnU2V0dGVyIGZ1bmN0aW9uIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgcmVzdCBwYXJhbWV0ZXInLFxuXHQgICAgQ29uc3RydWN0b3JJc0FzeW5jOiAnQ2xhc3MgY29uc3RydWN0b3IgbWF5IG5vdCBiZSBhbiBhc3luYyBtZXRob2QnLFxuXHQgICAgQ29uc3RydWN0b3JTcGVjaWFsTWV0aG9kOiAnQ2xhc3MgY29uc3RydWN0b3IgbWF5IG5vdCBiZSBhbiBhY2Nlc3NvcicsXG5cdCAgICBEZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplcjogJ01pc3NpbmcgaW5pdGlhbGl6ZXIgaW4gJTAgZGVjbGFyYXRpb24nLFxuXHQgICAgRGVmYXVsdFJlc3RQYXJhbWV0ZXI6ICdVbmV4cGVjdGVkIHRva2VuID0nLFxuXHQgICAgRHVwbGljYXRlQmluZGluZzogJ0R1cGxpY2F0ZSBiaW5kaW5nICUwJyxcblx0ICAgIER1cGxpY2F0ZUNvbnN0cnVjdG9yOiAnQSBjbGFzcyBtYXkgb25seSBoYXZlIG9uZSBjb25zdHJ1Y3RvcicsXG5cdCAgICBEdXBsaWNhdGVQcm90b1Byb3BlcnR5OiAnRHVwbGljYXRlIF9fcHJvdG9fXyBmaWVsZHMgYXJlIG5vdCBhbGxvd2VkIGluIG9iamVjdCBsaXRlcmFscycsXG5cdCAgICBGb3JJbk9mTG9vcEluaXRpYWxpemVyOiAnJTAgbG9vcCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBtYXkgbm90IGhhdmUgYW4gaW5pdGlhbGl6ZXInLFxuXHQgICAgR2VuZXJhdG9ySW5MZWdhY3lDb250ZXh0OiAnR2VuZXJhdG9yIGRlY2xhcmF0aW9ucyBhcmUgbm90IGFsbG93ZWQgaW4gbGVnYWN5IGNvbnRleHRzJyxcblx0ICAgIElsbGVnYWxCcmVhazogJ0lsbGVnYWwgYnJlYWsgc3RhdGVtZW50Jyxcblx0ICAgIElsbGVnYWxDb250aW51ZTogJ0lsbGVnYWwgY29udGludWUgc3RhdGVtZW50Jyxcblx0ICAgIElsbGVnYWxFeHBvcnREZWNsYXJhdGlvbjogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxuXHQgICAgSWxsZWdhbEltcG9ydERlY2xhcmF0aW9uOiAnVW5leHBlY3RlZCB0b2tlbicsXG5cdCAgICBJbGxlZ2FsTGFuZ3VhZ2VNb2RlRGlyZWN0aXZlOiAnSWxsZWdhbCBcXCd1c2Ugc3RyaWN0XFwnIGRpcmVjdGl2ZSBpbiBmdW5jdGlvbiB3aXRoIG5vbi1zaW1wbGUgcGFyYW1ldGVyIGxpc3QnLFxuXHQgICAgSWxsZWdhbFJldHVybjogJ0lsbGVnYWwgcmV0dXJuIHN0YXRlbWVudCcsXG5cdCAgICBJbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZDogJ0tleXdvcmQgbXVzdCBub3QgY29udGFpbiBlc2NhcGVkIGNoYXJhY3RlcnMnLFxuXHQgICAgSW52YWxpZEhleEVzY2FwZVNlcXVlbmNlOiAnSW52YWxpZCBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2UnLFxuXHQgICAgSW52YWxpZExIU0luQXNzaWdubWVudDogJ0ludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gYXNzaWdubWVudCcsXG5cdCAgICBJbnZhbGlkTEhTSW5Gb3JJbjogJ0ludmFsaWQgbGVmdC1oYW5kIHNpZGUgaW4gZm9yLWluJyxcblx0ICAgIEludmFsaWRMSFNJbkZvckxvb3A6ICdJbnZhbGlkIGxlZnQtaGFuZCBzaWRlIGluIGZvci1sb29wJyxcblx0ICAgIEludmFsaWRNb2R1bGVTcGVjaWZpZXI6ICdVbmV4cGVjdGVkIHRva2VuJyxcblx0ICAgIEludmFsaWRSZWdFeHA6ICdJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbicsXG5cdCAgICBMZXRJbkxleGljYWxCaW5kaW5nOiAnbGV0IGlzIGRpc2FsbG93ZWQgYXMgYSBsZXhpY2FsbHkgYm91bmQgbmFtZScsXG5cdCAgICBNaXNzaW5nRnJvbUNsYXVzZTogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxuXHQgICAgTXVsdGlwbGVEZWZhdWx0c0luU3dpdGNoOiAnTW9yZSB0aGFuIG9uZSBkZWZhdWx0IGNsYXVzZSBpbiBzd2l0Y2ggc3RhdGVtZW50Jyxcblx0ICAgIE5ld2xpbmVBZnRlclRocm93OiAnSWxsZWdhbCBuZXdsaW5lIGFmdGVyIHRocm93Jyxcblx0ICAgIE5vQXNBZnRlckltcG9ydE5hbWVzcGFjZTogJ1VuZXhwZWN0ZWQgdG9rZW4nLFxuXHQgICAgTm9DYXRjaE9yRmluYWxseTogJ01pc3NpbmcgY2F0Y2ggb3IgZmluYWxseSBhZnRlciB0cnknLFxuXHQgICAgUGFyYW1ldGVyQWZ0ZXJSZXN0UGFyYW1ldGVyOiAnUmVzdCBwYXJhbWV0ZXIgbXVzdCBiZSBsYXN0IGZvcm1hbCBwYXJhbWV0ZXInLFxuXHQgICAgUmVkZWNsYXJhdGlvbjogJyUwIFxcJyUxXFwnIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWQnLFxuXHQgICAgU3RhdGljUHJvdG90eXBlOiAnQ2xhc3NlcyBtYXkgbm90IGhhdmUgc3RhdGljIHByb3BlcnR5IG5hbWVkIHByb3RvdHlwZScsXG5cdCAgICBTdHJpY3RDYXRjaFZhcmlhYmxlOiAnQ2F0Y2ggdmFyaWFibGUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZScsXG5cdCAgICBTdHJpY3REZWxldGU6ICdEZWxldGUgb2YgYW4gdW5xdWFsaWZpZWQgaWRlbnRpZmllciBpbiBzdHJpY3QgbW9kZS4nLFxuXHQgICAgU3RyaWN0RnVuY3Rpb246ICdJbiBzdHJpY3QgbW9kZSBjb2RlLCBmdW5jdGlvbnMgY2FuIG9ubHkgYmUgZGVjbGFyZWQgYXQgdG9wIGxldmVsIG9yIGluc2lkZSBhIGJsb2NrJyxcblx0ICAgIFN0cmljdEZ1bmN0aW9uTmFtZTogJ0Z1bmN0aW9uIG5hbWUgbWF5IG5vdCBiZSBldmFsIG9yIGFyZ3VtZW50cyBpbiBzdHJpY3QgbW9kZScsXG5cdCAgICBTdHJpY3RMSFNBc3NpZ25tZW50OiAnQXNzaWdubWVudCB0byBldmFsIG9yIGFyZ3VtZW50cyBpcyBub3QgYWxsb3dlZCBpbiBzdHJpY3QgbW9kZScsXG5cdCAgICBTdHJpY3RMSFNQb3N0Zml4OiAnUG9zdGZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlJyxcblx0ICAgIFN0cmljdExIU1ByZWZpeDogJ1ByZWZpeCBpbmNyZW1lbnQvZGVjcmVtZW50IG1heSBub3QgaGF2ZSBldmFsIG9yIGFyZ3VtZW50cyBvcGVyYW5kIGluIHN0cmljdCBtb2RlJyxcblx0ICAgIFN0cmljdE1vZGVXaXRoOiAnU3RyaWN0IG1vZGUgY29kZSBtYXkgbm90IGluY2x1ZGUgYSB3aXRoIHN0YXRlbWVudCcsXG5cdCAgICBTdHJpY3RPY3RhbExpdGVyYWw6ICdPY3RhbCBsaXRlcmFscyBhcmUgbm90IGFsbG93ZWQgaW4gc3RyaWN0IG1vZGUuJyxcblx0ICAgIFN0cmljdFBhcmFtRHVwZTogJ1N0cmljdCBtb2RlIGZ1bmN0aW9uIG1heSBub3QgaGF2ZSBkdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWVzJyxcblx0ICAgIFN0cmljdFBhcmFtTmFtZTogJ1BhcmFtZXRlciBuYW1lIGV2YWwgb3IgYXJndW1lbnRzIGlzIG5vdCBhbGxvd2VkIGluIHN0cmljdCBtb2RlJyxcblx0ICAgIFN0cmljdFJlc2VydmVkV29yZDogJ1VzZSBvZiBmdXR1cmUgcmVzZXJ2ZWQgd29yZCBpbiBzdHJpY3QgbW9kZScsXG5cdCAgICBTdHJpY3RWYXJOYW1lOiAnVmFyaWFibGUgbmFtZSBtYXkgbm90IGJlIGV2YWwgb3IgYXJndW1lbnRzIGluIHN0cmljdCBtb2RlJyxcblx0ICAgIFRlbXBsYXRlT2N0YWxMaXRlcmFsOiAnT2N0YWwgbGl0ZXJhbHMgYXJlIG5vdCBhbGxvd2VkIGluIHRlbXBsYXRlIHN0cmluZ3MuJyxcblx0ICAgIFVuZXhwZWN0ZWRFT1M6ICdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcsXG5cdCAgICBVbmV4cGVjdGVkSWRlbnRpZmllcjogJ1VuZXhwZWN0ZWQgaWRlbnRpZmllcicsXG5cdCAgICBVbmV4cGVjdGVkTnVtYmVyOiAnVW5leHBlY3RlZCBudW1iZXInLFxuXHQgICAgVW5leHBlY3RlZFJlc2VydmVkOiAnVW5leHBlY3RlZCByZXNlcnZlZCB3b3JkJyxcblx0ICAgIFVuZXhwZWN0ZWRTdHJpbmc6ICdVbmV4cGVjdGVkIHN0cmluZycsXG5cdCAgICBVbmV4cGVjdGVkVGVtcGxhdGU6ICdVbmV4cGVjdGVkIHF1YXNpICUwJyxcblx0ICAgIFVuZXhwZWN0ZWRUb2tlbjogJ1VuZXhwZWN0ZWQgdG9rZW4gJTAnLFxuXHQgICAgVW5leHBlY3RlZFRva2VuSWxsZWdhbDogJ1VuZXhwZWN0ZWQgdG9rZW4gSUxMRUdBTCcsXG5cdCAgICBVbmtub3duTGFiZWw6ICdVbmRlZmluZWQgbGFiZWwgXFwnJTBcXCcnLFxuXHQgICAgVW50ZXJtaW5hdGVkUmVnRXhwOiAnSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb246IG1pc3NpbmcgLydcblx0fTtcblxuXG4vKioqLyB9LFxuLyogMTIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdHZhciBhc3NlcnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cdHZhciBjaGFyYWN0ZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdHZhciBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdGZ1bmN0aW9uIGhleFZhbHVlKGNoKSB7XG5cdCAgICByZXR1cm4gJzAxMjM0NTY3ODlhYmNkZWYnLmluZGV4T2YoY2gudG9Mb3dlckNhc2UoKSk7XG5cdH1cblx0ZnVuY3Rpb24gb2N0YWxWYWx1ZShjaCkge1xuXHQgICAgcmV0dXJuICcwMTIzNDU2NycuaW5kZXhPZihjaCk7XG5cdH1cblx0dmFyIFNjYW5uZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gU2Nhbm5lcihjb2RlLCBoYW5kbGVyKSB7XG5cdCAgICAgICAgdGhpcy5zb3VyY2UgPSBjb2RlO1xuXHQgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gaGFuZGxlcjtcblx0ICAgICAgICB0aGlzLnRyYWNrQ29tbWVudCA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuaXNNb2R1bGUgPSBmYWxzZTtcblx0ICAgICAgICB0aGlzLmxlbmd0aCA9IGNvZGUubGVuZ3RoO1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xuXHQgICAgICAgIHRoaXMubGluZU51bWJlciA9IChjb2RlLmxlbmd0aCA+IDApID8gMSA6IDA7XG5cdCAgICAgICAgdGhpcy5saW5lU3RhcnQgPSAwO1xuXHQgICAgICAgIHRoaXMuY3VybHlTdGFjayA9IFtdO1xuXHQgICAgfVxuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2F2ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5saW5lU3RhcnRcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuXHQgICAgICAgIHRoaXMuaW5kZXggPSBzdGF0ZS5pbmRleDtcblx0ICAgICAgICB0aGlzLmxpbmVOdW1iZXIgPSBzdGF0ZS5saW5lTnVtYmVyO1xuXHQgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gc3RhdGUubGluZVN0YXJ0O1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLmVvZiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5pbmRleCA+PSB0aGlzLmxlbmd0aDtcblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS50aHJvd1VuZXhwZWN0ZWRUb2tlbiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdCAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW5JbGxlZ2FsOyB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyLnRocm93RXJyb3IodGhpcy5pbmRleCwgdGhpcy5saW5lTnVtYmVyLCB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnQgKyAxLCBtZXNzYWdlKTtcblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdCAgICAgICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkgeyBtZXNzYWdlID0gbWVzc2FnZXNfMS5NZXNzYWdlcy5VbmV4cGVjdGVkVG9rZW5JbGxlZ2FsOyB9XG5cdCAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIudG9sZXJhdGVFcnJvcih0aGlzLmluZGV4LCB0aGlzLmxpbmVOdW1iZXIsIHRoaXMuaW5kZXggLSB0aGlzLmxpbmVTdGFydCArIDEsIG1lc3NhZ2UpO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNvbW1lbnRzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5za2lwU2luZ2xlTGluZUNvbW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG5cdCAgICAgICAgdmFyIGNvbW1lbnRzID0gW107XG5cdCAgICAgICAgdmFyIHN0YXJ0LCBsb2M7XG5cdCAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGNvbW1lbnRzID0gW107XG5cdCAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pbmRleCAtIG9mZnNldDtcblx0ICAgICAgICAgICAgbG9jID0ge1xuXHQgICAgICAgICAgICAgICAgc3RhcnQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnQgLSBvZmZzZXRcblx0ICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICBlbmQ6IHt9XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpO1xuXHQgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihjaCkpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGxvYy5lbmQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZU51bWJlcixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnQgLSAxXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpTGluZTogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNsaWNlOiBbc3RhcnQgKyBvZmZzZXQsIHRoaXMuaW5kZXggLSAxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IFtzdGFydCwgdGhpcy5pbmRleCAtIDFdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2M6IGxvY1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgY29tbWVudHMucHVzaChlbnRyeSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDEzICYmIHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkgPT09IDEwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmxpbmVOdW1iZXI7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gY29tbWVudHM7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGxvYy5lbmQgPSB7XG5cdCAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuaW5kZXggLSB0aGlzLmxpbmVTdGFydFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB7XG5cdCAgICAgICAgICAgICAgICBtdWx0aUxpbmU6IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgc2xpY2U6IFtzdGFydCArIG9mZnNldCwgdGhpcy5pbmRleF0sXG5cdCAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCB0aGlzLmluZGV4XSxcblx0ICAgICAgICAgICAgICAgIGxvYzogbG9jXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goZW50cnkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gY29tbWVudHM7XG5cdCAgICB9O1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2tpcE11bHRpTGluZUNvbW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGNvbW1lbnRzID0gW107XG5cdCAgICAgICAgdmFyIHN0YXJ0LCBsb2M7XG5cdCAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGNvbW1lbnRzID0gW107XG5cdCAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5pbmRleCAtIDI7XG5cdCAgICAgICAgICAgIGxvYyA9IHtcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5pbmRleCAtIHRoaXMubGluZVN0YXJ0IC0gMlxuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGVuZDoge31cblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XG5cdCAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihjaCkpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gMHgwRCAmJiB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAxKSA9PT0gMHgwQSkge1xuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICsrdGhpcy5saW5lTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAweDJBKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBCbG9jayBjb21tZW50IGVuZHMgd2l0aCAnKi8nLlxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCArIDEpID09PSAweDJGKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCArPSAyO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrQ29tbWVudCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsb2MuZW5kID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmluZGV4IC0gdGhpcy5saW5lU3RhcnRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlMaW5lOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xpY2U6IFtzdGFydCArIDIsIHRoaXMuaW5kZXggLSAyXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiBbc3RhcnQsIHRoaXMuaW5kZXhdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jOiBsb2Ncblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMucHVzaChlbnRyeSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tZW50cztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICAvLyBSYW4gb2ZmIHRoZSBlbmQgb2YgdGhlIGZpbGUgLSB0aGUgd2hvbGUgdGhpbmcgaXMgYSBjb21tZW50XG5cdCAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGxvYy5lbmQgPSB7XG5cdCAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuaW5kZXggLSB0aGlzLmxpbmVTdGFydFxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB2YXIgZW50cnkgPSB7XG5cdCAgICAgICAgICAgICAgICBtdWx0aUxpbmU6IHRydWUsXG5cdCAgICAgICAgICAgICAgICBzbGljZTogW3N0YXJ0ICsgMiwgdGhpcy5pbmRleF0sXG5cdCAgICAgICAgICAgICAgICByYW5nZTogW3N0YXJ0LCB0aGlzLmluZGV4XSxcblx0ICAgICAgICAgICAgICAgIGxvYzogbG9jXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGNvbW1lbnRzLnB1c2goZW50cnkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgcmV0dXJuIGNvbW1lbnRzO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5Db21tZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY29tbWVudHM7XG5cdCAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgIGNvbW1lbnRzID0gW107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBzdGFydCA9ICh0aGlzLmluZGV4ID09PSAwKTtcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc1doaXRlU3BhY2UoY2gpKSB7XG5cdCAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2gpKSB7XG5cdCAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDB4MEQgJiYgdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSA9PT0gMHgwQSkge1xuXHQgICAgICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICsrdGhpcy5saW5lTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAweDJGKSB7XG5cdCAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCArIDEpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAweDJGKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCArPSAyO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjb21tZW50ID0gdGhpcy5za2lwU2luZ2xlTGluZUNvbW1lbnQoMik7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tDb21tZW50KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzID0gY29tbWVudHMuY29uY2F0KGNvbW1lbnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIGlmIChjaCA9PT0gMHgyQSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMjtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY29tbWVudCA9IHRoaXMuc2tpcE11bHRpTGluZUNvbW1lbnQoKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSBjb21tZW50cy5jb25jYXQoY29tbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnQgJiYgY2ggPT09IDB4MkQpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFUrMDAzRSBpcyAnPidcblx0ICAgICAgICAgICAgICAgIGlmICgodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4ICsgMSkgPT09IDB4MkQpICYmICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAyKSA9PT0gMHgzRSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyAnLS0+JyBpcyBhIHNpbmdsZS1saW5lIGNvbW1lbnRcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDM7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCgzKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSBjb21tZW50cy5jb25jYXQoY29tbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09IDB4M0MgJiYgIXRoaXMuaXNNb2R1bGUpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZS5zbGljZSh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDQpID09PSAnIS0tJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gNDsgLy8gYDwhLS1gXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB0aGlzLnNraXBTaW5nbGVMaW5lQ29tbWVudCg0KTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0NvbW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgPSBjb21tZW50cy5jb25jYXQoY29tbWVudCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gY29tbWVudHM7XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZnV0dXJlLXJlc2VydmVkLXdvcmRzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5pc0Z1dHVyZVJlc2VydmVkV29yZCA9IGZ1bmN0aW9uIChpZCkge1xuXHQgICAgICAgIHN3aXRjaCAoaWQpIHtcblx0ICAgICAgICAgICAgY2FzZSAnZW51bSc6XG5cdCAgICAgICAgICAgIGNhc2UgJ2V4cG9ydCc6XG5cdCAgICAgICAgICAgIGNhc2UgJ2ltcG9ydCc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3N1cGVyJzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5pc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQgPSBmdW5jdGlvbiAoaWQpIHtcblx0ICAgICAgICBzd2l0Y2ggKGlkKSB7XG5cdCAgICAgICAgICAgIGNhc2UgJ2ltcGxlbWVudHMnOlxuXHQgICAgICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuXHQgICAgICAgICAgICBjYXNlICdwYWNrYWdlJzpcblx0ICAgICAgICAgICAgY2FzZSAncHJpdmF0ZSc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3Byb3RlY3RlZCc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3B1YmxpYyc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3N0YXRpYyc6XG5cdCAgICAgICAgICAgIGNhc2UgJ3lpZWxkJzpcblx0ICAgICAgICAgICAgY2FzZSAnbGV0Jzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5pc1Jlc3RyaWN0ZWRXb3JkID0gZnVuY3Rpb24gKGlkKSB7XG5cdCAgICAgICAgcmV0dXJuIGlkID09PSAnZXZhbCcgfHwgaWQgPT09ICdhcmd1bWVudHMnO1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWtleXdvcmRzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5pc0tleXdvcmQgPSBmdW5jdGlvbiAoaWQpIHtcblx0ICAgICAgICBzd2l0Y2ggKGlkLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKGlkID09PSAnaWYnKSB8fCAoaWQgPT09ICdpbicpIHx8IChpZCA9PT0gJ2RvJyk7XG5cdCAgICAgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICd2YXInKSB8fCAoaWQgPT09ICdmb3InKSB8fCAoaWQgPT09ICduZXcnKSB8fFxuXHQgICAgICAgICAgICAgICAgICAgIChpZCA9PT0gJ3RyeScpIHx8IChpZCA9PT0gJ2xldCcpO1xuXHQgICAgICAgICAgICBjYXNlIDQ6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKGlkID09PSAndGhpcycpIHx8IChpZCA9PT0gJ2Vsc2UnKSB8fCAoaWQgPT09ICdjYXNlJykgfHxcblx0ICAgICAgICAgICAgICAgICAgICAoaWQgPT09ICd2b2lkJykgfHwgKGlkID09PSAnd2l0aCcpIHx8IChpZCA9PT0gJ2VudW0nKTtcblx0ICAgICAgICAgICAgY2FzZSA1OlxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ3doaWxlJykgfHwgKGlkID09PSAnYnJlYWsnKSB8fCAoaWQgPT09ICdjYXRjaCcpIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgKGlkID09PSAndGhyb3cnKSB8fCAoaWQgPT09ICdjb25zdCcpIHx8IChpZCA9PT0gJ3lpZWxkJykgfHxcblx0ICAgICAgICAgICAgICAgICAgICAoaWQgPT09ICdjbGFzcycpIHx8IChpZCA9PT0gJ3N1cGVyJyk7XG5cdCAgICAgICAgICAgIGNhc2UgNjpcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdyZXR1cm4nKSB8fCAoaWQgPT09ICd0eXBlb2YnKSB8fCAoaWQgPT09ICdkZWxldGUnKSB8fFxuXHQgICAgICAgICAgICAgICAgICAgIChpZCA9PT0gJ3N3aXRjaCcpIHx8IChpZCA9PT0gJ2V4cG9ydCcpIHx8IChpZCA9PT0gJ2ltcG9ydCcpO1xuXHQgICAgICAgICAgICBjYXNlIDc6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gKGlkID09PSAnZGVmYXVsdCcpIHx8IChpZCA9PT0gJ2ZpbmFsbHknKSB8fCAoaWQgPT09ICdleHRlbmRzJyk7XG5cdCAgICAgICAgICAgIGNhc2UgODpcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdmdW5jdGlvbicpIHx8IChpZCA9PT0gJ2NvbnRpbnVlJykgfHwgKGlkID09PSAnZGVidWdnZXInKTtcblx0ICAgICAgICAgICAgY2FzZSAxMDpcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICdpbnN0YW5jZW9mJyk7XG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLmNvZGVQb2ludEF0ID0gZnVuY3Rpb24gKGkpIHtcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KGkpO1xuXHQgICAgICAgIGlmIChjcCA+PSAweEQ4MDAgJiYgY3AgPD0gMHhEQkZGKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWNvbmQgPSB0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KGkgKyAxKTtcblx0ICAgICAgICAgICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gY3A7XG5cdCAgICAgICAgICAgICAgICBjcCA9IChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGNwO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5IZXhFc2NhcGUgPSBmdW5jdGlvbiAocHJlZml4KSB7XG5cdCAgICAgICAgdmFyIGxlbiA9IChwcmVmaXggPT09ICd1JykgPyA0IDogMjtcblx0ICAgICAgICB2YXIgY29kZSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuXHQgICAgICAgICAgICBpZiAoIXRoaXMuZW9mKCkgJiYgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSGV4RGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlICogMTYgKyBoZXhWYWx1ZSh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgIHZhciBjb2RlID0gMDtcblx0ICAgICAgICAvLyBBdCBsZWFzdCwgb25lIGhleCBkaWdpdCBpcyByZXF1aXJlZC5cblx0ICAgICAgICBpZiAoY2ggPT09ICd9Jykge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIGlmICghY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSGV4RGlnaXQoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNvZGUgPSBjb2RlICogMTYgKyBoZXhWYWx1ZShjaCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjb2RlID4gMHgxMEZGRkYgfHwgY2ggIT09ICd9Jykge1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuZnJvbUNvZGVQb2ludChjb2RlKTtcblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5nZXRJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXgrKztcblx0ICAgICAgICB3aGlsZSAoIXRoaXMuZW9mKCkpIHtcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcblx0ICAgICAgICAgICAgaWYgKGNoID09PSAweDVDKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBCbGFja3NsYXNoIChVKzAwNUMpIG1hcmtzIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuXHQgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IHN0YXJ0O1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcGxleElkZW50aWZpZXIoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChjaCA+PSAweEQ4MDAgJiYgY2ggPCAweERGRkYpIHtcblx0ICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycy5cblx0ICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggPSBzdGFydDtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbXBsZXhJZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KGNoKSkge1xuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KTtcblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5nZXRDb21wbGV4SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgY3AgPSB0aGlzLmNvZGVQb2ludEF0KHRoaXMuaW5kZXgpO1xuXHQgICAgICAgIHZhciBpZCA9IGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5mcm9tQ29kZVBvaW50KGNwKTtcblx0ICAgICAgICB0aGlzLmluZGV4ICs9IGlkLmxlbmd0aDtcblx0ICAgICAgICAvLyAnXFx1JyAoVSswMDVDLCBVKzAwNzUpIGRlbm90ZXMgYW4gZXNjYXBlZCBjaGFyYWN0ZXIuXG5cdCAgICAgICAgdmFyIGNoO1xuXHQgICAgICAgIGlmIChjcCA9PT0gMHg1Qykge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSAhPT0gMHg3NSkge1xuXHQgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgIGNoID0gdGhpcy5zY2FuVW5pY29kZUNvZGVQb2ludEVzY2FwZSgpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNjYW5IZXhFc2NhcGUoJ3UnKTtcblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gbnVsbCB8fCBjaCA9PT0gJ1xcXFwnIHx8ICFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWQgPSBjaDtcblx0ICAgICAgICB9XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XG5cdCAgICAgICAgICAgIGNwID0gdGhpcy5jb2RlUG9pbnRBdCh0aGlzLmluZGV4KTtcblx0ICAgICAgICAgICAgaWYgKCFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjcCkpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNoID0gY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmZyb21Db2RlUG9pbnQoY3ApO1xuXHQgICAgICAgICAgICBpZCArPSBjaDtcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCArPSBjaC5sZW5ndGg7XG5cdCAgICAgICAgICAgIC8vICdcXHUnIChVKzAwNUMsIFUrMDA3NSkgZGVub3RlcyBhbiBlc2NhcGVkIGNoYXJhY3Rlci5cblx0ICAgICAgICAgICAgaWYgKGNwID09PSAweDVDKSB7XG5cdCAgICAgICAgICAgICAgICBpZCA9IGlkLnN1YnN0cigwLCBpZC5sZW5ndGggLSAxKTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpICE9PSAweDc1KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNjYW5Vbmljb2RlQ29kZVBvaW50RXNjYXBlKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc2NhbkhleEVzY2FwZSgndScpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gbnVsbCB8fCBjaCA9PT0gJ1xcXFwnIHx8ICFjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyUGFydChjaC5jaGFyQ29kZUF0KDApKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWQgKz0gY2g7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGlkO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLm9jdGFsVG9EZWNpbWFsID0gZnVuY3Rpb24gKGNoKSB7XG5cdCAgICAgICAgLy8gXFwwIGlzIG5vdCBvY3RhbCBlc2NhcGUgc2VxdWVuY2Vcblx0ICAgICAgICB2YXIgb2N0YWwgPSAoY2ggIT09ICcwJyk7XG5cdCAgICAgICAgdmFyIGNvZGUgPSBvY3RhbFZhbHVlKGNoKTtcblx0ICAgICAgICBpZiAoIXRoaXMuZW9mKCkgJiYgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xuXHQgICAgICAgICAgICBvY3RhbCA9IHRydWU7XG5cdCAgICAgICAgICAgIGNvZGUgPSBjb2RlICogOCArIG9jdGFsVmFsdWUodGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXSk7XG5cdCAgICAgICAgICAgIC8vIDMgZGlnaXRzIGFyZSBvbmx5IGFsbG93ZWQgd2hlbiBzdHJpbmcgc3RhcnRzXG5cdCAgICAgICAgICAgIC8vIHdpdGggMCwgMSwgMiwgM1xuXHQgICAgICAgICAgICBpZiAoJzAxMjMnLmluZGV4T2YoY2gpID49IDAgJiYgIXRoaXMuZW9mKCkgJiYgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xuXHQgICAgICAgICAgICAgICAgY29kZSA9IGNvZGUgKiA4ICsgb2N0YWxWYWx1ZSh0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICBjb2RlOiBjb2RlLFxuXHQgICAgICAgICAgICBvY3RhbDogb2N0YWxcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW5hbWVzLWFuZC1rZXl3b3Jkc1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhbklkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIHR5cGU7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICAvLyBCYWNrc2xhc2ggKFUrMDA1Qykgc3RhcnRzIGFuIGVzY2FwZWQgY2hhcmFjdGVyLlxuXHQgICAgICAgIHZhciBpZCA9ICh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHN0YXJ0KSA9PT0gMHg1QykgPyB0aGlzLmdldENvbXBsZXhJZGVudGlmaWVyKCkgOiB0aGlzLmdldElkZW50aWZpZXIoKTtcblx0ICAgICAgICAvLyBUaGVyZSBpcyBubyBrZXl3b3JkIG9yIGxpdGVyYWwgd2l0aCBvbmx5IG9uZSBjaGFyYWN0ZXIuXG5cdCAgICAgICAgLy8gVGh1cywgaXQgbXVzdCBiZSBhbiBpZGVudGlmaWVyLlxuXHQgICAgICAgIGlmIChpZC5sZW5ndGggPT09IDEpIHtcblx0ICAgICAgICAgICAgdHlwZSA9IDMgLyogSWRlbnRpZmllciAqLztcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSBpZiAodGhpcy5pc0tleXdvcmQoaWQpKSB7XG5cdCAgICAgICAgICAgIHR5cGUgPSA0IC8qIEtleXdvcmQgKi87XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGlkID09PSAnbnVsbCcpIHtcblx0ICAgICAgICAgICAgdHlwZSA9IDUgLyogTnVsbExpdGVyYWwgKi87XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2UgaWYgKGlkID09PSAndHJ1ZScgfHwgaWQgPT09ICdmYWxzZScpIHtcblx0ICAgICAgICAgICAgdHlwZSA9IDEgLyogQm9vbGVhbkxpdGVyYWwgKi87XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICB0eXBlID0gMyAvKiBJZGVudGlmaWVyICovO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodHlwZSAhPT0gMyAvKiBJZGVudGlmaWVyICovICYmIChzdGFydCArIGlkLmxlbmd0aCAhPT0gdGhpcy5pbmRleCkpIHtcblx0ICAgICAgICAgICAgdmFyIHJlc3RvcmUgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG5cdCAgICAgICAgICAgIHRoaXMudG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkRXNjYXBlZFJlc2VydmVkV29yZCk7XG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXggPSByZXN0b3JlO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiB0eXBlLFxuXHQgICAgICAgICAgICB2YWx1ZTogaWQsXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcblx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXB1bmN0dWF0b3JzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuUHVuY3R1YXRvciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIC8vIENoZWNrIGZvciBtb3N0IGNvbW1vbiBzaW5nbGUtY2hhcmFjdGVyIHB1bmN0dWF0b3JzLlxuXHQgICAgICAgIHZhciBzdHIgPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XTtcblx0ICAgICAgICBzd2l0Y2ggKHN0cikge1xuXHQgICAgICAgICAgICBjYXNlICcoJzpcblx0ICAgICAgICAgICAgY2FzZSAneyc6XG5cdCAgICAgICAgICAgICAgICBpZiAoc3RyID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cmx5U3RhY2sucHVzaCgneycpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIGNhc2UgJy4nOlxuXHQgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAnLicgJiYgdGhpcy5zb3VyY2VbdGhpcy5pbmRleCArIDFdID09PSAnLicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBTcHJlYWQgb3BlcmF0b3I6IC4uLlxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXggKz0gMjtcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgPSAnLi4uJztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlICd9Jzpcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY3VybHlTdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlICcpJzpcblx0ICAgICAgICAgICAgY2FzZSAnOyc6XG5cdCAgICAgICAgICAgIGNhc2UgJywnOlxuXHQgICAgICAgICAgICBjYXNlICdbJzpcblx0ICAgICAgICAgICAgY2FzZSAnXSc6XG5cdCAgICAgICAgICAgIGNhc2UgJzonOlxuXHQgICAgICAgICAgICBjYXNlICc/Jzpcblx0ICAgICAgICAgICAgY2FzZSAnfic6XG5cdCAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIC8vIDQtY2hhcmFjdGVyIHB1bmN0dWF0b3IuXG5cdCAgICAgICAgICAgICAgICBzdHIgPSB0aGlzLnNvdXJjZS5zdWJzdHIodGhpcy5pbmRleCwgNCk7XG5cdCAgICAgICAgICAgICAgICBpZiAoc3RyID09PSAnPj4+PScpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyAzLWNoYXJhY3RlciBwdW5jdHVhdG9ycy5cblx0ICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKDAsIDMpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzdHIgPT09ICc9PT0nIHx8IHN0ciA9PT0gJyE9PScgfHwgc3RyID09PSAnPj4+JyB8fFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPT09ICc8PD0nIHx8IHN0ciA9PT0gJz4+PScgfHwgc3RyID09PSAnKio9Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDM7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyAyLWNoYXJhY3RlciBwdW5jdHVhdG9ycy5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAyKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0ciA9PT0gJyYmJyB8fCBzdHIgPT09ICd8fCcgfHwgc3RyID09PSAnPT0nIHx8IHN0ciA9PT0gJyE9JyB8fFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID09PSAnKz0nIHx8IHN0ciA9PT0gJy09JyB8fCBzdHIgPT09ICcqPScgfHwgc3RyID09PSAnLz0nIHx8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPT09ICcrKycgfHwgc3RyID09PSAnLS0nIHx8IHN0ciA9PT0gJzw8JyB8fCBzdHIgPT09ICc+PicgfHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9PT0gJyY9JyB8fCBzdHIgPT09ICd8PScgfHwgc3RyID09PSAnXj0nIHx8IHN0ciA9PT0gJyU9JyB8fFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyID09PSAnPD0nIHx8IHN0ciA9PT0gJz49JyB8fCBzdHIgPT09ICc9PicgfHwgc3RyID09PSAnKionKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ICs9IDI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxLWNoYXJhY3RlciBwdW5jdHVhdG9ycy5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCc8Pj0hKy0qJSZ8Xi8nLmluZGV4T2Yoc3RyKSA+PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5pbmRleCA9PT0gc3RhcnQpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiA3IC8qIFB1bmN0dWF0b3IgKi8sXG5cdCAgICAgICAgICAgIHZhbHVlOiBzdHIsXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcblx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxpdGVyYWxzLW51bWVyaWMtbGl0ZXJhbHNcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5IZXhMaXRlcmFsID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG5cdCAgICAgICAgdmFyIG51bSA9ICcnO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0hleERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG51bS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogNiAvKiBOdW1lcmljTGl0ZXJhbCAqLyxcblx0ICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KCcweCcgKyBudW0sIDE2KSxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhbkJpbmFyeUxpdGVyYWwgPSBmdW5jdGlvbiAoc3RhcnQpIHtcblx0ICAgICAgICB2YXIgbnVtID0gJyc7XG5cdCAgICAgICAgdmFyIGNoO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAoY2ggIT09ICcwJyAmJiBjaCAhPT0gJzEnKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKG51bS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgLy8gb25seSAwYiBvciAwQlxuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG5cdCAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQoY2gpIHx8IGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdChjaCkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiA2IC8qIE51bWVyaWNMaXRlcmFsICovLFxuXHQgICAgICAgICAgICB2YWx1ZTogcGFyc2VJbnQobnVtLCAyKSxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2Nhbk9jdGFsTGl0ZXJhbCA9IGZ1bmN0aW9uIChwcmVmaXgsIHN0YXJ0KSB7XG5cdCAgICAgICAgdmFyIG51bSA9ICcnO1xuXHQgICAgICAgIHZhciBvY3RhbCA9IGZhbHNlO1xuXHQgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KHByZWZpeC5jaGFyQ29kZUF0KDApKSkge1xuXHQgICAgICAgICAgICBvY3RhbCA9IHRydWU7XG5cdCAgICAgICAgICAgIG51bSA9ICcwJyArIHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIW9jdGFsICYmIG51bS5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgLy8gb25seSAwbyBvciAwT1xuXHQgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkgfHwgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogNiAvKiBOdW1lcmljTGl0ZXJhbCAqLyxcblx0ICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KG51bSwgOCksXG5cdCAgICAgICAgICAgIG9jdGFsOiBvY3RhbCxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuaXNJbXBsaWNpdE9jdGFsTGl0ZXJhbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBJbXBsaWNpdCBvY3RhbCwgdW5sZXNzIHRoZXJlIGlzIGEgbm9uLW9jdGFsIGRpZ2l0LlxuXHQgICAgICAgIC8vIChBbm5leCBCLjEuMSBvbiBOdW1lcmljIExpdGVyYWxzKVxuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmluZGV4ICsgMTsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5zb3VyY2VbaV07XG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJzgnIHx8IGNoID09PSAnOScpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc09jdGFsRGlnaXQoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5OdW1lcmljTGl0ZXJhbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3N0YXJ0XTtcblx0ICAgICAgICBhc3NlcnRfMS5hc3NlcnQoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpIHx8IChjaCA9PT0gJy4nKSwgJ051bWVyaWMgbGl0ZXJhbCBtdXN0IHN0YXJ0IHdpdGggYSBkZWNpbWFsIGRpZ2l0IG9yIGEgZGVjaW1hbCBwb2ludCcpO1xuXHQgICAgICAgIHZhciBudW0gPSAnJztcblx0ICAgICAgICBpZiAoY2ggIT09ICcuJykge1xuXHQgICAgICAgICAgICBudW0gPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICAvLyBIZXggbnVtYmVyIHN0YXJ0cyB3aXRoICcweCcuXG5cdCAgICAgICAgICAgIC8vIE9jdGFsIG51bWJlciBzdGFydHMgd2l0aCAnMCcuXG5cdCAgICAgICAgICAgIC8vIE9jdGFsIG51bWJlciBpbiBFUzYgc3RhcnRzIHdpdGggJzBvJy5cblx0ICAgICAgICAgICAgLy8gQmluYXJ5IG51bWJlciBpbiBFUzYgc3RhcnRzIHdpdGggJzBiJy5cblx0ICAgICAgICAgICAgaWYgKG51bSA9PT0gJzAnKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICd4JyB8fCBjaCA9PT0gJ1gnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5IZXhMaXRlcmFsKHN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ2InIHx8IGNoID09PSAnQicpIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbkJpbmFyeUxpdGVyYWwoc3RhcnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnbycgfHwgY2ggPT09ICdPJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5PY3RhbExpdGVyYWwoY2gsIHN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChjaCAmJiBjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNPY3RhbERpZ2l0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbXBsaWNpdE9jdGFsTGl0ZXJhbCgpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5PY3RhbExpdGVyYWwoY2gsIHN0YXJ0KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgd2hpbGUgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdCh0aGlzLnNvdXJjZS5jaGFyQ29kZUF0KHRoaXMuaW5kZXgpKSkge1xuXHQgICAgICAgICAgICAgICAgbnVtICs9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNoID09PSAnLicpIHtcblx0ICAgICAgICAgICAgbnVtICs9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIHdoaWxlIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleF07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjaCA9PT0gJ2UnIHx8IGNoID09PSAnRScpIHtcblx0ICAgICAgICAgICAgbnVtICs9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleF07XG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJysnIHx8IGNoID09PSAnLScpIHtcblx0ICAgICAgICAgICAgICAgIG51bSArPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNEZWNpbWFsRGlnaXQodGhpcy5zb3VyY2UuY2hhckNvZGVBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBudW0gKz0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzSWRlbnRpZmllclN0YXJ0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogNiAvKiBOdW1lcmljTGl0ZXJhbCAqLyxcblx0ICAgICAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQobnVtKSxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGl0ZXJhbHMtc3RyaW5nLWxpdGVyYWxzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIHZhciBxdW90ZSA9IHRoaXMuc291cmNlW3N0YXJ0XTtcblx0ICAgICAgICBhc3NlcnRfMS5hc3NlcnQoKHF1b3RlID09PSAnXFwnJyB8fCBxdW90ZSA9PT0gJ1wiJyksICdTdHJpbmcgbGl0ZXJhbCBtdXN0IHN0YXJ0cyB3aXRoIGEgcXVvdGUnKTtcblx0ICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgdmFyIG9jdGFsID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIHN0ciA9ICcnO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICB2YXIgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgICAgICBpZiAoY2ggPT09IHF1b3RlKSB7XG5cdCAgICAgICAgICAgICAgICBxdW90ZSA9ICcnO1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuXHQgICAgICAgICAgICAgICAgY2ggPSB0aGlzLnNvdXJjZVt0aGlzLmluZGV4KytdO1xuXHQgICAgICAgICAgICAgICAgaWYgKCFjaCB8fCAhY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRoaXMuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmVzY2FwZWRfMSA9IHRoaXMuc2NhbkhleEVzY2FwZShjaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuZXNjYXBlZF8xID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHVuZXNjYXBlZF8xO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3gnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuZXNjYXBlZCA9IHRoaXMuc2NhbkhleEVzY2FwZShjaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5lc2NhcGVkID09PSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRIZXhFc2NhcGVTZXF1ZW5jZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gdW5lc2NhcGVkO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXG4nO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXHInO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXHQnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXGInO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXGYnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXHgwQic7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnOCc6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzknOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2ggJiYgY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvY3RUb0RlYyA9IHRoaXMub2N0YWxUb0RlY2ltYWwoY2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jdGFsID0gb2N0VG9EZWMub2N0YWwgfHwgb2N0YWw7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUob2N0VG9EZWMuY29kZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMubGluZU51bWJlcjtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAnXFxuJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbHNlIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNMaW5lVGVybWluYXRvcihjaC5jaGFyQ29kZUF0KDApKSkge1xuXHQgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHF1b3RlICE9PSAnJykge1xuXHQgICAgICAgICAgICB0aGlzLmluZGV4ID0gc3RhcnQ7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogOCAvKiBTdHJpbmdMaXRlcmFsICovLFxuXHQgICAgICAgICAgICB2YWx1ZTogc3RyLFxuXHQgICAgICAgICAgICBvY3RhbDogb2N0YWwsXG5cdCAgICAgICAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcblx0ICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcblx0ICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuXHQgICAgICAgICAgICBlbmQ6IHRoaXMuaW5kZXhcblx0ICAgICAgICB9O1xuXHQgICAgfTtcblx0ICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5zY2FuVGVtcGxhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGNvb2tlZCA9ICcnO1xuXHQgICAgICAgIHZhciB0ZXJtaW5hdGVkID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcblx0ICAgICAgICB2YXIgaGVhZCA9ICh0aGlzLnNvdXJjZVtzdGFydF0gPT09ICdgJyk7XG5cdCAgICAgICAgdmFyIHRhaWwgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgcmF3T2Zmc2V0ID0gMjtcblx0ICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XG5cdCAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJ2AnKSB7XG5cdCAgICAgICAgICAgICAgICByYXdPZmZzZXQgPSAxO1xuXHQgICAgICAgICAgICAgICAgdGFpbCA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICB0ZXJtaW5hdGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnJCcpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ3snKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJseVN0YWNrLnB1c2goJyR7Jyk7XG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY29va2VkICs9IGNoO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNoID09PSAnXFxcXCcpIHtcblx0ICAgICAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICAgICAgICAgIGlmICghY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXG4nO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3InOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXHInO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXHQnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc291cmNlW3RoaXMuaW5kZXhdID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IHRoaXMuc2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN0b3JlID0gdGhpcy5pbmRleDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdW5lc2NhcGVkXzIgPSB0aGlzLnNjYW5IZXhFc2NhcGUoY2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmVzY2FwZWRfMiAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29rZWQgKz0gdW5lc2NhcGVkXzI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gcmVzdG9yZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd4Jzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmVzY2FwZWQgPSB0aGlzLnNjYW5IZXhFc2NhcGUoY2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuZXNjYXBlZCA9PT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkSGV4RXNjYXBlU2VxdWVuY2UpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IHVuZXNjYXBlZDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFxiJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFxmJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2Jzpcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tlZCArPSAnXFx2Jztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnMCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWw6IFxcMDEgXFwwMiBhbmQgc28gb25cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLlRlbXBsYXRlT2N0YWxMaXRlcmFsKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9ICdcXDAnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzT2N0YWxEaWdpdChjaC5jaGFyQ29kZUF0KDApKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWw6IFxcMSBcXDJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRocm93VW5leHBlY3RlZFRva2VuKG1lc3NhZ2VzXzEuTWVzc2FnZXMuVGVtcGxhdGVPY3RhbExpdGVyYWwpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2VkICs9IGNoO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmxpbmVOdW1iZXI7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ1xcbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKyt0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgICsrdGhpcy5saW5lTnVtYmVyO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiB0aGlzLnNvdXJjZVt0aGlzLmluZGV4XSA9PT0gJ1xcbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICBjb29rZWQgKz0gJ1xcbic7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBjb29rZWQgKz0gY2g7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCF0ZXJtaW5hdGVkKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFoZWFkKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY3VybHlTdGFjay5wb3AoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgdHlwZTogMTAgLyogVGVtcGxhdGUgKi8sXG5cdCAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNvdXJjZS5zbGljZShzdGFydCArIDEsIHRoaXMuaW5kZXggLSByYXdPZmZzZXQpLFxuXHQgICAgICAgICAgICBjb29rZWQ6IGNvb2tlZCxcblx0ICAgICAgICAgICAgaGVhZDogaGVhZCxcblx0ICAgICAgICAgICAgdGFpbDogdGFpbCxcblx0ICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICBsaW5lU3RhcnQ6IHRoaXMubGluZVN0YXJ0LFxuXHQgICAgICAgICAgICBzdGFydDogc3RhcnQsXG5cdCAgICAgICAgICAgIGVuZDogdGhpcy5pbmRleFxuXHQgICAgICAgIH07XG5cdCAgICB9O1xuXHQgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtbGl0ZXJhbHMtcmVndWxhci1leHByZXNzaW9uLWxpdGVyYWxzXG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS50ZXN0UmVnRXhwID0gZnVuY3Rpb24gKHBhdHRlcm4sIGZsYWdzKSB7XG5cdCAgICAgICAgLy8gVGhlIEJNUCBjaGFyYWN0ZXIgdG8gdXNlIGFzIGEgcmVwbGFjZW1lbnQgZm9yIGFzdHJhbCBzeW1ib2xzIHdoZW5cblx0ICAgICAgICAvLyB0cmFuc2xhdGluZyBhbiBFUzYgXCJ1XCItZmxhZ2dlZCBwYXR0ZXJuIHRvIGFuIEVTNS1jb21wYXRpYmxlXG5cdCAgICAgICAgLy8gYXBwcm94aW1hdGlvbi5cblx0ICAgICAgICAvLyBOb3RlOiByZXBsYWNpbmcgd2l0aCAnXFx1RkZGRicgZW5hYmxlcyBmYWxzZSBwb3NpdGl2ZXMgaW4gdW5saWtlbHlcblx0ICAgICAgICAvLyBzY2VuYXJpb3MuIEZvciBleGFtcGxlLCBgW1xcdXsxMDQ0Zn0tXFx1ezEwNDQwfV1gIGlzIGFuIGludmFsaWRcblx0ICAgICAgICAvLyBwYXR0ZXJuIHRoYXQgd291bGQgbm90IGJlIGRldGVjdGVkIGJ5IHRoaXMgc3Vic3RpdHV0aW9uLlxuXHQgICAgICAgIHZhciBhc3RyYWxTdWJzdGl0dXRlID0gJ1xcdUZGRkYnO1xuXHQgICAgICAgIHZhciB0bXAgPSBwYXR0ZXJuO1xuXHQgICAgICAgIHZhciBzZWxmID0gdGhpcztcblx0ICAgICAgICBpZiAoZmxhZ3MuaW5kZXhPZigndScpID49IDApIHtcblx0ICAgICAgICAgICAgdG1wID0gdG1wXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXHVcXHsoWzAtOWEtZkEtRl0rKVxcfXxcXFxcdShbYS1mQS1GMC05XXs0fSkvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBwYXJzZUludCgkMSB8fCAkMiwgMTYpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4MTBGRkZGKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZi50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLkludmFsaWRSZWdFeHApO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA8PSAweEZGRkYpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGFzdHJhbFN1YnN0aXR1dGU7XG5cdCAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLCBhc3RyYWxTdWJzdGl0dXRlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gRmlyc3QsIGRldGVjdCBpbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbnMuXG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgUmVnRXhwKHRtcCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5JbnZhbGlkUmVnRXhwKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gUmV0dXJuIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdCBmb3IgdGhpcyBwYXR0ZXJuLWZsYWcgcGFpciwgb3Jcblx0ICAgICAgICAvLyBgbnVsbGAgaW4gY2FzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IHN1cHBvcnQgdGhlIGZsYWdzIGl0XG5cdCAgICAgICAgLy8gdXNlcy5cblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcblx0ICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5SZWdFeHBCb2R5ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgIGFzc2VydF8xLmFzc2VydChjaCA9PT0gJy8nLCAnUmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgbXVzdCBzdGFydCB3aXRoIGEgc2xhc2gnKTtcblx0ICAgICAgICB2YXIgc3RyID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICB2YXIgY2xhc3NNYXJrZXIgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgdGVybWluYXRlZCA9IGZhbHNlO1xuXHQgICAgICAgIHdoaWxlICghdGhpcy5lb2YoKSkge1xuXHQgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXgrK107XG5cdCAgICAgICAgICAgIHN0ciArPSBjaDtcblx0ICAgICAgICAgICAgaWYgKGNoID09PSAnXFxcXCcpIHtcblx0ICAgICAgICAgICAgICAgIGNoID0gdGhpcy5zb3VyY2VbdGhpcy5pbmRleCsrXTtcblx0ICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWxpdGVyYWxzLXJlZ3VsYXItZXhwcmVzc2lvbi1saXRlcmFsc1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0xpbmVUZXJtaW5hdG9yKGNoLmNoYXJDb2RlQXQoMCkpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLlVudGVybWluYXRlZFJlZ0V4cCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBzdHIgKz0gY2g7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzTGluZVRlcm1pbmF0b3IoY2guY2hhckNvZGVBdCgwKSkpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMudGhyb3dVbmV4cGVjdGVkVG9rZW4obWVzc2FnZXNfMS5NZXNzYWdlcy5VbnRlcm1pbmF0ZWRSZWdFeHApO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGVsc2UgaWYgKGNsYXNzTWFya2VyKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICddJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTWFya2VyID0gZmFsc2U7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICcvJykge1xuXHQgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZWQgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdbJykge1xuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTWFya2VyID0gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRlcm1pbmF0ZWQpIHtcblx0ICAgICAgICAgICAgdGhpcy50aHJvd1VuZXhwZWN0ZWRUb2tlbihtZXNzYWdlc18xLk1lc3NhZ2VzLlVudGVybWluYXRlZFJlZ0V4cCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIEV4Y2x1ZGUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guXG5cdCAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoMSwgc3RyLmxlbmd0aCAtIDIpO1xuXHQgICAgfTtcblx0ICAgIFNjYW5uZXIucHJvdG90eXBlLnNjYW5SZWdFeHBGbGFncyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RyID0gJyc7XG5cdCAgICAgICAgdmFyIGZsYWdzID0gJyc7XG5cdCAgICAgICAgd2hpbGUgKCF0aGlzLmVvZigpKSB7XG5cdCAgICAgICAgICAgIHZhciBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICBpZiAoIWNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJQYXJ0KGNoLmNoYXJDb2RlQXQoMCkpKSB7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnICYmICF0aGlzLmVvZigpKSB7XG5cdCAgICAgICAgICAgICAgICBjaCA9IHRoaXMuc291cmNlW3RoaXMuaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgaWYgKGNoID09PSAndScpIHtcblx0ICAgICAgICAgICAgICAgICAgICArK3RoaXMuaW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3RvcmUgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyID0gdGhpcy5zY2FuSGV4RXNjYXBlKCd1Jyk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgIT09IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MgKz0gY2hhcjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChzdHIgKz0gJ1xcXFx1JzsgcmVzdG9yZSA8IHRoaXMuaW5kZXg7ICsrcmVzdG9yZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRoaXMuc291cmNlW3Jlc3RvcmVdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gcmVzdG9yZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MgKz0gJ3UnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx1Jztcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50b2xlcmF0ZVVuZXhwZWN0ZWRUb2tlbigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcJztcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnRvbGVyYXRlVW5leHBlY3RlZFRva2VuKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBmbGFncyArPSBjaDtcblx0ICAgICAgICAgICAgICAgIHN0ciArPSBjaDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZmxhZ3M7XG5cdCAgICB9O1xuXHQgICAgU2Nhbm5lci5wcm90b3R5cGUuc2NhblJlZ0V4cCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuXHQgICAgICAgIHZhciBwYXR0ZXJuID0gdGhpcy5zY2FuUmVnRXhwQm9keSgpO1xuXHQgICAgICAgIHZhciBmbGFncyA9IHRoaXMuc2NhblJlZ0V4cEZsYWdzKCk7XG5cdCAgICAgICAgdmFyIHZhbHVlID0gdGhpcy50ZXN0UmVnRXhwKHBhdHRlcm4sIGZsYWdzKTtcblx0ICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICB0eXBlOiA5IC8qIFJlZ3VsYXJFeHByZXNzaW9uICovLFxuXHQgICAgICAgICAgICB2YWx1ZTogJycsXG5cdCAgICAgICAgICAgIHBhdHRlcm46IHBhdHRlcm4sXG5cdCAgICAgICAgICAgIGZsYWdzOiBmbGFncyxcblx0ICAgICAgICAgICAgcmVnZXg6IHZhbHVlLFxuXHQgICAgICAgICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgIGxpbmVTdGFydDogdGhpcy5saW5lU3RhcnQsXG5cdCAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcblx0ICAgICAgICAgICAgZW5kOiB0aGlzLmluZGV4XG5cdCAgICAgICAgfTtcblx0ICAgIH07XG5cdCAgICBTY2FubmVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuZW9mKCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHR5cGU6IDIgLyogRU9GICovLFxuXHQgICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuXHQgICAgICAgICAgICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgbGluZVN0YXJ0OiB0aGlzLmxpbmVTdGFydCxcblx0ICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLmluZGV4LFxuXHQgICAgICAgICAgICAgICAgZW5kOiB0aGlzLmluZGV4XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBjcCA9IHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG5cdCAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0lkZW50aWZpZXJTdGFydChjcCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhbklkZW50aWZpZXIoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gVmVyeSBjb21tb246ICggYW5kICkgYW5kIDtcblx0ICAgICAgICBpZiAoY3AgPT09IDB4MjggfHwgY3AgPT09IDB4MjkgfHwgY3AgPT09IDB4M0IpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblB1bmN0dWF0b3IoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gU3RyaW5nIGxpdGVyYWwgc3RhcnRzIHdpdGggc2luZ2xlIHF1b3RlIChVKzAwMjcpIG9yIGRvdWJsZSBxdW90ZSAoVSswMDIyKS5cblx0ICAgICAgICBpZiAoY3AgPT09IDB4MjcgfHwgY3AgPT09IDB4MjIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblN0cmluZ0xpdGVyYWwoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gRG90ICguKSBVKzAwMkUgY2FuIGFsc28gc3RhcnQgYSBmbG9hdGluZy1wb2ludCBudW1iZXIsIGhlbmNlIHRoZSBuZWVkXG5cdCAgICAgICAgLy8gdG8gY2hlY2sgdGhlIG5leHQgY2hhcmFjdGVyLlxuXHQgICAgICAgIGlmIChjcCA9PT0gMHgyRSkge1xuXHQgICAgICAgICAgICBpZiAoY2hhcmFjdGVyXzEuQ2hhcmFjdGVyLmlzRGVjaW1hbERpZ2l0KHRoaXMuc291cmNlLmNoYXJDb2RlQXQodGhpcy5pbmRleCArIDEpKSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nhbk51bWVyaWNMaXRlcmFsKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblB1bmN0dWF0b3IoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGNoYXJhY3Rlcl8xLkNoYXJhY3Rlci5pc0RlY2ltYWxEaWdpdChjcCkpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nhbk51bWVyaWNMaXRlcmFsKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIFRlbXBsYXRlIGxpdGVyYWxzIHN0YXJ0IHdpdGggYCAoVSswMDYwKSBmb3IgdGVtcGxhdGUgaGVhZFxuXHQgICAgICAgIC8vIG9yIH0gKFUrMDA3RCkgZm9yIHRlbXBsYXRlIG1pZGRsZSBvciB0ZW1wbGF0ZSB0YWlsLlxuXHQgICAgICAgIGlmIChjcCA9PT0gMHg2MCB8fCAoY3AgPT09IDB4N0QgJiYgdGhpcy5jdXJseVN0YWNrW3RoaXMuY3VybHlTdGFjay5sZW5ndGggLSAxXSA9PT0gJyR7JykpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NhblRlbXBsYXRlKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIC8vIFBvc3NpYmxlIGlkZW50aWZpZXIgc3RhcnQgaW4gYSBzdXJyb2dhdGUgcGFpci5cblx0ICAgICAgICBpZiAoY3AgPj0gMHhEODAwICYmIGNwIDwgMHhERkZGKSB7XG5cdCAgICAgICAgICAgIGlmIChjaGFyYWN0ZXJfMS5DaGFyYWN0ZXIuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5jb2RlUG9pbnRBdCh0aGlzLmluZGV4KSkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNjYW5JZGVudGlmaWVyKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuc2NhblB1bmN0dWF0b3IoKTtcblx0ICAgIH07XG5cdCAgICByZXR1cm4gU2Nhbm5lcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5TY2FubmVyID0gU2Nhbm5lcjtcblxuXG4vKioqLyB9LFxuLyogMTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5cdGV4cG9ydHMuVG9rZW5OYW1lID0ge307XG5cdGV4cG9ydHMuVG9rZW5OYW1lWzEgLyogQm9vbGVhbkxpdGVyYWwgKi9dID0gJ0Jvb2xlYW4nO1xuXHRleHBvcnRzLlRva2VuTmFtZVsyIC8qIEVPRiAqL10gPSAnPGVuZD4nO1xuXHRleHBvcnRzLlRva2VuTmFtZVszIC8qIElkZW50aWZpZXIgKi9dID0gJ0lkZW50aWZpZXInO1xuXHRleHBvcnRzLlRva2VuTmFtZVs0IC8qIEtleXdvcmQgKi9dID0gJ0tleXdvcmQnO1xuXHRleHBvcnRzLlRva2VuTmFtZVs1IC8qIE51bGxMaXRlcmFsICovXSA9ICdOdWxsJztcblx0ZXhwb3J0cy5Ub2tlbk5hbWVbNiAvKiBOdW1lcmljTGl0ZXJhbCAqL10gPSAnTnVtZXJpYyc7XG5cdGV4cG9ydHMuVG9rZW5OYW1lWzcgLyogUHVuY3R1YXRvciAqL10gPSAnUHVuY3R1YXRvcic7XG5cdGV4cG9ydHMuVG9rZW5OYW1lWzggLyogU3RyaW5nTGl0ZXJhbCAqL10gPSAnU3RyaW5nJztcblx0ZXhwb3J0cy5Ub2tlbk5hbWVbOSAvKiBSZWd1bGFyRXhwcmVzc2lvbiAqL10gPSAnUmVndWxhckV4cHJlc3Npb24nO1xuXHRleHBvcnRzLlRva2VuTmFtZVsxMCAvKiBUZW1wbGF0ZSAqL10gPSAnVGVtcGxhdGUnO1xuXG5cbi8qKiovIH0sXG4vKiAxNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdC8vIEdlbmVyYXRlZCBieSBnZW5lcmF0ZS14aHRtbC1lbnRpdGllcy5qcy4gRE8gTk9UIE1PRElGWSFcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXHRleHBvcnRzLlhIVE1MRW50aXRpZXMgPSB7XG5cdCAgICBxdW90OiAnXFx1MDAyMicsXG5cdCAgICBhbXA6ICdcXHUwMDI2Jyxcblx0ICAgIGFwb3M6ICdcXHUwMDI3Jyxcblx0ICAgIGd0OiAnXFx1MDAzRScsXG5cdCAgICBuYnNwOiAnXFx1MDBBMCcsXG5cdCAgICBpZXhjbDogJ1xcdTAwQTEnLFxuXHQgICAgY2VudDogJ1xcdTAwQTInLFxuXHQgICAgcG91bmQ6ICdcXHUwMEEzJyxcblx0ICAgIGN1cnJlbjogJ1xcdTAwQTQnLFxuXHQgICAgeWVuOiAnXFx1MDBBNScsXG5cdCAgICBicnZiYXI6ICdcXHUwMEE2Jyxcblx0ICAgIHNlY3Q6ICdcXHUwMEE3Jyxcblx0ICAgIHVtbDogJ1xcdTAwQTgnLFxuXHQgICAgY29weTogJ1xcdTAwQTknLFxuXHQgICAgb3JkZjogJ1xcdTAwQUEnLFxuXHQgICAgbGFxdW86ICdcXHUwMEFCJyxcblx0ICAgIG5vdDogJ1xcdTAwQUMnLFxuXHQgICAgc2h5OiAnXFx1MDBBRCcsXG5cdCAgICByZWc6ICdcXHUwMEFFJyxcblx0ICAgIG1hY3I6ICdcXHUwMEFGJyxcblx0ICAgIGRlZzogJ1xcdTAwQjAnLFxuXHQgICAgcGx1c21uOiAnXFx1MDBCMScsXG5cdCAgICBzdXAyOiAnXFx1MDBCMicsXG5cdCAgICBzdXAzOiAnXFx1MDBCMycsXG5cdCAgICBhY3V0ZTogJ1xcdTAwQjQnLFxuXHQgICAgbWljcm86ICdcXHUwMEI1Jyxcblx0ICAgIHBhcmE6ICdcXHUwMEI2Jyxcblx0ICAgIG1pZGRvdDogJ1xcdTAwQjcnLFxuXHQgICAgY2VkaWw6ICdcXHUwMEI4Jyxcblx0ICAgIHN1cDE6ICdcXHUwMEI5Jyxcblx0ICAgIG9yZG06ICdcXHUwMEJBJyxcblx0ICAgIHJhcXVvOiAnXFx1MDBCQicsXG5cdCAgICBmcmFjMTQ6ICdcXHUwMEJDJyxcblx0ICAgIGZyYWMxMjogJ1xcdTAwQkQnLFxuXHQgICAgZnJhYzM0OiAnXFx1MDBCRScsXG5cdCAgICBpcXVlc3Q6ICdcXHUwMEJGJyxcblx0ICAgIEFncmF2ZTogJ1xcdTAwQzAnLFxuXHQgICAgQWFjdXRlOiAnXFx1MDBDMScsXG5cdCAgICBBY2lyYzogJ1xcdTAwQzInLFxuXHQgICAgQXRpbGRlOiAnXFx1MDBDMycsXG5cdCAgICBBdW1sOiAnXFx1MDBDNCcsXG5cdCAgICBBcmluZzogJ1xcdTAwQzUnLFxuXHQgICAgQUVsaWc6ICdcXHUwMEM2Jyxcblx0ICAgIENjZWRpbDogJ1xcdTAwQzcnLFxuXHQgICAgRWdyYXZlOiAnXFx1MDBDOCcsXG5cdCAgICBFYWN1dGU6ICdcXHUwMEM5Jyxcblx0ICAgIEVjaXJjOiAnXFx1MDBDQScsXG5cdCAgICBFdW1sOiAnXFx1MDBDQicsXG5cdCAgICBJZ3JhdmU6ICdcXHUwMENDJyxcblx0ICAgIElhY3V0ZTogJ1xcdTAwQ0QnLFxuXHQgICAgSWNpcmM6ICdcXHUwMENFJyxcblx0ICAgIEl1bWw6ICdcXHUwMENGJyxcblx0ICAgIEVUSDogJ1xcdTAwRDAnLFxuXHQgICAgTnRpbGRlOiAnXFx1MDBEMScsXG5cdCAgICBPZ3JhdmU6ICdcXHUwMEQyJyxcblx0ICAgIE9hY3V0ZTogJ1xcdTAwRDMnLFxuXHQgICAgT2NpcmM6ICdcXHUwMEQ0Jyxcblx0ICAgIE90aWxkZTogJ1xcdTAwRDUnLFxuXHQgICAgT3VtbDogJ1xcdTAwRDYnLFxuXHQgICAgdGltZXM6ICdcXHUwMEQ3Jyxcblx0ICAgIE9zbGFzaDogJ1xcdTAwRDgnLFxuXHQgICAgVWdyYXZlOiAnXFx1MDBEOScsXG5cdCAgICBVYWN1dGU6ICdcXHUwMERBJyxcblx0ICAgIFVjaXJjOiAnXFx1MDBEQicsXG5cdCAgICBVdW1sOiAnXFx1MDBEQycsXG5cdCAgICBZYWN1dGU6ICdcXHUwMEREJyxcblx0ICAgIFRIT1JOOiAnXFx1MDBERScsXG5cdCAgICBzemxpZzogJ1xcdTAwREYnLFxuXHQgICAgYWdyYXZlOiAnXFx1MDBFMCcsXG5cdCAgICBhYWN1dGU6ICdcXHUwMEUxJyxcblx0ICAgIGFjaXJjOiAnXFx1MDBFMicsXG5cdCAgICBhdGlsZGU6ICdcXHUwMEUzJyxcblx0ICAgIGF1bWw6ICdcXHUwMEU0Jyxcblx0ICAgIGFyaW5nOiAnXFx1MDBFNScsXG5cdCAgICBhZWxpZzogJ1xcdTAwRTYnLFxuXHQgICAgY2NlZGlsOiAnXFx1MDBFNycsXG5cdCAgICBlZ3JhdmU6ICdcXHUwMEU4Jyxcblx0ICAgIGVhY3V0ZTogJ1xcdTAwRTknLFxuXHQgICAgZWNpcmM6ICdcXHUwMEVBJyxcblx0ICAgIGV1bWw6ICdcXHUwMEVCJyxcblx0ICAgIGlncmF2ZTogJ1xcdTAwRUMnLFxuXHQgICAgaWFjdXRlOiAnXFx1MDBFRCcsXG5cdCAgICBpY2lyYzogJ1xcdTAwRUUnLFxuXHQgICAgaXVtbDogJ1xcdTAwRUYnLFxuXHQgICAgZXRoOiAnXFx1MDBGMCcsXG5cdCAgICBudGlsZGU6ICdcXHUwMEYxJyxcblx0ICAgIG9ncmF2ZTogJ1xcdTAwRjInLFxuXHQgICAgb2FjdXRlOiAnXFx1MDBGMycsXG5cdCAgICBvY2lyYzogJ1xcdTAwRjQnLFxuXHQgICAgb3RpbGRlOiAnXFx1MDBGNScsXG5cdCAgICBvdW1sOiAnXFx1MDBGNicsXG5cdCAgICBkaXZpZGU6ICdcXHUwMEY3Jyxcblx0ICAgIG9zbGFzaDogJ1xcdTAwRjgnLFxuXHQgICAgdWdyYXZlOiAnXFx1MDBGOScsXG5cdCAgICB1YWN1dGU6ICdcXHUwMEZBJyxcblx0ICAgIHVjaXJjOiAnXFx1MDBGQicsXG5cdCAgICB1dW1sOiAnXFx1MDBGQycsXG5cdCAgICB5YWN1dGU6ICdcXHUwMEZEJyxcblx0ICAgIHRob3JuOiAnXFx1MDBGRScsXG5cdCAgICB5dW1sOiAnXFx1MDBGRicsXG5cdCAgICBPRWxpZzogJ1xcdTAxNTInLFxuXHQgICAgb2VsaWc6ICdcXHUwMTUzJyxcblx0ICAgIFNjYXJvbjogJ1xcdTAxNjAnLFxuXHQgICAgc2Nhcm9uOiAnXFx1MDE2MScsXG5cdCAgICBZdW1sOiAnXFx1MDE3OCcsXG5cdCAgICBmbm9mOiAnXFx1MDE5MicsXG5cdCAgICBjaXJjOiAnXFx1MDJDNicsXG5cdCAgICB0aWxkZTogJ1xcdTAyREMnLFxuXHQgICAgQWxwaGE6ICdcXHUwMzkxJyxcblx0ICAgIEJldGE6ICdcXHUwMzkyJyxcblx0ICAgIEdhbW1hOiAnXFx1MDM5MycsXG5cdCAgICBEZWx0YTogJ1xcdTAzOTQnLFxuXHQgICAgRXBzaWxvbjogJ1xcdTAzOTUnLFxuXHQgICAgWmV0YTogJ1xcdTAzOTYnLFxuXHQgICAgRXRhOiAnXFx1MDM5NycsXG5cdCAgICBUaGV0YTogJ1xcdTAzOTgnLFxuXHQgICAgSW90YTogJ1xcdTAzOTknLFxuXHQgICAgS2FwcGE6ICdcXHUwMzlBJyxcblx0ICAgIExhbWJkYTogJ1xcdTAzOUInLFxuXHQgICAgTXU6ICdcXHUwMzlDJyxcblx0ICAgIE51OiAnXFx1MDM5RCcsXG5cdCAgICBYaTogJ1xcdTAzOUUnLFxuXHQgICAgT21pY3JvbjogJ1xcdTAzOUYnLFxuXHQgICAgUGk6ICdcXHUwM0EwJyxcblx0ICAgIFJobzogJ1xcdTAzQTEnLFxuXHQgICAgU2lnbWE6ICdcXHUwM0EzJyxcblx0ICAgIFRhdTogJ1xcdTAzQTQnLFxuXHQgICAgVXBzaWxvbjogJ1xcdTAzQTUnLFxuXHQgICAgUGhpOiAnXFx1MDNBNicsXG5cdCAgICBDaGk6ICdcXHUwM0E3Jyxcblx0ICAgIFBzaTogJ1xcdTAzQTgnLFxuXHQgICAgT21lZ2E6ICdcXHUwM0E5Jyxcblx0ICAgIGFscGhhOiAnXFx1MDNCMScsXG5cdCAgICBiZXRhOiAnXFx1MDNCMicsXG5cdCAgICBnYW1tYTogJ1xcdTAzQjMnLFxuXHQgICAgZGVsdGE6ICdcXHUwM0I0Jyxcblx0ICAgIGVwc2lsb246ICdcXHUwM0I1Jyxcblx0ICAgIHpldGE6ICdcXHUwM0I2Jyxcblx0ICAgIGV0YTogJ1xcdTAzQjcnLFxuXHQgICAgdGhldGE6ICdcXHUwM0I4Jyxcblx0ICAgIGlvdGE6ICdcXHUwM0I5Jyxcblx0ICAgIGthcHBhOiAnXFx1MDNCQScsXG5cdCAgICBsYW1iZGE6ICdcXHUwM0JCJyxcblx0ICAgIG11OiAnXFx1MDNCQycsXG5cdCAgICBudTogJ1xcdTAzQkQnLFxuXHQgICAgeGk6ICdcXHUwM0JFJyxcblx0ICAgIG9taWNyb246ICdcXHUwM0JGJyxcblx0ICAgIHBpOiAnXFx1MDNDMCcsXG5cdCAgICByaG86ICdcXHUwM0MxJyxcblx0ICAgIHNpZ21hZjogJ1xcdTAzQzInLFxuXHQgICAgc2lnbWE6ICdcXHUwM0MzJyxcblx0ICAgIHRhdTogJ1xcdTAzQzQnLFxuXHQgICAgdXBzaWxvbjogJ1xcdTAzQzUnLFxuXHQgICAgcGhpOiAnXFx1MDNDNicsXG5cdCAgICBjaGk6ICdcXHUwM0M3Jyxcblx0ICAgIHBzaTogJ1xcdTAzQzgnLFxuXHQgICAgb21lZ2E6ICdcXHUwM0M5Jyxcblx0ICAgIHRoZXRhc3ltOiAnXFx1MDNEMScsXG5cdCAgICB1cHNpaDogJ1xcdTAzRDInLFxuXHQgICAgcGl2OiAnXFx1MDNENicsXG5cdCAgICBlbnNwOiAnXFx1MjAwMicsXG5cdCAgICBlbXNwOiAnXFx1MjAwMycsXG5cdCAgICB0aGluc3A6ICdcXHUyMDA5Jyxcblx0ICAgIHp3bmo6ICdcXHUyMDBDJyxcblx0ICAgIHp3ajogJ1xcdTIwMEQnLFxuXHQgICAgbHJtOiAnXFx1MjAwRScsXG5cdCAgICBybG06ICdcXHUyMDBGJyxcblx0ICAgIG5kYXNoOiAnXFx1MjAxMycsXG5cdCAgICBtZGFzaDogJ1xcdTIwMTQnLFxuXHQgICAgbHNxdW86ICdcXHUyMDE4Jyxcblx0ICAgIHJzcXVvOiAnXFx1MjAxOScsXG5cdCAgICBzYnF1bzogJ1xcdTIwMUEnLFxuXHQgICAgbGRxdW86ICdcXHUyMDFDJyxcblx0ICAgIHJkcXVvOiAnXFx1MjAxRCcsXG5cdCAgICBiZHF1bzogJ1xcdTIwMUUnLFxuXHQgICAgZGFnZ2VyOiAnXFx1MjAyMCcsXG5cdCAgICBEYWdnZXI6ICdcXHUyMDIxJyxcblx0ICAgIGJ1bGw6ICdcXHUyMDIyJyxcblx0ICAgIGhlbGxpcDogJ1xcdTIwMjYnLFxuXHQgICAgcGVybWlsOiAnXFx1MjAzMCcsXG5cdCAgICBwcmltZTogJ1xcdTIwMzInLFxuXHQgICAgUHJpbWU6ICdcXHUyMDMzJyxcblx0ICAgIGxzYXF1bzogJ1xcdTIwMzknLFxuXHQgICAgcnNhcXVvOiAnXFx1MjAzQScsXG5cdCAgICBvbGluZTogJ1xcdTIwM0UnLFxuXHQgICAgZnJhc2w6ICdcXHUyMDQ0Jyxcblx0ICAgIGV1cm86ICdcXHUyMEFDJyxcblx0ICAgIGltYWdlOiAnXFx1MjExMScsXG5cdCAgICB3ZWllcnA6ICdcXHUyMTE4Jyxcblx0ICAgIHJlYWw6ICdcXHUyMTFDJyxcblx0ICAgIHRyYWRlOiAnXFx1MjEyMicsXG5cdCAgICBhbGVmc3ltOiAnXFx1MjEzNScsXG5cdCAgICBsYXJyOiAnXFx1MjE5MCcsXG5cdCAgICB1YXJyOiAnXFx1MjE5MScsXG5cdCAgICByYXJyOiAnXFx1MjE5MicsXG5cdCAgICBkYXJyOiAnXFx1MjE5MycsXG5cdCAgICBoYXJyOiAnXFx1MjE5NCcsXG5cdCAgICBjcmFycjogJ1xcdTIxQjUnLFxuXHQgICAgbEFycjogJ1xcdTIxRDAnLFxuXHQgICAgdUFycjogJ1xcdTIxRDEnLFxuXHQgICAgckFycjogJ1xcdTIxRDInLFxuXHQgICAgZEFycjogJ1xcdTIxRDMnLFxuXHQgICAgaEFycjogJ1xcdTIxRDQnLFxuXHQgICAgZm9yYWxsOiAnXFx1MjIwMCcsXG5cdCAgICBwYXJ0OiAnXFx1MjIwMicsXG5cdCAgICBleGlzdDogJ1xcdTIyMDMnLFxuXHQgICAgZW1wdHk6ICdcXHUyMjA1Jyxcblx0ICAgIG5hYmxhOiAnXFx1MjIwNycsXG5cdCAgICBpc2luOiAnXFx1MjIwOCcsXG5cdCAgICBub3RpbjogJ1xcdTIyMDknLFxuXHQgICAgbmk6ICdcXHUyMjBCJyxcblx0ICAgIHByb2Q6ICdcXHUyMjBGJyxcblx0ICAgIHN1bTogJ1xcdTIyMTEnLFxuXHQgICAgbWludXM6ICdcXHUyMjEyJyxcblx0ICAgIGxvd2FzdDogJ1xcdTIyMTcnLFxuXHQgICAgcmFkaWM6ICdcXHUyMjFBJyxcblx0ICAgIHByb3A6ICdcXHUyMjFEJyxcblx0ICAgIGluZmluOiAnXFx1MjIxRScsXG5cdCAgICBhbmc6ICdcXHUyMjIwJyxcblx0ICAgIGFuZDogJ1xcdTIyMjcnLFxuXHQgICAgb3I6ICdcXHUyMjI4Jyxcblx0ICAgIGNhcDogJ1xcdTIyMjknLFxuXHQgICAgY3VwOiAnXFx1MjIyQScsXG5cdCAgICBpbnQ6ICdcXHUyMjJCJyxcblx0ICAgIHRoZXJlNDogJ1xcdTIyMzQnLFxuXHQgICAgc2ltOiAnXFx1MjIzQycsXG5cdCAgICBjb25nOiAnXFx1MjI0NScsXG5cdCAgICBhc3ltcDogJ1xcdTIyNDgnLFxuXHQgICAgbmU6ICdcXHUyMjYwJyxcblx0ICAgIGVxdWl2OiAnXFx1MjI2MScsXG5cdCAgICBsZTogJ1xcdTIyNjQnLFxuXHQgICAgZ2U6ICdcXHUyMjY1Jyxcblx0ICAgIHN1YjogJ1xcdTIyODInLFxuXHQgICAgc3VwOiAnXFx1MjI4MycsXG5cdCAgICBuc3ViOiAnXFx1MjI4NCcsXG5cdCAgICBzdWJlOiAnXFx1MjI4NicsXG5cdCAgICBzdXBlOiAnXFx1MjI4NycsXG5cdCAgICBvcGx1czogJ1xcdTIyOTUnLFxuXHQgICAgb3RpbWVzOiAnXFx1MjI5NycsXG5cdCAgICBwZXJwOiAnXFx1MjJBNScsXG5cdCAgICBzZG90OiAnXFx1MjJDNScsXG5cdCAgICBsY2VpbDogJ1xcdTIzMDgnLFxuXHQgICAgcmNlaWw6ICdcXHUyMzA5Jyxcblx0ICAgIGxmbG9vcjogJ1xcdTIzMEEnLFxuXHQgICAgcmZsb29yOiAnXFx1MjMwQicsXG5cdCAgICBsb3o6ICdcXHUyNUNBJyxcblx0ICAgIHNwYWRlczogJ1xcdTI2NjAnLFxuXHQgICAgY2x1YnM6ICdcXHUyNjYzJyxcblx0ICAgIGhlYXJ0czogJ1xcdTI2NjUnLFxuXHQgICAgZGlhbXM6ICdcXHUyNjY2Jyxcblx0ICAgIGxhbmc6ICdcXHUyN0U4Jyxcblx0ICAgIHJhbmc6ICdcXHUyN0U5J1xuXHR9O1xuXG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblx0dmFyIGVycm9yX2hhbmRsZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHR2YXIgc2Nhbm5lcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cdHZhciB0b2tlbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdHZhciBSZWFkZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gUmVhZGVyKCkge1xuXHQgICAgICAgIHRoaXMudmFsdWVzID0gW107XG5cdCAgICAgICAgdGhpcy5jdXJseSA9IHRoaXMucGFyZW4gPSAtMTtcblx0ICAgIH1cblx0ICAgIC8vIEEgZnVuY3Rpb24gZm9sbG93aW5nIG9uZSBvZiB0aG9zZSB0b2tlbnMgaXMgYW4gZXhwcmVzc2lvbi5cblx0ICAgIFJlYWRlci5wcm90b3R5cGUuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uID0gZnVuY3Rpb24gKHQpIHtcblx0ICAgICAgICByZXR1cm4gWycoJywgJ3snLCAnWycsICdpbicsICd0eXBlb2YnLCAnaW5zdGFuY2VvZicsICduZXcnLFxuXHQgICAgICAgICAgICAncmV0dXJuJywgJ2Nhc2UnLCAnZGVsZXRlJywgJ3Rocm93JywgJ3ZvaWQnLFxuXHQgICAgICAgICAgICAvLyBhc3NpZ25tZW50IG9wZXJhdG9yc1xuXHQgICAgICAgICAgICAnPScsICcrPScsICctPScsICcqPScsICcqKj0nLCAnLz0nLCAnJT0nLCAnPDw9JywgJz4+PScsICc+Pj49Jyxcblx0ICAgICAgICAgICAgJyY9JywgJ3w9JywgJ149JywgJywnLFxuXHQgICAgICAgICAgICAvLyBiaW5hcnkvdW5hcnkgb3BlcmF0b3JzXG5cdCAgICAgICAgICAgICcrJywgJy0nLCAnKicsICcqKicsICcvJywgJyUnLCAnKysnLCAnLS0nLCAnPDwnLCAnPj4nLCAnPj4+JywgJyYnLFxuXHQgICAgICAgICAgICAnfCcsICdeJywgJyEnLCAnficsICcmJicsICd8fCcsICc/JywgJzonLCAnPT09JywgJz09JywgJz49Jyxcblx0ICAgICAgICAgICAgJzw9JywgJzwnLCAnPicsICchPScsICchPT0nXS5pbmRleE9mKHQpID49IDA7XG5cdCAgICB9O1xuXHQgICAgLy8gRGV0ZXJtaW5lIGlmIGZvcndhcmQgc2xhc2ggKC8pIGlzIGFuIG9wZXJhdG9yIG9yIHBhcnQgb2YgYSByZWd1bGFyIGV4cHJlc3Npb25cblx0ICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3N3ZWV0LmpzL3dpa2kvZGVzaWduXG5cdCAgICBSZWFkZXIucHJvdG90eXBlLmlzUmVnZXhTdGFydCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgcHJldmlvdXMgPSB0aGlzLnZhbHVlc1t0aGlzLnZhbHVlcy5sZW5ndGggLSAxXTtcblx0ICAgICAgICB2YXIgcmVnZXggPSAocHJldmlvdXMgIT09IG51bGwpO1xuXHQgICAgICAgIHN3aXRjaCAocHJldmlvdXMpIHtcblx0ICAgICAgICAgICAgY2FzZSAndGhpcyc6XG5cdCAgICAgICAgICAgIGNhc2UgJ10nOlxuXHQgICAgICAgICAgICAgICAgcmVnZXggPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgICBjYXNlICcpJzpcblx0ICAgICAgICAgICAgICAgIHZhciBrZXl3b3JkID0gdGhpcy52YWx1ZXNbdGhpcy5wYXJlbiAtIDFdO1xuXHQgICAgICAgICAgICAgICAgcmVnZXggPSAoa2V5d29yZCA9PT0gJ2lmJyB8fCBrZXl3b3JkID09PSAnd2hpbGUnIHx8IGtleXdvcmQgPT09ICdmb3InIHx8IGtleXdvcmQgPT09ICd3aXRoJyk7XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgY2FzZSAnfSc6XG5cdCAgICAgICAgICAgICAgICAvLyBEaXZpZGluZyBhIGZ1bmN0aW9uIGJ5IGFueXRoaW5nIG1ha2VzIGxpdHRsZSBzZW5zZSxcblx0ICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSBoYXZlIHRvIGNoZWNrIGZvciB0aGF0LlxuXHQgICAgICAgICAgICAgICAgcmVnZXggPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc1t0aGlzLmN1cmx5IC0gM10gPT09ICdmdW5jdGlvbicpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBBbm9ueW1vdXMgZnVuY3Rpb24sIGUuZy4gZnVuY3Rpb24oKXt9IC80MlxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjaGVjayA9IHRoaXMudmFsdWVzW3RoaXMuY3VybHkgLSA0XTtcblx0ICAgICAgICAgICAgICAgICAgICByZWdleCA9IGNoZWNrID8gIXRoaXMuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uKGNoZWNrKSA6IGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy52YWx1ZXNbdGhpcy5jdXJseSAtIDRdID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTmFtZWQgZnVuY3Rpb24sIGUuZy4gZnVuY3Rpb24gZigpe30gLzQyL1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjaGVjayA9IHRoaXMudmFsdWVzW3RoaXMuY3VybHkgLSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICByZWdleCA9IGNoZWNrID8gIXRoaXMuYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uKGNoZWNrKSA6IHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgZGVmYXVsdDpcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVnZXg7XG5cdCAgICB9O1xuXHQgICAgUmVhZGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHRva2VuKSB7XG5cdCAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDcgLyogUHVuY3R1YXRvciAqLyB8fCB0b2tlbi50eXBlID09PSA0IC8qIEtleXdvcmQgKi8pIHtcblx0ICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09PSAneycpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY3VybHkgPSB0aGlzLnZhbHVlcy5sZW5ndGg7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4udmFsdWUgPT09ICcoJykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5wYXJlbiA9IHRoaXMudmFsdWVzLmxlbmd0aDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHRva2VuLnZhbHVlKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMudmFsdWVzLnB1c2gobnVsbCk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0ICAgIHJldHVybiBSZWFkZXI7XG5cdH0oKSk7XG5cdHZhciBUb2tlbml6ZXIgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gVG9rZW5pemVyKGNvZGUsIGNvbmZpZykge1xuXHQgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gbmV3IGVycm9yX2hhbmRsZXJfMS5FcnJvckhhbmRsZXIoKTtcblx0ICAgICAgICB0aGlzLmVycm9ySGFuZGxlci50b2xlcmFudCA9IGNvbmZpZyA/ICh0eXBlb2YgY29uZmlnLnRvbGVyYW50ID09PSAnYm9vbGVhbicgJiYgY29uZmlnLnRvbGVyYW50KSA6IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuc2Nhbm5lciA9IG5ldyBzY2FubmVyXzEuU2Nhbm5lcihjb2RlLCB0aGlzLmVycm9ySGFuZGxlcik7XG5cdCAgICAgICAgdGhpcy5zY2FubmVyLnRyYWNrQ29tbWVudCA9IGNvbmZpZyA/ICh0eXBlb2YgY29uZmlnLmNvbW1lbnQgPT09ICdib29sZWFuJyAmJiBjb25maWcuY29tbWVudCkgOiBmYWxzZTtcblx0ICAgICAgICB0aGlzLnRyYWNrUmFuZ2UgPSBjb25maWcgPyAodHlwZW9mIGNvbmZpZy5yYW5nZSA9PT0gJ2Jvb2xlYW4nICYmIGNvbmZpZy5yYW5nZSkgOiBmYWxzZTtcblx0ICAgICAgICB0aGlzLnRyYWNrTG9jID0gY29uZmlnID8gKHR5cGVvZiBjb25maWcubG9jID09PSAnYm9vbGVhbicgJiYgY29uZmlnLmxvYykgOiBmYWxzZTtcblx0ICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXHQgICAgICAgIHRoaXMucmVhZGVyID0gbmV3IFJlYWRlcigpO1xuXHQgICAgfVxuXHQgICAgVG9rZW5pemVyLnByb3RvdHlwZS5lcnJvcnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JIYW5kbGVyLmVycm9ycztcblx0ICAgIH07XG5cdCAgICBUb2tlbml6ZXIucHJvdG90eXBlLmdldE5leHRUb2tlbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgIHZhciBjb21tZW50cyA9IHRoaXMuc2Nhbm5lci5zY2FuQ29tbWVudHMoKTtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc2Nhbm5lci50cmFja0NvbW1lbnQpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWVudHMubGVuZ3RoOyArK2kpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGNvbW1lbnRzW2ldO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuc2Nhbm5lci5zb3VyY2Uuc2xpY2UoZS5zbGljZVswXSwgZS5zbGljZVsxXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1lbnQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGUubXVsdGlMaW5lID8gJ0Jsb2NrQ29tbWVudCcgOiAnTGluZUNvbW1lbnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrUmFuZ2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudC5yYW5nZSA9IGUucmFuZ2U7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrTG9jKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQubG9jID0gZS5sb2M7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goY29tbWVudCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKCF0aGlzLnNjYW5uZXIuZW9mKCkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBsb2MgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0xvYykge1xuXHQgICAgICAgICAgICAgICAgICAgIGxvYyA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMuc2Nhbm5lci5saW5lTnVtYmVyLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLnNjYW5uZXIuaW5kZXggLSB0aGlzLnNjYW5uZXIubGluZVN0YXJ0XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZDoge31cblx0ICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UmVnZXggPSAodGhpcy5zY2FubmVyLnNvdXJjZVt0aGlzLnNjYW5uZXIuaW5kZXhdID09PSAnLycpICYmIHRoaXMucmVhZGVyLmlzUmVnZXhTdGFydCgpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gc3RhcnRSZWdleCA/IHRoaXMuc2Nhbm5lci5zY2FuUmVnRXhwKCkgOiB0aGlzLnNjYW5uZXIubGV4KCk7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlYWRlci5wdXNoKHRva2VuKTtcblx0ICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IHtcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlOiB0b2tlbl8xLlRva2VuTmFtZVt0b2tlbi50eXBlXSxcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zY2FubmVyLnNvdXJjZS5zbGljZSh0b2tlbi5zdGFydCwgdG9rZW4uZW5kKVxuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrUmFuZ2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICBlbnRyeS5yYW5nZSA9IFt0b2tlbi5zdGFydCwgdG9rZW4uZW5kXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrTG9jKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbG9jLmVuZCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5zY2FubmVyLmxpbmVOdW1iZXIsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5zY2FubmVyLmluZGV4IC0gdGhpcy5zY2FubmVyLmxpbmVTdGFydFxuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgZW50cnkubG9jID0gbG9jO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDkgLyogUmVndWxhckV4cHJlc3Npb24gKi8pIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcGF0dGVybiA9IHRva2VuLnBhdHRlcm47XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gdG9rZW4uZmxhZ3M7XG5cdCAgICAgICAgICAgICAgICAgICAgZW50cnkucmVnZXggPSB7IHBhdHRlcm46IHBhdHRlcm4sIGZsYWdzOiBmbGFncyB9O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChlbnRyeSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLnNoaWZ0KCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIFRva2VuaXplcjtcblx0fSgpKTtcblx0ZXhwb3J0cy5Ub2tlbml6ZXIgPSBUb2tlbml6ZXI7XG5cblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuOyIsIi8qXG4gIENvcHlyaWdodCAoQykgMjAxMyBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyAnQVMgSVMnXG4gIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcbiAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZnVuY3Rpb24gaXNFeHByZXNzaW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdBc3NpZ25tZW50RXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuICAgICAgICAgICAgY2FzZSAnSWRlbnRpZmllcic6XG4gICAgICAgICAgICBjYXNlICdMaXRlcmFsJzpcbiAgICAgICAgICAgIGNhc2UgJ0xvZ2ljYWxFeHByZXNzaW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuICAgICAgICAgICAgY2FzZSAnTmV3RXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdPYmplY3RFeHByZXNzaW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdUaGlzRXhwcmVzc2lvbic6XG4gICAgICAgICAgICBjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuICAgICAgICAgICAgY2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSXRlcmF0aW9uU3RhdGVtZW50KG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gbnVsbCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0RvV2hpbGVTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRm9ySW5TdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRm9yU3RhdGVtZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ1doaWxlU3RhdGVtZW50JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTdGF0ZW1lbnQobm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PSBudWxsKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQmxvY2tTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnQnJlYWtTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnQ29udGludWVTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRGVidWdnZXJTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnRG9XaGlsZVN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdFbXB0eVN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdFeHByZXNzaW9uU3RhdGVtZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ0ZvckluU3RhdGVtZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ0ZvclN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdJZlN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdMYWJlbGVkU3RhdGVtZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ1JldHVyblN0YXRlbWVudCc6XG4gICAgICAgICAgICBjYXNlICdTd2l0Y2hTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnVGhyb3dTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnVHJ5U3RhdGVtZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ1ZhcmlhYmxlRGVjbGFyYXRpb24nOlxuICAgICAgICAgICAgY2FzZSAnV2hpbGVTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnV2l0aFN0YXRlbWVudCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU291cmNlRWxlbWVudChub2RlKSB7XG4gICAgICByZXR1cm4gaXNTdGF0ZW1lbnQobm9kZSkgfHwgbm9kZSAhPSBudWxsICYmIG5vZGUudHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYWlsaW5nU3RhdGVtZW50KG5vZGUpIHtcbiAgICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnSWZTdGF0ZW1lbnQnOlxuICAgICAgICAgICAgaWYgKG5vZGUuYWx0ZXJuYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5hbHRlcm5hdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jb25zZXF1ZW50O1xuXG4gICAgICAgIGNhc2UgJ0xhYmVsZWRTdGF0ZW1lbnQnOlxuICAgICAgICBjYXNlICdGb3JTdGF0ZW1lbnQnOlxuICAgICAgICBjYXNlICdGb3JJblN0YXRlbWVudCc6XG4gICAgICAgIGNhc2UgJ1doaWxlU3RhdGVtZW50JzpcbiAgICAgICAgY2FzZSAnV2l0aFN0YXRlbWVudCc6XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5ib2R5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzUHJvYmxlbWF0aWNJZlN0YXRlbWVudChub2RlKSB7XG4gICAgICAgIHZhciBjdXJyZW50O1xuXG4gICAgICAgIGlmIChub2RlLnR5cGUgIT09ICdJZlN0YXRlbWVudCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5hbHRlcm5hdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBub2RlLmNvbnNlcXVlbnQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICdJZlN0YXRlbWVudCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hbHRlcm5hdGUgPT0gbnVsbCkgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudCA9IHRyYWlsaW5nU3RhdGVtZW50KGN1cnJlbnQpO1xuICAgICAgICB9IHdoaWxlIChjdXJyZW50KTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGlzRXhwcmVzc2lvbjogaXNFeHByZXNzaW9uLFxuICAgICAgICBpc1N0YXRlbWVudDogaXNTdGF0ZW1lbnQsXG4gICAgICAgIGlzSXRlcmF0aW9uU3RhdGVtZW50OiBpc0l0ZXJhdGlvblN0YXRlbWVudCxcbiAgICAgICAgaXNTb3VyY2VFbGVtZW50OiBpc1NvdXJjZUVsZW1lbnQsXG4gICAgICAgIGlzUHJvYmxlbWF0aWNJZlN0YXRlbWVudDogaXNQcm9ibGVtYXRpY0lmU3RhdGVtZW50LFxuXG4gICAgICAgIHRyYWlsaW5nU3RhdGVtZW50OiB0cmFpbGluZ1N0YXRlbWVudFxuICAgIH07XG59KCkpO1xuLyogdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDogKi9cbiIsIi8qXG4gIENvcHlyaWdodCAoQykgMjAxMy0yMDE0IFl1c3VrZSBTdXp1a2kgPHV0YXRhbmUudGVhQGdtYWlsLmNvbT5cbiAgQ29weXJpZ2h0IChDKSAyMDE0IEl2YW4gTmlrdWxpbiA8aWZhYWFuQGdtYWlsLmNvbT5cblxuICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAgbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG5cbiAgICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZVxuICAgICAgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuICBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4gIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCA8Q09QWVJJR0hUIEhPTERFUj4gQkUgTElBQkxFIEZPUiBBTllcbiAgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVNcbiAgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTO1xuICBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkRcbiAgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GXG4gIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBFUzZSZWdleCwgRVM1UmVnZXgsIE5PTl9BU0NJSV9XSElURVNQQUNFUywgSURFTlRJRklFUl9TVEFSVCwgSURFTlRJRklFUl9QQVJULCBjaDtcblxuICAgIC8vIFNlZSBgdG9vbHMvZ2VuZXJhdGUtaWRlbnRpZmllci1yZWdleC5qc2AuXG4gICAgRVM1UmVnZXggPSB7XG4gICAgICAgIC8vIEVDTUFTY3JpcHQgNS4xL1VuaWNvZGUgdjkuMC4wIE5vbkFzY2lpSWRlbnRpZmllclN0YXJ0OlxuICAgICAgICBOb25Bc2NpaUlkZW50aWZpZXJTdGFydDogL1tcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MS1cXHUwNTg3XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4MFxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1NC1cXHUwRDU2XFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4N1xcdTBFODhcXHUwRThBXFx1MEU4RFxcdTBFOTQtXFx1MEU5N1xcdTBFOTktXFx1MEU5RlxcdTBFQTEtXFx1MEVBM1xcdTBFQTVcXHUwRUE3XFx1MEVBQVxcdTBFQUJcXHUwRUFELVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxODg0XFx1MTg4Ny1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGMVxcdTFDRjVcXHUxQ0Y2XFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNjAtXFx1MjE4OFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkVGXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FFXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXS8sXG4gICAgICAgIC8vIEVDTUFTY3JpcHQgNS4xL1VuaWNvZGUgdjkuMC4wIE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6XG4gICAgICAgIE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzMDAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4My1cXHUwNDg3XFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1OTEtXFx1MDVCRFxcdTA1QkZcXHUwNUMxXFx1MDVDMlxcdTA1QzRcXHUwNUM1XFx1MDVDN1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MTAtXFx1MDYxQVxcdTA2MjAtXFx1MDY2OVxcdTA2NkUtXFx1MDZEM1xcdTA2RDUtXFx1MDZEQ1xcdTA2REYtXFx1MDZFOFxcdTA2RUEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwLVxcdTA3NEFcXHUwNzRELVxcdTA3QjFcXHUwN0MwLVxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODJEXFx1MDg0MC1cXHUwODVCXFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEJEXFx1MDhENC1cXHUwOEUxXFx1MDhFMy1cXHUwOTYzXFx1MDk2Ni1cXHUwOTZGXFx1MDk3MS1cXHUwOTgzXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCQy1cXHUwOUM0XFx1MDlDN1xcdTA5QzhcXHUwOUNCLVxcdTA5Q0VcXHUwOUQ3XFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTNcXHUwOUU2LVxcdTA5RjFcXHUwQTAxLVxcdTBBMDNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBM0NcXHUwQTNFLVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE2Ni1cXHUwQTc1XFx1MEE4MS1cXHUwQTgzXFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJDLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUQwXFx1MEFFMC1cXHUwQUUzXFx1MEFFNi1cXHUwQUVGXFx1MEFGOVxcdTBCMDEtXFx1MEIwM1xcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNDLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjNcXHUwQjY2LVxcdTBCNkZcXHUwQjcxXFx1MEI4MlxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEMFxcdTBCRDdcXHUwQkU2LVxcdTBCRUZcXHUwQzAwLVxcdTBDMDNcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNELVxcdTBDNDRcXHUwQzQ2LVxcdTBDNDhcXHUwQzRBLVxcdTBDNERcXHUwQzU1XFx1MEM1NlxcdTBDNTgtXFx1MEM1QVxcdTBDNjAtXFx1MEM2M1xcdTBDNjYtXFx1MEM2RlxcdTBDODAtXFx1MEM4M1xcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkMtXFx1MENDNFxcdTBDQzYtXFx1MENDOFxcdTBDQ0EtXFx1MENDRFxcdTBDRDVcXHUwQ0Q2XFx1MENERVxcdTBDRTAtXFx1MENFM1xcdTBDRTYtXFx1MENFRlxcdTBDRjFcXHUwQ0YyXFx1MEQwMS1cXHUwRDAzXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRC1cXHUwRDQ0XFx1MEQ0Ni1cXHUwRDQ4XFx1MEQ0QS1cXHUwRDRFXFx1MEQ1NC1cXHUwRDU3XFx1MEQ1Ri1cXHUwRDYzXFx1MEQ2Ni1cXHUwRDZGXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4MlxcdTBEODNcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREU2LVxcdTBERUZcXHUwREYyXFx1MERGM1xcdTBFMDEtXFx1MEUzQVxcdTBFNDAtXFx1MEU0RVxcdTBFNTAtXFx1MEU1OVxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUI5XFx1MEVCQi1cXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFQzgtXFx1MEVDRFxcdTBFRDAtXFx1MEVEOVxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjE4XFx1MEYxOVxcdTBGMjAtXFx1MEYyOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0UtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGNzEtXFx1MEY4NFxcdTBGODYtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDAwLVxcdTEwNDlcXHUxMDUwLVxcdTEwOURcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM1RC1cXHUxMzVGXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZFRS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzE0XFx1MTcyMC1cXHUxNzM0XFx1MTc0MC1cXHUxNzUzXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc3MlxcdTE3NzNcXHUxNzgwLVxcdTE3RDNcXHUxN0Q3XFx1MTdEQ1xcdTE3RERcXHUxN0UwLVxcdTE3RTlcXHUxODBCLVxcdTE4MERcXHUxODEwLVxcdTE4MTlcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTIwLVxcdTE5MkJcXHUxOTMwLVxcdTE5M0JcXHUxOTQ2LVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxOUQwLVxcdTE5RDlcXHUxQTAwLVxcdTFBMUJcXHUxQTIwLVxcdTFBNUVcXHUxQTYwLVxcdTFBN0NcXHUxQTdGLVxcdTFBODlcXHUxQTkwLVxcdTFBOTlcXHUxQUE3XFx1MUFCMC1cXHUxQUJEXFx1MUIwMC1cXHUxQjRCXFx1MUI1MC1cXHUxQjU5XFx1MUI2Qi1cXHUxQjczXFx1MUI4MC1cXHUxQkYzXFx1MUMwMC1cXHUxQzM3XFx1MUM0MC1cXHUxQzQ5XFx1MUM0RC1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUNEMC1cXHUxQ0QyXFx1MUNENC1cXHUxQ0Y2XFx1MUNGOFxcdTFDRjlcXHUxRDAwLVxcdTFERjVcXHUxREZCLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjAwQ1xcdTIwMERcXHUyMDNGXFx1MjA0MFxcdTIwNTRcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIwRDAtXFx1MjBEQ1xcdTIwRTFcXHUyMEU1LVxcdTIwRjBcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE2MC1cXHUyMTg4XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ3Ri1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkRFMC1cXHUyREZGXFx1MkUyRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOTlcXHUzMDlBXFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJEXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkQ1XFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjJCXFx1QTY0MC1cXHVBNjZGXFx1QTY3NC1cXHVBNjdEXFx1QTY3Ri1cXHVBNkYxXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FFXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODI3XFx1QTg0MC1cXHVBODczXFx1QTg4MC1cXHVBOEM1XFx1QThEMC1cXHVBOEQ5XFx1QThFMC1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTAwLVxcdUE5MkRcXHVBOTMwLVxcdUE5NTNcXHVBOTYwLVxcdUE5N0NcXHVBOTgwLVxcdUE5QzBcXHVBOUNGLVxcdUE5RDlcXHVBOUUwLVxcdUE5RkVcXHVBQTAwLVxcdUFBMzZcXHVBQTQwLVxcdUFBNERcXHVBQTUwLVxcdUFBNTlcXHVBQTYwLVxcdUFBNzZcXHVBQTdBLVxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUZcXHVBQUYyLVxcdUFBRjZcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjVcXHVBQjcwLVxcdUFCRUFcXHVBQkVDXFx1QUJFRFxcdUFCRjAtXFx1QUJGOVxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMUQtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJGXFx1RkUzM1xcdUZFMzRcXHVGRTRELVxcdUZFNEZcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjEwLVxcdUZGMTlcXHVGRjIxLVxcdUZGM0FcXHVGRjNGXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXS9cbiAgICB9O1xuXG4gICAgRVM2UmVnZXggPSB7XG4gICAgICAgIC8vIEVDTUFTY3JpcHQgNi9Vbmljb2RlIHY5LjAuMCBOb25Bc2NpaUlkZW50aWZpZXJTdGFydDpcbiAgICAgICAgTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQ6IC9bXFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkVFLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTYwLVxcdTIxODhcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUItXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkVGXFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0FFXFx1QTdCMC1cXHVBN0I3XFx1QTdGNy1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REQ0MC1cXHVERDc0XFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjRBXFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXXxcXHVEODA0W1xcdURDMDMtXFx1REMzN1xcdURDODMtXFx1RENBRlxcdURDRDAtXFx1RENFOFxcdUREMDMtXFx1REQyNlxcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzM0XFx1REM0Ny1cXHVEQzRBXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURGMDAtXFx1REYxOV18XFx1RDgwNltcXHVEQ0EwLVxcdURDREZcXHVEQ0ZGXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMyRVxcdURDNDBcXHVEQzcyLVxcdURDOEZdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDMDAtXFx1REM2RVxcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJdW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNDAtXFx1REY0M1xcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERjAwLVxcdURGNDRcXHVERjUwXFx1REY5My1cXHVERjlGXFx1REZFMF18XFx1RDgyMVtcXHVEQzAwLVxcdURGRUNdfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDBcXHVEQzAxXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M118XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMV18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdLyxcbiAgICAgICAgLy8gRUNNQVNjcmlwdCA2L1VuaWNvZGUgdjkuMC4wIE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6XG4gICAgICAgIE5vbkFzY2lpSWRlbnRpZmllclBhcnQ6IC9bXFx4QUFcXHhCNVxceEI3XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDMwMC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4Ni1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0ODMtXFx1MDQ4N1xcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNTkxLVxcdTA1QkRcXHUwNUJGXFx1MDVDMVxcdTA1QzJcXHUwNUM0XFx1MDVDNVxcdTA1QzdcXHUwNUQwLVxcdTA1RUFcXHUwNUYwLVxcdTA1RjJcXHUwNjEwLVxcdTA2MUFcXHUwNjIwLVxcdTA2NjlcXHUwNjZFLVxcdTA2RDNcXHUwNkQ1LVxcdTA2RENcXHUwNkRGLVxcdTA2RThcXHUwNkVBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMC1cXHUwNzRBXFx1MDc0RC1cXHUwN0IxXFx1MDdDMC1cXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgyRFxcdTA4NDAtXFx1MDg1QlxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA4RDQtXFx1MDhFMVxcdTA4RTMtXFx1MDk2M1xcdTA5NjYtXFx1MDk2RlxcdTA5NzEtXFx1MDk4M1xcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkMtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNFXFx1MDlEN1xcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUzXFx1MDlFNi1cXHUwOUYxXFx1MEEwMS1cXHUwQTAzXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTNDXFx1MEEzRS1cXHUwQTQyXFx1MEE0N1xcdTBBNDhcXHUwQTRCLVxcdTBBNERcXHUwQTUxXFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNjYtXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCQy1cXHUwQUM1XFx1MEFDNy1cXHUwQUM5XFx1MEFDQi1cXHUwQUNEXFx1MEFEMFxcdTBBRTAtXFx1MEFFM1xcdTBBRTYtXFx1MEFFRlxcdTBBRjlcXHUwQjAxLVxcdTBCMDNcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzQy1cXHUwQjQ0XFx1MEI0N1xcdTBCNDhcXHUwQjRCLVxcdTBCNERcXHUwQjU2XFx1MEI1N1xcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYzXFx1MEI2Ni1cXHUwQjZGXFx1MEI3MVxcdTBCODJcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCQkUtXFx1MEJDMlxcdTBCQzYtXFx1MEJDOFxcdTBCQ0EtXFx1MEJDRFxcdTBCRDBcXHUwQkQ3XFx1MEJFNi1cXHUwQkVGXFx1MEMwMC1cXHUwQzAzXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRC1cXHUwQzQ0XFx1MEM0Ni1cXHUwQzQ4XFx1MEM0QS1cXHUwQzREXFx1MEM1NVxcdTBDNTZcXHUwQzU4LVxcdTBDNUFcXHUwQzYwLVxcdTBDNjNcXHUwQzY2LVxcdTBDNkZcXHUwQzgwLVxcdTBDODNcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JDLVxcdTBDQzRcXHUwQ0M2LVxcdTBDQzhcXHUwQ0NBLVxcdTBDQ0RcXHUwQ0Q1XFx1MENENlxcdTBDREVcXHUwQ0UwLVxcdTBDRTNcXHUwQ0U2LVxcdTBDRUZcXHUwQ0YxXFx1MENGMlxcdTBEMDEtXFx1MEQwM1xcdTBEMDUtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0QtXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RVxcdTBENTQtXFx1MEQ1N1xcdTBENUYtXFx1MEQ2M1xcdTBENjYtXFx1MEQ2RlxcdTBEN0EtXFx1MEQ3RlxcdTBEODJcXHUwRDgzXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBEQ0FcXHUwRENGLVxcdTBERDRcXHUwREQ2XFx1MEREOC1cXHUwRERGXFx1MERFNi1cXHUwREVGXFx1MERGMlxcdTBERjNcXHUwRTAxLVxcdTBFM0FcXHUwRTQwLVxcdTBFNEVcXHUwRTUwLVxcdTBFNTlcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg3XFx1MEU4OFxcdTBFOEFcXHUwRThEXFx1MEU5NC1cXHUwRTk3XFx1MEU5OS1cXHUwRTlGXFx1MEVBMS1cXHUwRUEzXFx1MEVBNVxcdTBFQTdcXHUwRUFBXFx1MEVBQlxcdTBFQUQtXFx1MEVCOVxcdTBFQkItXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRUM4LVxcdTBFQ0RcXHUwRUQwLVxcdTBFRDlcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEYxOFxcdTBGMTlcXHUwRjIwLVxcdTBGMjlcXHUwRjM1XFx1MEYzN1xcdTBGMzlcXHUwRjNFLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjcxLVxcdTBGODRcXHUwRjg2LVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAwMC1cXHUxMDQ5XFx1MTA1MC1cXHUxMDlEXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzNUQtXFx1MTM1RlxcdTEzNjktXFx1MTM3MVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RUUtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxNFxcdTE3MjAtXFx1MTczNFxcdTE3NDAtXFx1MTc1M1xcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3NzJcXHUxNzczXFx1MTc4MC1cXHUxN0QzXFx1MTdEN1xcdTE3RENcXHUxN0REXFx1MTdFMC1cXHUxN0U5XFx1MTgwQi1cXHUxODBEXFx1MTgxMC1cXHUxODE5XFx1MTgyMC1cXHUxODc3XFx1MTg4MC1cXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTkyMC1cXHUxOTJCXFx1MTkzMC1cXHUxOTNCXFx1MTk0Ni1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MTlEMC1cXHUxOURBXFx1MUEwMC1cXHUxQTFCXFx1MUEyMC1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3Ri1cXHUxQTg5XFx1MUE5MC1cXHUxQTk5XFx1MUFBN1xcdTFBQjAtXFx1MUFCRFxcdTFCMDAtXFx1MUI0QlxcdTFCNTAtXFx1MUI1OVxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUJGM1xcdTFDMDAtXFx1MUMzN1xcdTFDNDAtXFx1MUM0OVxcdTFDNEQtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNGNlxcdTFDRjhcXHUxQ0Y5XFx1MUQwMC1cXHUxREY1XFx1MURGQi1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwMENcXHUyMDBEXFx1MjAzRlxcdTIwNDBcXHUyMDU0XFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMEQwLVxcdTIwRENcXHUyMEUxXFx1MjBFNS1cXHUyMEYwXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOC1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxNjAtXFx1MjE4OFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEN0YtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJERTAtXFx1MkRGRlxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyRlxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOTktXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRFxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCQVxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCNVxcdTRFMDAtXFx1OUZENVxcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYyQlxcdUE2NDAtXFx1QTY2RlxcdUE2NzQtXFx1QTY3RFxcdUE2N0YtXFx1QTZGMVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdBRVxcdUE3QjAtXFx1QTdCN1xcdUE3RjctXFx1QTgyN1xcdUE4NDAtXFx1QTg3M1xcdUE4ODAtXFx1QThDNVxcdUE4RDAtXFx1QThEOVxcdUE4RTAtXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QTkwMC1cXHVBOTJEXFx1QTkzMC1cXHVBOTUzXFx1QTk2MC1cXHVBOTdDXFx1QTk4MC1cXHVBOUMwXFx1QTlDRi1cXHVBOUQ5XFx1QTlFMC1cXHVBOUZFXFx1QUEwMC1cXHVBQTM2XFx1QUE0MC1cXHVBQTREXFx1QUE1MC1cXHVBQTU5XFx1QUE2MC1cXHVBQTc2XFx1QUE3QS1cXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVGXFx1QUFGMi1cXHVBQUY2XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY1XFx1QUI3MC1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVBQkYwLVxcdUFCRjlcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFELVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFMDAtXFx1RkUwRlxcdUZFMjAtXFx1RkUyRlxcdUZFMzNcXHVGRTM0XFx1RkU0RC1cXHVGRTRGXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYxMC1cXHVGRjE5XFx1RkYyMS1cXHVGRjNBXFx1RkYzRlxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURENDAtXFx1REQ3NFxcdURERkRcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERUUwXFx1REYwMC1cXHVERjFGXFx1REYzMC1cXHVERjRBXFx1REY1MC1cXHVERjdBXFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXFx1REZEMS1cXHVERkQ1XXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQTAtXFx1RENBOVxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDAtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTMzXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNlxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJdfFxcdUQ4MDRbXFx1REMwMC1cXHVEQzQ2XFx1REM2Ni1cXHVEQzZGXFx1REM3Ri1cXHVEQ0JBXFx1RENEMC1cXHVEQ0U4XFx1RENGMC1cXHVEQ0Y5XFx1REQwMC1cXHVERDM0XFx1REQzNi1cXHVERDNGXFx1REQ1MC1cXHVERDczXFx1REQ3NlxcdUREODAtXFx1RERDNFxcdUREQ0EtXFx1RERDQ1xcdURERDAtXFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMzdcXHVERTNFXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVFQVxcdURFRjAtXFx1REVGOVxcdURGMDAtXFx1REYwM1xcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNDLVxcdURGNDRcXHVERjQ3XFx1REY0OFxcdURGNEItXFx1REY0RFxcdURGNTBcXHVERjU3XFx1REY1RC1cXHVERjYzXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDMDAtXFx1REM0QVxcdURDNTAtXFx1REM1OVxcdURDODAtXFx1RENDNVxcdURDQzdcXHVEQ0QwLVxcdURDRDlcXHVERDgwLVxcdUREQjVcXHVEREI4LVxcdUREQzBcXHVEREQ4LVxcdURERERcXHVERTAwLVxcdURFNDBcXHVERTQ0XFx1REU1MC1cXHVERTU5XFx1REU4MC1cXHVERUI3XFx1REVDMC1cXHVERUM5XFx1REYwMC1cXHVERjE5XFx1REYxRC1cXHVERjJCXFx1REYzMC1cXHVERjM5XXxcXHVEODA2W1xcdURDQTAtXFx1RENFOVxcdURDRkZcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzM2XFx1REMzOC1cXHVEQzQwXFx1REM1MC1cXHVEQzU5XFx1REM3Mi1cXHVEQzhGXFx1REM5Mi1cXHVEQ0E3XFx1RENBOS1cXHVEQ0I2XXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzAwLVxcdURDNkVcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERTYwLVxcdURFNjlcXHVERUQwLVxcdURFRURcXHVERUYwLVxcdURFRjRcXHVERjAwLVxcdURGMzZcXHVERjQwLVxcdURGNDNcXHVERjUwLVxcdURGNTlcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REYwMC1cXHVERjQ0XFx1REY1MC1cXHVERjdFXFx1REY4Ri1cXHVERjlGXFx1REZFMF18XFx1RDgyMVtcXHVEQzAwLVxcdURGRUNdfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDBcXHVEQzAxXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OVxcdURDOURcXHVEQzlFXXxcXHVEODM0W1xcdURENjUtXFx1REQ2OVxcdURENkQtXFx1REQ3MlxcdUREN0ItXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFNDItXFx1REU0NF18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXFx1REZDRS1cXHVERkZGXXxcXHVEODM2W1xcdURFMDAtXFx1REUzNlxcdURFM0ItXFx1REU2Q1xcdURFNzVcXHVERTg0XFx1REU5Qi1cXHVERTlGXFx1REVBMS1cXHVERUFGXXxcXHVEODM4W1xcdURDMDAtXFx1REMwNlxcdURDMDgtXFx1REMxOFxcdURDMUItXFx1REMyMVxcdURDMjNcXHVEQzI0XFx1REMyNi1cXHVEQzJBXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDRDAtXFx1RENENlxcdUREMDAtXFx1REQ0QVxcdURENTAtXFx1REQ1OV18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMV18XFx1RDg3RVtcXHVEQzAwLVxcdURFMURdfFxcdURCNDBbXFx1REQwMC1cXHVEREVGXS9cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gaXNEZWNpbWFsRGlnaXQoY2gpIHtcbiAgICAgICAgcmV0dXJuIDB4MzAgPD0gY2ggJiYgY2ggPD0gMHgzOTsgIC8vIDAuLjlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0hleERpZ2l0KGNoKSB7XG4gICAgICAgIHJldHVybiAweDMwIDw9IGNoICYmIGNoIDw9IDB4MzkgfHwgIC8vIDAuLjlcbiAgICAgICAgICAgIDB4NjEgPD0gY2ggJiYgY2ggPD0gMHg2NiB8fCAgICAgLy8gYS4uZlxuICAgICAgICAgICAgMHg0MSA8PSBjaCAmJiBjaCA8PSAweDQ2OyAgICAgICAvLyBBLi5GXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNPY3RhbERpZ2l0KGNoKSB7XG4gICAgICAgIHJldHVybiBjaCA+PSAweDMwICYmIGNoIDw9IDB4Mzc7ICAvLyAwLi43XG4gICAgfVxuXG4gICAgLy8gNy4yIFdoaXRlIFNwYWNlXG5cbiAgICBOT05fQVNDSUlfV0hJVEVTUEFDRVMgPSBbXG4gICAgICAgIDB4MTY4MCxcbiAgICAgICAgMHgyMDAwLCAweDIwMDEsIDB4MjAwMiwgMHgyMDAzLCAweDIwMDQsIDB4MjAwNSwgMHgyMDA2LCAweDIwMDcsIDB4MjAwOCwgMHgyMDA5LCAweDIwMEEsXG4gICAgICAgIDB4MjAyRiwgMHgyMDVGLFxuICAgICAgICAweDMwMDAsXG4gICAgICAgIDB4RkVGRlxuICAgIF07XG5cbiAgICBmdW5jdGlvbiBpc1doaXRlU3BhY2UoY2gpIHtcbiAgICAgICAgcmV0dXJuIGNoID09PSAweDIwIHx8IGNoID09PSAweDA5IHx8IGNoID09PSAweDBCIHx8IGNoID09PSAweDBDIHx8IGNoID09PSAweEEwIHx8XG4gICAgICAgICAgICBjaCA+PSAweDE2ODAgJiYgTk9OX0FTQ0lJX1dISVRFU1BBQ0VTLmluZGV4T2YoY2gpID49IDA7XG4gICAgfVxuXG4gICAgLy8gNy4zIExpbmUgVGVybWluYXRvcnNcblxuICAgIGZ1bmN0aW9uIGlzTGluZVRlcm1pbmF0b3IoY2gpIHtcbiAgICAgICAgcmV0dXJuIGNoID09PSAweDBBIHx8IGNoID09PSAweDBEIHx8IGNoID09PSAweDIwMjggfHwgY2ggPT09IDB4MjAyOTtcbiAgICB9XG5cbiAgICAvLyA3LjYgSWRlbnRpZmllciBOYW1lcyBhbmQgSWRlbnRpZmllcnNcblxuICAgIGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoY3ApIHtcbiAgICAgICAgaWYgKGNwIDw9IDB4RkZGRikgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjcCk7IH1cbiAgICAgICAgdmFyIGN1MSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoTWF0aC5mbG9vcigoY3AgLSAweDEwMDAwKSAvIDB4NDAwKSArIDB4RDgwMCk7XG4gICAgICAgIHZhciBjdTIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoY3AgLSAweDEwMDAwKSAlIDB4NDAwKSArIDB4REMwMCk7XG4gICAgICAgIHJldHVybiBjdTEgKyBjdTI7XG4gICAgfVxuXG4gICAgSURFTlRJRklFUl9TVEFSVCA9IG5ldyBBcnJheSgweDgwKTtcbiAgICBmb3IoY2ggPSAwOyBjaCA8IDB4ODA7ICsrY2gpIHtcbiAgICAgICAgSURFTlRJRklFUl9TVEFSVFtjaF0gPVxuICAgICAgICAgICAgY2ggPj0gMHg2MSAmJiBjaCA8PSAweDdBIHx8ICAvLyBhLi56XG4gICAgICAgICAgICBjaCA+PSAweDQxICYmIGNoIDw9IDB4NUEgfHwgIC8vIEEuLlpcbiAgICAgICAgICAgIGNoID09PSAweDI0IHx8IGNoID09PSAweDVGOyAgLy8gJCAoZG9sbGFyKSBhbmQgXyAodW5kZXJzY29yZSlcbiAgICB9XG5cbiAgICBJREVOVElGSUVSX1BBUlQgPSBuZXcgQXJyYXkoMHg4MCk7XG4gICAgZm9yKGNoID0gMDsgY2ggPCAweDgwOyArK2NoKSB7XG4gICAgICAgIElERU5USUZJRVJfUEFSVFtjaF0gPVxuICAgICAgICAgICAgY2ggPj0gMHg2MSAmJiBjaCA8PSAweDdBIHx8ICAvLyBhLi56XG4gICAgICAgICAgICBjaCA+PSAweDQxICYmIGNoIDw9IDB4NUEgfHwgIC8vIEEuLlpcbiAgICAgICAgICAgIGNoID49IDB4MzAgJiYgY2ggPD0gMHgzOSB8fCAgLy8gMC4uOVxuICAgICAgICAgICAgY2ggPT09IDB4MjQgfHwgY2ggPT09IDB4NUY7ICAvLyAkIChkb2xsYXIpIGFuZCBfICh1bmRlcnNjb3JlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllclN0YXJ0RVM1KGNoKSB7XG4gICAgICAgIHJldHVybiBjaCA8IDB4ODAgPyBJREVOVElGSUVSX1NUQVJUW2NoXSA6IEVTNVJlZ2V4Lk5vbkFzY2lpSWRlbnRpZmllclN0YXJ0LnRlc3QoZnJvbUNvZGVQb2ludChjaCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnRFUzUoY2gpIHtcbiAgICAgICAgcmV0dXJuIGNoIDwgMHg4MCA/IElERU5USUZJRVJfUEFSVFtjaF0gOiBFUzVSZWdleC5Ob25Bc2NpaUlkZW50aWZpZXJQYXJ0LnRlc3QoZnJvbUNvZGVQb2ludChjaCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllclN0YXJ0RVM2KGNoKSB7XG4gICAgICAgIHJldHVybiBjaCA8IDB4ODAgPyBJREVOVElGSUVSX1NUQVJUW2NoXSA6IEVTNlJlZ2V4Lk5vbkFzY2lpSWRlbnRpZmllclN0YXJ0LnRlc3QoZnJvbUNvZGVQb2ludChjaCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllclBhcnRFUzYoY2gpIHtcbiAgICAgICAgcmV0dXJuIGNoIDwgMHg4MCA/IElERU5USUZJRVJfUEFSVFtjaF0gOiBFUzZSZWdleC5Ob25Bc2NpaUlkZW50aWZpZXJQYXJ0LnRlc3QoZnJvbUNvZGVQb2ludChjaCkpO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBpc0RlY2ltYWxEaWdpdDogaXNEZWNpbWFsRGlnaXQsXG4gICAgICAgIGlzSGV4RGlnaXQ6IGlzSGV4RGlnaXQsXG4gICAgICAgIGlzT2N0YWxEaWdpdDogaXNPY3RhbERpZ2l0LFxuICAgICAgICBpc1doaXRlU3BhY2U6IGlzV2hpdGVTcGFjZSxcbiAgICAgICAgaXNMaW5lVGVybWluYXRvcjogaXNMaW5lVGVybWluYXRvcixcbiAgICAgICAgaXNJZGVudGlmaWVyU3RhcnRFUzU6IGlzSWRlbnRpZmllclN0YXJ0RVM1LFxuICAgICAgICBpc0lkZW50aWZpZXJQYXJ0RVM1OiBpc0lkZW50aWZpZXJQYXJ0RVM1LFxuICAgICAgICBpc0lkZW50aWZpZXJTdGFydEVTNjogaXNJZGVudGlmaWVyU3RhcnRFUzYsXG4gICAgICAgIGlzSWRlbnRpZmllclBhcnRFUzY6IGlzSWRlbnRpZmllclBhcnRFUzZcbiAgICB9O1xufSgpKTtcbi8qIHZpbTogc2V0IHN3PTQgdHM9NCBldCB0dz04MCA6ICovXG4iLCIvKlxuICBDb3B5cmlnaHQgKEMpIDIwMTMgWXVzdWtlIFN1enVraSA8dXRhdGFuZS50ZWFAZ21haWwuY29tPlxuXG4gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuICAgICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0XG4gICAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlXG4gICAgICBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG4gIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4gIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiAgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIDxDT1BZUklHSFQgSE9MREVSPiBCRSBMSUFCTEUgRk9SIEFOWVxuICBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFU1xuICAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7XG4gIExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORFxuICBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0ZcbiAgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbihmdW5jdGlvbiAoKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGNvZGUgPSByZXF1aXJlKCcuL2NvZGUnKTtcblxuICAgIGZ1bmN0aW9uIGlzU3RyaWN0TW9kZVJlc2VydmVkV29yZEVTNihpZCkge1xuICAgICAgICBzd2l0Y2ggKGlkKSB7XG4gICAgICAgIGNhc2UgJ2ltcGxlbWVudHMnOlxuICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICBjYXNlICdwYWNrYWdlJzpcbiAgICAgICAgY2FzZSAncHJpdmF0ZSc6XG4gICAgICAgIGNhc2UgJ3Byb3RlY3RlZCc6XG4gICAgICAgIGNhc2UgJ3B1YmxpYyc6XG4gICAgICAgIGNhc2UgJ3N0YXRpYyc6XG4gICAgICAgIGNhc2UgJ2xldCc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzS2V5d29yZEVTNShpZCwgc3RyaWN0KSB7XG4gICAgICAgIC8vIHlpZWxkIHNob3VsZCBub3QgYmUgdHJlYXRlZCBhcyBrZXl3b3JkIHVuZGVyIG5vbi1zdHJpY3QgbW9kZS5cbiAgICAgICAgaWYgKCFzdHJpY3QgJiYgaWQgPT09ICd5aWVsZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNLZXl3b3JkRVM2KGlkLCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzS2V5d29yZEVTNihpZCwgc3RyaWN0KSB7XG4gICAgICAgIGlmIChzdHJpY3QgJiYgaXNTdHJpY3RNb2RlUmVzZXJ2ZWRXb3JkRVM2KGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGlkLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAnaWYnKSB8fCAoaWQgPT09ICdpbicpIHx8IChpZCA9PT0gJ2RvJyk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICd2YXInKSB8fCAoaWQgPT09ICdmb3InKSB8fCAoaWQgPT09ICduZXcnKSB8fCAoaWQgPT09ICd0cnknKTtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ3RoaXMnKSB8fCAoaWQgPT09ICdlbHNlJykgfHwgKGlkID09PSAnY2FzZScpIHx8XG4gICAgICAgICAgICAgICAgKGlkID09PSAndm9pZCcpIHx8IChpZCA9PT0gJ3dpdGgnKSB8fCAoaWQgPT09ICdlbnVtJyk7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiAoaWQgPT09ICd3aGlsZScpIHx8IChpZCA9PT0gJ2JyZWFrJykgfHwgKGlkID09PSAnY2F0Y2gnKSB8fFxuICAgICAgICAgICAgICAgIChpZCA9PT0gJ3Rocm93JykgfHwgKGlkID09PSAnY29uc3QnKSB8fCAoaWQgPT09ICd5aWVsZCcpIHx8XG4gICAgICAgICAgICAgICAgKGlkID09PSAnY2xhc3MnKSB8fCAoaWQgPT09ICdzdXBlcicpO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAncmV0dXJuJykgfHwgKGlkID09PSAndHlwZW9mJykgfHwgKGlkID09PSAnZGVsZXRlJykgfHxcbiAgICAgICAgICAgICAgICAoaWQgPT09ICdzd2l0Y2gnKSB8fCAoaWQgPT09ICdleHBvcnQnKSB8fCAoaWQgPT09ICdpbXBvcnQnKTtcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgcmV0dXJuIChpZCA9PT0gJ2RlZmF1bHQnKSB8fCAoaWQgPT09ICdmaW5hbGx5JykgfHwgKGlkID09PSAnZXh0ZW5kcycpO1xuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAnZnVuY3Rpb24nKSB8fCAoaWQgPT09ICdjb250aW51ZScpIHx8IChpZCA9PT0gJ2RlYnVnZ2VyJyk7XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gKGlkID09PSAnaW5zdGFuY2VvZicpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNlcnZlZFdvcmRFUzUoaWQsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gaWQgPT09ICdudWxsJyB8fCBpZCA9PT0gJ3RydWUnIHx8IGlkID09PSAnZmFsc2UnIHx8IGlzS2V5d29yZEVTNShpZCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Jlc2VydmVkV29yZEVTNihpZCwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBpZCA9PT0gJ251bGwnIHx8IGlkID09PSAndHJ1ZScgfHwgaWQgPT09ICdmYWxzZScgfHwgaXNLZXl3b3JkRVM2KGlkLCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzUmVzdHJpY3RlZFdvcmQoaWQpIHtcbiAgICAgICAgcmV0dXJuIGlkID09PSAnZXZhbCcgfHwgaWQgPT09ICdhcmd1bWVudHMnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllck5hbWVFUzUoaWQpIHtcbiAgICAgICAgdmFyIGksIGl6LCBjaDtcblxuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGNoID0gaWQuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKCFjb2RlLmlzSWRlbnRpZmllclN0YXJ0RVM1KGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMSwgaXogPSBpZC5sZW5ndGg7IGkgPCBpejsgKytpKSB7XG4gICAgICAgICAgICBjaCA9IGlkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoIWNvZGUuaXNJZGVudGlmaWVyUGFydEVTNShjaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVjb2RlVXRmMTYobGVhZCwgdHJhaWwpIHtcbiAgICAgICAgcmV0dXJuIChsZWFkIC0gMHhEODAwKSAqIDB4NDAwICsgKHRyYWlsIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJZGVudGlmaWVyTmFtZUVTNihpZCkge1xuICAgICAgICB2YXIgaSwgaXosIGNoLCBsb3dDaCwgY2hlY2s7XG5cbiAgICAgICAgaWYgKGlkLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgICBjaGVjayA9IGNvZGUuaXNJZGVudGlmaWVyU3RhcnRFUzY7XG4gICAgICAgIGZvciAoaSA9IDAsIGl6ID0gaWQubGVuZ3RoOyBpIDwgaXo7ICsraSkge1xuICAgICAgICAgICAgY2ggPSBpZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKDB4RDgwMCA8PSBjaCAmJiBjaCA8PSAweERCRkYpIHtcbiAgICAgICAgICAgICAgICArK2k7XG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gaXopIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgICAgICAgICAgbG93Q2ggPSBpZC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgICAgIGlmICghKDB4REMwMCA8PSBsb3dDaCAmJiBsb3dDaCA8PSAweERGRkYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2ggPSBkZWNvZGVVdGYxNihjaCwgbG93Q2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaGVjayhjaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVjayA9IGNvZGUuaXNJZGVudGlmaWVyUGFydEVTNjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0lkZW50aWZpZXJFUzUoaWQsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gaXNJZGVudGlmaWVyTmFtZUVTNShpZCkgJiYgIWlzUmVzZXJ2ZWRXb3JkRVM1KGlkLCBzdHJpY3QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpZmllckVTNihpZCwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBpc0lkZW50aWZpZXJOYW1lRVM2KGlkKSAmJiAhaXNSZXNlcnZlZFdvcmRFUzYoaWQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGlzS2V5d29yZEVTNTogaXNLZXl3b3JkRVM1LFxuICAgICAgICBpc0tleXdvcmRFUzY6IGlzS2V5d29yZEVTNixcbiAgICAgICAgaXNSZXNlcnZlZFdvcmRFUzU6IGlzUmVzZXJ2ZWRXb3JkRVM1LFxuICAgICAgICBpc1Jlc2VydmVkV29yZEVTNjogaXNSZXNlcnZlZFdvcmRFUzYsXG4gICAgICAgIGlzUmVzdHJpY3RlZFdvcmQ6IGlzUmVzdHJpY3RlZFdvcmQsXG4gICAgICAgIGlzSWRlbnRpZmllck5hbWVFUzU6IGlzSWRlbnRpZmllck5hbWVFUzUsXG4gICAgICAgIGlzSWRlbnRpZmllck5hbWVFUzY6IGlzSWRlbnRpZmllck5hbWVFUzYsXG4gICAgICAgIGlzSWRlbnRpZmllckVTNTogaXNJZGVudGlmaWVyRVM1LFxuICAgICAgICBpc0lkZW50aWZpZXJFUzY6IGlzSWRlbnRpZmllckVTNlxuICAgIH07XG59KCkpO1xuLyogdmltOiBzZXQgc3c9NCB0cz00IGV0IHR3PTgwIDogKi9cbiIsIi8qXG4gIENvcHlyaWdodCAoQykgMjAxMyBZdXN1a2UgU3V6dWtpIDx1dGF0YW5lLnRlYUBnbWFpbC5jb20+XG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4gICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICAgICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGVcbiAgICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG5cbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuICBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuICBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgPENPUFlSSUdIVCBIT0xERVI+IEJFIExJQUJMRSBGT1IgQU5ZXG4gIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTXG4gIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUztcbiAgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EXG4gIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRlxuICBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuXG4oZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydHMuYXN0ID0gcmVxdWlyZSgnLi9hc3QnKTtcbiAgICBleHBvcnRzLmNvZGUgPSByZXF1aXJlKCcuL2NvZGUnKTtcbiAgICBleHBvcnRzLmtleXdvcmQgPSByZXF1aXJlKCcuL2tleXdvcmQnKTtcbn0oKSk7XG4vKiB2aW06IHNldCBzdz00IHRzPTQgZXQgdHc9ODAgOiAqL1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2dcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS9cbnZhciBjYWNoZSA9IHt9XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcilcbiAgcmV0dXJuIChjYWNoZVtuYW1lXSA9IG1zUGF0dGVybi50ZXN0KGhOYW1lKSA/ICctJyArIGhOYW1lIDogaE5hbWUpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGh5cGhlbmF0ZVN0eWxlTmFtZVxuIiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJpbXBvcnQgaHlwaGVuYXRlIGZyb20gJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJztcblxuLyoqXG4gKiBDb252ZXJ0IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGRhc2ggc2VwYXJhdGVkLlxuICovXG5cbmZ1bmN0aW9uIGNvbnZlcnRDYXNlKHN0eWxlKSB7XG4gIHZhciBjb252ZXJ0ZWQgPSB7fTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgdmFyIGtleSA9IHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCA/IHByb3AgOiBoeXBoZW5hdGUocHJvcCk7XG4gICAgY29udmVydGVkW2tleV0gPSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIGlmIChzdHlsZS5mYWxsYmFja3MpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZS5mYWxsYmFja3MpKSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gc3R5bGUuZmFsbGJhY2tzLm1hcChjb252ZXJ0Q2FzZSk7ZWxzZSBjb252ZXJ0ZWQuZmFsbGJhY2tzID0gY29udmVydENhc2Uoc3R5bGUuZmFsbGJhY2tzKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG4vKipcbiAqIEFsbG93IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIGJ5IGNvbnZlcnRpbmcgdGhlbSBiYWNrIHRvIGRhc2hlcml6ZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAvLyBIYW5kbGUgcnVsZXMgbGlrZSBAZm9udC1mYWNlLCB3aGljaCBjYW4gaGF2ZSBtdWx0aXBsZSBzdHlsZXMgaW4gYW4gYXJyYXlcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3R5bGVbaW5kZXhdID0gY29udmVydENhc2Uoc3R5bGVbaW5kZXhdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBjb252ZXJ0Q2FzZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgaWYgKHByb3AuaW5kZXhPZignLS0nKSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBoeXBoZW5hdGVkUHJvcCA9IGh5cGhlbmF0ZShwcm9wKTsgLy8gVGhlcmUgd2FzIG5vIGNhbWVsIGNhc2UgaW4gcGxhY2VcblxuICAgIGlmIChwcm9wID09PSBoeXBoZW5hdGVkUHJvcCkgcmV0dXJuIHZhbHVlO1xuICAgIHJ1bGUucHJvcChoeXBoZW5hdGVkUHJvcCwgdmFsdWUpOyAvLyBDb3JlIHdpbGwgaWdub3JlIHRoYXQgcHJvcGVydHkgdmFsdWUgd2Ugc2V0IHRoZSBwcm9wZXIgb25lIGFib3ZlLlxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhbWVsQ2FzZTtcbiIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbi8qKlxuICogU2V0IHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSBvcmlnaW5hbCBydWxlXG4gKiBAcGFyYW0gY2xhc3NOYW1lIGNsYXNzIHN0cmluZ1xuICogQHJldHVybiBmbGFnIGluZGljYXRpbmcgZnVuY3Rpb24gd2FzIHN1Y2Nlc3NmdWxsIG9yIG5vdFxuICovXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQ2xhc3MocnVsZSwgY2xhc3NOYW1lKSB7XG4gIC8vIFNraXAgZmFsc3kgdmFsdWVzXG4gIGlmICghY2xhc3NOYW1lKSByZXR1cm4gdHJ1ZTsgLy8gU3VwcG9ydCBhcnJheSBvZiBjbGFzcyBuYW1lcyBge2NvbXBvc2VzOiBbJ2ZvbycsICdiYXInXX1gXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2xhc3NOYW1lKSkge1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjbGFzc05hbWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgaXNTZXR0ZWQgPSByZWdpc3RlckNsYXNzKHJ1bGUsIGNsYXNzTmFtZVtpbmRleF0pO1xuICAgICAgaWYgKCFpc1NldHRlZCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFN1cHBvcnQgc3BhY2Ugc2VwYXJhdGVkIGNsYXNzIG5hbWVzIGB7Y29tcG9zZXM6ICdmb28gYmFyJ31gXG5cblxuICBpZiAoY2xhc3NOYW1lLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyQ2xhc3MocnVsZSwgY2xhc3NOYW1lLnNwbGl0KCcgJykpO1xuICB9XG5cbiAgdmFyIHBhcmVudCA9IHJ1bGUub3B0aW9ucy5wYXJlbnQ7IC8vIEl0IGlzIGEgcmVmIHRvIGEgbG9jYWwgcnVsZS5cblxuICBpZiAoY2xhc3NOYW1lWzBdID09PSAnJCcpIHtcbiAgICB2YXIgcmVmUnVsZSA9IHBhcmVudC5nZXRSdWxlKGNsYXNzTmFtZS5zdWJzdHIoMSkpO1xuXG4gICAgaWYgKCFyZWZSdWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQgcnVsZSBpcyBub3QgZGVmaW5lZC4gXFxuXCIgKyBydWxlLnRvU3RyaW5nKCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChyZWZSdWxlID09PSBydWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEN5Y2xpYyBjb21wb3NpdGlvbiBkZXRlY3RlZC4gXFxuXCIgKyBydWxlLnRvU3RyaW5nKCkpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHBhcmVudC5jbGFzc2VzW3J1bGUua2V5XSArPSBcIiBcIiArIHBhcmVudC5jbGFzc2VzW3JlZlJ1bGUua2V5XTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHBhcmVudC5jbGFzc2VzW3J1bGUua2V5XSArPSBcIiBcIiArIGNsYXNzTmFtZTtcbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIENvbnZlcnQgY29tcG9zZSBwcm9wZXJ0eSB0byBhZGRpdGlvbmFsIGNsYXNzLCByZW1vdmUgcHJvcGVydHkgZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NDb21wb3NlKCkge1xuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmICghKCdjb21wb3NlcycgaW4gc3R5bGUpKSByZXR1cm4gc3R5bGU7XG4gICAgcmVnaXN0ZXJDbGFzcyhydWxlLCBzdHlsZS5jb21wb3Nlcyk7IC8vIFJlbW92ZSBjb21wb3NlcyBwcm9wZXJ0eSB0byBwcmV2ZW50IGluZmluaXRlIGxvb3AuXG5cbiAgICBkZWxldGUgc3R5bGUuY29tcG9zZXM7XG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzQ29tcG9zZTtcbiIsImltcG9ydCB7IGhhc0NTU1RPTVN1cHBvcnQgfSBmcm9tICdqc3MnO1xuXG52YXIgcHggPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5weCA6ICdweCc7XG52YXIgbXMgPSBoYXNDU1NUT01TdXBwb3J0ICYmIENTUyA/IENTUy5tcyA6ICdtcyc7XG52YXIgcGVyY2VudCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnBlcmNlbnQgOiAnJSc7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCBDU1MgcHJvcGVydHkgdW5pdHNcbiAqL1xuXG52YXIgZGVmYXVsdFVuaXRzID0ge1xuICAvLyBBbmltYXRpb24gcHJvcGVydGllc1xuICAnYW5pbWF0aW9uLWRlbGF5JzogbXMsXG4gICdhbmltYXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQmFja2dyb3VuZCBwcm9wZXJ0aWVzXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uJzogcHgsXG4gICdiYWNrZ3JvdW5kLXBvc2l0aW9uLXgnOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6IHB4LFxuICAnYmFja2dyb3VuZC1zaXplJzogcHgsXG4gIC8vIEJvcmRlciBQcm9wZXJ0aWVzXG4gIGJvcmRlcjogcHgsXG4gICdib3JkZXItYm90dG9tJzogcHgsXG4gICdib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWxlZnQnOiBweCxcbiAgJ2JvcmRlci1sZWZ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItcmFkaXVzJzogcHgsXG4gICdib3JkZXItcmlnaHQnOiBweCxcbiAgJ2JvcmRlci1yaWdodC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXRvcCc6IHB4LFxuICAnYm9yZGVyLXRvcC1sZWZ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiBweCxcbiAgJ2JvcmRlci13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrJzogcHgsXG4gICdib3JkZXItYmxvY2stZW5kJzogcHgsXG4gICdib3JkZXItYmxvY2stZW5kLXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2stc3RhcnQnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1zdGFydC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXdpZHRoJzogcHgsXG4gICdib3JkZXItaW5saW5lJzogcHgsXG4gICdib3JkZXItaW5saW5lLWVuZCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1lbmQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtc3RhcnQnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtc3RhcnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1zdGFydC1zdGFydC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1zdGFydC1lbmQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItZW5kLXN0YXJ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLWVuZC1lbmQtcmFkaXVzJzogcHgsXG4gIC8vIE1hcmdpbiBwcm9wZXJ0aWVzXG4gIG1hcmdpbjogcHgsXG4gICdtYXJnaW4tYm90dG9tJzogcHgsXG4gICdtYXJnaW4tbGVmdCc6IHB4LFxuICAnbWFyZ2luLXJpZ2h0JzogcHgsXG4gICdtYXJnaW4tdG9wJzogcHgsXG4gICdtYXJnaW4tYmxvY2snOiBweCxcbiAgJ21hcmdpbi1ibG9jay1lbmQnOiBweCxcbiAgJ21hcmdpbi1ibG9jay1zdGFydCc6IHB4LFxuICAnbWFyZ2luLWlubGluZSc6IHB4LFxuICAnbWFyZ2luLWlubGluZS1lbmQnOiBweCxcbiAgJ21hcmdpbi1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gUGFkZGluZyBwcm9wZXJ0aWVzXG4gIHBhZGRpbmc6IHB4LFxuICAncGFkZGluZy1ib3R0b20nOiBweCxcbiAgJ3BhZGRpbmctbGVmdCc6IHB4LFxuICAncGFkZGluZy1yaWdodCc6IHB4LFxuICAncGFkZGluZy10b3AnOiBweCxcbiAgJ3BhZGRpbmctYmxvY2snOiBweCxcbiAgJ3BhZGRpbmctYmxvY2stZW5kJzogcHgsXG4gICdwYWRkaW5nLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdwYWRkaW5nLWlubGluZSc6IHB4LFxuICAncGFkZGluZy1pbmxpbmUtZW5kJzogcHgsXG4gICdwYWRkaW5nLWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBNYXNrIHByb3BlcnRpZXNcbiAgJ21hc2stcG9zaXRpb24teCc6IHB4LFxuICAnbWFzay1wb3NpdGlvbi15JzogcHgsXG4gICdtYXNrLXNpemUnOiBweCxcbiAgLy8gV2lkdGggYW5kIGhlaWdodCBwcm9wZXJ0aWVzXG4gIGhlaWdodDogcHgsXG4gIHdpZHRoOiBweCxcbiAgJ21pbi1oZWlnaHQnOiBweCxcbiAgJ21heC1oZWlnaHQnOiBweCxcbiAgJ21pbi13aWR0aCc6IHB4LFxuICAnbWF4LXdpZHRoJzogcHgsXG4gIC8vIFBvc2l0aW9uIHByb3BlcnRpZXNcbiAgYm90dG9tOiBweCxcbiAgbGVmdDogcHgsXG4gIHRvcDogcHgsXG4gIHJpZ2h0OiBweCxcbiAgaW5zZXQ6IHB4LFxuICAnaW5zZXQtYmxvY2snOiBweCxcbiAgJ2luc2V0LWJsb2NrLWVuZCc6IHB4LFxuICAnaW5zZXQtYmxvY2stc3RhcnQnOiBweCxcbiAgJ2luc2V0LWlubGluZSc6IHB4LFxuICAnaW5zZXQtaW5saW5lLWVuZCc6IHB4LFxuICAnaW5zZXQtaW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIFNoYWRvdyBwcm9wZXJ0aWVzXG4gICdib3gtc2hhZG93JzogcHgsXG4gICd0ZXh0LXNoYWRvdyc6IHB4LFxuICAvLyBDb2x1bW4gcHJvcGVydGllc1xuICAnY29sdW1uLWdhcCc6IHB4LFxuICAnY29sdW1uLXJ1bGUnOiBweCxcbiAgJ2NvbHVtbi1ydWxlLXdpZHRoJzogcHgsXG4gICdjb2x1bW4td2lkdGgnOiBweCxcbiAgLy8gRm9udCBhbmQgdGV4dCBwcm9wZXJ0aWVzXG4gICdmb250LXNpemUnOiBweCxcbiAgJ2ZvbnQtc2l6ZS1kZWx0YSc6IHB4LFxuICAnbGV0dGVyLXNwYWNpbmcnOiBweCxcbiAgJ3RleHQtZGVjb3JhdGlvbi10aGlja25lc3MnOiBweCxcbiAgJ3RleHQtaW5kZW50JzogcHgsXG4gICd0ZXh0LXN0cm9rZSc6IHB4LFxuICAndGV4dC1zdHJva2Utd2lkdGgnOiBweCxcbiAgJ3dvcmQtc3BhY2luZyc6IHB4LFxuICAvLyBNb3Rpb24gcHJvcGVydGllc1xuICBtb3Rpb246IHB4LFxuICAnbW90aW9uLW9mZnNldCc6IHB4LFxuICAvLyBPdXRsaW5lIHByb3BlcnRpZXNcbiAgb3V0bGluZTogcHgsXG4gICdvdXRsaW5lLW9mZnNldCc6IHB4LFxuICAnb3V0bGluZS13aWR0aCc6IHB4LFxuICAvLyBQZXJzcGVjdGl2ZSBwcm9wZXJ0aWVzXG4gIHBlcnNwZWN0aXZlOiBweCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi15JzogcGVyY2VudCxcbiAgLy8gVHJhbnNmb3JtIHByb3BlcnRpZXNcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi14JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teSc6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXonOiBwZXJjZW50LFxuICAvLyBUcmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgJ3RyYW5zaXRpb24tZGVsYXknOiBtcyxcbiAgJ3RyYW5zaXRpb24tZHVyYXRpb24nOiBtcyxcbiAgLy8gQWxpZ25tZW50IHByb3BlcnRpZXNcbiAgJ3ZlcnRpY2FsLWFsaWduJzogcHgsXG4gICdmbGV4LWJhc2lzJzogcHgsXG4gIC8vIFNvbWUgcmFuZG9tIHByb3BlcnRpZXNcbiAgJ3NoYXBlLW1hcmdpbic6IHB4LFxuICBzaXplOiBweCxcbiAgZ2FwOiBweCxcbiAgLy8gR3JpZCBwcm9wZXJ0aWVzXG4gIGdyaWQ6IHB4LFxuICAnZ3JpZC1nYXAnOiBweCxcbiAgJ3Jvdy1nYXAnOiBweCxcbiAgJ2dyaWQtcm93LWdhcCc6IHB4LFxuICAnZ3JpZC1jb2x1bW4tZ2FwJzogcHgsXG4gICdncmlkLXRlbXBsYXRlLXJvd3MnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtY29sdW1ucyc6IHB4LFxuICAnZ3JpZC1hdXRvLXJvd3MnOiBweCxcbiAgJ2dyaWQtYXV0by1jb2x1bW5zJzogcHgsXG4gIC8vIE5vdCBleGlzdGluZyBwcm9wZXJ0aWVzLlxuICAvLyBVc2VkIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tZXhwYW5kIGludGVncmF0aW9uLlxuICAnYm94LXNoYWRvdy14JzogcHgsXG4gICdib3gtc2hhZG93LXknOiBweCxcbiAgJ2JveC1zaGFkb3ctYmx1cic6IHB4LFxuICAnYm94LXNoYWRvdy1zcHJlYWQnOiBweCxcbiAgJ2ZvbnQtbGluZS1oZWlnaHQnOiBweCxcbiAgJ3RleHQtc2hhZG93LXgnOiBweCxcbiAgJ3RleHQtc2hhZG93LXknOiBweCxcbiAgJ3RleHQtc2hhZG93LWJsdXInOiBweFxufTtcblxuLyoqXG4gKiBDbG9uZXMgdGhlIG9iamVjdCBhbmQgYWRkcyBhIGNhbWVsIGNhc2VkIHByb3BlcnR5IHZlcnNpb24uXG4gKi9cblxuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICBuZXdPYmpba2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpba2V5XTtcbiAgfVxuXG4gIHJldHVybiBuZXdPYmo7XG59XG5cbnZhciB1bml0cyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKGRlZmF1bHRVbml0cyk7XG4vKipcbiAqIFJlY3Vyc2l2ZSBkZWVwIHN0eWxlIHBhc3NpbmcgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBpdGVyYXRlKHByb3AsIHZhbHVlLCBvcHRpb25zKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSBpdGVyYXRlKHByb3AsIHZhbHVlW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgZm9yICh2YXIgaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIF9pbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbX2lubmVyUHJvcF0gPSBpdGVyYXRlKHByb3AgKyBcIi1cIiArIF9pbm5lclByb3AsIHZhbHVlW19pbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcblxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpID09PSBmYWxzZSkge1xuICAgIHZhciB1bml0ID0gb3B0aW9uc1twcm9wXSB8fCB1bml0c1twcm9wXTsgLy8gQWRkIHRoZSB1bml0IGlmIGF2YWlsYWJsZSwgZXhjZXB0IGZvciB0aGUgc3BlY2lhbCBjYXNlIG9mIDBweC5cblxuICAgIGlmICh1bml0ICYmICEodmFsdWUgPT09IDAgJiYgdW5pdCA9PT0gcHgpKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHVuaXQgPT09ICdmdW5jdGlvbicgPyB1bml0KHZhbHVlKS50b1N0cmluZygpIDogXCJcIiArIHZhbHVlICsgdW5pdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogQWRkIHVuaXQgdG8gbnVtZXJpYyB2YWx1ZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBkZWZhdWx0VW5pdChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgY2FtZWxDYXNlZE9wdGlvbnMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihvcHRpb25zKTtcblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHN0eWxlW3Byb3BdID0gaXRlcmF0ZShwcm9wLCBzdHlsZVtwcm9wXSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgY2FtZWxDYXNlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VW5pdDtcbiIsIi8qKlxuICogQSBzY2hlbWUgZm9yIGNvbnZlcnRpbmcgcHJvcGVydGllcyBmcm9tIGFycmF5IHRvIHJlZ3VsYXIgc3R5bGUuXG4gKiBBbGwgcHJvcGVydGllcyBsaXN0ZWQgYmVsb3cgd2lsbCBiZSB0cmFuc2Zvcm1lZCB0byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgc3BhY2UuXG4gKi9cbnZhciBwcm9wQXJyYXkgPSB7XG4gICdiYWNrZ3JvdW5kLXNpemUnOiB0cnVlLFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IHRydWUsXG4gIGJvcmRlcjogdHJ1ZSxcbiAgJ2JvcmRlci1ib3R0b20nOiB0cnVlLFxuICAnYm9yZGVyLWxlZnQnOiB0cnVlLFxuICAnYm9yZGVyLXRvcCc6IHRydWUsXG4gICdib3JkZXItcmlnaHQnOiB0cnVlLFxuICAnYm9yZGVyLXJhZGl1cyc6IHRydWUsXG4gICdib3JkZXItaW1hZ2UnOiB0cnVlLFxuICAnYm9yZGVyLXdpZHRoJzogdHJ1ZSxcbiAgJ2JvcmRlci1zdHlsZSc6IHRydWUsXG4gICdib3JkZXItY29sb3InOiB0cnVlLFxuICAnYm94LXNoYWRvdyc6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIG1hcmdpbjogdHJ1ZSxcbiAgcGFkZGluZzogdHJ1ZSxcbiAgb3V0bGluZTogdHJ1ZSxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nOiB0cnVlLFxuICB0cmFuc2Zvcm06IHRydWUsXG4gIHRyYW5zaXRpb246IHRydWVcbiAgLyoqXG4gICAqIEEgc2NoZW1lIGZvciBjb252ZXJ0aW5nIGFycmF5cyB0byByZWd1bGFyIHN0eWxlcyBpbnNpZGUgb2Ygb2JqZWN0cy5cbiAgICogRm9yIGUuZy46IFwie3Bvc2l0aW9uOiBbMCwgMF19XCIgPT4gXCJiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwIDA7XCIuXG4gICAqL1xuXG59O1xudmFyIHByb3BBcnJheUluT2JqID0ge1xuICBwb3NpdGlvbjogdHJ1ZSxcbiAgLy8gYmFja2dyb3VuZC1wb3NpdGlvblxuICBzaXplOiB0cnVlIC8vIGJhY2tncm91bmQtc2l6ZVxuXG4gIC8qKlxuICAgKiBBIHNjaGVtZSBmb3IgcGFyc2luZyBhbmQgYnVpbGRpbmcgY29ycmVjdCBzdHlsZXMgZnJvbSBwYXNzZWQgb2JqZWN0cy5cbiAgICovXG5cbn07XG52YXIgcHJvcE9iaiA9IHtcbiAgcGFkZGluZzoge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9LFxuICBtYXJnaW46IHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfSxcbiAgYmFja2dyb3VuZDoge1xuICAgIGF0dGFjaG1lbnQ6IG51bGwsXG4gICAgY29sb3I6IG51bGwsXG4gICAgaW1hZ2U6IG51bGwsXG4gICAgcG9zaXRpb246IG51bGwsXG4gICAgcmVwZWF0OiBudWxsXG4gIH0sXG4gIGJvcmRlcjoge1xuICAgIHdpZHRoOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG4gIH0sXG4gICdib3JkZXItdG9wJzoge1xuICAgIHdpZHRoOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG4gIH0sXG4gICdib3JkZXItcmlnaHQnOiB7XG4gICAgd2lkdGg6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgY29sb3I6IG51bGxcbiAgfSxcbiAgJ2JvcmRlci1ib3R0b20nOiB7XG4gICAgd2lkdGg6IG51bGwsXG4gICAgc3R5bGU6IG51bGwsXG4gICAgY29sb3I6IG51bGxcbiAgfSxcbiAgJ2JvcmRlci1sZWZ0Jzoge1xuICAgIHdpZHRoOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIGNvbG9yOiBudWxsXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICB3aWR0aDogbnVsbCxcbiAgICBzdHlsZTogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9LFxuICAnbGlzdC1zdHlsZSc6IHtcbiAgICB0eXBlOiBudWxsLFxuICAgIHBvc2l0aW9uOiBudWxsLFxuICAgIGltYWdlOiBudWxsXG4gIH0sXG4gIHRyYW5zaXRpb246IHtcbiAgICBwcm9wZXJ0eTogbnVsbCxcbiAgICBkdXJhdGlvbjogbnVsbCxcbiAgICAndGltaW5nLWZ1bmN0aW9uJzogbnVsbCxcbiAgICB0aW1pbmdGdW5jdGlvbjogbnVsbCxcbiAgICAvLyBOZWVkZWQgZm9yIGF2b2lkaW5nIGNvbWlsYXRpb24gaXNzdWVzIHdpdGgganNzLXBsdWdpbi1jYW1lbC1jYXNlXG4gICAgZGVsYXk6IG51bGxcbiAgfSxcbiAgYW5pbWF0aW9uOiB7XG4gICAgbmFtZTogbnVsbCxcbiAgICBkdXJhdGlvbjogbnVsbCxcbiAgICAndGltaW5nLWZ1bmN0aW9uJzogbnVsbCxcbiAgICB0aW1pbmdGdW5jdGlvbjogbnVsbCxcbiAgICAvLyBOZWVkZWQgdG8gYXZvaWQgY29tcGlsYXRpb24gaXNzdWVzIHdpdGgganNzLXBsdWdpbi1jYW1lbC1jYXNlXG4gICAgZGVsYXk6IG51bGwsXG4gICAgJ2l0ZXJhdGlvbi1jb3VudCc6IG51bGwsXG4gICAgaXRlcmF0aW9uQ291bnQ6IG51bGwsXG4gICAgLy8gTmVlZGVkIHRvIGF2b2lkIGNvbXBpbGF0aW9uIGlzc3VlcyB3aXRoIGpzcy1wbHVnaW4tY2FtZWwtY2FzZVxuICAgIGRpcmVjdGlvbjogbnVsbCxcbiAgICAnZmlsbC1tb2RlJzogbnVsbCxcbiAgICBmaWxsTW9kZTogbnVsbCxcbiAgICAvLyBOZWVkZWQgdG8gYXZvaWQgY29tcGlsYXRpb24gaXNzdWVzIHdpdGgganNzLXBsdWdpbi1jYW1lbC1jYXNlXG4gICAgJ3BsYXktc3RhdGUnOiBudWxsLFxuICAgIHBsYXlTdGF0ZTogbnVsbCAvLyBOZWVkZWQgdG8gYXZvaWQgY29tcGlsYXRpb24gaXNzdWVzIHdpdGgganNzLXBsdWdpbi1jYW1lbC1jYXNlXG5cbiAgfSxcbiAgJ2JveC1zaGFkb3cnOiB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGJsdXI6IDAsXG4gICAgc3ByZWFkOiAwLFxuICAgIGNvbG9yOiBudWxsLFxuICAgIGluc2V0OiBudWxsXG4gIH0sXG4gICd0ZXh0LXNoYWRvdyc6IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgYmx1cjogbnVsbCxcbiAgICBjb2xvcjogbnVsbFxuICB9XG4gIC8qKlxuICAgKiBBIHNjaGVtZSBmb3IgY29udmVydGluZyBub24tc3RhbmRhcnQgcHJvcGVydGllcyBpbnNpZGUgb2JqZWN0LlxuICAgKiBGb3IgZS5nLjogaW5jbHVkZSAnYm9yZGVyLXJhZGl1cycgcHJvcGVydHkgaW5zaWRlICdib3JkZXInIG9iamVjdC5cbiAgICovXG5cbn07XG52YXIgY3VzdG9tUHJvcE9iaiA9IHtcbiAgYm9yZGVyOiB7XG4gICAgcmFkaXVzOiAnYm9yZGVyLXJhZGl1cycsXG4gICAgaW1hZ2U6ICdib3JkZXItaW1hZ2UnLFxuICAgIHdpZHRoOiAnYm9yZGVyLXdpZHRoJyxcbiAgICBzdHlsZTogJ2JvcmRlci1zdHlsZScsXG4gICAgY29sb3I6ICdib3JkZXItY29sb3InXG4gIH0sXG4gICdib3JkZXItYm90dG9tJzoge1xuICAgIHdpZHRoOiAnYm9yZGVyLWJvdHRvbS13aWR0aCcsXG4gICAgc3R5bGU6ICdib3JkZXItYm90dG9tLXN0eWxlJyxcbiAgICBjb2xvcjogJ2JvcmRlci1ib3R0b20tY29sb3InXG4gIH0sXG4gICdib3JkZXItdG9wJzoge1xuICAgIHdpZHRoOiAnYm9yZGVyLXRvcC13aWR0aCcsXG4gICAgc3R5bGU6ICdib3JkZXItdG9wLXN0eWxlJyxcbiAgICBjb2xvcjogJ2JvcmRlci10b3AtY29sb3InXG4gIH0sXG4gICdib3JkZXItbGVmdCc6IHtcbiAgICB3aWR0aDogJ2JvcmRlci1sZWZ0LXdpZHRoJyxcbiAgICBzdHlsZTogJ2JvcmRlci1sZWZ0LXN0eWxlJyxcbiAgICBjb2xvcjogJ2JvcmRlci1sZWZ0LWNvbG9yJ1xuICB9LFxuICAnYm9yZGVyLXJpZ2h0Jzoge1xuICAgIHdpZHRoOiAnYm9yZGVyLXJpZ2h0LXdpZHRoJyxcbiAgICBzdHlsZTogJ2JvcmRlci1yaWdodC1zdHlsZScsXG4gICAgY29sb3I6ICdib3JkZXItcmlnaHQtY29sb3InXG4gIH0sXG4gIGJhY2tncm91bmQ6IHtcbiAgICBzaXplOiAnYmFja2dyb3VuZC1zaXplJyxcbiAgICBpbWFnZTogJ2JhY2tncm91bmQtaW1hZ2UnXG4gIH0sXG4gIGZvbnQ6IHtcbiAgICBzdHlsZTogJ2ZvbnQtc3R5bGUnLFxuICAgIHZhcmlhbnQ6ICdmb250LXZhcmlhbnQnLFxuICAgIHdlaWdodDogJ2ZvbnQtd2VpZ2h0JyxcbiAgICBzdHJldGNoOiAnZm9udC1zdHJldGNoJyxcbiAgICBzaXplOiAnZm9udC1zaXplJyxcbiAgICBmYW1pbHk6ICdmb250LWZhbWlseScsXG4gICAgbGluZUhlaWdodDogJ2xpbmUtaGVpZ2h0JyxcbiAgICAvLyBOZWVkZWQgdG8gYXZvaWQgY29tcGlsYXRpb24gaXNzdWVzIHdpdGgganNzLXBsdWdpbi1jYW1lbC1jYXNlXG4gICAgJ2xpbmUtaGVpZ2h0JzogJ2xpbmUtaGVpZ2h0J1xuICB9LFxuICBmbGV4OiB7XG4gICAgZ3JvdzogJ2ZsZXgtZ3JvdycsXG4gICAgYmFzaXM6ICdmbGV4LWJhc2lzJyxcbiAgICBkaXJlY3Rpb246ICdmbGV4LWRpcmVjdGlvbicsXG4gICAgd3JhcDogJ2ZsZXgtd3JhcCcsXG4gICAgZmxvdzogJ2ZsZXgtZmxvdycsXG4gICAgc2hyaW5rOiAnZmxleC1zaHJpbmsnXG4gIH0sXG4gIGFsaWduOiB7XG4gICAgc2VsZjogJ2FsaWduLXNlbGYnLFxuICAgIGl0ZW1zOiAnYWxpZ24taXRlbXMnLFxuICAgIGNvbnRlbnQ6ICdhbGlnbi1jb250ZW50J1xuICB9LFxuICBncmlkOiB7XG4gICAgJ3RlbXBsYXRlLWNvbHVtbnMnOiAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJyxcbiAgICB0ZW1wbGF0ZUNvbHVtbnM6ICdncmlkLXRlbXBsYXRlLWNvbHVtbnMnLFxuICAgICd0ZW1wbGF0ZS1yb3dzJzogJ2dyaWQtdGVtcGxhdGUtcm93cycsXG4gICAgdGVtcGxhdGVSb3dzOiAnZ3JpZC10ZW1wbGF0ZS1yb3dzJyxcbiAgICAndGVtcGxhdGUtYXJlYXMnOiAnZ3JpZC10ZW1wbGF0ZS1hcmVhcycsXG4gICAgdGVtcGxhdGVBcmVhczogJ2dyaWQtdGVtcGxhdGUtYXJlYXMnLFxuICAgIHRlbXBsYXRlOiAnZ3JpZC10ZW1wbGF0ZScsXG4gICAgJ2F1dG8tY29sdW1ucyc6ICdncmlkLWF1dG8tY29sdW1ucycsXG4gICAgYXV0b0NvbHVtbnM6ICdncmlkLWF1dG8tY29sdW1ucycsXG4gICAgJ2F1dG8tcm93cyc6ICdncmlkLWF1dG8tcm93cycsXG4gICAgYXV0b1Jvd3M6ICdncmlkLWF1dG8tcm93cycsXG4gICAgJ2F1dG8tZmxvdyc6ICdncmlkLWF1dG8tZmxvdycsXG4gICAgYXV0b0Zsb3c6ICdncmlkLWF1dG8tZmxvdycsXG4gICAgcm93OiAnZ3JpZC1yb3cnLFxuICAgIGNvbHVtbjogJ2dyaWQtY29sdW1uJyxcbiAgICAncm93LXN0YXJ0JzogJ2dyaWQtcm93LXN0YXJ0JyxcbiAgICByb3dTdGFydDogJ2dyaWQtcm93LXN0YXJ0JyxcbiAgICAncm93LWVuZCc6ICdncmlkLXJvdy1lbmQnLFxuICAgIHJvd0VuZDogJ2dyaWQtcm93LWVuZCcsXG4gICAgJ2NvbHVtbi1zdGFydCc6ICdncmlkLWNvbHVtbi1zdGFydCcsXG4gICAgY29sdW1uU3RhcnQ6ICdncmlkLWNvbHVtbi1zdGFydCcsXG4gICAgJ2NvbHVtbi1lbmQnOiAnZ3JpZC1jb2x1bW4tZW5kJyxcbiAgICBjb2x1bW5FbmQ6ICdncmlkLWNvbHVtbi1lbmQnLFxuICAgIGFyZWE6ICdncmlkLWFyZWEnLFxuICAgIGdhcDogJ2dyaWQtZ2FwJyxcbiAgICAncm93LWdhcCc6ICdncmlkLXJvdy1nYXAnLFxuICAgIHJvd0dhcDogJ2dyaWQtcm93LWdhcCcsXG4gICAgJ2NvbHVtbi1nYXAnOiAnZ3JpZC1jb2x1bW4tZ2FwJyxcbiAgICBjb2x1bW5HYXA6ICdncmlkLWNvbHVtbi1nYXAnXG4gIH1cbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG4vKipcbiAqIE1hcCB2YWx1ZXMgYnkgZ2l2ZW4gcHJvcC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBvZiB2YWx1ZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5hbCBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpbmFsIHJ1bGVcbiAqIEByZXR1cm4ge1N0cmluZ30gbWFwcGVkIHZhbHVlc1xuICovXG5cbmZ1bmN0aW9uIG1hcFZhbHVlc0J5UHJvcCh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvQXJyYXkoaXRlbSwgcHJvcCwgcnVsZSwgZmFsc2UsIHRydWUpO1xuICB9KTtcbn1cbi8qKlxuICogQ29udmVydCBhcnJheSB0byBuZXN0ZWQgYXJyYXksIGlmIG5lZWRlZFxuICovXG5cblxuZnVuY3Rpb24gcHJvY2Vzc0FycmF5KHZhbHVlLCBwcm9wLCBzY2hlbWUsIHJ1bGUpIHtcbiAgaWYgKHNjaGVtZVtwcm9wXSA9PSBudWxsKSByZXR1cm4gdmFsdWU7XG4gIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSByZXR1cm4gcHJvY2Vzc0FycmF5KHZhbHVlWzBdLCBwcm9wLCBzY2hlbWUsIHJ1bGUpO1xuXG4gIGlmICh0eXBlb2YgdmFsdWVbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG1hcFZhbHVlc0J5UHJvcCh2YWx1ZSwgcHJvcCwgcnVsZSk7XG4gIH1cblxuICByZXR1cm4gW3ZhbHVlXTtcbn1cbi8qKlxuICogQ29udmVydCBvYmplY3QgdG8gYXJyYXkuXG4gKi9cblxuXG5mdW5jdGlvbiBvYmplY3RUb0FycmF5KHZhbHVlLCBwcm9wLCBydWxlLCBpc0ZhbGxiYWNrLCBpc0luQXJyYXkpIHtcbiAgaWYgKCEocHJvcE9ialtwcm9wXSB8fCBjdXN0b21Qcm9wT2JqW3Byb3BdKSkgcmV0dXJuIFtdO1xuICB2YXIgcmVzdWx0ID0gW107IC8vIENoZWNrIGlmIGV4aXN0cyBhbnkgbm9uLXN0YW5kYXJkIHByb3BlcnR5XG5cbiAgaWYgKGN1c3RvbVByb3BPYmpbcHJvcF0pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB2YWx1ZSA9IGN1c3RvbVByb3BzVG9TdHlsZSh2YWx1ZSwgcnVsZSwgY3VzdG9tUHJvcE9ialtwcm9wXSwgaXNGYWxsYmFjayk7XG4gIH0gLy8gUGFzcyB0aHJvdWdodCBhbGwgc3RhbmRhcnQgcHJvcHNcblxuXG4gIGlmIChPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgYmFzZVByb3AgaW4gcHJvcE9ialtwcm9wXSkge1xuICAgICAgaWYgKHZhbHVlW2Jhc2VQcm9wXSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVtiYXNlUHJvcF0pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2gocHJvcEFycmF5SW5PYmpbYmFzZVByb3BdID09PSBudWxsID8gdmFsdWVbYmFzZVByb3BdIDogdmFsdWVbYmFzZVByb3BdLmpvaW4oJyAnKSk7XG4gICAgICAgIH0gZWxzZSByZXN1bHQucHVzaCh2YWx1ZVtiYXNlUHJvcF0pO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBBZGQgZGVmYXVsdCB2YWx1ZSBmcm9tIHByb3BzIGNvbmZpZy5cblxuXG4gICAgICBpZiAocHJvcE9ialtwcm9wXVtiYXNlUHJvcF0gIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQucHVzaChwcm9wT2JqW3Byb3BdW2Jhc2VQcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKCFyZXN1bHQubGVuZ3RoIHx8IGlzSW5BcnJheSkgcmV0dXJuIHJlc3VsdDtcbiAgcmV0dXJuIFtyZXN1bHRdO1xufVxuLyoqXG4gKiBDb252ZXJ0IGN1c3RvbSBwcm9wZXJ0aWVzIHZhbHVlcyB0byBzdHlsZXMgYWRkaW5nIHRoZW0gdG8gcnVsZSBkaXJlY3RseVxuICovXG5cblxuZnVuY3Rpb24gY3VzdG9tUHJvcHNUb1N0eWxlKHZhbHVlLCBydWxlLCBjdXN0b21Qcm9wcywgaXNGYWxsYmFjaykge1xuICBmb3IgKHZhciBwcm9wIGluIGN1c3RvbVByb3BzKSB7XG4gICAgdmFyIHByb3BOYW1lID0gY3VzdG9tUHJvcHNbcHJvcF07IC8vIElmIGN1cnJlbnQgcHJvcGVydHkgZG9lc24ndCBleGlzdCBhbHJlYWR5IGluIHJ1bGUgLSBhZGQgbmV3IG9uZVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcgJiYgKGlzRmFsbGJhY2sgfHwgIXJ1bGUucHJvcChwcm9wTmFtZSkpKSB7XG4gICAgICB2YXIgX3N0eWxlRGV0ZWN0b3I7XG5cbiAgICAgIHZhciBhcHBlbmRlZFZhbHVlID0gc3R5bGVEZXRlY3RvcigoX3N0eWxlRGV0ZWN0b3IgPSB7fSwgX3N0eWxlRGV0ZWN0b3JbcHJvcE5hbWVdID0gdmFsdWVbcHJvcF0sIF9zdHlsZURldGVjdG9yKSwgcnVsZSlbcHJvcE5hbWVdOyAvLyBBZGQgc3R5bGUgZGlyZWN0bHkgaW4gcnVsZVxuXG4gICAgICBpZiAoaXNGYWxsYmFjaykgcnVsZS5zdHlsZS5mYWxsYmFja3NbcHJvcE5hbWVdID0gYXBwZW5kZWRWYWx1ZTtlbHNlIHJ1bGUuc3R5bGVbcHJvcE5hbWVdID0gYXBwZW5kZWRWYWx1ZTtcbiAgICB9IC8vIERlbGV0ZSBjb252ZXJ0ZWQgcHJvcGVydHkgdG8gYXZvaWQgZG91YmxlIGNvbnZlcnRpbmdcblxuXG4gICAgZGVsZXRlIHZhbHVlW3Byb3BdO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBEZXRlY3QgaWYgYSBzdHlsZSBuZWVkcyB0byBiZSBjb252ZXJ0ZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBzdHlsZURldGVjdG9yKHN0eWxlLCBydWxlLCBpc0ZhbGxiYWNrKSB7XG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgLy8gQ2hlY2sgZG91YmxlIGFycmF5cyB0byBhdm9pZCByZWN1cnNpb24uXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdHlsZS5mYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBzdHlsZS5mYWxsYmFja3NbaW5kZXhdID0gc3R5bGVEZXRlY3RvcihzdHlsZS5mYWxsYmFja3NbaW5kZXhdLCBydWxlLCB0cnVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlW3Byb3BdID0gcHJvY2Vzc0FycmF5KHZhbHVlLCBwcm9wLCBwcm9wQXJyYXksIHJ1bGUpOyAvLyBBdm9pZCBjcmVhdGluZyBwcm9wZXJ0aWVzIHdpdGggZW1wdHkgdmFsdWVzXG5cbiAgICAgICAgaWYgKCFzdHlsZVtwcm9wXS5sZW5ndGgpIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJykge1xuICAgICAgICBzdHlsZS5mYWxsYmFja3MgPSBzdHlsZURldGVjdG9yKHN0eWxlLmZhbGxiYWNrcywgcnVsZSwgdHJ1ZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBzdHlsZVtwcm9wXSA9IG9iamVjdFRvQXJyYXkodmFsdWUsIHByb3AsIHJ1bGUsIGlzRmFsbGJhY2spOyAvLyBBdm9pZCBjcmVhdGluZyBwcm9wZXJ0aWVzIHdpdGggZW1wdHkgdmFsdWVzXG5cbiAgICAgIGlmICghc3R5bGVbcHJvcF0ubGVuZ3RoKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfSAvLyBNYXliZSBhIGNvbXB1dGVkIHZhbHVlIHJlc3VsdGluZyBpbiBhbiBlbXB0eSBzdHJpbmdcbiAgICBlbHNlIGlmIChzdHlsZVtwcm9wXSA9PT0gJycpIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cbi8qKlxuICogQWRkcyBwb3NzaWJpbGl0eSB0byB3cml0ZSBleHBhbmRlZCBzdHlsZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NFeHBhbmQoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKCFzdHlsZSB8fCBydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkge1xuICAgICAgLy8gUGFzcyBydWxlcyBvbmUgYnkgb25lIGFuZCByZWZvcm1hdCB0aGVtXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0eWxlW2luZGV4XSA9IHN0eWxlRGV0ZWN0b3Ioc3R5bGVbaW5kZXhdLCBydWxlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZURldGVjdG9yKHN0eWxlLCBydWxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0V4cGFuZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59O1xuXG52YXIgdmFsdWVOcyA9IFwiZXh0ZW5kQ3VyclZhbHVlXCIgKyBEYXRlLm5vdygpO1xuXG5mdW5jdGlvbiBtZXJnZUV4dGVuZChzdHlsZSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlKSB7XG4gIHZhciBleHRlbmRUeXBlID0gdHlwZW9mIHN0eWxlLmV4dGVuZDsgLy8gRXh0ZW5kIHVzaW5nIGEgcnVsZSBuYW1lLlxuXG4gIGlmIChleHRlbmRUeXBlID09PSAnc3RyaW5nJykge1xuICAgIGlmICghc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcmVmUnVsZSA9IHNoZWV0LmdldFJ1bGUoc3R5bGUuZXh0ZW5kKTtcbiAgICBpZiAoIXJlZlJ1bGUpIHJldHVybjtcblxuICAgIGlmIChyZWZSdWxlID09PSBydWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEEgcnVsZSB0cmllcyB0byBleHRlbmQgaXRzZWxmIFxcblwiICsgcnVsZS50b1N0cmluZygpKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gcmVmUnVsZS5vcHRpb25zLnBhcmVudDtcblxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHZhciBvcmlnaW5hbFN0eWxlID0gcGFyZW50LnJ1bGVzLnJhd1tzdHlsZS5leHRlbmRdO1xuICAgICAgZXh0ZW5kKG9yaWdpbmFsU3R5bGUsIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9IC8vIEV4dGVuZCB1c2luZyBhbiBhcnJheS5cblxuXG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmV4dGVuZCkpIHtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3R5bGUuZXh0ZW5kLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdmFyIHNpbmdsZUV4dGVuZCA9IHN0eWxlLmV4dGVuZFtpbmRleF07XG4gICAgICB2YXIgc2luZ2xlU3R5bGUgPSB0eXBlb2Ygc2luZ2xlRXh0ZW5kID09PSAnc3RyaW5nJyA/IF9leHRlbmRzKHt9LCBzdHlsZSwge1xuICAgICAgICBleHRlbmQ6IHNpbmdsZUV4dGVuZFxuICAgICAgfSkgOiBzdHlsZS5leHRlbmRbaW5kZXhdO1xuICAgICAgZXh0ZW5kKHNpbmdsZVN0eWxlLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBFeHRlbmQgaXMgYSBzdHlsZSBvYmplY3QuXG5cblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlLmV4dGVuZCkge1xuICAgIGlmIChwcm9wID09PSAnZXh0ZW5kJykge1xuICAgICAgZXh0ZW5kKHN0eWxlLmV4dGVuZC5leHRlbmQsIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3Qoc3R5bGUuZXh0ZW5kW3Byb3BdKSkge1xuICAgICAgaWYgKCEocHJvcCBpbiBuZXdTdHlsZSkpIG5ld1N0eWxlW3Byb3BdID0ge307XG4gICAgICBleHRlbmQoc3R5bGUuZXh0ZW5kW3Byb3BdLCBydWxlLCBzaGVldCwgbmV3U3R5bGVbcHJvcF0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbmV3U3R5bGVbcHJvcF0gPSBzdHlsZS5leHRlbmRbcHJvcF07XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VSZXN0KHN0eWxlLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpIHtcbiAgLy8gQ29weSBiYXNlIHN0eWxlLlxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3AgPT09ICdleHRlbmQnKSBjb250aW51ZTtcblxuICAgIGlmIChpc09iamVjdChuZXdTdHlsZVtwcm9wXSkgJiYgaXNPYmplY3Qoc3R5bGVbcHJvcF0pKSB7XG4gICAgICBleHRlbmQoc3R5bGVbcHJvcF0sIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZVtwcm9wXSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3Qoc3R5bGVbcHJvcF0pKSB7XG4gICAgICBuZXdTdHlsZVtwcm9wXSA9IGV4dGVuZChzdHlsZVtwcm9wXSwgcnVsZSwgc2hlZXQpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbmV3U3R5bGVbcHJvcF0gPSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBSZWN1cnNpdmVseSBleHRlbmQgc3R5bGVzLlxuICovXG5cblxuZnVuY3Rpb24gZXh0ZW5kKHN0eWxlLCBydWxlLCBzaGVldCwgbmV3U3R5bGUpIHtcbiAgaWYgKG5ld1N0eWxlID09PSB2b2lkIDApIHtcbiAgICBuZXdTdHlsZSA9IHt9O1xuICB9XG5cbiAgbWVyZ2VFeHRlbmQoc3R5bGUsIHJ1bGUsIHNoZWV0LCBuZXdTdHlsZSk7XG4gIG1lcmdlUmVzdChzdHlsZSwgcnVsZSwgc2hlZXQsIG5ld1N0eWxlKTtcbiAgcmV0dXJuIG5ld1N0eWxlO1xufVxuLyoqXG4gKiBIYW5kbGUgYGV4dGVuZGAgcHJvcGVydHkuXG4gKi9cblxuXG5mdW5jdGlvbiBqc3NFeHRlbmQoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmICgnZXh0ZW5kJyBpbiBzdHlsZSkgcmV0dXJuIGV4dGVuZChzdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcCAhPT0gJ2V4dGVuZCcpIHJldHVybiB2YWx1ZTsgLy8gVmFsdWUgaXMgZW1wdHksIHJlbW92ZSBwcm9wZXJ0aWVzIHNldCBwcmV2aW91c2x5LlxuXG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcnVsZVt2YWx1ZU5zXSkge1xuICAgICAgICBydWxlLnByb3Aoa2V5LCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgcnVsZVt2YWx1ZU5zXSA9IG51bGw7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgX2tleSBpbiB2YWx1ZSkge1xuICAgICAgICBydWxlLnByb3AoX2tleSwgdmFsdWVbX2tleV0pO1xuICAgICAgfVxuXG4gICAgICBydWxlW3ZhbHVlTnNdID0gdmFsdWU7XG4gICAgfSAvLyBNYWtlIHN1cmUgd2UgZG9uJ3Qgc2V0IHRoZSB2YWx1ZSBpbiB0aGUgY29yZS5cblxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0V4dGVuZDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB7IFJ1bGVMaXN0IH0gZnJvbSAnanNzJztcblxudmFyIGF0ID0gJ0BnbG9iYWwnO1xudmFyIGF0UHJlZml4ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxDb250YWluZXJSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pKTtcblxuICAgIGZvciAodmFyIHNlbGVjdG9yIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoc2VsZWN0b3IsIHN0eWxlc1tzZWxlY3Rvcl0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBHbG9iYWxDb250YWluZXJSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLCBydW4gcGx1Z2lucy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICBpZiAocnVsZSkgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2UgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgbmV3UnVsZSA9IHRoaXMucnVsZXMucmVwbGFjZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKG5ld1J1bGUpIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKG5ld1J1bGUpO1xuICAgIHJldHVybiBuZXdSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHbG9iYWxQcmVmaXhlZFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdnbG9iYWwnO1xuICAgIHRoaXMuYXQgPSBhdDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2VsZWN0b3IgPSBrZXkuc3Vic3RyKGF0UHJlZml4Lmxlbmd0aCk7XG4gICAgdGhpcy5ydWxlID0gb3B0aW9ucy5qc3MuY3JlYXRlUnVsZShzZWxlY3Rvciwgc3R5bGUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEdsb2JhbFByZWZpeGVkUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlID8gdGhpcy5ydWxlLnRvU3RyaW5nKG9wdGlvbnMpIDogJyc7XG4gIH07XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc2NvcGVkICs9IHNjb3BlICsgXCIgXCIgKyBwYXJ0c1tpXS50cmltKCk7XG4gICAgaWYgKHBhcnRzW2kgKyAxXSkgc2NvcGVkICs9ICcsICc7XG4gIH1cblxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuICB2YXIgcnVsZXMgPSBzdHlsZSA/IHN0eWxlW2F0XSA6IG51bGw7XG4gIGlmICghcnVsZXMpIHJldHVybjtcblxuICBmb3IgKHZhciBuYW1lIGluIHJ1bGVzKSB7XG4gICAgc2hlZXQuYWRkUnVsZShuYW1lLCBydWxlc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBhZGRTY29wZShuYW1lLCBydWxlLnNlbGVjdG9yKVxuICAgIH0pKTtcbiAgfVxuXG4gIGRlbGV0ZSBzdHlsZVthdF07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcblxuICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKHByb3BbMF0gIT09ICdAJyB8fCBwcm9wLnN1YnN0cigwLCBhdC5sZW5ndGgpICE9PSBhdCkgY29udGludWU7XG4gICAgdmFyIHNlbGVjdG9yID0gYWRkU2NvcGUocHJvcC5zdWJzdHIoYXQubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgc2hlZXQuYWRkUnVsZShzZWxlY3Rvciwgc3R5bGVbcHJvcF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICB9KSk7XG4gICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICB9XG59XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGpzc0dsb2JhbCgpIHtcbiAgZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucykge1xuICAgIGlmICghbmFtZSkgcmV0dXJuIG51bGw7XG5cbiAgICBpZiAobmFtZSA9PT0gYXQpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsQ29udGFpbmVyUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChuYW1lWzBdID09PSAnQCcgJiYgbmFtZS5zdWJzdHIoMCwgYXRQcmVmaXgubGVuZ3RoKSA9PT0gYXRQcmVmaXgpIHtcbiAgICAgIHJldHVybiBuZXcgR2xvYmFsUHJlZml4ZWRSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQgJiYgcGFyZW50Lm9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdnbG9iYWwnKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLnNlbGVjdG9yICYmIG9wdGlvbnMuc2NvcGVkID09PSBmYWxzZSkge1xuICAgICAgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUsIHNoZWV0KSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJyB8fCAhc2hlZXQpIHJldHVybjtcbiAgICBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUsIHNoZWV0KTtcbiAgICBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IG9uQ3JlYXRlUnVsZSxcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc0dsb2JhbDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG4vKipcbiAqIENvbnZlcnQgbmVzdGVkIHJ1bGVzIHRvIHNlcGFyYXRlLCByZW1vdmUgdGhlbSBmcm9tIG9yaWdpbmFsIHN0eWxlcy5cbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUuc2VsZWN0b3I7XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gQ291bGQgbm90IGZpbmQgdGhlIHJlZmVyZW5jZWQgcnVsZSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaW4gXFxcIlwiICsgKGNvbnRhaW5lci5vcHRpb25zLm1ldGEgfHwgY29udGFpbmVyLnRvU3RyaW5nKCkpICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VQYXJlbnRSZWZzKG5lc3RlZFByb3AsIHBhcmVudFByb3ApIHtcbiAgICB2YXIgcGFyZW50U2VsZWN0b3JzID0gcGFyZW50UHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciBuZXN0ZWRTZWxlY3RvcnMgPSBuZXN0ZWRQcm9wLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnOyAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuXG4gICAgICAgIHJlc3VsdCArPSBuZXN0ZWQuaW5kZXhPZignJicpICE9PSAtMSA/IG5lc3RlZC5yZXBsYWNlKHBhcmVudFJlZ0V4cCwgcGFyZW50KSA6IHBhcmVudCArIFwiIFwiICsgbmVzdGVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcHRpb25zKHJ1bGUsIGNvbnRhaW5lciwgcHJldk9wdGlvbnMpIHtcbiAgICAvLyBPcHRpb25zIGhhcyBiZWVuIGFscmVhZHkgY3JlYXRlZCwgbm93IHdlIG9ubHkgaW5jcmVhc2UgaW5kZXguXG4gICAgaWYgKHByZXZPcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIHByZXZPcHRpb25zLCB7XG4gICAgICBpbmRleDogcHJldk9wdGlvbnMuaW5kZXggKyAxXG4gICAgfSk7XG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG4gICAgbmVzdGluZ0xldmVsID0gbmVzdGluZ0xldmVsID09PSB1bmRlZmluZWQgPyAxIDogbmVzdGluZ0xldmVsICsgMTtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe30sIHJ1bGUub3B0aW9ucywge1xuICAgICAgbmVzdGluZ0xldmVsOiBuZXN0aW5nTGV2ZWwsXG4gICAgICBpbmRleDogY29udGFpbmVyLmluZGV4T2YocnVsZSkgKyAxIC8vIFdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCBuYW1lIHRvIGJlIHNldCBvcHRpb25zIGZvciBjaGxpZC5cblxuICAgIH0pO1xuXG4gICAgZGVsZXRlIG9wdGlvbnMubmFtZTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcbiAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICB2YXIgY29udGFpbmVyID0gc3R5bGVSdWxlLm9wdGlvbnMucGFyZW50O1xuICAgIHZhciBvcHRpb25zO1xuICAgIHZhciByZXBsYWNlUmVmO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gcHJvcC5pbmRleE9mKCcmJykgIT09IC0xO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG4gICAgICBpZiAoIWlzTmVzdGVkICYmICFpc05lc3RlZENvbmRpdGlvbmFsKSBjb250aW51ZTtcbiAgICAgIG9wdGlvbnMgPSBnZXRPcHRpb25zKHN0eWxlUnVsZSwgY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGlzTmVzdGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJlcGxhY2VQYXJlbnRSZWZzKHByb3AsIHN0eWxlUnVsZS5zZWxlY3Rvcik7IC8vIExhemlseSBjcmVhdGUgdGhlIHJlZiByZXBsYWNlciBmdW5jdGlvbiBqdXN0IG9uY2UgZm9yXG4gICAgICAgIC8vIGFsbCBuZXN0ZWQgcnVsZXMgd2l0aGluIHRoZSBzaGVldC5cblxuICAgICAgICBpZiAoIXJlcGxhY2VSZWYpIHJlcGxhY2VSZWYgPSBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lciwgc2hlZXQpOyAvLyBSZXBsYWNlIGFsbCAkcmVmcy5cblxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UocmVmUmVnRXhwLCByZXBsYWNlUmVmKTtcbiAgICAgICAgdmFyIG5hbWUgPSBzdHlsZVJ1bGUua2V5ICsgXCItXCIgKyBwcm9wO1xuXG4gICAgICAgIGlmICgncmVwbGFjZVJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICAgIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgY29udGFpbmVyLnJlcGxhY2VSdWxlKG5hbWUsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKG5hbWUsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzTmVzdGVkQ29uZGl0aW9uYWwpIHtcbiAgICAgICAgLy8gUGxhY2UgY29uZGl0aW9uYWwgcmlnaHQgYWZ0ZXIgdGhlIHBhcmVudCBydWxlIHRvIGVuc3VyZSByaWdodCBvcmRlcmluZy5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUocHJvcCwge30sIG9wdGlvbnMpLmFkZFJ1bGUoc3R5bGVSdWxlLmtleSwgc3R5bGVbcHJvcF0sIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc3R5bGVSdWxlLnNlbGVjdG9yXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzTmVzdGVkO1xuIiwiLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQocHJvcDAsIHByb3AxKSB7XG4gICAgaWYgKHByb3AwLmxlbmd0aCA9PT0gcHJvcDEubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcHJvcDAgPiBwcm9wMSA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDAubGVuZ3RoIC0gcHJvcDEubGVuZ3RoO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5ld1N0eWxlW3Byb3BzW2ldXSA9IHN0eWxlW3Byb3BzW2ldXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0eWxlO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzUHJvcHNTb3J0O1xuIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVJ1bGUgfSBmcm9tICdqc3MnO1xuXG52YXIgbm93ID0gRGF0ZS5ub3coKTtcbnZhciBmblZhbHVlc05zID0gXCJmblZhbHVlc1wiICsgbm93O1xudmFyIGZuUnVsZU5zID0gXCJmblN0eWxlXCIgKyArK25vdztcblxudmFyIGZ1bmN0aW9uUGx1Z2luID0gZnVuY3Rpb24gZnVuY3Rpb25QbHVnaW4oKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBkZWNsICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgICBydWxlW2ZuUnVsZU5zXSA9IGRlY2w7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBleHRyYWN0IGZ1bmN0aW9uIHZhbHVlcyBmcm9tIHRoZSBkZWNsYXJhdGlvbiwgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb3JlIHVuYXdhcmUgb2YgdGhlbS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gZG8gdGhhdCBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb25zIG9uIGVhY2ggc3R5bGUgdXBkYXRlLCBzaW5jZSB0aGlzIGNhbiBoYXBwZW4gb25seSBvbmNlLlxuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBmdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIG9mIGZ1bmN0aW9uIHJ1bGVzLlxuICAgICAgaWYgKGZuVmFsdWVzTnMgaW4gcnVsZSB8fCBmblJ1bGVOcyBpbiBydWxlKSByZXR1cm4gc3R5bGU7XG4gICAgICB2YXIgZm5WYWx1ZXMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG4gICAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgZm5WYWx1ZXNbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcnVsZVtmblZhbHVlc05zXSA9IGZuVmFsdWVzO1xuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH0sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICAgIHZhciBmblJ1bGUgPSBzdHlsZVJ1bGVbZm5SdWxlTnNdOyAvLyBJZiB3ZSBoYXZlIGEgc3R5bGUgZnVuY3Rpb24sIHRoZSBlbnRpcmUgcnVsZSBpcyBkeW5hbWljIGFuZCBzdHlsZSBvYmplY3RcbiAgICAgIC8vIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGF0IGZ1bmN0aW9uLlxuXG4gICAgICBpZiAoZm5SdWxlKSB7XG4gICAgICAgIC8vIEVtcHR5IG9iamVjdCB3aWxsIHJlbW92ZSBhbGwgY3VycmVudGx5IGRlZmluZWQgcHJvcHNcbiAgICAgICAgLy8gaW4gY2FzZSBmdW5jdGlvbiBydWxlIHJldHVybnMgYSBmYWxzeSB2YWx1ZS5cbiAgICAgICAgc3R5bGVSdWxlLnN0eWxlID0gZm5SdWxlKGRhdGEpIHx8IHt9O1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0eWxlUnVsZS5zdHlsZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gRnVuY3Rpb24gdmFsdWVzIGluc2lkZSBmdW5jdGlvbiBydWxlcyBhcmUgbm90IHN1cHBvcnRlZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBmblZhbHVlcyA9IHN0eWxlUnVsZVtmblZhbHVlc05zXTsgLy8gSWYgd2UgaGF2ZSBhIGZuIHZhbHVlcyBtYXAsIGl0IGlzIGEgcnVsZSB3aXRoIGZ1bmN0aW9uIHZhbHVlcy5cblxuICAgICAgaWYgKGZuVmFsdWVzKSB7XG4gICAgICAgIGZvciAodmFyIF9wcm9wIGluIGZuVmFsdWVzKSB7XG4gICAgICAgICAgc3R5bGVSdWxlLnByb3AoX3Byb3AsIGZuVmFsdWVzW19wcm9wXShkYXRhKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvblBsdWdpbjtcbiIsImltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBpc09ic2VydmFibGUgPSBmdW5jdGlvbiBpc09ic2VydmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHZhbHVlWyQkb2JzZXJ2YWJsZV0gJiYgdmFsdWUgPT09IHZhbHVlWyQkb2JzZXJ2YWJsZV0oKTtcbn07XG5cbnZhciBvYnNlcnZhYmxlUGx1Z2luID0gZnVuY3Rpb24gb2JzZXJ2YWJsZVBsdWdpbih1cGRhdGVPcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgICAgaWYgKCFpc09ic2VydmFibGUoZGVjbCkpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHN0eWxlJCA9IGRlY2w7XG4gICAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwge30sIG9wdGlvbnMpOyAvLyBUT0RPXG4gICAgICAvLyBDYWxsIGBzdHJlYW0uc3Vic2NyaWJlKClgIHJldHVybnMgYSBzdWJzY3JpcHRpb24sIHdoaWNoIHNob3VsZCBiZSBleHBsaWNpdGx5XG4gICAgICAvLyB1bnN1YnNjcmliZWQgZnJvbSB3aGVuIHdlIGtub3cgdGhpcyBzaGVldCBpcyBubyBsb25nZXIgbmVlZGVkLlxuXG4gICAgICBzdHlsZSQuc3Vic2NyaWJlKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgICAgcnVsZS5wcm9wKHByb3AsIHN0eWxlW3Byb3BdLCB1cGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9LFxuICAgIG9uUHJvY2Vzc1J1bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgICAgaWYgKHJ1bGUgJiYgcnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm47XG4gICAgICB2YXIgc3R5bGVSdWxlID0gcnVsZTtcbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcblxuICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AocHJvcCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKCFpc09ic2VydmFibGUodmFsdWUpKSByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHZhbHVlLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChuZXh0VmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgdXBkYXRlT3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9yZXQgPSBfbG9vcChwcm9wKTtcblxuICAgICAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvYnNlcnZhYmxlUGx1Z2luO1xuIiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlbWlXaXRoTmwgPSAvO1xcbi87XG4vKipcbiAqIE5haXZlIENTUyBwYXJzZXIuXG4gKiAtIFN1cHBvcnRzIG9ubHkgcnVsZSBib2R5IChubyBzZWxlY3RvcnMpXG4gKiAtIFJlcXVpcmVzIHNlbWljb2xvbiBhbmQgbmV3IGxpbmUgYWZ0ZXIgdGhlIHZhbHVlIChleGNlcHQgb2YgbGFzdCBsaW5lKVxuICogLSBObyBuZXN0ZWQgcnVsZXMgc3VwcG9ydFxuICovXG5cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKGNzc1RleHQpIHtcbiAgdmFyIHN0eWxlID0ge307XG4gIHZhciBzcGxpdCA9IGNzc1RleHQuc3BsaXQoc2VtaVdpdGhObCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZWNsID0gKHNwbGl0W2ldIHx8ICcnKS50cmltKCk7XG4gICAgaWYgKCFkZWNsKSBjb250aW51ZTtcbiAgICB2YXIgY29sb25JbmRleCA9IGRlY2wuaW5kZXhPZignOicpO1xuXG4gICAgaWYgKGNvbG9uSW5kZXggPT09IC0xKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIE1hbGZvcm1lZCBDU1Mgc3RyaW5nIFxcXCJcIiArIGRlY2wgKyBcIlxcXCJcIikgOiB2b2lkIDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcCA9IGRlY2wuc3Vic3RyKDAsIGNvbG9uSW5kZXgpLnRyaW0oKTtcbiAgICB2YXIgdmFsdWUgPSBkZWNsLnN1YnN0cihjb2xvbkluZGV4ICsgMSkudHJpbSgpO1xuICAgIHN0eWxlW3Byb3BdID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59O1xuXG52YXIgb25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICBpZiAodHlwZW9mIHJ1bGUuc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcnVsZS5zdHlsZSA9IHBhcnNlKHJ1bGUuc3R5bGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB0ZW1wbGF0ZVBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRlbXBsYXRlUGx1Z2luO1xuIiwiaW1wb3J0IHsgc3VwcG9ydGVkS2V5ZnJhbWVzLCBzdXBwb3J0ZWRWYWx1ZSwgc3VwcG9ydGVkUHJvcGVydHkgfSBmcm9tICdjc3MtdmVuZG9yJztcbmltcG9ydCB7IHRvQ3NzVmFsdWUgfSBmcm9tICdqc3MnO1xuXG4vKipcbiAqIEFkZCB2ZW5kb3IgcHJlZml4IHRvIGEgcHJvcGVydHkgbmFtZSB3aGVuIG5lZWRlZC5cbiAqL1xuXG5mdW5jdGlvbiBqc3NWZW5kb3JQcmVmaXhlcigpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHZhciBhdFJ1bGUgPSBydWxlO1xuICAgICAgYXRSdWxlLmF0ID0gc3VwcG9ydGVkS2V5ZnJhbWVzKGF0UnVsZS5hdCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4U3R5bGUoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcblxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHN0eWxlW3Byb3BdID0gdmFsdWUubWFwKHByZWZpeFN0eWxlKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHN1cHBvcnRlZFByb3BlcnR5KHByb3ApO1xuICAgICAgaWYgKHN1cHBvcnRlZFByb3AgJiYgc3VwcG9ydGVkUHJvcCAhPT0gcHJvcCkgY2hhbmdlUHJvcCA9IHRydWU7XG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSQxID0gc3VwcG9ydGVkVmFsdWUoc3VwcG9ydGVkUHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpO1xuICAgICAgaWYgKHN1cHBvcnRlZFZhbHVlJDEgJiYgc3VwcG9ydGVkVmFsdWUkMSAhPT0gdmFsdWUpIGNoYW5nZVZhbHVlID0gdHJ1ZTtcblxuICAgICAgaWYgKGNoYW5nZVByb3AgfHwgY2hhbmdlVmFsdWUpIHtcbiAgICAgICAgaWYgKGNoYW5nZVByb3ApIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgICAgc3R5bGVbc3VwcG9ydGVkUHJvcCB8fCBwcm9wXSA9IHN1cHBvcnRlZFZhbHVlJDEgfHwgdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgcmV0dXJuIHByZWZpeFN0eWxlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkVmFsdWUocHJvcCwgdG9Dc3NWYWx1ZSh2YWx1ZSkpIHx8IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLFxuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1ZlbmRvclByZWZpeGVyO1xuIiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IG9ic2VydmFibGUgZnJvbSAnanNzLXBsdWdpbi1ydWxlLXZhbHVlLW9ic2VydmFibGUnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ2pzcy1wbHVnaW4tdGVtcGxhdGUnO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgZXh0ZW5kIGZyb20gJ2pzcy1wbHVnaW4tZXh0ZW5kJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnanNzLXBsdWdpbi1uZXN0ZWQnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnanNzLXBsdWdpbi1jb21wb3NlJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgZXhwYW5kIGZyb20gJ2pzcy1wbHVnaW4tZXhwYW5kJztcbmltcG9ydCB2ZW5kb3JQcmVmaXhlciBmcm9tICdqc3MtcGx1Z2luLXZlbmRvci1wcmVmaXhlcic7XG5pbXBvcnQgcHJvcHNTb3J0IGZyb20gJ2pzcy1wbHVnaW4tcHJvcHMtc29ydCc7XG5cbnZhciBjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIG9ic2VydmFibGUob3B0aW9ucy5vYnNlcnZhYmxlKSwgdGVtcGxhdGUoKSwgZ2xvYmFsKCksIGV4dGVuZCgpLCBuZXN0ZWQoKSwgY29tcG9zZSgpLCBjYW1lbENhc2UoKSwgZGVmYXVsdFVuaXQob3B0aW9ucy5kZWZhdWx0VW5pdCksIGV4cGFuZCgpLCB2ZW5kb3JQcmVmaXhlcigpLCBwcm9wc1NvcnQoKV1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZTtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDb252ZXJ0cyBKU1MgYXJyYXkgdmFsdWUgdG8gYSBDU1Mgc3RyaW5nLlxuICpcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J11dYCA+IGBtYXJnaW46IDVweCAxMHB4O2BcbiAqIGBib3JkZXI6IFsnMXB4JywgJzJweCddYCA+IGBib3JkZXI6IDFweCwgMnB4O2BcbiAqIGBtYXJnaW46IFtbJzVweCcsICcxMHB4J10sICchaW1wb3J0YW50J11gID4gYG1hcmdpbjogNXB4IDEwcHggIWltcG9ydGFudDtgXG4gKiBgY29sb3I6IFsncmVkJywgIWltcG9ydGFudF1gID4gYGNvbG9yOiByZWQgIWltcG9ydGFudDtgXG4gKi9cblxuXG52YXIgdG9Dc3NWYWx1ZSA9IGZ1bmN0aW9uIHRvQ3NzVmFsdWUodmFsdWUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB2YXIgY3NzVmFsdWUgPSAnJzsgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlWzBdKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICAgIGlmIChjc3NWYWx1ZSkgY3NzVmFsdWUgKz0gJywgJztcbiAgICAgIGNzc1ZhbHVlICs9IGpvaW4odmFsdWVbaV0sICcgJyk7XG4gICAgfVxuICB9IGVsc2UgY3NzVmFsdWUgPSBqb2luKHZhbHVlLCAnLCAnKTsgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG5cblxuICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgIGNzc1ZhbHVlICs9ICcgIWltcG9ydGFudCc7XG4gIH1cblxuICByZXR1cm4gY3NzVmFsdWU7XG59O1xuXG5mdW5jdGlvbiBnZXRXaGl0ZXNwYWNlU3ltYm9scyhvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZm9ybWF0ID09PSBmYWxzZSkge1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lYnJlYWs6ICcnLFxuICAgICAgc3BhY2U6ICcnXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZWJyZWFrOiAnXFxuJyxcbiAgICBzcGFjZTogJyAnXG4gIH07XG59XG5cbi8qKlxuICogSW5kZW50IGEgc3RyaW5nLlxuICogaHR0cDovL2pzcGVyZi5jb20vYXJyYXktam9pbi12cy1mb3JcbiAqL1xuXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG5cbiAgaWYgKG9wdGlvbnMuZm9ybWF0ID09PSBmYWxzZSkge1xuICAgIGluZGVudCA9IC1JbmZpbml0eTtcbiAgfVxuXG4gIHZhciBfZ2V0V2hpdGVzcGFjZVN5bWJvbHMgPSBnZXRXaGl0ZXNwYWNlU3ltYm9scyhvcHRpb25zKSxcbiAgICAgIGxpbmVicmVhayA9IF9nZXRXaGl0ZXNwYWNlU3ltYm9scy5saW5lYnJlYWssXG4gICAgICBzcGFjZSA9IF9nZXRXaGl0ZXNwYWNlU3ltYm9scy5zcGFjZTtcblxuICBpZiAoc2VsZWN0b3IpIGluZGVudCsrOyAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG5cbiAgaWYgKGZhbGxiYWNrcykge1xuICAgIC8vIEFycmF5IHN5bnRheCB7ZmFsbGJhY2tzOiBbe3Byb3A6IHZhbHVlfV19XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZmFsbGJhY2tzKSkge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGZhbGxiYWNrcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIGZhbGxiYWNrID0gZmFsbGJhY2tzW2luZGV4XTtcblxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGZhbGxiYWNrKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZmFsbGJhY2tbcHJvcF07XG5cbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGxpbmVicmVhaztcbiAgICAgICAgICAgIHJlc3VsdCArPSBpbmRlbnRTdHIocHJvcCArIFwiOlwiICsgc3BhY2UgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGxpbmVicmVhaztcbiAgICAgICAgICByZXN1bHQgKz0gaW5kZW50U3RyKF9wcm9wICsgXCI6XCIgKyBzcGFjZSArIHRvQ3NzVmFsdWUoX3ZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3Byb3AyIGluIHN0eWxlKSB7XG4gICAgdmFyIF92YWx1ZTIgPSBzdHlsZVtfcHJvcDJdO1xuXG4gICAgaWYgKF92YWx1ZTIgIT0gbnVsbCAmJiBfcHJvcDIgIT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gbGluZWJyZWFrO1xuICAgICAgcmVzdWx0ICs9IGluZGVudFN0cihfcHJvcDIgKyBcIjpcIiArIHNwYWNlICsgdG9Dc3NWYWx1ZShfdmFsdWUyKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuXG5cbiAgaWYgKCFyZXN1bHQgJiYgIW9wdGlvbnMuYWxsb3dFbXB0eSkgcmV0dXJuIHJlc3VsdDsgLy8gV2hlbiBydWxlIGlzIGJlaW5nIHN0cmluZ2lmaWVkIGJlZm9yZSBzZWxlY3RvciB3YXMgZGVmaW5lZC5cblxuICBpZiAoIXNlbGVjdG9yKSByZXR1cm4gcmVzdWx0O1xuICBpbmRlbnQtLTtcbiAgaWYgKHJlc3VsdCkgcmVzdWx0ID0gXCJcIiArIGxpbmVicmVhayArIHJlc3VsdCArIGxpbmVicmVhaztcbiAgcmV0dXJuIGluZGVudFN0cihcIlwiICsgc2VsZWN0b3IgKyBzcGFjZSArIFwie1wiICsgcmVzdWx0LCBpbmRlbnQpICsgaW5kZW50U3RyKCd9JywgaW5kZW50KTtcbn1cblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BcXHNdKS9nO1xudmFyIG5hdGl2ZUVzY2FwZSA9IHR5cGVvZiBDU1MgIT09ICd1bmRlZmluZWQnICYmIENTUy5lc2NhcGU7XG52YXIgZXNjYXBlID0gKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIG5hdGl2ZUVzY2FwZSA/IG5hdGl2ZUVzY2FwZShzdHIpIDogc3RyLnJlcGxhY2UoZXNjYXBlUmVnZXgsICdcXFxcJDEnKTtcbn0pO1xuXG52YXIgQmFzZVN0eWxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJhc2VTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdzdHlsZSc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHZhciBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIFJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICBpZiAoc2hlZXQpIHRoaXMucmVuZGVyZXIgPSBzaGVldC5yZW5kZXJlcjtlbHNlIGlmIChSZW5kZXJlcikgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IGEgc3R5bGUgcHJvcGVydHkuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEJhc2VTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5wcm9wID0gZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIC8vIEl0J3MgYSBnZXR0ZXIuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLnN0eWxlW25hbWVdOyAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGUgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLlxuXG4gICAgdmFyIGZvcmNlID0gb3B0aW9ucyA/IG9wdGlvbnMuZm9yY2UgOiBmYWxzZTtcbiAgICBpZiAoIWZvcmNlICYmIHRoaXMuc3R5bGVbbmFtZV0gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcbiAgICB2YXIgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLnByb2Nlc3MgIT09IGZhbHNlKSB7XG4gICAgICBuZXdWYWx1ZSA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vbkNoYW5nZVZhbHVlKHZhbHVlLCBuYW1lLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgaXNFbXB0eSA9IG5ld1ZhbHVlID09IG51bGwgfHwgbmV3VmFsdWUgPT09IGZhbHNlO1xuICAgIHZhciBpc0RlZmluZWQgPSBuYW1lIGluIHRoaXMuc3R5bGU7IC8vIFZhbHVlIGlzIGVtcHR5IGFuZCB3YXNuJ3QgZGVmaW5lZCBiZWZvcmUuXG5cbiAgICBpZiAoaXNFbXB0eSAmJiAhaXNEZWZpbmVkICYmICFmb3JjZSkgcmV0dXJuIHRoaXM7IC8vIFdlIGFyZSBnb2luZyB0byByZW1vdmUgdGhpcyB2YWx1ZS5cblxuICAgIHZhciByZW1vdmUgPSBpc0VtcHR5ICYmIGlzRGVmaW5lZDtcbiAgICBpZiAocmVtb3ZlKSBkZWxldGUgdGhpcy5zdHlsZVtuYW1lXTtlbHNlIHRoaXMuc3R5bGVbbmFtZV0gPSBuZXdWYWx1ZTsgLy8gUmVuZGVyYWJsZSBpcyBkZWZpbmVkIGlmIFN0eWxlU2hlZXQgb3B0aW9uIGBsaW5rYCBpcyB0cnVlLlxuXG4gICAgaWYgKHRoaXMucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICBpZiAocmVtb3ZlKSB0aGlzLnJlbmRlcmVyLnJlbW92ZVByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSk7ZWxzZSB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMucmVuZGVyYWJsZSwgbmFtZSwgbmV3VmFsdWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LmF0dGFjaGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gUnVsZSBpcyBub3QgbGlua2VkLiBNaXNzaW5nIHNoZWV0IG9wdGlvbiBcImxpbms6IHRydWVcIi4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gQmFzZVN0eWxlUnVsZTtcbn0oKTtcbnZhciBTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9CYXNlU3R5bGVSdWxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFN0eWxlUnVsZSwgX0Jhc2VTdHlsZVJ1bGUpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQmFzZVN0eWxlUnVsZS5jYWxsKHRoaXMsIGtleSwgc3R5bGUsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgdmFyIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvcixcbiAgICAgICAgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgX3RoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgfSBlbHNlIGlmIChzY29wZWQgIT09IGZhbHNlKSB7XG4gICAgICBfdGhpcy5pZCA9IGdlbmVyYXRlSWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSksIHNoZWV0KTtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IFwiLlwiICsgZXNjYXBlKF90aGlzLmlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RvciBzdHJpbmcuXG4gICAqIEF0dGVudGlvbjogdXNlIHRoaXMgd2l0aCBjYXV0aW9uLiBNb3N0IGJyb3dzZXJzIGRpZG4ndCBpbXBsZW1lbnRcbiAgICogc2VsZWN0b3JUZXh0IHNldHRlciwgc28gdGhpcyBtYXkgcmVzdWx0IGluIHJlcmVuZGVyaW5nIG9mIGVudGlyZSBTdHlsZSBTaGVldC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvMiA9IFN0eWxlUnVsZS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIEFwcGx5IHJ1bGUgdG8gYW4gZWxlbWVudCBpbmxpbmUuXG4gICAqL1xuICBfcHJvdG8yLmFwcGx5VG8gPSBmdW5jdGlvbiBhcHBseVRvKHJlbmRlcmFibGUpIHtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuXG4gICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICB2YXIganNvbiA9IHRoaXMudG9KU09OKCk7XG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4ganNvbikge1xuICAgICAgICByZW5kZXJlci5zZXRQcm9wZXJ0eShyZW5kZXJhYmxlLCBwcm9wLCBqc29uW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydWxlLlxuICAgKiBGYWxsYmFja3MgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAqIFVzZWZ1bCBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICB2YXIganNvbiA9IHt9O1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLnN0eWxlW3Byb3BdO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIGpzb25bcHJvcF0gPSB2YWx1ZTtlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkganNvbltwcm9wXSA9IHRvQ3NzVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBqc29uO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuICAgIHZhciBsaW5rID0gc2hlZXQgPyBzaGVldC5vcHRpb25zLmxpbmsgOiBmYWxzZTtcbiAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgYWxsb3dFbXB0eTogdHJ1ZVxuICAgIH0pIDogb3B0aW9ucztcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5zZWxlY3RvclRleHQsIHRoaXMuc3R5bGUsIG9wdHMpO1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhTdHlsZVJ1bGUsIFt7XG4gICAga2V5OiBcInNlbGVjdG9yXCIsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gdGhpcy5zZWxlY3RvclRleHQpIHJldHVybjtcbiAgICAgIHRoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyLFxuICAgICAgICAgIHJlbmRlcmFibGUgPSB0aGlzLnJlbmRlcmFibGU7XG4gICAgICBpZiAoIXJlbmRlcmFibGUgfHwgIXJlbmRlcmVyKSByZXR1cm47XG4gICAgICB2YXIgaGFzQ2hhbmdlZCA9IHJlbmRlcmVyLnNldFNlbGVjdG9yKHJlbmRlcmFibGUsIHNlbGVjdG9yKTsgLy8gSWYgc2VsZWN0b3Igc2V0dGVyIGlzIG5vdCBpbXBsZW1lbnRlZCwgcmVyZW5kZXIgdGhlIHJ1bGUuXG5cbiAgICAgIGlmICghaGFzQ2hhbmdlZCkge1xuICAgICAgICByZW5kZXJlci5yZXBsYWNlUnVsZShyZW5kZXJhYmxlLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHNlbGVjdG9yIHN0cmluZy5cbiAgICAgKi9cbiAgICAsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3RvclRleHQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0eWxlUnVsZTtcbn0oQmFzZVN0eWxlUnVsZSk7XG52YXIgcGx1Z2luU3R5bGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKGtleVswXSA9PT0gJ0AnIHx8IG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGRlZmF1bHRUb1N0cmluZ09wdGlvbnMgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgYXRSZWdFeHAgPSAvQChbXFx3LV0rKS87XG4vKipcbiAqIENvbmRpdGlvbmFsIHJ1bGUgZm9yIEBtZWRpYSwgQHN1cHBvcnRzXG4gKi9cblxudmFyIENvbmRpdGlvbmFsUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdjb25kaXRpb25hbCc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWUgfHwgXCJAXCIgKyB0aGlzLmF0O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2UgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgbmV3UnVsZSA9IHRoaXMucnVsZXMucmVwbGFjZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgaWYgKG5ld1J1bGUpIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKG5ld1J1bGUpO1xuICAgIHJldHVybiBuZXdSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgX2dldFdoaXRlc3BhY2VTeW1ib2xzID0gZ2V0V2hpdGVzcGFjZVN5bWJvbHMob3B0aW9ucyksXG4gICAgICAgIGxpbmVicmVhayA9IF9nZXRXaGl0ZXNwYWNlU3ltYm9scy5saW5lYnJlYWs7XG5cbiAgICBpZiAob3B0aW9ucy5pbmRlbnQgPT0gbnVsbCkgb3B0aW9ucy5pbmRlbnQgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmluZGVudDtcbiAgICBpZiAob3B0aW9ucy5jaGlsZHJlbiA9PSBudWxsKSBvcHRpb25zLmNoaWxkcmVuID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucy5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlcnkgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgcmV0dXJuIGNoaWxkcmVuID8gdGhpcy5xdWVyeSArIFwiIHtcIiArIGxpbmVicmVhayArIGNoaWxkcmVuICsgbGluZWJyZWFrICsgXCJ9XCIgOiAnJztcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCA9IC9AbWVkaWF8QHN1cHBvcnRzXFxzKy87XG52YXIgcGx1Z2luQ29uZGl0aW9uYWxSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXlSZWdFeHAudGVzdChrZXkpID8gbmV3IENvbmRpdGlvbmFsUnVsZShrZXksIHN0eWxlcywgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIG5hbWVSZWdFeHAgPSAvQGtleWZyYW1lc1xccysoW1xcdy1dKykvO1xuLyoqXG4gKiBSdWxlIGZvciBAa2V5ZnJhbWVzXG4gKi9cblxudmFyIEtleWZyYW1lc1J1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2tleWZyYW1lcyc7XG4gICAgdGhpcy5hdCA9ICdAa2V5ZnJhbWVzJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIHZhciBfZ2V0V2hpdGVzcGFjZVN5bWJvbHMgPSBnZXRXaGl0ZXNwYWNlU3ltYm9scyhvcHRpb25zKSxcbiAgICAgICAgbGluZWJyZWFrID0gX2dldFdoaXRlc3BhY2VTeW1ib2xzLmxpbmVicmVhaztcblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXCIgKyBsaW5lYnJlYWsgKyBjaGlsZHJlbiArIGxpbmVicmVhaztcbiAgICByZXR1cm4gdGhpcy5hdCArIFwiIFwiICsgdGhpcy5pZCArIFwiIHtcIiArIGNoaWxkcmVuICsgXCJ9XCI7XG4gIH07XG5cbiAgcmV0dXJuIEtleWZyYW1lc1J1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDEgPSAvQGtleWZyYW1lc1xccysvO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcblxudmFyIGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUgPSBmdW5jdGlvbiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwga2V5ZnJhbWVzKSB7XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWwucmVwbGFjZShyZWZSZWdFeHAsIGZ1bmN0aW9uIChtYXRjaCwgbmFtZSkge1xuICAgICAgaWYgKG5hbWUgaW4ga2V5ZnJhbWVzKSB7XG4gICAgICAgIHJldHVybiBrZXlmcmFtZXNbbmFtZV07XG4gICAgICB9XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gUmVmZXJlbmNlZCBrZXlmcmFtZXMgcnVsZSBcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkLlwiKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuLyoqXG4gKiBSZXBsYWNlIHRoZSByZWZlcmVuY2UgZm9yIGEgYW5pbWF0aW9uIG5hbWUuXG4gKi9cblxuXG52YXIgcmVwbGFjZVJlZiA9IGZ1bmN0aW9uIHJlcGxhY2VSZWYoc3R5bGUsIHByb3AsIGtleWZyYW1lcykge1xuICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wXTtcbiAgdmFyIHJlZktleWZyYW1lID0gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWx1ZSwga2V5ZnJhbWVzKTtcblxuICBpZiAocmVmS2V5ZnJhbWUgIT09IHZhbHVlKSB7XG4gICAgc3R5bGVbcHJvcF0gPSByZWZLZXlmcmFtZTtcbiAgfVxufTtcblxudmFyIHBsdWdpbktleWZyYW1lc1J1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgcmV0dXJuIF9CYXNlU3R5bGVSdWxlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gRm9udEZhY2VSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIF9nZXRXaGl0ZXNwYWNlU3ltYm9scyA9IGdldFdoaXRlc3BhY2VTeW1ib2xzKG9wdGlvbnMpLFxuICAgICAgICBsaW5lYnJlYWsgPSBfZ2V0V2hpdGVzcGFjZVN5bWJvbHMubGluZWJyZWFrO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5zdHlsZSkpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcblxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHN0ciArPSB0b0Nzcyh0aGlzLmF0LCB0aGlzLnN0eWxlW2luZGV4XSk7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlW2luZGV4ICsgMV0pIHN0ciArPSBsaW5lYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFZpZXdwb3J0UnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHJldHVybiB0b0Nzcyh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFZpZXdwb3J0UnVsZTtcbn0oKTtcbnZhciBwbHVnaW5WaWV3cG9ydFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5ID09PSAnQHZpZXdwb3J0JyB8fCBrZXkgPT09ICdALW1zLXZpZXdwb3J0JyA/IG5ldyBWaWV3cG9ydFJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgU2ltcGxlUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSA9ICdzaW1wbGUnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbiAgdmFyIF9wcm90byA9IFNpbXBsZVJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgc3RyICs9IHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlW2luZGV4XSArIFwiO1wiO1xuICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2V5ICsgXCIgXCIgKyB0aGlzLnZhbHVlICsgXCI7XCI7XG4gIH07XG5cbiAgcmV0dXJuIFNpbXBsZVJ1bGU7XG59KCk7XG52YXIga2V5c01hcCA9IHtcbiAgJ0BjaGFyc2V0JzogdHJ1ZSxcbiAgJ0BpbXBvcnQnOiB0cnVlLFxuICAnQG5hbWVzcGFjZSc6IHRydWVcbn07XG52YXIgcGx1Z2luU2ltcGxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBrZXkgaW4ga2V5c01hcCA/IG5ldyBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIHBsdWdpbnMgPSBbcGx1Z2luU3R5bGVSdWxlLCBwbHVnaW5Db25kaXRpb25hbFJ1bGUsIHBsdWdpbktleWZyYW1lc1J1bGUsIHBsdWdpbktleWZyYW1lUnVsZSwgcGx1Z2luRm9udEZhY2VSdWxlLCBwbHVnaW5WaWV3cG9ydFJ1bGUsIHBsdWdpblNpbXBsZVJ1bGVdO1xuXG52YXIgZGVmYXVsdFVwZGF0ZU9wdGlvbnMgPSB7XG4gIHByb2Nlc3M6IHRydWVcbn07XG52YXIgZm9yY2VVcGRhdGVPcHRpb25zID0ge1xuICBmb3JjZTogdHJ1ZSxcbiAgcHJvY2VzczogdHJ1ZVxuICAvKipcbiAgICogQ29udGFpbnMgcnVsZXMgb2JqZWN0cyBhbmQgYWxsb3dzIGFkZGluZy9yZW1vdmluZyBldGMuXG4gICAqIElzIHVzZWQgZm9yIGUuZy4gYnkgYFN0eWxlU2hlZXRgIG9yIGBDb25kaXRpb25hbFJ1bGVgLlxuICAgKi9cblxufTtcblxudmFyIFJ1bGVMaXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLy8gUnVsZXMgcmVnaXN0cnkgZm9yIGFjY2VzcyBieSAuZ2V0KCkgbWV0aG9kLlxuICAvLyBJdCBjb250YWlucyB0aGUgc2FtZSBydWxlIHJlZ2lzdGVyZWQgYnkgbmFtZSBhbmQgYnkgc2VsZWN0b3IuXG4gIC8vIE9yaWdpbmFsIHN0eWxlcyBvYmplY3QuXG4gIC8vIFVzZWQgdG8gZW5zdXJlIGNvcnJlY3QgcnVsZXMgb3JkZXIuXG4gIGZ1bmN0aW9uIFJ1bGVMaXN0KG9wdGlvbnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuICAgIHRoaXMucmF3ID0ge307XG4gICAgdGhpcy5pbmRleCA9IFtdO1xuICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2UgcnVsZS5cbiAgICogQ3JlYXRlIGEgbmV3IHJ1bGUgYW5kIHJlbW92ZSBvbGQgb25lIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmdcbiAgICogYmVjYXVzZSB3ZSB3YW50IHRvIGludm9rZSBvbkNyZWF0ZVJ1bGUgaG9vayB0byBtYWtlIHBsdWdpbnMgd29yay5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UobmFtZSwgZGVjbCwgcnVsZU9wdGlvbnMpIHtcbiAgICB2YXIgb2xkUnVsZSA9IHRoaXMuZ2V0KG5hbWUpO1xuICAgIHZhciBvbGRJbmRleCA9IHRoaXMuaW5kZXguaW5kZXhPZihvbGRSdWxlKTtcblxuICAgIGlmIChvbGRSdWxlKSB7XG4gICAgICB0aGlzLnJlbW92ZShvbGRSdWxlKTtcbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHJ1bGVPcHRpb25zO1xuICAgIGlmIChvbGRJbmRleCAhPT0gLTEpIG9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgcnVsZU9wdGlvbnMsIHtcbiAgICAgIGluZGV4OiBvbGRJbmRleFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgcnVsZSBieSBuYW1lIG9yIHNlbGVjdG9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQobmFtZU9yU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5tYXBbbmFtZU9yU2VsZWN0b3JdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07XG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuZ2V0KG5hbWUpLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHJ1bGUuc3R5bGU7XG4gICAgcGx1Z2lucy5vblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCwgb3B0aW9ucyk7IC8vIFdlIHJlbHkgb24gYSBuZXcgYHN0eWxlYCByZWYgaW4gY2FzZSBpdCB3YXMgbXV0YXRlZCBkdXJpbmcgb25VcGRhdGUgaG9vay5cblxuICAgIGlmIChvcHRpb25zLnByb2Nlc3MgJiYgc3R5bGUgJiYgc3R5bGUgIT09IHJ1bGUuc3R5bGUpIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gcnVuIHRoZSBwbHVnaW5zIGluIGNhc2UgbmV3IGBzdHlsZWAgcmVsaWVzIG9uIHN5bnRheCBwbHVnaW5zLlxuICAgICAgcGx1Z2lucy5vblByb2Nlc3NTdHlsZShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7IC8vIFVwZGF0ZSBhbmQgYWRkIHByb3BzLlxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHJ1bGUuc3R5bGUpIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IHJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUsIGZvcmNlVXBkYXRlT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUmVtb3ZlIHByb3BzLlxuXG5cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciBfbmV4dFZhbHVlID0gcnVsZS5zdHlsZVtfcHJvcF07XG4gICAgICAgIHZhciBfcHJldlZhbHVlID0gc3R5bGVbX3Byb3BdOyAvLyBXZSBuZWVkIHRvIHVzZSBgZm9yY2U6IHRydWVgIGJlY2F1c2UgYHJ1bGUuc3R5bGVgIGhhcyBiZWVuIHVwZGF0ZWQgZHVyaW5nIG9uVXBkYXRlIGhvb2ssIHNvIGBydWxlLnByb3AoKWAgd2lsbCBub3QgdXBkYXRlIHRoZSBDU1NPTSBydWxlLlxuICAgICAgICAvLyBXZSBkbyB0aGlzIGNvbXBhcmlzb24gdG8gYXZvaWQgdW5uZWVkZWQgYHJ1bGUucHJvcCgpYCBjYWxscywgc2luY2Ugd2UgaGF2ZSB0aGUgb2xkIGBzdHlsZWAgb2JqZWN0IGhlcmUuXG5cbiAgICAgICAgaWYgKF9uZXh0VmFsdWUgPT0gbnVsbCAmJiBfbmV4dFZhbHVlICE9PSBfcHJldlZhbHVlKSB7XG4gICAgICAgICAgcnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICB2YXIgX2dldFdoaXRlc3BhY2VTeW1ib2xzID0gZ2V0V2hpdGVzcGFjZVN5bWJvbHMob3B0aW9ucyksXG4gICAgICAgIGxpbmVicmVhayA9IF9nZXRXaGl0ZXNwYWNlU3ltYm9scy5saW5lYnJlYWs7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9IGxpbmVicmVhaztcbiAgICAgIHN0ciArPSBjc3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbiAgfTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2xhc3NlcyA9IHt9O1xuICAgIHRoaXMua2V5ZnJhbWVzID0ge307XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNoZWV0OiB0aGlzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAga2V5ZnJhbWVzOiB0aGlzLmtleWZyYW1lc1xuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMuUmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgb3B0aW9ucy5SZW5kZXJlcih0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gbmV3IFJ1bGVMaXN0KHRoaXMub3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGVzW25hbWVdKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuICAvKipcbiAgICogQXR0YWNoIHJlbmRlcmFibGUgdG8gdGhlIHJlbmRlciB0cmVlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5hdHRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTsgLy8gT3JkZXIgaXMgaW1wb3J0YW50LCBiZWNhdXNlIHdlIGNhbid0IHVzZSBpbnNlcnRSdWxlIEFQSSBpZiBzdHlsZSBlbGVtZW50IGlzIG5vdCBhdHRhY2hlZC5cblxuICAgIGlmICghdGhpcy5kZXBsb3llZCkgdGhpcy5kZXBsb3koKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHJlbmRlcmFibGUgZnJvbSByZW5kZXIgdHJlZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGV0YWNoKCk7XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBydWxlIHRvIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlOyAvLyBQbHVnaW5zIGNhbiBjcmVhdGUgcnVsZXMuXG4gICAgLy8gSW4gb3JkZXIgdG8gcHJlc2VydmUgdGhlIHJpZ2h0IG9yZGVyLCB3ZSBuZWVkIHRvIHF1ZXVlIGFsbCBgLmFkZFJ1bGVgIGNhbGxzLFxuICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgIXF1ZXVlKSB0aGlzLnF1ZXVlID0gW107XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICBpZiAoIXJ1bGUpIHJldHVybiBudWxsO1xuICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIGlmICghdGhpcy5kZXBsb3llZCkgcmV0dXJuIHJ1bGU7IC8vIERvbid0IGluc2VydCBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG5cbiAgICAgICAgaWYgKHRoaXMucXVldWUpIHtcbiAgICAgICAgICB0aGlzLnF1ZXVlLmZvckVhY2godGhpcy5pbnNlcnRSdWxlLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IGFkZCBydWxlcyB0byBhIGRldGFjaGVkIHN0eWxlIG5vZGUuXG4gICAgLy8gV2Ugd2lsbCByZWRlcGxveSB0aGUgc2hlZXQgb25jZSB1c2VyIHdpbGwgYXR0YWNoIGl0LlxuXG5cbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2UgYSBydWxlIGluIHRoZSBjdXJyZW50IHN0eWxlc2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUobmFtZU9yU2VsZWN0b3IsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2xkUnVsZSA9IHRoaXMucnVsZXMuZ2V0KG5hbWVPclNlbGVjdG9yKTtcbiAgICBpZiAoIW9sZFJ1bGUpIHJldHVybiB0aGlzLmFkZFJ1bGUobmFtZU9yU2VsZWN0b3IsIGRlY2wsIG9wdGlvbnMpO1xuICAgIHZhciBuZXdSdWxlID0gdGhpcy5ydWxlcy5yZXBsYWNlKG5hbWVPclNlbGVjdG9yLCBkZWNsLCBvcHRpb25zKTtcblxuICAgIGlmIChuZXdSdWxlKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShuZXdSdWxlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gbmV3UnVsZTsgLy8gRG9uJ3QgcmVwbGFjZSAvIGRlbGV0ZSBydWxlIGRpcmVjdGx5IGlmIHRoZXJlIGlzIG5vIHN0cmluZ2lmaWVkIHZlcnNpb24geWV0LlxuICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cblxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgaWYgKCFuZXdSdWxlKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKG9sZFJ1bGUpO1xuICAgICAgICB9IGVsc2UgaWYgKG9sZFJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVwbGFjZVJ1bGUob2xkUnVsZS5yZW5kZXJhYmxlLCBuZXdSdWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3UnVsZTtcbiAgICB9IC8vIFdlIGNhbid0IHJlcGxhY2UgcnVsZXMgdG8gYSBkZXRhY2hlZCBzdHlsZSBub2RlLlxuICAgIC8vIFdlIHdpbGwgcmVkZXBsb3kgdGhlIHNoZWV0IG9uY2UgdXNlciB3aWxsIGF0dGFjaCBpdC5cblxuXG4gICAgdGhpcy5kZXBsb3llZCA9IGZhbHNlO1xuICAgIHJldHVybiBuZXdSdWxlO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgcnVsZSBpbnRvIHRoZSBTdHlsZVNoZWV0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKHJ1bGUpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlci5pbnNlcnRSdWxlKHJ1bGUpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCBhZGQgcnVsZXMuXG4gICAqIFdpbGwgcmVuZGVyIGFsc28gYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlcyA9IGZ1bmN0aW9uIGFkZFJ1bGVzKHN0eWxlcywgb3B0aW9ucykge1xuICAgIHZhciBhZGRlZCA9IFtdO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5hZGRSdWxlKG5hbWUsIHN0eWxlc1tuYW1lXSwgb3B0aW9ucyk7XG4gICAgICBpZiAocnVsZSkgYWRkZWQucHVzaChydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkZWQ7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUgYnkgbmFtZSBvciBzZWxlY3Rvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZSA9IGZ1bmN0aW9uIGdldFJ1bGUobmFtZU9yU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZU9yU2VsZWN0b3IpO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlIGJ5IG5hbWUuXG4gICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxldGVSdWxlID0gZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgdmFyIHJ1bGUgPSB0eXBlb2YgbmFtZSA9PT0gJ29iamVjdCcgPyBuYW1lIDogdGhpcy5ydWxlcy5nZXQobmFtZSk7XG5cbiAgICBpZiAoIXJ1bGUgfHwgLy8gU3R5bGUgc2hlZXQgd2FzIGNyZWF0ZWQgd2l0aG91dCBsaW5rOiB0cnVlIGFuZCBhdHRhY2hlZCwgaW4gdGhpcyBjYXNlIHdlXG4gICAgLy8gd29uJ3QgYmUgYWJsZSB0byByZW1vdmUgdGhlIENTUyBydWxlIGZyb20gdGhlIERPTS5cbiAgICB0aGlzLmF0dGFjaGVkICYmICFydWxlLnJlbmRlcmFibGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnJlbW92ZShydWxlKTtcblxuICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSAmJiB0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBEZXBsb3kgcHVyZSBDU1Mgc3RyaW5nIHRvIGEgcmVuZGVyYWJsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmRlcGxveSgpO1xuICAgIHRoaXMuZGVwbG95ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcnVsZXM7XG5cbiAgICAoX3RoaXMkcnVsZXMgPSB0aGlzLnJ1bGVzKS51cGRhdGUuYXBwbHkoX3RoaXMkcnVsZXMsIGFyZ3VtZW50cyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogVXBkYXRlcyBhIHNpbmdsZSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51cGRhdGVPbmUgPSBmdW5jdGlvbiB1cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucykge1xuICAgIHRoaXMucnVsZXMudXBkYXRlT25lKHJ1bGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQbHVnaW5zUmVnaXN0cnkoKSB7XG4gICAgdGhpcy5wbHVnaW5zID0ge1xuICAgICAgaW50ZXJuYWw6IFtdLFxuICAgICAgZXh0ZXJuYWw6IFtdXG4gICAgfTtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0ge307XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBydWxlLnN0eWxlID0gdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTdHlsZVtpXShydWxlLnN0eWxlLCBydWxlLCBzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTaGVldGAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1NoZWV0ID0gZnVuY3Rpb24gb25Qcm9jZXNzU2hlZXQoc2hlZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25VcGRhdGVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vblVwZGF0ZSA9IGZ1bmN0aW9uIG9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnJlZ2lzdHJ5Lm9uVXBkYXRlW2ldKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vbkNoYW5nZVZhbHVlID0gZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb2Nlc3NlZFZhbHVlID0gdGhpcy5yZWdpc3RyeS5vbkNoYW5nZVZhbHVlW2ldKHByb2Nlc3NlZFZhbHVlLCBwcm9wLCBydWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgcGx1Z2luLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UobmV3UGx1Z2luLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcXVldWU6ICdleHRlcm5hbCdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHBsdWdpbnMgPSB0aGlzLnBsdWdpbnNbb3B0aW9ucy5xdWV1ZV07IC8vIEF2b2lkcyBhcHBseWluZyBzYW1lIHBsdWdpbiB0d2ljZSwgYXQgbGVhc3QgYmFzZWQgb24gcmVmLlxuXG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihuZXdQbHVnaW4pICE9PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBsdWdpbnMucHVzaChuZXdQbHVnaW4pO1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXS5jb25jYXQodGhpcy5wbHVnaW5zLmV4dGVybmFsLCB0aGlzLnBsdWdpbnMuaW50ZXJuYWwpLnJlZHVjZShmdW5jdGlvbiAocmVnaXN0cnksIHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVnaXN0cnkpIHtcbiAgICAgICAgICByZWdpc3RyeVtuYW1lXS5wdXNoKHBsdWdpbltuYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIGhvb2sgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2lzdHJ5O1xuICAgIH0sIHtcbiAgICAgIG9uQ3JlYXRlUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1N0eWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1NoZWV0OiBbXSxcbiAgICAgIG9uQ2hhbmdlVmFsdWU6IFtdLFxuICAgICAgb25VcGRhdGU6IFtdXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBTaGVldHMgcmVnaXN0cnkgdG8gYWNjZXNzIGFsbCBpbnN0YW5jZXMgaW4gb25lIHBsYWNlLlxuICovXG5cbnZhciBTaGVldHNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNoZWV0c1JlZ2lzdHJ5KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTaGVldHNSZWdpc3RyeS5wcm90b3R5cGU7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHNoZWV0KSB7XG4gICAgdmFyIHJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcbiAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgIGlmIChyZWdpc3RyeS5sZW5ndGggPT09IDAgfHwgaW5kZXggPj0gdGhpcy5pbmRleCkge1xuICAgICAgcmVnaXN0cnkucHVzaChzaGVldCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGaW5kIGEgcG9zaXRpb24uXG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWdpc3RyeVtpXS5vcHRpb25zLmluZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgcmVnaXN0cnkuc3BsaWNlKGksIDAsIHNoZWV0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNldCA9IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGEgU3R5bGUgU2hlZXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShzaGVldCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgdGhpcy5yZWdpc3RyeS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IGFsbCBhdHRhY2hlZCBzaGVldHMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKF90ZW1wKSB7XG4gICAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgYXR0YWNoZWQgPSBfcmVmLmF0dGFjaGVkLFxuICAgICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1wiYXR0YWNoZWRcIl0pO1xuXG4gICAgdmFyIF9nZXRXaGl0ZXNwYWNlU3ltYm9scyA9IGdldFdoaXRlc3BhY2VTeW1ib2xzKG9wdGlvbnMpLFxuICAgICAgICBsaW5lYnJlYWsgPSBfZ2V0V2hpdGVzcGFjZVN5bWJvbHMubGluZWJyZWFrO1xuXG4gICAgdmFyIGNzcyA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLnJlZ2lzdHJ5W2ldO1xuXG4gICAgICBpZiAoYXR0YWNoZWQgIT0gbnVsbCAmJiBzaGVldC5hdHRhY2hlZCAhPT0gYXR0YWNoZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjc3MpIGNzcyArPSBsaW5lYnJlYWs7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgc2hlZXRzID0gbmV3IFNoZWV0c1JlZ2lzdHJ5KCk7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICogTm93IHRoYXQgYGdsb2JhbFRoaXNgIGlzIGF2YWlsYWJsZSBvbiBtb3N0IHBsYXRmb3Jtc1xuICogKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2dsb2JhbFRoaXMjYnJvd3Nlcl9jb21wYXRpYmlsaXR5KVxuICogd2UgY2hlY2sgZm9yIGBnbG9iYWxUaGlzYCBmaXJzdC4gYGdsb2JhbFRoaXNgIGlzIG5lY2Vzc2FyeSBmb3IganNzXG4gKiB0byBydW4gaW4gQWdvcmljJ3Mgc2VjdXJlIHZlcnNpb24gb2YgSmF2YVNjcmlwdCAoU0VTKS4gVW5kZXIgU0VTLFxuICogYGdsb2JhbFRoaXNgIGV4aXN0cywgYnV0IGB3aW5kb3dgLCBgc2VsZmAsIGFuZCBgRnVuY3Rpb24oJ3JldHVyblxuICogdGhpcycpKClgIGFyZSBhbGwgdW5kZWZpbmVkIGZvciBzZWN1cml0eSByZWFzb25zLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG4gKi9cbnZhciBnbG9iYWxUaGlzJDEgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBucyA9ICcyZjFhY2M2YzNhNjA2YjA4MmU1ZWVmNWU1NDQxNGZmYic7XG5pZiAoZ2xvYmFsVGhpcyQxW25zXSA9PSBudWxsKSBnbG9iYWxUaGlzJDFbbnNdID0gMDsgLy8gQnVuZGxlIG1heSBjb250YWluIG11bHRpcGxlIEpTUyB2ZXJzaW9ucyBhdCB0aGUgc2FtZSB0aW1lLiBJbiBvcmRlciB0byBpZGVudGlmeVxuLy8gdGhlIGN1cnJlbnQgdmVyc2lvbiB3aXRoIGp1c3Qgb25lIHNob3J0IG51bWJlciBhbmQgdXNlIGl0IGZvciBjbGFzc2VzIGdlbmVyYXRpb25cbi8vIHdlIHVzZSBhIGNvdW50ZXIuIEFsc28gaXQgaXMgbW9yZSBhY2N1cmF0ZSwgYmVjYXVzZSB1c2VyIGNhbiBtYW51YWxseSByZWV2YWx1YXRlXG4vLyB0aGUgbW9kdWxlLlxuXG52YXIgbW9kdWxlSWQgPSBnbG9iYWxUaGlzJDFbbnNdKys7XG5cbnZhciBtYXhSdWxlcyA9IDFlMTA7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuICogV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldGVkLlxuICogV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbiAqL1xuXG52YXIgY3JlYXRlR2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlSWQob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcblxuICB2YXIgZ2VuZXJhdGVJZCA9IGZ1bmN0aW9uIGdlbmVyYXRlSWQocnVsZSwgc2hlZXQpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHJ1bGVDb3VudGVyID4gbWF4UnVsZXMpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gWW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4gUnVsZSBjb3VudGVyIGlzIGF0IFwiICsgcnVsZUNvdW50ZXIgKyBcIi5cIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGpzc0lkID0gJyc7XG4gICAgdmFyIHByZWZpeCA9ICcnO1xuXG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgICAgcHJlZml4ID0gc2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmpzcy5pZCAhPSBudWxsKSB7XG4gICAgICAgIGpzc0lkID0gU3RyaW5nKHNoZWV0Lm9wdGlvbnMuanNzLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW5pZnkpIHtcbiAgICAgIC8vIFVzaW5nIFwiY1wiIGJlY2F1c2UgYSBudW1iZXIgY2FuJ3QgYmUgdGhlIGZpcnN0IGNoYXIgaW4gYSBjbGFzcyBuYW1lLlxuICAgICAgcmV0dXJuIFwiXCIgKyAocHJlZml4IHx8ICdjJykgKyBtb2R1bGVJZCArIGpzc0lkICsgcnVsZUNvdW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeCArIHJ1bGUua2V5ICsgXCItXCIgKyBtb2R1bGVJZCArIChqc3NJZCA/IFwiLVwiICsganNzSWQgOiAnJykgKyBcIi1cIiArIHJ1bGVDb3VudGVyO1xuICB9O1xuXG4gIHJldHVybiBnZW5lcmF0ZUlkO1xufTtcblxuLyoqXG4gKiBDYWNoZSB0aGUgdmFsdWUgZnJvbSB0aGUgZmlyc3QgdGltZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAqL1xuXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuLyoqXG4gKiBHZXQgYSBzdHlsZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuXG5cbnZhciBnZXRQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIHJldHVybiBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLmdldChwcm9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3NzUnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gJyc7XG4gIH1cbn07XG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5cblxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkoY3NzUnVsZSwgcHJvcCwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICB2YXIgY3NzVmFsdWUgPSB2YWx1ZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgY3NzVmFsdWUgPSB0b0Nzc1ZhbHVlKHZhbHVlKTtcbiAgICB9IC8vIFN1cHBvcnQgQ1NTVE9NLlxuXG5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5zZXQocHJvcCwgY3NzVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5kZXhPZkltcG9ydGFudEZsYWcgPSBjc3NWYWx1ZSA/IGNzc1ZhbHVlLmluZGV4T2YoJyFpbXBvcnRhbnQnKSA6IC0xO1xuICAgICAgdmFyIGNzc1ZhbHVlV2l0aG91dEltcG9ydGFudEZsYWcgPSBpbmRleE9mSW1wb3J0YW50RmxhZyA+IC0xID8gY3NzVmFsdWUuc3Vic3RyKDAsIGluZGV4T2ZJbXBvcnRhbnRGbGFnIC0gMSkgOiBjc3NWYWx1ZTtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWVXaXRob3V0SW1wb3J0YW50RmxhZywgaW5kZXhPZkltcG9ydGFudEZsYWcgPiAtMSA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eS5cbiAqL1xuXG5cbnZhciByZW1vdmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICAvLyBTdXBwb3J0IENTU1RPTS5cbiAgICBpZiAoY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcCkge1xuICAgICAgY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5kZWxldGUocHJvcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUucmVtb3ZlUHJvcGVydHkocHJvcCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIERPTUV4Y2VwdGlvbiBcXFwiXCIgKyBlcnIubWVzc2FnZSArIFwiXFxcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXFxcIlwiICsgcHJvcCArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gIH1cbn07XG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cblxuXG52YXIgc2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBzZXRTZWxlY3Rvcihjc3NSdWxlLCBzZWxlY3RvclRleHQpIHtcbiAgY3NzUnVsZS5zZWxlY3RvclRleHQgPSBzZWxlY3RvclRleHQ7IC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG5cbiAgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID09PSBzZWxlY3RvclRleHQ7XG59O1xuLyoqXG4gKiBHZXRzIHRoZSBgaGVhZGAgZWxlbWVudCB1cG9uIHRoZSBmaXJzdCBjYWxsIGFuZCBjYWNoZXMgaXQuXG4gKiBXZSBhc3N1bWUgaXQgY2FuJ3QgYmUgbnVsbC5cbiAqL1xuXG5cbnZhciBnZXRIZWFkID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG59KTtcbi8qKlxuICogRmluZCBhdHRhY2hlZCBzaGVldCB3aXRoIGFuIGluZGV4IGhpZ2hlciB0aGFuIHRoZSBwYXNzZWQgb25lLlxuICovXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXJTaGVldChyZWdpc3RyeSwgb3B0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kSGlnaGVzdFNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBzaGVldCA9IHJlZ2lzdHJ5W2ldO1xuXG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRDb21tZW50Tm9kZSh0ZXh0KSB7XG4gIHZhciBoZWFkID0gZ2V0SGVhZCgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG5cbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IHRleHQpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgbm9kZSBiZWZvcmUgd2hpY2ggd2UgY2FuIGluc2VydCB0aGUgc2hlZXQuXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBzaGVldHMucmVnaXN0cnk7XG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnRcbiAgICAgIH07XG4gICAgfSAvLyBPdGhlcndpc2UgaW5zZXJ0IGFmdGVyIHRoZSBsYXN0IGF0dGFjaGVkLlxuXG5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuXG5cbiAgdmFyIGluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjb21tZW50ID0gZmluZENvbW1lbnROb2RlKGluc2VydGlvblBvaW50KTtcblxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IGNvbW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogY29tbWVudC5uZXh0U2libGluZ1xuICAgICAgfTtcbiAgICB9IC8vIElmIHVzZXIgc3BlY2lmaWVzIGFuIGluc2VydGlvbiBwb2ludCBhbmQgaXQgY2FuJ3QgYmUgZm91bmQgaW4gdGhlIGRvY3VtZW50IC1cbiAgICAvLyBiYWQgc3BlY2lmaWNpdHkgaXNzdWVzIG1heSBhcHBlYXIuXG5cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIFwiW0pTU10gSW5zZXJ0aW9uIHBvaW50IFxcXCJcIiArIGluc2VydGlvblBvaW50ICsgXCJcXFwiIG5vdCBmb3VuZC5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gdGhlIERPTS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlKHN0eWxlLCBvcHRpb25zKSB7XG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gIHZhciBuZXh0Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAobmV4dE5vZGUgIT09IGZhbHNlICYmIG5leHROb2RlLnBhcmVudCkge1xuICAgIG5leHROb2RlLnBhcmVudC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHROb2RlLm5vZGUpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuXG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludC5ub2RlVHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICB2YXIgaW5zZXJ0aW9uUG9pbnRFbGVtZW50ID0gaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIGluc2VydGlvblBvaW50RWxlbWVudC5uZXh0U2libGluZyk7ZWxzZSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IGlzIG5vdCBpbiB0aGUgRE9NLicpIDogdm9pZCAwO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhlYWQoKS5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG4vKipcbiAqIFJlYWQganNzIG5vbmNlIHNldHRpbmcgZnJvbSB0aGUgcGFnZSBpZiB0aGUgdXNlciBoYXMgc2V0IGl0LlxuICovXG5cblxudmFyIGdldE5vbmNlID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtwcm9wZXJ0eT1cImNzcC1ub25jZVwiXScpO1xuICByZXR1cm4gbm9kZSA/IG5vZGUuZ2V0QXR0cmlidXRlKCdjb250ZW50JykgOiBudWxsO1xufSk7XG5cbnZhciBfaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUoY29udGFpbmVyLCBydWxlLCBpbmRleCkge1xuICB0cnkge1xuICAgIGlmICgnaW5zZXJ0UnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICBjb250YWluZXIuaW5zZXJ0UnVsZShydWxlLCBpbmRleCk7XG4gICAgfSAvLyBLZXlmcmFtZXMgcnVsZS5cbiAgICBlbHNlIGlmICgnYXBwZW5kUnVsZScgaW4gY29udGFpbmVyKSB7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRSdWxlKHJ1bGUpO1xuICAgICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFwiICsgZXJyLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluZXIuY3NzUnVsZXNbaW5kZXhdO1xufTtcblxudmFyIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4ID0gZnVuY3Rpb24gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgoY29udGFpbmVyLCBpbmRleCkge1xuICB2YXIgbWF4SW5kZXggPSBjb250YWluZXIuY3NzUnVsZXMubGVuZ3RoOyAvLyBJbiBjYXNlIHByZXZpb3VzIGluc2VydGlvbiBmYWlscywgcGFzc2VkIGluZGV4IG1pZ2h0IGJlIHdyb25nXG5cbiAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQgfHwgaW5kZXggPiBtYXhJbmRleCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHJldHVybiBtYXhJbmRleDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG5cbnZhciBjcmVhdGVTdHlsZSA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlKCkge1xuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOyAvLyBXaXRob3V0IGl0LCBJRSB3aWxsIGhhdmUgYSBicm9rZW4gc291cmNlIG9yZGVyIHNwZWNpZmljaXR5IGlmIHdlXG4gIC8vIGluc2VydCBydWxlcyBhZnRlciB3ZSBpbnNlcnQgdGhlIHN0eWxlIHRhZy5cbiAgLy8gSXQgc2VlbXMgdG8ga2ljay1vZmYgdGhlIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBhbGdvcml0aG0uXG5cbiAgZWwudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgcmV0dXJuIGVsO1xufTtcblxudmFyIERvbVJlbmRlcmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLy8gV2lsbCBiZSBlbXB0eSBpZiBsaW5rOiB0cnVlIG9wdGlvbiBpcyBub3Qgc2V0LCBiZWNhdXNlXG4gIC8vIGl0IGlzIG9ubHkgZm9yIHVzZSB0b2dldGhlciB3aXRoIGluc2VydFJ1bGUgQVBJLlxuICBmdW5jdGlvbiBEb21SZW5kZXJlcihzaGVldCkge1xuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gZmFsc2U7XG4gICAgdGhpcy5jc3NSdWxlcyA9IFtdO1xuICAgIC8vIFRoZXJlIGlzIG5vIHNoZWV0IHdoZW4gdGhlIHJlbmRlcmVyIGlzIHVzZWQgZnJvbSBhIHN0YW5kYWxvbmUgU3R5bGVSdWxlLlxuICAgIGlmIChzaGVldCkgc2hlZXRzLmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAwLCBjc3NSdWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVJ1bGUgPSBmdW5jdGlvbiByZXBsYWNlUnVsZShjc3NSdWxlLCBydWxlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICB0aGlzLmVsZW1lbnQuc2hlZXQuZGVsZXRlUnVsZShpbmRleCk7XG4gICAgdGhpcy5jc3NSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0aGlzLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYWxsIHJ1bGVzIGVsZW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5nZXRSdWxlcyA9IGZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc2hlZXQuY3NzUnVsZXM7XG4gIH07XG5cbiAgcmV0dXJuIERvbVJlbmRlcmVyO1xufSgpO1xuXG52YXIgaW5zdGFuY2VDb3VudGVyID0gMDtcblxudmFyIEpzcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEpzcyhvcHRpb25zKSB7XG4gICAgdGhpcy5pZCA9IGluc3RhbmNlQ291bnRlcisrO1xuICAgIHRoaXMudmVyc2lvbiA9IFwiMTAuOS4yXCI7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFBsdWdpbnNSZWdpc3RyeSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGlkOiB7XG4gICAgICAgIG1pbmlmeTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBjcmVhdGVHZW5lcmF0ZUlkOiBjcmVhdGVHZW5lcmF0ZUlkLFxuICAgICAgUmVuZGVyZXI6IGlzSW5Ccm93c2VyID8gRG9tUmVuZGVyZXIgOiBudWxsLFxuICAgICAgcGx1Z2luczogW11cbiAgICB9O1xuICAgIHRoaXMuZ2VuZXJhdGVJZCA9IGNyZWF0ZUdlbmVyYXRlSWQoe1xuICAgICAgbWluaWZ5OiBmYWxzZVxuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBsdWdpbnMudXNlKHBsdWdpbnNbaV0sIHtcbiAgICAgICAgcXVldWU6ICdpbnRlcm5hbCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0dXAob3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBhcmVzIHZhcmlvdXMgb3B0aW9ucywgYXBwbGllcyBwbHVnaW5zLlxuICAgKiBTaG91bGQgbm90IGJlIHVzZWQgdHdpY2Ugb24gdGhlIHNhbWUgaW5zdGFuY2UsIGJlY2F1c2UgdGhlcmUgaXMgbm8gcGx1Z2luc1xuICAgKiBkZWR1cGxpY2F0aW9uIGxvZ2ljLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBKc3MucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVJZCkge1xuICAgICAgdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgPSBvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQ7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5pZCA9IF9leHRlbmRzKHt9LCB0aGlzLm9wdGlvbnMuaWQsIG9wdGlvbnMuaWQpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQgfHwgb3B0aW9ucy5pZCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUlkID0gdGhpcy5vcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQodGhpcy5vcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pbnNlcnRpb25Qb2ludCAhPSBudWxsKSB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gICAgaWYgKCdSZW5kZXJlcicgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5vcHRpb25zLlJlbmRlcmVyID0gb3B0aW9ucy5SZW5kZXJlcjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG5cblxuICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHRoaXMudXNlLmFwcGx5KHRoaXMsIG9wdGlvbnMucGx1Z2lucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgICAgaW5kZXggPSBfb3B0aW9ucy5pbmRleDtcblxuICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICBpbmRleCA9IHNoZWV0cy5pbmRleCA9PT0gMCA/IDAgOiBzaGVldHMuaW5kZXggKyAxO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IG5ldyBTdHlsZVNoZWV0KHN0eWxlcywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIGdlbmVyYXRlSWQ6IG9wdGlvbnMuZ2VuZXJhdGVJZCB8fCB0aGlzLmdlbmVyYXRlSWQsXG4gICAgICBpbnNlcnRpb25Qb2ludDogdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50LFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH0pKTtcbiAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuICAgIHJldHVybiBzaGVldDtcbiAgfVxuICAvKipcbiAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVTdHlsZVNoZWV0ID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgIHNoZWV0LmRldGFjaCgpO1xuICAgIHNoZWV0cy5yZW1vdmUoc2hlZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBydWxlIHdpdGhvdXQgYSBTdHlsZSBTaGVldC5cbiAgICogW0RlcHJlY2F0ZWRdIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmVhdGVSdWxlID0gZnVuY3Rpb24gY3JlYXRlUnVsZSQxKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgaWYgKHN0eWxlID09PSB2b2lkIDApIHtcbiAgICAgIHN0eWxlID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIC8vIEVuYWJsZSBydWxlIHdpdGhvdXQgbmFtZSBmb3IgaW5saW5lIHN0eWxlcy5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVSdWxlKHVuZGVmaW5lZCwgbmFtZSwgc3R5bGUpO1xuICAgIH1cblxuICAgIHZhciBydWxlT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAganNzOiB0aGlzLFxuICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlclxuICAgIH0pO1xuXG4gICAgaWYgKCFydWxlT3B0aW9ucy5nZW5lcmF0ZUlkKSBydWxlT3B0aW9ucy5nZW5lcmF0ZUlkID0gdGhpcy5nZW5lcmF0ZUlkO1xuICAgIGlmICghcnVsZU9wdGlvbnMuY2xhc3NlcykgcnVsZU9wdGlvbnMuY2xhc3NlcyA9IHt9O1xuICAgIGlmICghcnVsZU9wdGlvbnMua2V5ZnJhbWVzKSBydWxlT3B0aW9ucy5rZXlmcmFtZXMgPSB7fTtcblxuICAgIHZhciBydWxlID0gY3JlYXRlUnVsZShuYW1lLCBzdHlsZSwgcnVsZU9wdGlvbnMpO1xuXG4gICAgaWYgKHJ1bGUpIHRoaXMucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgIHJldHVybiBydWxlO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBwbHVnaW4uIFBhc3NlZCBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2l0aCBhIHJ1bGUgaW5zdGFuY2UuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsdWdpbnMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBwbHVnaW5zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHBsdWdpbnMuZm9yRWFjaChmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgICBfdGhpcy5wbHVnaW5zLnVzZShwbHVnaW4pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBKc3M7XG59KCk7XG5cbnZhciBjcmVhdGVKc3MgPSBmdW5jdGlvbiBjcmVhdGVKc3Mob3B0aW9ucykge1xuICByZXR1cm4gbmV3IEpzcyhvcHRpb25zKTtcbn07XG5cbi8qKlxuICogU2hlZXRzTWFuYWdlciBpcyBsaWtlIGEgV2Vha01hcCB3aGljaCBpcyBkZXNpZ25lZCB0byBjb3VudCBTdHlsZVNoZWV0XG4gKiBpbnN0YW5jZXMgYW5kIGF0dGFjaC9kZXRhY2ggYXV0b21hdGljYWxseS5cbiAqIFVzZWQgaW4gcmVhY3QtanNzLlxuICovXG5cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4qIEV4cG9ydCBhIGNvbnN0YW50IGluZGljYXRpbmcgaWYgdGhpcyBicm93c2VyIGhhcyBDU1NUT00gc3VwcG9ydC5cbiogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOC8wMy9jc3NvbVxuKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIEEgYmV0dGVyIGFic3RyYWN0aW9uIG92ZXIgQ1NTLlxuICpcbiAqIEBjb3B5cmlnaHQgT2xlZyBJc29uZW4gKFNsb2JvZHNrb2kpIC8gSXNvbmVuIDIwMTQtcHJlc2VudFxuICogQHdlYnNpdGUgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xudmFyIGluZGV4ID0gY3JlYXRlSnNzKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuZXhwb3J0IHsgUnVsZUxpc3QsIFNoZWV0c01hbmFnZXIsIFNoZWV0c1JlZ2lzdHJ5LCBjcmVhdGVKc3MgYXMgY3JlYXRlLCBjcmVhdGVHZW5lcmF0ZUlkLCBjcmVhdGVSdWxlLCBnZXREeW5hbWljU3R5bGVzLCBoYXNDU1NUT01TdXBwb3J0LCBzaGVldHMsIHRvQ3NzVmFsdWUgfTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc05hdGl2ZU1hcCA9IHR5cGVvZiBNYXAgIT09IFwidW5kZWZpbmVkXCI7XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB3aGljaCBpcyBhIGNvbWJpbmF0aW9uIG9mIGFuIGFycmF5IGFuZCBhIHNldC4gQWRkaW5nIGEgbmV3XG4gKiBtZW1iZXIgaXMgTygxKSwgdGVzdGluZyBmb3IgbWVtYmVyc2hpcCBpcyBPKDEpLCBhbmQgZmluZGluZyB0aGUgaW5kZXggb2YgYW5cbiAqIGVsZW1lbnQgaXMgTygxKS4gUmVtb3ZpbmcgZWxlbWVudHMgZnJvbSB0aGUgc2V0IGlzIG5vdCBzdXBwb3J0ZWQuIE9ubHlcbiAqIHN0cmluZ3MgYXJlIHN1cHBvcnRlZCBmb3IgbWVtYmVyc2hpcC5cbiAqL1xuZnVuY3Rpb24gQXJyYXlTZXQoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NldCA9IGhhc05hdGl2ZU1hcCA/IG5ldyBNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogU3RhdGljIG1ldGhvZCBmb3IgY3JlYXRpbmcgQXJyYXlTZXQgaW5zdGFuY2VzIGZyb20gYW4gZXhpc3RpbmcgYXJyYXkuXG4gKi9cbkFycmF5U2V0LmZyb21BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X2Zyb21BcnJheShhQXJyYXksIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNldCA9IG5ldyBBcnJheVNldCgpO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYUFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc2V0LmFkZChhQXJyYXlbaV0sIGFBbGxvd0R1cGxpY2F0ZXMpO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuXG4vKipcbiAqIFJldHVybiBob3cgbWFueSB1bmlxdWUgaXRlbXMgYXJlIGluIHRoaXMgQXJyYXlTZXQuIElmIGR1cGxpY2F0ZXMgaGF2ZSBiZWVuXG4gKiBhZGRlZCwgdGhhbiB0aG9zZSBkbyBub3QgY291bnQgdG93YXJkcyB0aGUgc2l6ZS5cbiAqXG4gKiBAcmV0dXJucyBOdW1iZXJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiBBcnJheVNldF9zaXplKCkge1xuICByZXR1cm4gaGFzTmF0aXZlTWFwID8gdGhpcy5fc2V0LnNpemUgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLl9zZXQpLmxlbmd0aDtcbn07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzdHJpbmcgdG8gdGhpcyBzZXQuXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBBcnJheVNldF9hZGQoYVN0ciwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc1N0ciA9IGhhc05hdGl2ZU1hcCA/IGFTdHIgOiB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICB2YXIgaXNEdXBsaWNhdGUgPSBoYXNOYXRpdmVNYXAgPyB0aGlzLmhhcyhhU3RyKSA6IGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIHZhciBpZHggPSB0aGlzLl9hcnJheS5sZW5ndGg7XG4gIGlmICghaXNEdXBsaWNhdGUgfHwgYUFsbG93RHVwbGljYXRlcykge1xuICAgIHRoaXMuX2FycmF5LnB1c2goYVN0cik7XG4gIH1cbiAgaWYgKCFpc0R1cGxpY2F0ZSkge1xuICAgIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICAgIHRoaXMuX3NldC5zZXQoYVN0ciwgaWR4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2V0W3NTdHJdID0gaWR4O1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBJcyB0aGUgZ2l2ZW4gc3RyaW5nIGEgbWVtYmVyIG9mIHRoaXMgc2V0P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gQXJyYXlTZXRfaGFzKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHJldHVybiB0aGlzLl9zZXQuaGFzKGFTdHIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICByZXR1cm4gaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBpbmRleCBvZiB0aGUgZ2l2ZW4gc3RyaW5nIGluIHRoZSBhcnJheT9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBBcnJheVNldF9pbmRleE9mKGFTdHIpIHtcbiAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgIHZhciBpZHggPSB0aGlzLl9zZXQuZ2V0KGFTdHIpO1xuICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICByZXR1cm4gaWR4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRbc1N0cl07XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU3RyICsgJ1wiIGlzIG5vdCBpbiB0aGUgc2V0LicpO1xufTtcblxuLyoqXG4gKiBXaGF0IGlzIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleD9cbiAqXG4gKiBAcGFyYW0gTnVtYmVyIGFJZHhcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmF0ID0gZnVuY3Rpb24gQXJyYXlTZXRfYXQoYUlkeCkge1xuICBpZiAoYUlkeCA+PSAwICYmIGFJZHggPCB0aGlzLl9hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbYUlkeF07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGluZGV4ZWQgYnkgJyArIGFJZHgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhcnJheSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNldCAod2hpY2ggaGFzIHRoZSBwcm9wZXIgaW5kaWNlc1xuICogaW5kaWNhdGVkIGJ5IGluZGV4T2YpLiBOb3RlIHRoYXQgdGhpcyBpcyBhIGNvcHkgb2YgdGhlIGludGVybmFsIGFycmF5IHVzZWRcbiAqIGZvciBzdG9yaW5nIHRoZSBtZW1iZXJzIHNvIHRoYXQgbm8gb25lIGNhbiBtZXNzIHdpdGggaW50ZXJuYWwgc3RhdGUuXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfdG9BcnJheSgpIHtcbiAgcmV0dXJuIHRoaXMuX2FycmF5LnNsaWNlKCk7XG59O1xuXG5leHBvcnRzLkFycmF5U2V0ID0gQXJyYXlTZXQ7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICpcbiAqIEJhc2VkIG9uIHRoZSBCYXNlIDY0IFZMUSBpbXBsZW1lbnRhdGlvbiBpbiBDbG9zdXJlIENvbXBpbGVyOlxuICogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jbG9zdXJlLWNvbXBpbGVyL3NvdXJjZS9icm93c2UvdHJ1bmsvc3JjL2NvbS9nb29nbGUvZGVidWdnaW5nL3NvdXJjZW1hcC9CYXNlNjRWTFEuamF2YVxuICpcbiAqIENvcHlyaWdodCAyMDExIFRoZSBDbG9zdXJlIENvbXBpbGVyIEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbiAqIG1ldDpcbiAqXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodFxuICogICAgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuICogICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZVxuICogICAgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiAqICAgIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZFxuICogICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuICogICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuICogICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkXG4gKiAgICBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuICogXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4gKiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuICogT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4gKiBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbiAqIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuICogVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuICogKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCcuL2Jhc2U2NCcpO1xuXG4vLyBBIHNpbmdsZSBiYXNlIDY0IGRpZ2l0IGNhbiBjb250YWluIDYgYml0cyBvZiBkYXRhLiBGb3IgdGhlIGJhc2UgNjQgdmFyaWFibGVcbi8vIGxlbmd0aCBxdWFudGl0aWVzIHdlIHVzZSBpbiB0aGUgc291cmNlIG1hcCBzcGVjLCB0aGUgZmlyc3QgYml0IGlzIHRoZSBzaWduLFxuLy8gdGhlIG5leHQgZm91ciBiaXRzIGFyZSB0aGUgYWN0dWFsIHZhbHVlLCBhbmQgdGhlIDZ0aCBiaXQgaXMgdGhlXG4vLyBjb250aW51YXRpb24gYml0LiBUaGUgY29udGludWF0aW9uIGJpdCB0ZWxscyB1cyB3aGV0aGVyIHRoZXJlIGFyZSBtb3JlXG4vLyBkaWdpdHMgaW4gdGhpcyB2YWx1ZSBmb2xsb3dpbmcgdGhpcyBkaWdpdC5cbi8vXG4vLyAgIENvbnRpbnVhdGlvblxuLy8gICB8ICAgIFNpZ25cbi8vICAgfCAgICB8XG4vLyAgIFYgICAgVlxuLy8gICAxMDEwMTFcblxudmFyIFZMUV9CQVNFX1NISUZUID0gNTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQkFTRSA9IDEgPDwgVkxRX0JBU0VfU0hJRlQ7XG5cbi8vIGJpbmFyeTogMDExMTExXG52YXIgVkxRX0JBU0VfTUFTSyA9IFZMUV9CQVNFIC0gMTtcblxuLy8gYmluYXJ5OiAxMDAwMDBcbnZhciBWTFFfQ09OVElOVUFUSU9OX0JJVCA9IFZMUV9CQVNFO1xuXG4vKipcbiAqIENvbnZlcnRzIGZyb20gYSB0d28tY29tcGxlbWVudCB2YWx1ZSB0byBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDEgYmVjb21lcyAyICgxMCBiaW5hcnkpLCAtMSBiZWNvbWVzIDMgKDExIGJpbmFyeSlcbiAqICAgMiBiZWNvbWVzIDQgKDEwMCBiaW5hcnkpLCAtMiBiZWNvbWVzIDUgKDEwMSBiaW5hcnkpXG4gKi9cbmZ1bmN0aW9uIHRvVkxRU2lnbmVkKGFWYWx1ZSkge1xuICByZXR1cm4gYVZhbHVlIDwgMFxuICAgID8gKCgtYVZhbHVlKSA8PCAxKSArIDFcbiAgICA6IChhVmFsdWUgPDwgMSkgKyAwO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRvIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgZnJvbSBhIHZhbHVlIHdoZXJlIHRoZSBzaWduIGJpdCBpc1xuICogcGxhY2VkIGluIHRoZSBsZWFzdCBzaWduaWZpY2FudCBiaXQuICBGb3IgZXhhbXBsZSwgYXMgZGVjaW1hbHM6XG4gKiAgIDIgKDEwIGJpbmFyeSkgYmVjb21lcyAxLCAzICgxMSBiaW5hcnkpIGJlY29tZXMgLTFcbiAqICAgNCAoMTAwIGJpbmFyeSkgYmVjb21lcyAyLCA1ICgxMDEgYmluYXJ5KSBiZWNvbWVzIC0yXG4gKi9cbmZ1bmN0aW9uIGZyb21WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHZhciBpc05lZ2F0aXZlID0gKGFWYWx1ZSAmIDEpID09PSAxO1xuICB2YXIgc2hpZnRlZCA9IGFWYWx1ZSA+PiAxO1xuICByZXR1cm4gaXNOZWdhdGl2ZVxuICAgID8gLXNoaWZ0ZWRcbiAgICA6IHNoaWZ0ZWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYmFzZSA2NCBWTFEgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZW5jb2RlKGFWYWx1ZSkge1xuICB2YXIgZW5jb2RlZCA9IFwiXCI7XG4gIHZhciBkaWdpdDtcblxuICB2YXIgdmxxID0gdG9WTFFTaWduZWQoYVZhbHVlKTtcblxuICBkbyB7XG4gICAgZGlnaXQgPSB2bHEgJiBWTFFfQkFTRV9NQVNLO1xuICAgIHZscSA+Pj49IFZMUV9CQVNFX1NISUZUO1xuICAgIGlmICh2bHEgPiAwKSB7XG4gICAgICAvLyBUaGVyZSBhcmUgc3RpbGwgbW9yZSBkaWdpdHMgaW4gdGhpcyB2YWx1ZSwgc28gd2UgbXVzdCBtYWtlIHN1cmUgdGhlXG4gICAgICAvLyBjb250aW51YXRpb24gYml0IGlzIG1hcmtlZC5cbiAgICAgIGRpZ2l0IHw9IFZMUV9DT05USU5VQVRJT05fQklUO1xuICAgIH1cbiAgICBlbmNvZGVkICs9IGJhc2U2NC5lbmNvZGUoZGlnaXQpO1xuICB9IHdoaWxlICh2bHEgPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn07XG5cbi8qKlxuICogRGVjb2RlcyB0aGUgbmV4dCBiYXNlIDY0IFZMUSB2YWx1ZSBmcm9tIHRoZSBnaXZlbiBzdHJpbmcgYW5kIHJldHVybnMgdGhlXG4gKiB2YWx1ZSBhbmQgdGhlIHJlc3Qgb2YgdGhlIHN0cmluZyB2aWEgdGhlIG91dCBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2RlY29kZShhU3RyLCBhSW5kZXgsIGFPdXRQYXJhbSkge1xuICB2YXIgc3RyTGVuID0gYVN0ci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSAwO1xuICB2YXIgc2hpZnQgPSAwO1xuICB2YXIgY29udGludWF0aW9uLCBkaWdpdDtcblxuICBkbyB7XG4gICAgaWYgKGFJbmRleCA+PSBzdHJMZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIG1vcmUgZGlnaXRzIGluIGJhc2UgNjQgVkxRIHZhbHVlLlwiKTtcbiAgICB9XG5cbiAgICBkaWdpdCA9IGJhc2U2NC5kZWNvZGUoYVN0ci5jaGFyQ29kZUF0KGFJbmRleCsrKSk7XG4gICAgaWYgKGRpZ2l0ID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBiYXNlNjQgZGlnaXQ6IFwiICsgYVN0ci5jaGFyQXQoYUluZGV4IC0gMSkpO1xuICAgIH1cblxuICAgIGNvbnRpbnVhdGlvbiA9ICEhKGRpZ2l0ICYgVkxRX0NPTlRJTlVBVElPTl9CSVQpO1xuICAgIGRpZ2l0ICY9IFZMUV9CQVNFX01BU0s7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgKGRpZ2l0IDw8IHNoaWZ0KTtcbiAgICBzaGlmdCArPSBWTFFfQkFTRV9TSElGVDtcbiAgfSB3aGlsZSAoY29udGludWF0aW9uKTtcblxuICBhT3V0UGFyYW0udmFsdWUgPSBmcm9tVkxRU2lnbmVkKHJlc3VsdCk7XG4gIGFPdXRQYXJhbS5yZXN0ID0gYUluZGV4O1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGludFRvQ2hhck1hcCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJy5zcGxpdCgnJyk7XG5cbi8qKlxuICogRW5jb2RlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIG9mIDAgdG8gNjMgdG8gYSBzaW5nbGUgYmFzZSA2NCBkaWdpdC5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIGlmICgwIDw9IG51bWJlciAmJiBudW1iZXIgPCBpbnRUb0NoYXJNYXAubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGludFRvQ2hhck1hcFtudW1iZXJdO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiICsgbnVtYmVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlIGEgc2luZ2xlIGJhc2UgNjQgY2hhcmFjdGVyIGNvZGUgZGlnaXQgdG8gYW4gaW50ZWdlci4gUmV0dXJucyAtMSBvblxuICogZmFpbHVyZS5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoY2hhckNvZGUpIHtcbiAgdmFyIGJpZ0EgPSA2NTsgICAgIC8vICdBJ1xuICB2YXIgYmlnWiA9IDkwOyAgICAgLy8gJ1onXG5cbiAgdmFyIGxpdHRsZUEgPSA5NzsgIC8vICdhJ1xuICB2YXIgbGl0dGxlWiA9IDEyMjsgLy8gJ3onXG5cbiAgdmFyIHplcm8gPSA0ODsgICAgIC8vICcwJ1xuICB2YXIgbmluZSA9IDU3OyAgICAgLy8gJzknXG5cbiAgdmFyIHBsdXMgPSA0MzsgICAgIC8vICcrJ1xuICB2YXIgc2xhc2ggPSA0NzsgICAgLy8gJy8nXG5cbiAgdmFyIGxpdHRsZU9mZnNldCA9IDI2O1xuICB2YXIgbnVtYmVyT2Zmc2V0ID0gNTI7XG5cbiAgLy8gMCAtIDI1OiBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxuICBpZiAoYmlnQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBiaWdaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGJpZ0EpO1xuICB9XG5cbiAgLy8gMjYgLSA1MTogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcbiAgaWYgKGxpdHRsZUEgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbGl0dGxlWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBsaXR0bGVBICsgbGl0dGxlT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDUyIC0gNjE6IDAxMjM0NTY3ODlcbiAgaWYgKHplcm8gPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbmluZSkge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSB6ZXJvICsgbnVtYmVyT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDYyOiArXG4gIGlmIChjaGFyQ29kZSA9PSBwbHVzKSB7XG4gICAgcmV0dXJuIDYyO1xuICB9XG5cbiAgLy8gNjM6IC9cbiAgaWYgKGNoYXJDb2RlID09IHNsYXNoKSB7XG4gICAgcmV0dXJuIDYzO1xuICB9XG5cbiAgLy8gSW52YWxpZCBiYXNlNjQgZGlnaXQuXG4gIHJldHVybiAtMTtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbmV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbi8qKlxuICogUmVjdXJzaXZlIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2guXG4gKlxuICogQHBhcmFtIGFMb3cgSW5kaWNlcyBoZXJlIGFuZCBsb3dlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFIaWdoIEluZGljZXMgaGVyZSBhbmQgaGlnaGVyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCBiZWluZyBzZWFyY2hlZCBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBub24tZW1wdHkgYXJyYXkgYmVpbmcgc2VhcmNoZWQuXG4gKiBAcGFyYW0gYUNvbXBhcmUgRnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGVsZW1lbnRzIGFuZCByZXR1cm5zIC0xLCAwLCBvciAxLlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICovXG5mdW5jdGlvbiByZWN1cnNpdmVTZWFyY2goYUxvdywgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gdGVybWluYXRlcyB3aGVuIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gIC8vXG4gIC8vICAgMS4gV2UgZmluZCB0aGUgZXhhY3QgZWxlbWVudCB3ZSBhcmUgbG9va2luZyBmb3IuXG4gIC8vXG4gIC8vICAgMi4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBidXQgd2UgY2FuIHJldHVybiB0aGUgaW5kZXggb2ZcbiAgLy8gICAgICB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQuXG4gIC8vXG4gIC8vICAgMy4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBhbmQgdGhlcmUgaXMgbm8gbmV4dC1jbG9zZXN0XG4gIC8vICAgICAgZWxlbWVudCB0aGFuIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IsIHNvIHdlIHJldHVybiAtMS5cbiAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGFIaWdoIC0gYUxvdykgLyAyKSArIGFMb3c7XG4gIHZhciBjbXAgPSBhQ29tcGFyZShhTmVlZGxlLCBhSGF5c3RhY2tbbWlkXSwgdHJ1ZSk7XG4gIGlmIChjbXAgPT09IDApIHtcbiAgICAvLyBGb3VuZCB0aGUgZWxlbWVudCB3ZSBhcmUgbG9va2luZyBmb3IuXG4gICAgcmV0dXJuIG1pZDtcbiAgfVxuICBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgLy8gT3VyIG5lZWRsZSBpcyBncmVhdGVyIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgaWYgKGFIaWdoIC0gbWlkID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKG1pZCwgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZXhhY3QgbmVlZGxlIGVsZW1lbnQgd2FzIG5vdCBmb3VuZCBpbiB0aGlzIGhheXN0YWNrLiBEZXRlcm1pbmUgaWZcbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gYUhpZ2ggPCBhSGF5c3RhY2subGVuZ3RoID8gYUhpZ2ggOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gT3VyIG5lZWRsZSBpcyBsZXNzIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgaWYgKG1pZCAtIGFMb3cgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgbG93ZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2goYUxvdywgbWlkLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFMb3cgPCAwID8gLTEgOiBhTG93O1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaCB3aGljaCB3aWxsIGFsd2F5cyB0cnkgYW5kIHJldHVyblxuICogdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IGVsZW1lbnQgaWYgdGhlcmUgaXMgbm8gZXhhY3QgaGl0LiBUaGlzIGlzIGJlY2F1c2VcbiAqIG1hcHBpbmdzIGJldHdlZW4gb3JpZ2luYWwgYW5kIGdlbmVyYXRlZCBsaW5lL2NvbCBwYWlycyBhcmUgc2luZ2xlIHBvaW50cyxcbiAqIGFuZCB0aGVyZSBpcyBhbiBpbXBsaWNpdCByZWdpb24gYmV0d2VlbiBlYWNoIG9mIHRoZW0sIHNvIGEgbWlzcyBqdXN0IG1lYW5zXG4gKiB0aGF0IHlvdSBhcmVuJ3Qgb24gdGhlIHZlcnkgc3RhcnQgb2YgYSByZWdpb24uXG4gKlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgeW91IGFyZSBsb29raW5nIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIGFycmF5IHRoYXQgaXMgYmVpbmcgc2VhcmNoZWQuXG4gKiBAcGFyYW0gYUNvbXBhcmUgQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0aGUgbmVlZGxlIGFuZCBhbiBlbGVtZW50IGluIHRoZVxuICogICAgIGFycmF5IGFuZCByZXR1cm5zIC0xLCAwLCBvciAxIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBuZWVkbGUgaXMgbGVzc1xuICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQsIHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqL1xuZXhwb3J0cy5zZWFyY2ggPSBmdW5jdGlvbiBzZWFyY2goYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgaWYgKGFIYXlzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB2YXIgaW5kZXggPSByZWN1cnNpdmVTZWFyY2goLTEsIGFIYXlzdGFjay5sZW5ndGgsIGFOZWVkbGUsIGFIYXlzdGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb21wYXJlLCBhQmlhcyB8fCBleHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8vIFdlIGhhdmUgZm91bmQgZWl0aGVyIHRoZSBleGFjdCBlbGVtZW50LCBvciB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQgdGhhblxuICAvLyB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLiBIb3dldmVyLCB0aGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBzdWNoXG4gIC8vIGVsZW1lbnQuIE1ha2Ugc3VyZSB3ZSBhbHdheXMgcmV0dXJuIHRoZSBzbWFsbGVzdCBvZiB0aGVzZS5cbiAgd2hpbGUgKGluZGV4IC0gMSA+PSAwKSB7XG4gICAgaWYgKGFDb21wYXJlKGFIYXlzdGFja1tpbmRleF0sIGFIYXlzdGFja1tpbmRleCAtIDFdLCB0cnVlKSAhPT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC0taW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDE0IE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIG1hcHBpbmdCIGlzIGFmdGVyIG1hcHBpbmdBIHdpdGggcmVzcGVjdCB0byBnZW5lcmF0ZWRcbiAqIHBvc2l0aW9uLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKG1hcHBpbmdBLCBtYXBwaW5nQikge1xuICAvLyBPcHRpbWl6ZWQgZm9yIG1vc3QgY29tbW9uIGNhc2VcbiAgdmFyIGxpbmVBID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGxpbmVCID0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgdmFyIGNvbHVtbkEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW47XG4gIHZhciBjb2x1bW5CID0gbWFwcGluZ0IuZ2VuZXJhdGVkQ29sdW1uO1xuICByZXR1cm4gbGluZUIgPiBsaW5lQSB8fCBsaW5lQiA9PSBsaW5lQSAmJiBjb2x1bW5CID49IGNvbHVtbkEgfHxcbiAgICAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSA8PSAwO1xufVxuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgdG8gcHJvdmlkZSBhIHNvcnRlZCB2aWV3IG9mIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIGFcbiAqIHBlcmZvcm1hbmNlIGNvbnNjaW91cyBtYW5uZXIuIEl0IHRyYWRlcyBhIG5lZ2xpYmFibGUgb3ZlcmhlYWQgaW4gZ2VuZXJhbFxuICogY2FzZSBmb3IgYSBsYXJnZSBzcGVlZHVwIGluIGNhc2Ugb2YgbWFwcGluZ3MgYmVpbmcgYWRkZWQgaW4gb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIE1hcHBpbmdMaXN0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICAvLyBTZXJ2ZXMgYXMgaW5maW11bVxuICB0aGlzLl9sYXN0ID0ge2dlbmVyYXRlZExpbmU6IC0xLCBnZW5lcmF0ZWRDb2x1bW46IDB9O1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgdGhyb3VnaCBpbnRlcm5hbCBpdGVtcy4gVGhpcyBtZXRob2QgdGFrZXMgdGhlIHNhbWUgYXJndW1lbnRzIHRoYXRcbiAqIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgdGFrZXMuXG4gKlxuICogTk9URTogVGhlIG9yZGVyIG9mIHRoZSBtYXBwaW5ncyBpcyBOT1QgZ3VhcmFudGVlZC5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnVuc29ydGVkRm9yRWFjaCA9XG4gIGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2ZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZykge1xuICAgIHRoaXMuX2FycmF5LmZvckVhY2goYUNhbGxiYWNrLCBhVGhpc0FyZyk7XG4gIH07XG5cbi8qKlxuICogQWRkIHRoZSBnaXZlbiBzb3VyY2UgbWFwcGluZy5cbiAqXG4gKiBAcGFyYW0gT2JqZWN0IGFNYXBwaW5nXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF9hZGQoYU1hcHBpbmcpIHtcbiAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIodGhpcy5fbGFzdCwgYU1hcHBpbmcpKSB7XG4gICAgdGhpcy5fbGFzdCA9IGFNYXBwaW5nO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3NvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FycmF5LnB1c2goYU1hcHBpbmcpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGZsYXQsIHNvcnRlZCBhcnJheSBvZiBtYXBwaW5ncy4gVGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQgYnlcbiAqIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqXG4gKiBXQVJOSU5HOiBUaGlzIG1ldGhvZCByZXR1cm5zIGludGVybmFsIGRhdGEgd2l0aG91dCBjb3B5aW5nLCBmb3JcbiAqIHBlcmZvcm1hbmNlLiBUaGUgcmV0dXJuIHZhbHVlIG11c3QgTk9UIGJlIG11dGF0ZWQsIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICogYW4gaW1tdXRhYmxlIGJvcnJvdy4gSWYgeW91IHdhbnQgdG8gdGFrZSBvd25lcnNoaXAsIHlvdSBtdXN0IG1ha2UgeW91ciBvd25cbiAqIGNvcHkuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfdG9BcnJheSgpIHtcbiAgaWYgKCF0aGlzLl9zb3J0ZWQpIHtcbiAgICB0aGlzLl9hcnJheS5zb3J0KHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQpO1xuICAgIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2FycmF5O1xufTtcblxuZXhwb3J0cy5NYXBwaW5nTGlzdCA9IE1hcHBpbmdMaXN0O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vLyBJdCB0dXJucyBvdXQgdGhhdCBzb21lIChtb3N0PykgSmF2YVNjcmlwdCBlbmdpbmVzIGRvbid0IHNlbGYtaG9zdFxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YC4gVGhpcyBtYWtlcyBzZW5zZSBiZWNhdXNlIEMrKyB3aWxsIGxpa2VseSByZW1haW5cbi8vIGZhc3RlciB0aGFuIEpTIHdoZW4gZG9pbmcgcmF3IENQVS1pbnRlbnNpdmUgc29ydGluZy4gSG93ZXZlciwgd2hlbiB1c2luZyBhXG4vLyBjdXN0b20gY29tcGFyYXRvciBmdW5jdGlvbiwgY2FsbGluZyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRoZSBWTSdzIEMrKyBhbmRcbi8vIEpJVCdkIEpTIGlzIHJhdGhlciBzbG93ICphbmQqIGxvc2VzIEpJVCB0eXBlIGluZm9ybWF0aW9uLCByZXN1bHRpbmcgaW5cbi8vIHdvcnNlIGdlbmVyYXRlZCBjb2RlIGZvciB0aGUgY29tcGFyYXRvciBmdW5jdGlvbiB0aGFuIHdvdWxkIGJlIG9wdGltYWwuIEluXG4vLyBmYWN0LCB3aGVuIHNvcnRpbmcgd2l0aCBhIGNvbXBhcmF0b3IsIHRoZXNlIGNvc3RzIG91dHdlaWdoIHRoZSBiZW5lZml0cyBvZlxuLy8gc29ydGluZyBpbiBDKysuIEJ5IHVzaW5nIG91ciBvd24gSlMtaW1wbGVtZW50ZWQgUXVpY2sgU29ydCAoYmVsb3cpLCB3ZSBnZXRcbi8vIGEgfjM1MDBtcyBtZWFuIHNwZWVkLXVwIGluIGBiZW5jaC9iZW5jaC5odG1sYC5cblxuLyoqXG4gKiBTd2FwIHRoZSBlbGVtZW50cyBpbmRleGVkIGJ5IGB4YCBhbmQgYHlgIGluIHRoZSBhcnJheSBgYXJ5YC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBzZWNvbmQgaXRlbS5cbiAqL1xuZnVuY3Rpb24gc3dhcChhcnksIHgsIHkpIHtcbiAgdmFyIHRlbXAgPSBhcnlbeF07XG4gIGFyeVt4XSA9IGFyeVt5XTtcbiAgYXJ5W3ldID0gdGVtcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZSBgbG93IC4uIGhpZ2hgIGluY2x1c2l2ZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbG93XG4gKiAgICAgICAgVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG4gKiAgICAgICAgVGhlIHVwcGVyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQobG93ICsgKE1hdGgucmFuZG9tKCkgKiAoaGlnaCAtIGxvdykpKTtcbn1cblxuLyoqXG4gKiBUaGUgUXVpY2sgU29ydCBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gcFxuICogICAgICAgIFN0YXJ0IGluZGV4IG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHJcbiAqICAgICAgICBFbmQgaW5kZXggb2YgdGhlIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcikge1xuICAvLyBJZiBvdXIgbG93ZXIgYm91bmQgaXMgbGVzcyB0aGFuIG91ciB1cHBlciBib3VuZCwgd2UgKDEpIHBhcnRpdGlvbiB0aGVcbiAgLy8gYXJyYXkgaW50byB0d28gcGllY2VzIGFuZCAoMikgcmVjdXJzZSBvbiBlYWNoIGhhbGYuIElmIGl0IGlzIG5vdCwgdGhpcyBpc1xuICAvLyB0aGUgZW1wdHkgYXJyYXkgYW5kIG91ciBiYXNlIGNhc2UuXG5cbiAgaWYgKHAgPCByKSB7XG4gICAgLy8gKDEpIFBhcnRpdGlvbmluZy5cbiAgICAvL1xuICAgIC8vIFRoZSBwYXJ0aXRpb25pbmcgY2hvb3NlcyBhIHBpdm90IGJldHdlZW4gYHBgIGFuZCBgcmAgYW5kIG1vdmVzIGFsbFxuICAgIC8vIGVsZW1lbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QgdG8gdGhlIGJlZm9yZSBpdCwgYW5kXG4gICAgLy8gYWxsIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBncmVhdGVyIHRoYW4gaXQgYWZ0ZXIgaXQuIFRoZSBlZmZlY3QgaXMgdGhhdFxuICAgIC8vIG9uY2UgcGFydGl0aW9uIGlzIGRvbmUsIHRoZSBwaXZvdCBpcyBpbiB0aGUgZXhhY3QgcGxhY2UgaXQgd2lsbCBiZSB3aGVuXG4gICAgLy8gdGhlIGFycmF5IGlzIHB1dCBpbiBzb3J0ZWQgb3JkZXIsIGFuZCBpdCB3aWxsIG5vdCBuZWVkIHRvIGJlIG1vdmVkXG4gICAgLy8gYWdhaW4uIFRoaXMgcnVucyBpbiBPKG4pIHRpbWUuXG5cbiAgICAvLyBBbHdheXMgY2hvb3NlIGEgcmFuZG9tIHBpdm90IHNvIHRoYXQgYW4gaW5wdXQgYXJyYXkgd2hpY2ggaXMgcmV2ZXJzZVxuICAgIC8vIHNvcnRlZCBkb2VzIG5vdCBjYXVzZSBPKG5eMikgcnVubmluZyB0aW1lLlxuICAgIHZhciBwaXZvdEluZGV4ID0gcmFuZG9tSW50SW5SYW5nZShwLCByKTtcbiAgICB2YXIgaSA9IHAgLSAxO1xuXG4gICAgc3dhcChhcnksIHBpdm90SW5kZXgsIHIpO1xuICAgIHZhciBwaXZvdCA9IGFyeVtyXTtcblxuICAgIC8vIEltbWVkaWF0ZWx5IGFmdGVyIGBqYCBpcyBpbmNyZW1lbnRlZCBpbiB0aGlzIGxvb3AsIHRoZSBmb2xsb3dpbmcgaG9sZFxuICAgIC8vIHRydWU6XG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W3AgLi4gaV1gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QuXG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W2krMSAuLiBqLTFdYCBpcyBncmVhdGVyIHRoYW4gdGhlIHBpdm90LlxuICAgIGZvciAodmFyIGogPSBwOyBqIDwgcjsgaisrKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnlbal0sIHBpdm90KSA8PSAwKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgc3dhcChhcnksIGksIGopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3YXAoYXJ5LCBpICsgMSwgaik7XG4gICAgdmFyIHEgPSBpICsgMTtcblxuICAgIC8vICgyKSBSZWN1cnNlIG9uIGVhY2ggaGFsZi5cblxuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcSAtIDEpO1xuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcSArIDEsIHIpO1xuICB9XG59XG5cbi8qKlxuICogU29ydCB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2Ugd2l0aCB0aGUgZ2l2ZW4gY29tcGFyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqL1xuZXhwb3J0cy5xdWlja1NvcnQgPSBmdW5jdGlvbiAoYXJ5LCBjb21wYXJhdG9yKSB7XG4gIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgMCwgYXJ5Lmxlbmd0aCAtIDEpO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG5mdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTClcbiAgICA6IG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cblNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHJldHVybiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vLyBgX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kIGBfX29yaWdpbmFsTWFwcGluZ3NgIGFyZSBhcnJheXMgdGhhdCBob2xkIHRoZVxuLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbi8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBnZXR0ZXJzIHJlc3BlY3RpdmVseSwgYW5kIHdlIG9ubHkgcGFyc2UgdGhlIG1hcHBpbmdzXG4vLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbi8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuLy8gdGhlbSBpcyBleHBlbnNpdmUsIHNvIHdlIG9ubHkgd2FudCB0byBkbyBpdCBpZiB3ZSBtdXN0LlxuLy9cbi8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4vL1xuLy8gICAgIHtcbi8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBnZW5lcmF0ZWRDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbi8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4vLyAgICAgICAgICAgICBjb2RlLlxuLy8gICAgIH1cbi8vXG4vLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4vLyBgbnVsbGAuXG4vL1xuLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbi8vXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19nZW5lcmF0ZWRNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX29yaWdpbmFsTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgcmV0dXJuIGMgPT09IFwiO1wiIHx8IGMgPT09IFwiLFwiO1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIik7XG4gIH07XG5cblNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUiA9IDI7XG5cblNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICpcbiAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAqIEBwYXJhbSBhT3JkZXJcbiAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgIHZhciBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgdmFyIG1hcHBpbmdzO1xuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgIH07XG4gICAgfSwgdGhpcykuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gKiBjbG9zZXN0IGxpbmUgdGhhdCBoYXMgYW55IG1hcHBpbmdzLiBPdGhlcndpc2UsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gKlxuICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2FsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgIHZhciBsaW5lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyk7XG5cbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgIC8vIHNldHRpbmcgbmVlZGxlLm9yaWdpbmFsQ29sdW1uIHRvIDAsIHdlIHRodXMgZmluZCB0aGUgbGFzdCBtYXBwaW5nIGZvclxuICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSxcbiAgICAgIG9yaWdpbmFsTGluZTogbGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicsIDApXG4gICAgfTtcblxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgobmVlZGxlLnNvdXJjZSk7XG4gICAgaWYgKG5lZWRsZS5zb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhuZWVkbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChhQXJncy5jb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSBmb3VuZC4gU2luY2VcbiAgICAgICAgLy8gbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBmb3VuZC5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IG9yaWdpbmFsTGluZSkge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSB3ZXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIC8vIFNpbmNlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gbGluZSAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9PSBvcmlnaW5hbENvbHVtbikge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ3M7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICogcXVlcnkgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBmaWxlIHBvc2l0aW9ucyBieSBnaXZpbmcgaXQgYSBmaWxlXG4gKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gKiAgIC0gc291cmNlc0NvbnRlbnQ6IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gKlxuICogICAgIHtcbiAqICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAqICAgICAgIHNvdXJjZVJvb3QgOiBcIlwiLFxuICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICBtYXBwaW5nczogXCJBQSxBQjs7QUJDREU7XCJcbiAqICAgICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICovXG5mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICBzb3VyY2VSb290ID0gdXRpbC5ub3JtYWxpemUoc291cmNlUm9vdCk7XG4gIH1cblxuICBzb3VyY2VzID0gc291cmNlc1xuICAgIC5tYXAoU3RyaW5nKVxuICAgIC8vIFNvbWUgc291cmNlIG1hcHMgcHJvZHVjZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbGlrZSBcIi4vZm9vLmpzXCIgaW5zdGVhZCBvZlxuICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgIC8vIFNlZSBidWd6aWwubGEvMTA5MDc2OC5cbiAgICAubWFwKHV0aWwubm9ybWFsaXplKVxuICAgIC8vIEFsd2F5cyBlbnN1cmUgdGhhdCBhYnNvbHV0ZSBzb3VyY2VzIGFyZSBpbnRlcm5hbGx5IHN0b3JlZCByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSBzb3VyY2Ugcm9vdCwgaWYgdGhlIHNvdXJjZSByb290IGlzIGFic29sdXRlLiBOb3QgZG9pbmcgdGhpcyB3b3VsZFxuICAgIC8vIGJlIHBhcnRpY3VsYXJseSBwcm9ibGVtYXRpYyB3aGVuIHRoZSBzb3VyY2Ugcm9vdCBpcyBhIHByZWZpeCBvZiB0aGVcbiAgICAvLyBzb3VyY2UgKHZhbGlkLCBidXQgd2h5Pz8pLiBTZWUgZ2l0aHViIGlzc3VlICMxOTkgYW5kIGJ1Z3ppbC5sYS8xMTg4OTgyLlxuICAgIC5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZVJvb3QgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZVJvb3QpICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2UpXG4gICAgICAgID8gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2UpXG4gICAgICAgIDogc291cmNlO1xuICAgIH0pO1xuXG4gIC8vIFBhc3MgYHRydWVgIGJlbG93IHRvIGFsbG93IGR1cGxpY2F0ZSBuYW1lcyBhbmQgc291cmNlcy4gV2hpbGUgc291cmNlIG1hcHNcbiAgLy8gYXJlIGludGVuZGVkIHRvIGJlIGNvbXByZXNzZWQgYW5kIGRlZHVwbGljYXRlZCwgdGhlIFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAvLyAjNzIgYW5kIGJ1Z3ppbC5sYS84ODk0OTIuXG4gIHRoaXMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KG5hbWVzLm1hcChTdHJpbmcpLCB0cnVlKTtcbiAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMgPSB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICB9KTtcblxuICB0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuICB0aGlzLnNvdXJjZXNDb250ZW50ID0gc291cmNlc0NvbnRlbnQ7XG4gIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gIHRoaXMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG59XG5cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGluZGV4IG9mIGEgc291cmNlLiAgUmV0dXJucyAtMSBpZiBub3RcbiAqIGZvdW5kLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZFNvdXJjZUluZGV4ID0gZnVuY3Rpb24oYVNvdXJjZSkge1xuICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICBpZiAodGhpcy5fc291cmNlcy5oYXMocmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMuaW5kZXhPZihyZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICAvLyBNYXliZSBhU291cmNlIGlzIGFuIGFic29sdXRlIFVSTCBhcyByZXR1cm5lZCBieSB8c291cmNlc3wuICBJblxuICAvLyB0aGlzIGNhc2Ugd2UgY2FuJ3Qgc2ltcGx5IHVuZG8gdGhlIHRyYW5zZm9ybS5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAodGhpcy5fYWJzb2x1dGVTb3VyY2VzW2ldID09IGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAqIEBwYXJhbSBTdHJpbmcgYVNvdXJjZU1hcFVSTFxuICogICAgICAgIFRoZSBVUkwgYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgY2FuIGJlIGZvdW5kIChvcHRpb25hbClcbiAqIEByZXR1cm5zIEJhc2ljU291cmNlTWFwQ29uc3VtZXJcbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgIHZhciBzb3VyY2VzID0gc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcbiAgICBzbWMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gICAgc21jLl9hYnNvbHV0ZVNvdXJjZXMgPSBzbWMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzbWMuc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gICAgfSk7XG5cbiAgICAvLyBCZWNhdXNlIHdlIGFyZSBtb2RpZnlpbmcgdGhlIGVudHJpZXMgKGJ5IGNvbnZlcnRpbmcgc3RyaW5nIHNvdXJjZXMgYW5kXG4gICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgLy8gc3RyaWtlcyBhZ2FpbiEgU2VlIGdpdGh1YiBpc3N1ZSAjMTkxLlxuXG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIGRlc3RPcmlnaW5hbE1hcHBpbmdzID0gc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgdmFyIGRlc3RNYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChzcmNNYXBwaW5nLnNvdXJjZSkge1xuICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBzcmNNYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICB9XG5cbiAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4gc21jO1xuICB9O1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMuc2xpY2UoKTtcbiAgfVxufSk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nKCkge1xuICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICB0aGlzLmdlbmVyYXRlZENvbHVtbiA9IDA7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNhY2hlZFNlZ21lbnRzID0ge307XG4gICAgdmFyIHRlbXAgPSB7fTtcbiAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICc7Jykge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFwcGluZyA9IG5ldyBNYXBwaW5nKCk7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgIC8vIG1hbnkgc2VnbWVudHMgb2Z0ZW4gaGF2ZSB0aGUgc2FtZSBlbmNvZGluZy4gV2UgY2FuIGV4cGxvaXQgdGhpc1xuICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgIC8vIHNlZ21lbnQgYWdhaW4uXG4gICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYVN0ci5zbGljZShpbmRleCwgZW5kKTtcblxuICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICBpbmRleCArPSBzdHIubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgaW5kZXggPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlZFNlZ21lbnRzW3N0cl0gPSBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiArIHNlZ21lbnRbMF07XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIE9yaWdpbmFsIHNvdXJjZS5cbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gKyBzZWdtZW50WzNdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gZ2VuZXJhdGVkTWFwcGluZ3M7XG5cbiAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICB9O1xuXG4vKipcbiAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICogd2UgYXJlIHNlYXJjaGluZyBmb3IgaW4gdGhlIGdpdmVuIFwiaGF5c3RhY2tcIiBvZiBtYXBwaW5ncy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUNvbHVtbk5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICogaW5jbHVzaXZlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jb21wdXRlQ29sdW1uU3BhbnMoKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIC8vIE1hcHBpbmdzIGRvIG5vdCBjb250YWluIGEgZmllbGQgZm9yIHRoZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW50LiBXZVxuICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgLy8gZmlyc3QgbWFwcGluZyBlbmRzIHdoZXJlIHRoZSBzZWNvbmQgb25lIHN0YXJ0cykuXG4gICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IEluZmluaXR5O1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLFxuICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnc291cmNlJywgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ25hbWUnLCBudWxsKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuYXQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBuYW1lOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+PSB0aGlzLl9zb3VyY2VzLnNpemUoKSAmJlxuICAgICAgIXRoaXMuc291cmNlc0NvbnRlbnQuc29tZShmdW5jdGlvbiAoc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kU291cmNlSW5kZXgoYVNvdXJjZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciB1cmw7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsXG4gICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgLy8gbWFueSB1c2Vycy4gV2UgY2FuIGhlbHAgdGhlbSBvdXQgd2hlbiB0aGV5IGV4cGVjdCBmaWxlOi8vIFVSSXMgdG9cbiAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgdmFyIGZpbGVVcmlBYnNQYXRoID0gcmVsYXRpdmVTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKGZpbGVVcmlBYnNQYXRoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIHJlbGF0aXZlU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgLy8gZG9uJ3Qgd2FudCB0byB0aHJvdyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBzb3VyY2UgLSB3ZSBqdXN0IHdhbnQgdG9cbiAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHJlbGF0aXZlU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgIHNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG5leHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAqIHdlIGNhbiBxdWVyeSBmb3IgaW5mb3JtYXRpb24uIEl0IGRpZmZlcnMgZnJvbSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluXG4gKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAqIGlucHV0LlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAqIHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMgZm9yIGluZGV4ZWQgc291cmNlIG1hcHMsIHRoZXlcbiAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gKlxuICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gKiAgICAgICBiZWdpbnMgdG8gYXBwbHksIGRlZmluZWQgYXMgYW4gb2JqZWN0IHdpdGggYSBcImxpbmVcIiBhbmQgXCJjb2x1bW5cIlxuICogICAgICAgZmllbGQuXG4gKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAqICAgICAgIGJ1dCBkb2Vzbid0IGhhdmUgdG8gYmUuXG4gKlxuICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gKiBzcGVjaWZ5aW5nIGEgVVJMIHRvIHJldHJpZXZlIGEgc291cmNlIG1hcCBmcm9tLCBidXQgdGhhdCdzIGN1cnJlbnRseVxuICogdW5zdXBwb3J0ZWQuXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdLCBidXRcbiAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gKlxuICogIHtcbiAqICAgIHZlcnNpb24gOiAzLFxuICogICAgZmlsZTogXCJhcHAuanNcIixcbiAqICAgIHNlY3Rpb25zOiBbe1xuICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAqICAgICAgbWFwOiB7XG4gKiAgICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAqICAgICAgfVxuICogICAgfV0sXG4gKiAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdCNoZWFkaW5nPWguNTM1ZXMzeGVwcmd0XG4gKi9cbmZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgIGxpbmU6IC0xLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB0aGlzLl9zZWN0aW9ucyA9IHNlY3Rpb25zLm1hcChmdW5jdGlvbiAocykge1xuICAgIGlmIChzLnVybCkge1xuICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMTZcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9mZnNldCA9IHV0aWwuZ2V0QXJnKHMsICdvZmZzZXQnKTtcbiAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgfVxuICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2VuZXJhdGVkT2Zmc2V0OiB7XG4gICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBvZmZzZXRMaW5lICsgMSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICB9LFxuICAgICAgY29uc3VtZXI6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCAnbWFwJyksIGFTb3VyY2VNYXBVUkwpXG4gICAgfVxuICB9KTtcbn1cblxuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfVxufSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBzZWN0aW9uSW5kZXggPSBiaW5hcnlTZWFyY2guc2VhcmNoKG5lZWRsZSwgdGhpcy5fc2VjdGlvbnMsXG4gICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICB9KTtcbiAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLiBcbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICAvLyBPbmx5IGNvbnNpZGVyIHRoaXMgc2VjdGlvbiBpZiB0aGUgcmVxdWVzdGVkIHNvdXJjZSBpcyBpbiB0aGUgbGlzdCBvZlxuICAgICAgLy8gc291cmNlcyBvZiB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoc2VjdGlvbi5jb25zdW1lci5fZmluZFNvdXJjZUluZGV4KHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkUG9zaXRpb24uY29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgOiAwKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgIHZhciBzZWN0aW9uTWFwcGluZ3MgPSBzZWN0aW9uLmNvbnN1bWVyLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWN0aW9uLmNvbnN1bWVyLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRqdXN0ZWRNYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQodGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICB9O1xuXG5leHBvcnRzLkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciA9IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgTWFwcGluZ0xpc3QgPSByZXF1aXJlKCcuL21hcHBpbmctbGlzdCcpLk1hcHBpbmdMaXN0O1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IgcmVwcmVzZW50cyBhIHNvdXJjZSBtYXAgd2hpY2ggaXNcbiAqIGJlaW5nIGJ1aWx0IGluY3JlbWVudGFsbHkuIFlvdSBtYXkgcGFzcyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gKiBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBmaWxlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKiAgIC0gc291cmNlUm9vdDogQSByb290IGZvciBhbGwgcmVsYXRpdmUgVVJMcyBpbiB0aGlzIHNvdXJjZSBtYXAuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncykge1xuICBpZiAoIWFBcmdzKSB7XG4gICAgYUFyZ3MgPSB7fTtcbiAgfVxuICB0aGlzLl9maWxlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdmaWxlJywgbnVsbCk7XG4gIHRoaXMuX3NvdXJjZVJvb3QgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdGhpcy5fc2tpcFZhbGlkYXRpb24gPSB1dGlsLmdldEFyZyhhQXJncywgJ3NraXBWYWxpZGF0aW9uJywgZmFsc2UpO1xuICB0aGlzLl9zb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX25hbWVzID0gbmV3IEFycmF5U2V0KCk7XG4gIHRoaXMuX21hcHBpbmdzID0gbmV3IE1hcHBpbmdMaXN0KCk7XG4gIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG59XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgU291cmNlTWFwR2VuZXJhdG9yIGJhc2VkIG9uIGEgU291cmNlTWFwQ29uc3VtZXJcbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgdmFyIHNvdXJjZVJvb3QgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlUm9vdDtcbiAgICB2YXIgZ2VuZXJhdG9yID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcih7XG4gICAgICBmaWxlOiBhU291cmNlTWFwQ29uc3VtZXIuZmlsZSxcbiAgICAgIHNvdXJjZVJvb3Q6IHNvdXJjZVJvb3RcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBuZXdNYXBwaW5nID0ge1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG5ld01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld01hcHBpbmcub3JpZ2luYWwgPSB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3TWFwcGluZy5uYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGdlbmVyYXRvci5hZGRNYXBwaW5nKG5ld01hcHBpbmcpO1xuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBzb3VyY2VSZWxhdGl2ZSA9IHNvdXJjZUZpbGU7XG4gICAgICBpZiAoc291cmNlUm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VSZWxhdGl2ZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZ2VuZXJhdG9yLl9zb3VyY2VzLmhhcyhzb3VyY2VSZWxhdGl2ZSkpIHtcbiAgICAgICAgZ2VuZXJhdG9yLl9zb3VyY2VzLmFkZChzb3VyY2VSZWxhdGl2ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGdlbmVyYXRvci5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH07XG5cbi8qKlxuICogQWRkIGEgc2luZ2xlIG1hcHBpbmcgZnJvbSBvcmlnaW5hbCBzb3VyY2UgbGluZSBhbmQgY29sdW1uIHRvIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBmb3IgdGhpcyBzb3VyY2UgbWFwIGJlaW5nIGNyZWF0ZWQuIFRoZSBtYXBwaW5nXG4gKiBvYmplY3Qgc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBnZW5lcmF0ZWQ6IEFuIG9iamVjdCB3aXRoIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBvcmlnaW5hbDogQW4gb2JqZWN0IHdpdGggdGhlIG9yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUgKHJlbGF0aXZlIHRvIHRoZSBzb3VyY2VSb290KS5cbiAqICAgLSBuYW1lOiBBbiBvcHRpb25hbCBvcmlnaW5hbCB0b2tlbiBuYW1lIGZvciB0aGlzIG1hcHBpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYWRkTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hZGRNYXBwaW5nKGFBcmdzKSB7XG4gICAgdmFyIGdlbmVyYXRlZCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZ2VuZXJhdGVkJyk7XG4gICAgdmFyIG9yaWdpbmFsID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdvcmlnaW5hbCcsIG51bGwpO1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScsIG51bGwpO1xuICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICduYW1lJywgbnVsbCk7XG5cbiAgICBpZiAoIXRoaXMuX3NraXBWYWxpZGF0aW9uKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZU1hcHBpbmcoZ2VuZXJhdGVkLCBvcmlnaW5hbCwgc291cmNlLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IFN0cmluZyhzb3VyY2UpO1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgICAgbmFtZSA9IFN0cmluZyhuYW1lKTtcbiAgICAgIGlmICghdGhpcy5fbmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIHRoaXMuX25hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9tYXBwaW5ncy5hZGQoe1xuICAgICAgZ2VuZXJhdGVkTGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IGdlbmVyYXRlZC5jb2x1bW4sXG4gICAgICBvcmlnaW5hbExpbmU6IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwubGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmNvbHVtbixcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHZhciBzb3VyY2UgPSBhU291cmNlRmlsZTtcbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuX3NvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgfVxuXG4gICAgaWYgKGFTb3VyY2VDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIC8vIEFkZCB0aGUgc291cmNlIGNvbnRlbnQgdG8gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gQ3JlYXRlIGEgbmV3IF9zb3VyY2VzQ29udGVudHMgbWFwIGlmIHRoZSBwcm9wZXJ0eSBpcyBudWxsLlxuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgc291cmNlIGZpbGUgZnJvbSB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBJZiB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAgaXMgZW1wdHksIHNldCB0aGUgcHJvcGVydHkgdG8gbnVsbC5cbiAgICAgIGRlbGV0ZSB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXTtcbiAgICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2VzQ29udGVudHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBtYXBwaW5ncyBvZiBhIHN1Yi1zb3VyY2UtbWFwIGZvciBhIHNwZWNpZmljIHNvdXJjZSBmaWxlIHRvIHRoZVxuICogc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQuIEVhY2ggbWFwcGluZyB0byB0aGUgc3VwcGxpZWQgc291cmNlIGZpbGUgaXNcbiAqIHJld3JpdHRlbiB1c2luZyB0aGUgc3VwcGxpZWQgc291cmNlIG1hcC4gTm90ZTogVGhlIHJlc29sdXRpb24gZm9yIHRoZVxuICogcmVzdWx0aW5nIG1hcHBpbmdzIGlzIHRoZSBtaW5pbWl1bSBvZiB0aGlzIG1hcCBhbmQgdGhlIHN1cHBsaWVkIG1hcC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQuXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgT3B0aW9uYWwuIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGUuXG4gKiAgICAgICAgSWYgb21pdHRlZCwgU291cmNlTWFwQ29uc3VtZXIncyBmaWxlIHByb3BlcnR5IHdpbGwgYmUgdXNlZC5cbiAqIEBwYXJhbSBhU291cmNlTWFwUGF0aCBPcHRpb25hbC4gVGhlIGRpcm5hbWUgb2YgdGhlIHBhdGggdG8gdGhlIHNvdXJjZSBtYXBcbiAqICAgICAgICB0byBiZSBhcHBsaWVkLiBJZiByZWxhdGl2ZSwgaXQgaXMgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyLlxuICogICAgICAgIFRoaXMgcGFyYW1ldGVyIGlzIG5lZWRlZCB3aGVuIHRoZSB0d28gc291cmNlIG1hcHMgYXJlbid0IGluIHRoZSBzYW1lXG4gKiAgICAgICAgZGlyZWN0b3J5LCBhbmQgdGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZCBjb250YWlucyByZWxhdGl2ZSBzb3VyY2VcbiAqICAgICAgICBwYXRocy4gSWYgc28sIHRob3NlIHJlbGF0aXZlIHNvdXJjZSBwYXRocyBuZWVkIHRvIGJlIHJld3JpdHRlblxuICogICAgICAgIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3IuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYXBwbHlTb3VyY2VNYXAoYVNvdXJjZU1hcENvbnN1bWVyLCBhU291cmNlRmlsZSwgYVNvdXJjZU1hcFBhdGgpIHtcbiAgICB2YXIgc291cmNlRmlsZSA9IGFTb3VyY2VGaWxlO1xuICAgIC8vIElmIGFTb3VyY2VGaWxlIGlzIG9taXR0ZWQsIHdlIHdpbGwgdXNlIHRoZSBmaWxlIHByb3BlcnR5IG9mIHRoZSBTb3VyY2VNYXBcbiAgICBpZiAoYVNvdXJjZUZpbGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGFTb3VyY2VNYXBDb25zdW1lci5maWxlID09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdTb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwIHJlcXVpcmVzIGVpdGhlciBhbiBleHBsaWNpdCBzb3VyY2UgZmlsZSwgJyArXG4gICAgICAgICAgJ29yIHRoZSBzb3VyY2UgbWFwXFwncyBcImZpbGVcIiBwcm9wZXJ0eS4gQm90aCB3ZXJlIG9taXR0ZWQuJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgc291cmNlRmlsZSA9IGFTb3VyY2VNYXBDb25zdW1lci5maWxlO1xuICAgIH1cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgLy8gTWFrZSBcInNvdXJjZUZpbGVcIiByZWxhdGl2ZSBpZiBhbiBhYnNvbHV0ZSBVcmwgaXMgcGFzc2VkLlxuICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgIH1cbiAgICAvLyBBcHBseWluZyB0aGUgU291cmNlTWFwIGNhbiBhZGQgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIHRoZSBzb3VyY2VzIGFuZFxuICAgIC8vIHRoZSBuYW1lcyBhcnJheS5cbiAgICB2YXIgbmV3U291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICAgIHZhciBuZXdOYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gICAgLy8gRmluZCBtYXBwaW5ncyBmb3IgdGhlIFwic291cmNlRmlsZVwiXG4gICAgdGhpcy5fbWFwcGluZ3MudW5zb3J0ZWRGb3JFYWNoKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IHNvdXJjZUZpbGUgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgIT0gbnVsbCkge1xuICAgICAgICAvLyBDaGVjayBpZiBpdCBjYW4gYmUgbWFwcGVkIGJ5IHRoZSBzb3VyY2UgbWFwLCB0aGVuIHVwZGF0ZSB0aGUgbWFwcGluZy5cbiAgICAgICAgdmFyIG9yaWdpbmFsID0gYVNvdXJjZU1hcENvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gQ29weSBtYXBwaW5nXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICAgICAgaWYgKG9yaWdpbmFsLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5uYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZSA9IG1hcHBpbmcuc291cmNlO1xuICAgICAgaWYgKHNvdXJjZSAhPSBudWxsICYmICFuZXdTb3VyY2VzLmhhcyhzb3VyY2UpKSB7XG4gICAgICAgIG5ld1NvdXJjZXMuYWRkKHNvdXJjZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gbWFwcGluZy5uYW1lO1xuICAgICAgaWYgKG5hbWUgIT0gbnVsbCAmJiAhbmV3TmFtZXMuaGFzKG5hbWUpKSB7XG4gICAgICAgIG5ld05hbWVzLmFkZChuYW1lKTtcbiAgICAgIH1cblxuICAgIH0sIHRoaXMpO1xuICAgIHRoaXMuX3NvdXJjZXMgPSBuZXdTb3VyY2VzO1xuICAgIHRoaXMuX25hbWVzID0gbmV3TmFtZXM7XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50cyBvZiBhcHBsaWVkIG1hcC5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogQSBtYXBwaW5nIGNhbiBoYXZlIG9uZSBvZiB0aGUgdGhyZWUgbGV2ZWxzIG9mIGRhdGE6XG4gKlxuICogICAxLiBKdXN0IHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKiAgIDIuIFRoZSBHZW5lcmF0ZWQgcG9zaXRpb24sIG9yaWdpbmFsIHBvc2l0aW9uLCBhbmQgb3JpZ2luYWwgc291cmNlLlxuICogICAzLiBHZW5lcmF0ZWQgYW5kIG9yaWdpbmFsIHBvc2l0aW9uLCBvcmlnaW5hbCBzb3VyY2UsIGFzIHdlbGwgYXMgYSBuYW1lXG4gKiAgICAgIHRva2VuLlxuICpcbiAqIFRvIG1haW50YWluIGNvbnNpc3RlbmN5LCB3ZSB2YWxpZGF0ZSB0aGF0IGFueSBuZXcgbWFwcGluZyBiZWluZyBhZGRlZCBmYWxsc1xuICogaW4gdG8gb25lIG9mIHRoZXNlIGNhdGVnb3JpZXMuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3ZhbGlkYXRlTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl92YWxpZGF0ZU1hcHBpbmcoYUdlbmVyYXRlZCwgYU9yaWdpbmFsLCBhU291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFOYW1lKSB7XG4gICAgLy8gV2hlbiBhT3JpZ2luYWwgaXMgdHJ1dGh5IGJ1dCBoYXMgZW1wdHkgdmFsdWVzIGZvciAubGluZSBhbmQgLmNvbHVtbixcbiAgICAvLyBpdCBpcyBtb3N0IGxpa2VseSBhIHByb2dyYW1tZXIgZXJyb3IuIEluIHRoaXMgY2FzZSB3ZSB0aHJvdyBhIHZlcnlcbiAgICAvLyBzcGVjaWZpYyBlcnJvciBtZXNzYWdlIHRvIHRyeSB0byBndWlkZSB0aGVtIHRoZSByaWdodCB3YXkuXG4gICAgLy8gRm9yIGV4YW1wbGU6IGh0dHBzOi8vZ2l0aHViLmNvbS9Qb2x5bWVyL3BvbHltZXItYnVuZGxlci9wdWxsLzUxOVxuICAgIGlmIChhT3JpZ2luYWwgJiYgdHlwZW9mIGFPcmlnaW5hbC5saW5lICE9PSAnbnVtYmVyJyAmJiB0eXBlb2YgYU9yaWdpbmFsLmNvbHVtbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ29yaWdpbmFsLmxpbmUgYW5kIG9yaWdpbmFsLmNvbHVtbiBhcmUgbm90IG51bWJlcnMgLS0geW91IHByb2JhYmx5IG1lYW50IHRvIG9taXQgJyArXG4gICAgICAgICAgICAndGhlIG9yaWdpbmFsIG1hcHBpbmcgZW50aXJlbHkgYW5kIG9ubHkgbWFwIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24uIElmIHNvLCBwYXNzICcgK1xuICAgICAgICAgICAgJ251bGwgZm9yIHRoZSBvcmlnaW5hbCBtYXBwaW5nIGluc3RlYWQgb2YgYW4gb2JqZWN0IHdpdGggZW1wdHkgb3IgbnVsbCB2YWx1ZXMuJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICYmICFhT3JpZ2luYWwgJiYgIWFTb3VyY2UgJiYgIWFOYW1lKSB7XG4gICAgICAvLyBDYXNlIDEuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2UgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbCAmJiAnbGluZScgaW4gYU9yaWdpbmFsICYmICdjb2x1bW4nIGluIGFPcmlnaW5hbFxuICAgICAgICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFPcmlnaW5hbC5saW5lID4gMCAmJiBhT3JpZ2luYWwuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhU291cmNlKSB7XG4gICAgICAvLyBDYXNlcyAyIGFuZCAzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBtYXBwaW5nOiAnICsgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBnZW5lcmF0ZWQ6IGFHZW5lcmF0ZWQsXG4gICAgICAgIHNvdXJjZTogYVNvdXJjZSxcbiAgICAgICAgb3JpZ2luYWw6IGFPcmlnaW5hbCxcbiAgICAgICAgbmFtZTogYU5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogU2VyaWFsaXplIHRoZSBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiB0byB0aGUgc3RyZWFtIG9mIGJhc2UgNjQgVkxRc1xuICogc3BlY2lmaWVkIGJ5IHRoZSBzb3VyY2UgbWFwIGZvcm1hdC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fc2VyaWFsaXplTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2VyaWFsaXplTWFwcGluZ3MoKSB7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gMDtcbiAgICB2YXIgcHJldmlvdXNOYW1lID0gMDtcbiAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgbmV4dDtcbiAgICB2YXIgbWFwcGluZztcbiAgICB2YXIgbmFtZUlkeDtcbiAgICB2YXIgc291cmNlSWR4O1xuXG4gICAgdmFyIG1hcHBpbmdzID0gdGhpcy5fbWFwcGluZ3MudG9BcnJheSgpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBtYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbWFwcGluZyA9IG1hcHBpbmdzW2ldO1xuICAgICAgbmV4dCA9ICcnXG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgIHdoaWxlIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgIT09IHByZXZpb3VzR2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG5leHQgKz0gJzsnO1xuICAgICAgICAgIHByZXZpb3VzR2VuZXJhdGVkTGluZSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgaWYgKCF1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmcsIG1hcHBpbmdzW2kgLSAxXSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0ICs9ICcsJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlSWR4ID0gdGhpcy5fc291cmNlcy5pbmRleE9mKG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKHNvdXJjZUlkeCAtIHByZXZpb3VzU291cmNlKTtcbiAgICAgICAgcHJldmlvdXNTb3VyY2UgPSBzb3VyY2VJZHg7XG5cbiAgICAgICAgLy8gbGluZXMgYXJlIHN0b3JlZCAwLWJhc2VkIGluIFNvdXJjZU1hcCBzcGVjIHZlcnNpb24gM1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbExpbmUgLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbExpbmUpO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMTtcblxuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4pO1xuICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuYW1lSWR4ID0gdGhpcy5fbmFtZXMuaW5kZXhPZihtYXBwaW5nLm5hbWUpO1xuICAgICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShuYW1lSWR4IC0gcHJldmlvdXNOYW1lKTtcbiAgICAgICAgICBwcmV2aW91c05hbWUgPSBuYW1lSWR4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCArPSBuZXh0O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZ2VuZXJhdGVTb3VyY2VzQ29udGVudChhU291cmNlcywgYVNvdXJjZVJvb3QpIHtcbiAgICByZXR1cm4gYVNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGFTb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZShhU291cmNlUm9vdCwgc291cmNlKTtcbiAgICAgIH1cbiAgICAgIHZhciBrZXkgPSB1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSk7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX3NvdXJjZXNDb250ZW50cywga2V5KVxuICAgICAgICA/IHRoaXMuX3NvdXJjZXNDb250ZW50c1trZXldXG4gICAgICAgIDogbnVsbDtcbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBFeHRlcm5hbGl6ZSB0aGUgc291cmNlIG1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b0pTT04gPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9KU09OKCkge1xuICAgIHZhciBtYXAgPSB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgc291cmNlczogdGhpcy5fc291cmNlcy50b0FycmF5KCksXG4gICAgICBuYW1lczogdGhpcy5fbmFtZXMudG9BcnJheSgpLFxuICAgICAgbWFwcGluZ3M6IHRoaXMuX3NlcmlhbGl6ZU1hcHBpbmdzKClcbiAgICB9O1xuICAgIGlmICh0aGlzLl9maWxlICE9IG51bGwpIHtcbiAgICAgIG1hcC5maWxlID0gdGhpcy5fZmlsZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgbWFwLnNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICBtYXAuc291cmNlc0NvbnRlbnQgPSB0aGlzLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KG1hcC5zb3VyY2VzLCBtYXAuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcDtcbiAgfTtcblxuLyoqXG4gKiBSZW5kZXIgdGhlIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkIHRvIGEgc3RyaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvU3RyaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvU3RyaW5nKCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcbiAgfTtcblxuZXhwb3J0cy5Tb3VyY2VNYXBHZW5lcmF0b3IgPSBTb3VyY2VNYXBHZW5lcmF0b3I7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBTb3VyY2VNYXBHZW5lcmF0b3IgPSByZXF1aXJlKCcuL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLy8gTWF0Y2hlcyBhIFdpbmRvd3Mtc3R5bGUgYFxcclxcbmAgbmV3bGluZSBvciBhIGBcXG5gIG5ld2xpbmUgdXNlZCBieSBhbGwgb3RoZXJcbi8vIG9wZXJhdGluZyBzeXN0ZW1zIHRoZXNlIGRheXMgKGNhcHR1cmluZyB0aGUgcmVzdWx0KS5cbnZhciBSRUdFWF9ORVdMSU5FID0gLyhcXHI/XFxuKS87XG5cbi8vIE5ld2xpbmUgY2hhcmFjdGVyIGNvZGUgZm9yIGNoYXJDb2RlQXQoKSBjb21wYXJpc29uc1xudmFyIE5FV0xJTkVfQ09ERSA9IDEwO1xuXG4vLyBQcml2YXRlIHN5bWJvbCBmb3IgaWRlbnRpZnlpbmcgYFNvdXJjZU5vZGVgcyB3aGVuIG11bHRpcGxlIHZlcnNpb25zIG9mXG4vLyB0aGUgc291cmNlLW1hcCBsaWJyYXJ5IGFyZSBsb2FkZWQuIFRoaXMgTVVTVCBOT1QgQ0hBTkdFIGFjcm9zc1xuLy8gdmVyc2lvbnMhXG52YXIgaXNTb3VyY2VOb2RlID0gXCIkJCRpc1NvdXJjZU5vZGUkJCRcIjtcblxuLyoqXG4gKiBTb3VyY2VOb2RlcyBwcm92aWRlIGEgd2F5IHRvIGFic3RyYWN0IG92ZXIgaW50ZXJwb2xhdGluZy9jb25jYXRlbmF0aW5nXG4gKiBzbmlwcGV0cyBvZiBnZW5lcmF0ZWQgSmF2YVNjcmlwdCBzb3VyY2UgY29kZSB3aGlsZSBtYWludGFpbmluZyB0aGUgbGluZSBhbmRcbiAqIGNvbHVtbiBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwYXJhbSBhTGluZSBUaGUgb3JpZ2luYWwgbGluZSBudW1iZXIuXG4gKiBAcGFyYW0gYUNvbHVtbiBUaGUgb3JpZ2luYWwgY29sdW1uIG51bWJlci5cbiAqIEBwYXJhbSBhU291cmNlIFRoZSBvcmlnaW5hbCBzb3VyY2UncyBmaWxlbmFtZS5cbiAqIEBwYXJhbSBhQ2h1bmtzIE9wdGlvbmFsLiBBbiBhcnJheSBvZiBzdHJpbmdzIHdoaWNoIGFyZSBzbmlwcGV0cyBvZlxuICogICAgICAgIGdlbmVyYXRlZCBKUywgb3Igb3RoZXIgU291cmNlTm9kZXMuXG4gKiBAcGFyYW0gYU5hbWUgVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIuXG4gKi9cbmZ1bmN0aW9uIFNvdXJjZU5vZGUoYUxpbmUsIGFDb2x1bW4sIGFTb3VyY2UsIGFDaHVua3MsIGFOYW1lKSB7XG4gIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgdGhpcy5zb3VyY2VDb250ZW50cyA9IHt9O1xuICB0aGlzLmxpbmUgPSBhTGluZSA9PSBudWxsID8gbnVsbCA6IGFMaW5lO1xuICB0aGlzLmNvbHVtbiA9IGFDb2x1bW4gPT0gbnVsbCA/IG51bGwgOiBhQ29sdW1uO1xuICB0aGlzLnNvdXJjZSA9IGFTb3VyY2UgPT0gbnVsbCA/IG51bGwgOiBhU291cmNlO1xuICB0aGlzLm5hbWUgPSBhTmFtZSA9PSBudWxsID8gbnVsbCA6IGFOYW1lO1xuICB0aGlzW2lzU291cmNlTm9kZV0gPSB0cnVlO1xuICBpZiAoYUNodW5rcyAhPSBudWxsKSB0aGlzLmFkZChhQ2h1bmtzKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgU291cmNlTm9kZSBmcm9tIGdlbmVyYXRlZCBjb2RlIGFuZCBhIFNvdXJjZU1hcENvbnN1bWVyLlxuICpcbiAqIEBwYXJhbSBhR2VuZXJhdGVkQ29kZSBUaGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcCBmb3IgdGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVJlbGF0aXZlUGF0aCBPcHRpb25hbC4gVGhlIHBhdGggdGhhdCByZWxhdGl2ZSBzb3VyY2VzIGluIHRoZVxuICogICAgICAgIFNvdXJjZU1hcENvbnN1bWVyIHNob3VsZCBiZSByZWxhdGl2ZSB0by5cbiAqL1xuU291cmNlTm9kZS5mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAoYUdlbmVyYXRlZENvZGUsIGFTb3VyY2VNYXBDb25zdW1lciwgYVJlbGF0aXZlUGF0aCkge1xuICAgIC8vIFRoZSBTb3VyY2VOb2RlIHdlIHdhbnQgdG8gZmlsbCB3aXRoIHRoZSBnZW5lcmF0ZWQgY29kZVxuICAgIC8vIGFuZCB0aGUgU291cmNlTWFwXG4gICAgdmFyIG5vZGUgPSBuZXcgU291cmNlTm9kZSgpO1xuXG4gICAgLy8gQWxsIGV2ZW4gaW5kaWNlcyBvZiB0aGlzIGFycmF5IGFyZSBvbmUgbGluZSBvZiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4gICAgLy8gd2hpbGUgYWxsIG9kZCBpbmRpY2VzIGFyZSB0aGUgbmV3bGluZXMgYmV0d2VlbiB0d28gYWRqYWNlbnQgbGluZXNcbiAgICAvLyAoc2luY2UgYFJFR0VYX05FV0xJTkVgIGNhcHR1cmVzIGl0cyBtYXRjaCkuXG4gICAgLy8gUHJvY2Vzc2VkIGZyYWdtZW50cyBhcmUgYWNjZXNzZWQgYnkgY2FsbGluZyBgc2hpZnROZXh0TGluZWAuXG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzID0gYUdlbmVyYXRlZENvZGUuc3BsaXQoUkVHRVhfTkVXTElORSk7XG4gICAgdmFyIHJlbWFpbmluZ0xpbmVzSW5kZXggPSAwO1xuICAgIHZhciBzaGlmdE5leHRMaW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZUNvbnRlbnRzID0gZ2V0TmV4dExpbmUoKTtcbiAgICAgIC8vIFRoZSBsYXN0IGxpbmUgb2YgYSBmaWxlIG1pZ2h0IG5vdCBoYXZlIGEgbmV3bGluZS5cbiAgICAgIHZhciBuZXdMaW5lID0gZ2V0TmV4dExpbmUoKSB8fCBcIlwiO1xuICAgICAgcmV0dXJuIGxpbmVDb250ZW50cyArIG5ld0xpbmU7XG5cbiAgICAgIGZ1bmN0aW9uIGdldE5leHRMaW5lKCkge1xuICAgICAgICByZXR1cm4gcmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCA/XG4gICAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4KytdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBXZSBuZWVkIHRvIHJlbWVtYmVyIHRoZSBwb3NpdGlvbiBvZiBcInJlbWFpbmluZ0xpbmVzXCJcbiAgICB2YXIgbGFzdEdlbmVyYXRlZExpbmUgPSAxLCBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcblxuICAgIC8vIFRoZSBnZW5lcmF0ZSBTb3VyY2VOb2RlcyB3ZSBuZWVkIGEgY29kZSByYW5nZS5cbiAgICAvLyBUbyBleHRyYWN0IGl0IGN1cnJlbnQgYW5kIGxhc3QgbWFwcGluZyBpcyB1c2VkLlxuICAgIC8vIEhlcmUgd2Ugc3RvcmUgdGhlIGxhc3QgbWFwcGluZy5cbiAgICB2YXIgbGFzdE1hcHBpbmcgPSBudWxsO1xuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcgIT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UgYWRkIHRoZSBjb2RlIGZyb20gXCJsYXN0TWFwcGluZ1wiIHRvIFwibWFwcGluZ1wiOlxuICAgICAgICAvLyBGaXJzdCBjaGVjayBpZiB0aGVyZSBpcyBhIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgIGlmIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIC8vIEFzc29jaWF0ZSBmaXJzdCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICAgICAgLy8gVGhlIHJlbWFpbmluZyBjb2RlIGlzIGFkZGVkIHdpdGhvdXQgbWFwcGluZ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5ldyBsaW5lIGluIGJldHdlZW4uXG4gICAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSBjb2RlIGJldHdlZW4gXCJsYXN0R2VuZXJhdGVkQ29sdW1uXCIgYW5kXG4gICAgICAgICAgLy8gXCJtYXBwaW5nLmdlbmVyYXRlZENvbHVtblwiIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgICAgdmFyIGNvZGUgPSBuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBjb2RlKTtcbiAgICAgICAgICAvLyBObyBtb3JlIHJlbWFpbmluZyBjb2RlLCBjb250aW51ZVxuICAgICAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFdlIGFkZCB0aGUgZ2VuZXJhdGVkIGNvZGUgdW50aWwgdGhlIGZpcnN0IG1hcHBpbmdcbiAgICAgIC8vIHRvIHRoZSBTb3VyY2VOb2RlIHdpdGhvdXQgYW55IG1hcHBpbmcuXG4gICAgICAvLyBFYWNoIGxpbmUgaXMgYWRkZWQgYXMgc2VwYXJhdGUgc3RyaW5nLlxuICAgICAgd2hpbGUgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIG5vZGUuYWRkKHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRMaW5lKys7XG4gICAgICB9XG4gICAgICBpZiAobGFzdEdlbmVyYXRlZENvbHVtbiA8IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSB7XG4gICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICBub2RlLmFkZChuZXh0TGluZS5zdWJzdHIoMCwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pKTtcbiAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG4gICAgICB9XG4gICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgfSwgdGhpcyk7XG4gICAgLy8gV2UgaGF2ZSBwcm9jZXNzZWQgYWxsIG1hcHBpbmdzLlxuICAgIGlmIChyZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoKSB7XG4gICAgICBpZiAobGFzdE1hcHBpbmcpIHtcbiAgICAgICAgLy8gQXNzb2NpYXRlIHRoZSByZW1haW5pbmcgY29kZSBpbiB0aGUgY3VycmVudCBsaW5lIHdpdGggXCJsYXN0TWFwcGluZ1wiXG4gICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgIH1cbiAgICAgIC8vIGFuZCBhZGQgdGhlIHJlbWFpbmluZyBsaW5lcyB3aXRob3V0IGFueSBtYXBwaW5nXG4gICAgICBub2RlLmFkZChyZW1haW5pbmdMaW5lcy5zcGxpY2UocmVtYWluaW5nTGluZXNJbmRleCkuam9pbihcIlwiKSk7XG4gICAgfVxuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudCBpbnRvIFNvdXJjZU5vZGVcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoYVJlbGF0aXZlUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm9kZTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcHBpbmdXaXRoQ29kZShtYXBwaW5nLCBjb2RlKSB7XG4gICAgICBpZiAobWFwcGluZyA9PT0gbnVsbCB8fCBtYXBwaW5nLnNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGUuYWRkKGNvZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFSZWxhdGl2ZVBhdGhcbiAgICAgICAgICA/IHV0aWwuam9pbihhUmVsYXRpdmVQYXRoLCBtYXBwaW5nLnNvdXJjZSlcbiAgICAgICAgICA6IG1hcHBpbmcuc291cmNlO1xuICAgICAgICBub2RlLmFkZChuZXcgU291cmNlTm9kZShtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm5hbWUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gU291cmNlTm9kZV9hZGQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBhQ2h1bmsuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgIHRoaXMuYWRkKGNodW5rKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGFDaHVuaykge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGFDaHVuayk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQWRkIGEgY2h1bmsgb2YgZ2VuZXJhdGVkIEpTIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5wcmVwZW5kID0gZnVuY3Rpb24gU291cmNlTm9kZV9wcmVwZW5kKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgZm9yICh2YXIgaSA9IGFDaHVuay5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHRoaXMucHJlcGVuZChhQ2h1bmtbaV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhQ2h1bmtbaXNTb3VyY2VOb2RlXSB8fCB0eXBlb2YgYUNodW5rID09PSBcInN0cmluZ1wiKSB7XG4gICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0KGFDaHVuayk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgSlMgc25pcHBldHMgaW4gdGhpcyBub2RlIGFuZCBpdHMgY2hpbGRyZW4uIFRoZVxuICogd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgb25jZSBmb3IgZWFjaCBzbmlwcGV0IG9mIEpTIGFuZCBpcyBwYXNzZWQgdGhhdFxuICogc25pcHBldCBhbmQgdGhlIGl0cyBvcmlnaW5hbCBhc3NvY2lhdGVkIHNvdXJjZSdzIGxpbmUvY29sdW1uIGxvY2F0aW9uLlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2FsayhhRm4pIHtcbiAgdmFyIGNodW5rO1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNodW5rID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICBpZiAoY2h1bmtbaXNTb3VyY2VOb2RlXSkge1xuICAgICAgY2h1bmsud2FsayhhRm4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjaHVuayAhPT0gJycpIHtcbiAgICAgICAgYUZuKGNodW5rLCB7IHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBMaWtlIGBTdHJpbmcucHJvdG90eXBlLmpvaW5gIGV4Y2VwdCBmb3IgU291cmNlTm9kZXMuIEluc2VydHMgYGFTdHJgIGJldHdlZW5cbiAqIGVhY2ggb2YgYHRoaXMuY2hpbGRyZW5gLlxuICpcbiAqIEBwYXJhbSBhU2VwIFRoZSBzZXBhcmF0b3IuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2pvaW4oYVNlcCkge1xuICB2YXIgbmV3Q2hpbGRyZW47XG4gIHZhciBpO1xuICB2YXIgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuLTE7IGkrKykge1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2goYVNlcCk7XG4gICAgfVxuICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSBvbiB0aGUgdmVyeSByaWdodC1tb3N0IHNvdXJjZSBzbmlwcGV0LiBVc2VmdWxcbiAqIGZvciB0cmltbWluZyB3aGl0ZXNwYWNlIGZyb20gdGhlIGVuZCBvZiBhIHNvdXJjZSBub2RlLCBldGMuXG4gKlxuICogQHBhcmFtIGFQYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gKiBAcGFyYW0gYVJlcGxhY2VtZW50IFRoZSB0aGluZyB0byByZXBsYWNlIHRoZSBwYXR0ZXJuIHdpdGguXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnJlcGxhY2VSaWdodCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDaGlsZFtpc1NvdXJjZU5vZGVdKSB7XG4gICAgbGFzdENoaWxkLnJlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIGlmICh0eXBlb2YgbGFzdENoaWxkID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXSA9IGxhc3RDaGlsZC5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2Uge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaCgnJy5yZXBsYWNlKGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS4gVGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBTb3VyY2VNYXBHZW5lcmF0b3JcbiAqIGluIHRoZSBzb3VyY2VzQ29udGVudCBmaWVsZC5cbiAqXG4gKiBAcGFyYW0gYVNvdXJjZUZpbGUgVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZVxuICogQHBhcmFtIGFTb3VyY2VDb250ZW50IFRoZSBjb250ZW50IG9mIHRoZSBzb3VyY2UgZmlsZVxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9zZXRTb3VyY2VDb250ZW50KGFTb3VyY2VGaWxlLCBhU291cmNlQ29udGVudCkge1xuICAgIHRoaXMuc291cmNlQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhhU291cmNlRmlsZSldID0gYVNvdXJjZUNvbnRlbnQ7XG4gIH07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIFNvdXJjZU5vZGVzLiBUaGUgd2Fsa2luZyBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2hcbiAqIHNvdXJjZSBmaWxlIGNvbnRlbnQgYW5kIGlzIHBhc3NlZCB0aGUgZmlsZW5hbWUgYW5kIHNvdXJjZSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSBhRm4gVGhlIHRyYXZlcnNhbCBmdW5jdGlvbi5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUud2Fsa1NvdXJjZUNvbnRlbnRzID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV93YWxrU291cmNlQ29udGVudHMoYUZuKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldW2lzU291cmNlTm9kZV0pIHtcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpXS53YWxrU291cmNlQ29udGVudHMoYUZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc291cmNlcyA9IE9iamVjdC5rZXlzKHRoaXMuc291cmNlQ29udGVudHMpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3VyY2VzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhRm4odXRpbC5mcm9tU2V0U3RyaW5nKHNvdXJjZXNbaV0pLCB0aGlzLnNvdXJjZUNvbnRlbnRzW3NvdXJjZXNbaV1dKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZS4gV2Fsa3Mgb3ZlciB0aGUgdHJlZVxuICogYW5kIGNvbmNhdGVuYXRlcyBhbGwgdGhlIHZhcmlvdXMgc25pcHBldHMgdG9nZXRoZXIgdG8gb25lIHN0cmluZy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaykge1xuICAgIHN0ciArPSBjaHVuaztcbiAgfSk7XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlIGFsb25nIHdpdGggYSBzb3VyY2VcbiAqIG1hcC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUudG9TdHJpbmdXaXRoU291cmNlTWFwID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZ1dpdGhTb3VyY2VNYXAoYUFyZ3MpIHtcbiAgdmFyIGdlbmVyYXRlZCA9IHtcbiAgICBjb2RlOiBcIlwiLFxuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAwXG4gIH07XG4gIHZhciBtYXAgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKTtcbiAgdmFyIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxOYW1lID0gbnVsbDtcbiAgdGhpcy53YWxrKGZ1bmN0aW9uIChjaHVuaywgb3JpZ2luYWwpIHtcbiAgICBnZW5lcmF0ZWQuY29kZSArPSBjaHVuaztcbiAgICBpZiAob3JpZ2luYWwuc291cmNlICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmxpbmUgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwuY29sdW1uICE9PSBudWxsKSB7XG4gICAgICBpZihsYXN0T3JpZ2luYWxTb3VyY2UgIT09IG9yaWdpbmFsLnNvdXJjZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTGluZSAhPT0gb3JpZ2luYWwubGluZVxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsQ29sdW1uICE9PSBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbE5hbWUgIT09IG9yaWdpbmFsLm5hbWUpIHtcbiAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBvcmlnaW5hbC5zb3VyY2U7XG4gICAgICBsYXN0T3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgIGxhc3RPcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgIGxhc3RPcmlnaW5hbE5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IGNodW5rLmxlbmd0aDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgaWYgKGNodW5rLmNoYXJDb2RlQXQoaWR4KSA9PT0gTkVXTElORV9DT0RFKSB7XG4gICAgICAgIGdlbmVyYXRlZC5saW5lKys7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4gPSAwO1xuICAgICAgICAvLyBNYXBwaW5ncyBlbmQgYXQgZW9sXG4gICAgICAgIGlmIChpZHggKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VNYXBwaW5nQWN0aXZlKSB7XG4gICAgICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBvcmlnaW5hbC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uKys7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgdGhpcy53YWxrU291cmNlQ29udGVudHMoZnVuY3Rpb24gKHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpIHtcbiAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHsgY29kZTogZ2VuZXJhdGVkLmNvZGUsIG1hcDogbWFwIH07XG59O1xuXG5leHBvcnRzLlNvdXJjZU5vZGUgPSBTb3VyY2VOb2RlO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdmFsdWVzIGZyb20gcGFyYW1ldGVyL29wdGlvbnNcbiAqIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIGFyZ3MgVGhlIG9iamVjdCB3ZSBhcmUgZXh0cmFjdGluZyB2YWx1ZXMgZnJvbVxuICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdlIGFyZSBnZXR0aW5nLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBBbiBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmdcbiAqIGZyb20gdGhlIG9iamVjdC4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFuZCB0aGUgcHJvcGVydHkgaXMgbWlzc2luZywgYW5cbiAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovXG5mdW5jdGlvbiBnZXRBcmcoYUFyZ3MsIGFOYW1lLCBhRGVmYXVsdFZhbHVlKSB7XG4gIGlmIChhTmFtZSBpbiBhQXJncykge1xuICAgIHJldHVybiBhQXJnc1thTmFtZV07XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIHJldHVybiBhRGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYU5hbWUgKyAnXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudC4nKTtcbiAgfVxufVxuZXhwb3J0cy5nZXRBcmcgPSBnZXRBcmc7XG5cbnZhciB1cmxSZWdleHAgPSAvXig/OihbXFx3K1xcLS5dKyk6KT9cXC9cXC8oPzooXFx3KzpcXHcrKUApPyhbXFx3Li1dKikoPzo6KFxcZCspKT8oLiopJC87XG52YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdXG4gIH07XG59XG5leHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbmZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgdmFyIHVybCA9ICcnO1xuICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gIH1cbiAgdXJsICs9ICcvLyc7XG4gIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICpcbiAqIC0gUmVwbGFjZXMgY29uc2VjdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAqXG4gKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gIHZhciBwYXRoID0gYVBhdGg7XG4gIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKTtcblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgdXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICB1cC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gIGlmIChwYXRoID09PSAnJykge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICB9XG5cbiAgaWYgKHVybCkge1xuICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICA/IGFQYXRoXG4gICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG4gIHJldHVybiBqb2luZWQ7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiAoYVBhdGgpIHtcbiAgcmV0dXJuIGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nIHx8IHVybFJlZ2V4cC50ZXN0KGFQYXRoKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoZSBwYXRoIHRvIGJlIGFib3ZlIHRoZSByb290LiBJbiB0aGlzIGNhc2UsIHNpbXBseVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAvLyBhIHByZWZpeCB0aGF0IGZpdHMsIG9yIHdlIHJ1biBvdXQgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gIHZhciBsZXZlbCA9IDA7XG4gIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgIHZhciBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG52YXIgc3VwcG9ydHNOdWxsUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoJ19fcHJvdG9fXycgaW4gb2JqKTtcbn0oKSk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5IChzKSB7XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEJlY2F1c2UgYmVoYXZpb3IgZ29lcyB3YWNreSB3aGVuIHlvdSBzZXQgYF9fcHJvdG9fX2Agb24gb2JqZWN0cywgd2VcbiAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9wdWxsLzMxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcy5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDkgLyogXCJfX3Byb3RvX19cIi5sZW5ndGggKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICB2YXIgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyA9IGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zO1xuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBkZWZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgaW5kaWNlcyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICogc291cmNlL25hbWUvb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGFcbiAqIG1hcHBpbmcgd2l0aCBhIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQ7XG5cbmZ1bmN0aW9uIHN0cmNtcChhU3RyMSwgYVN0cjIpIHtcbiAgaWYgKGFTdHIxID09PSBhU3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGFTdHIxID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDE7IC8vIGFTdHIyICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gLTE7IC8vIGFTdHIxICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cbi8qKlxuICogU3RyaXAgYW55IEpTT04gWFNTSSBhdm9pZGFuY2UgcHJlZml4IGZyb20gdGhlIHN0cmluZyAoYXMgZG9jdW1lbnRlZFxuICogaW4gdGhlIHNvdXJjZSBtYXBzIHNwZWNpZmljYXRpb24pLCBhbmQgdGhlbiBwYXJzZSB0aGUgc3RyaW5nIGFzXG4gKiBKU09OLlxuICovXG5mdW5jdGlvbiBwYXJzZVNvdXJjZU1hcElucHV0KHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIucmVwbGFjZSgvXlxcKV19J1teXFxuXSpcXG4vLCAnJykpO1xufVxuZXhwb3J0cy5wYXJzZVNvdXJjZU1hcElucHV0ID0gcGFyc2VTb3VyY2VNYXBJbnB1dDtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBVUkwgb2YgYSBzb3VyY2UgZ2l2ZW4gdGhlIHRoZSBzb3VyY2Ugcm9vdCwgdGhlIHNvdXJjZSdzXG4gKiBVUkwsIGFuZCB0aGUgc291cmNlIG1hcCdzIFVSTC5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkge1xuICBzb3VyY2VVUkwgPSBzb3VyY2VVUkwgfHwgJyc7XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICAvLyBUaGlzIGZvbGxvd3Mgd2hhdCBDaHJvbWUgZG9lcy5cbiAgICBpZiAoc291cmNlUm9vdFtzb3VyY2VSb290Lmxlbmd0aCAtIDFdICE9PSAnLycgJiYgc291cmNlVVJMWzBdICE9PSAnLycpIHtcbiAgICAgIHNvdXJjZVJvb3QgKz0gJy8nO1xuICAgIH1cbiAgICAvLyBUaGUgc3BlYyBzYXlzOlxuICAgIC8vICAgTGluZSA0OiBBbiBvcHRpb25hbCBzb3VyY2Ugcm9vdCwgdXNlZnVsIGZvciByZWxvY2F0aW5nIHNvdXJjZVxuICAgIC8vICAgZmlsZXMgb24gYSBzZXJ2ZXIgb3IgcmVtb3ZpbmcgcmVwZWF0ZWQgdmFsdWVzIGluIHRoZVxuICAgIC8vICAg4oCcc291cmNlc+KAnSBlbnRyeS4gIFRoaXMgdmFsdWUgaXMgcHJlcGVuZGVkIHRvIHRoZSBpbmRpdmlkdWFsXG4gICAgLy8gICBlbnRyaWVzIGluIHRoZSDigJxzb3VyY2XigJ0gZmllbGQuXG4gICAgc291cmNlVVJMID0gc291cmNlUm9vdCArIHNvdXJjZVVSTDtcbiAgfVxuXG4gIC8vIEhpc3RvcmljYWxseSwgU291cmNlTWFwQ29uc3VtZXIgZGlkIG5vdCB0YWtlIHRoZSBzb3VyY2VNYXBVUkwgYXNcbiAgLy8gYSBwYXJhbWV0ZXIuICBUaGlzIG1vZGUgaXMgc3RpbGwgc29tZXdoYXQgc3VwcG9ydGVkLCB3aGljaCBpcyB3aHlcbiAgLy8gdGhpcyBjb2RlIGJsb2NrIGlzIGNvbmRpdGlvbmFsLiAgSG93ZXZlciwgaXQncyBwcmVmZXJhYmxlIHRvIHBhc3NcbiAgLy8gdGhlIHNvdXJjZSBtYXAgVVJMIHRvIFNvdXJjZU1hcENvbnN1bWVyLCBzbyB0aGF0IHRoaXMgZnVuY3Rpb25cbiAgLy8gY2FuIGltcGxlbWVudCB0aGUgc291cmNlIFVSTCByZXNvbHV0aW9uIGFsZ29yaXRobSBhcyBvdXRsaW5lZCBpblxuICAvLyB0aGUgc3BlYy4gIFRoaXMgYmxvY2sgaXMgYmFzaWNhbGx5IHRoZSBlcXVpdmFsZW50IG9mOlxuICAvLyAgICBuZXcgVVJMKHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKS50b1N0cmluZygpXG4gIC8vIC4uLiBleGNlcHQgaXQgYXZvaWRzIHVzaW5nIFVSTCwgd2hpY2ggd2Fzbid0IGF2YWlsYWJsZSBpbiB0aGVcbiAgLy8gb2xkZXIgcmVsZWFzZXMgb2Ygbm9kZSBzdGlsbCBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5LlxuICAvL1xuICAvLyBUaGUgc3BlYyBzYXlzOlxuICAvLyAgIElmIHRoZSBzb3VyY2VzIGFyZSBub3QgYWJzb2x1dGUgVVJMcyBhZnRlciBwcmVwZW5kaW5nIG9mIHRoZVxuICAvLyAgIOKAnHNvdXJjZVJvb3TigJ0sIHRoZSBzb3VyY2VzIGFyZSByZXNvbHZlZCByZWxhdGl2ZSB0byB0aGVcbiAgLy8gICBTb3VyY2VNYXAgKGxpa2UgcmVzb2x2aW5nIHNjcmlwdCBzcmMgaW4gYSBodG1sIGRvY3VtZW50KS5cbiAgaWYgKHNvdXJjZU1hcFVSTCkge1xuICAgIHZhciBwYXJzZWQgPSB1cmxQYXJzZShzb3VyY2VNYXBVUkwpO1xuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2VNYXBVUkwgY291bGQgbm90IGJlIHBhcnNlZFwiKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5wYXRoKSB7XG4gICAgICAvLyBTdHJpcCB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCwgYnV0IGtlZXAgdGhlIFwiL1wiLlxuICAgICAgdmFyIGluZGV4ID0gcGFyc2VkLnBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHBhcnNlZC5wYXRoID0gcGFyc2VkLnBhdGguc3Vic3RyaW5nKDAsIGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZVVSTCA9IGpvaW4odXJsR2VuZXJhdGUocGFyc2VkKSwgc291cmNlVVJMKTtcbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemUoc291cmNlVVJMKTtcbn1cbmV4cG9ydHMuY29tcHV0ZVNvdXJjZVVSTCA9IGNvbXB1dGVTb3VyY2VVUkw7XG4iLCIvKlxuICogQ29weXJpZ2h0IDIwMDktMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0UudHh0IG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1tYXAtZ2VuZXJhdG9yJykuU291cmNlTWFwR2VuZXJhdG9yO1xuZXhwb3J0cy5Tb3VyY2VNYXBDb25zdW1lciA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1tYXAtY29uc3VtZXInKS5Tb3VyY2VNYXBDb25zdW1lcjtcbmV4cG9ydHMuU291cmNlTm9kZSA9IHJlcXVpcmUoJy4vbGliL3NvdXJjZS1ub2RlJykuU291cmNlTm9kZTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHQgPSBcIldhcm5pbmc6IFwiICsgbWVzc2FnZTtcblxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhyb3cgRXJyb3IodGV4dCk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3YXJuaW5nO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJhbmdsZSA9IHZvaWQgMDtcbmNvbnN0IGRldmljZV9jb250cm9sbGVyXzEgPSByZXF1aXJlKFwiLi9kZXZpY2UtY29udHJvbGxlclwiKTtcbmNsYXNzIEJhbmdsZSBleHRlbmRzIGRldmljZV9jb250cm9sbGVyXzEuRGV2aWNlQ29udHJvbGxlciB7XG59XG5leHBvcnRzLkJhbmdsZSA9IEJhbmdsZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19jbGFzc1ByaXZhdGVGaWVsZEdldCA9ICh0aGlzICYmIHRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldCkgfHwgZnVuY3Rpb24gKHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcbiAgICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufTtcbnZhciBfRGV2aWNlQ29udHJvbGxlcl9pbnN0YW5jZXMsIF9EZXZpY2VDb250cm9sbGVyX21hcFN0cmluZ0Z1bmN0aW9uVG9DYWxsLCBfRGV2aWNlQ29udHJvbGxlcl9nZXRGdW5jdGlvbk5hbWVzRnJvbVN0cmluZztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGV2aWNlQ29udHJvbGxlciA9IHZvaWQgMDtcbmNvbnN0IHRyYW5zcGlsZXJfMSA9IHJlcXVpcmUoXCJAZXNwcnVpbm8tdG9vbHMvdHJhbnNwaWxlclwiKTtcbmNvbnN0IHVhcnRfMSA9IHJlcXVpcmUoXCJAZXNwcnVpbm8tdG9vbHMvdWFydFwiKTtcbmNvbnN0IGZldGNoSGVscGVyXzEgPSByZXF1aXJlKFwiLi9oZWxwZXJzL2ZldGNoSGVscGVyXCIpO1xuY2xhc3MgRGV2aWNlQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIF9EZXZpY2VDb250cm9sbGVyX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuVUFSVCA9IHVhcnRfMS51YXJ0O1xuICAgICAgICB0aGlzLmRldmljZVR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgaG9sZGluZyBhbnkgZnVuY3Rpb25zIG9uIHRoZSBkZXZpY2VcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuQ2FsbCA9IHt9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gT2JqZWN0IGNvbnRhaW5pbmcgYWxsIHBpbiBtZXRob2RzXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLlBpbiA9IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSBwaW4gdGhlIHBpbiB0byBoYXZlIGl0cyB2YWx1ZSByZXR1cm5lZFxuICAgICAgICAgICAgICogQHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBjaG9zZW4gcGluXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbDogKHBpbikgPT4gdGhpcy5ldmFsKHBpbiArICcucmVhZCgpJyksXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gcGluIHRoZSBwaW4gdG8gaGF2ZSBpdHMgYW5hbG9nIHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICAgICAqIEBwYXJhbSB2YWwgc2hvdWxkIGJlIGJldHdlZW4gMCBhbmQgMSwgZS5nLiAwLjVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYW5hbG9nT246IChwaW4sIHZhbCkgPT4gdGhpcy5VQVJULndyaXRlKCdhbmFsb2dXcml0ZSgnICsgcGluICsgJywnICsgdmFsICsgJyk7XFxuJyksXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gcGluIHRoZSBwaW4gdG8gaGF2ZSBpdHMgZGlnaXRhbCB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgKiBAcGFyYW0gdmFsIGNhbiBiZSBlaXRoZXIgMCBvciAxIGZvciBvZmYgb3Igb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZGlnaXRhbE9uOiAocGluLCB2YWwpID0+IHRoaXMuVUFSVC53cml0ZSgnZGlnaXRhbFdyaXRlKCcgKyBwaW4gKyAnLCcgKyB2YWwgKyAnKTtcXG4nKSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSBwaW4gdGhlIHBpbiB0byBiZSB0b2dnbGVkXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGRpZ2l0YWxUb2dnbGU6IChwaW4pID0+IHRoaXMuVUFSVC53cml0ZShwaW4gKyAnLnRvZ2dsZSgpO1xcbicpLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHBpbiB0aGUgcGluIHRvIGJlIHJlc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJlc2V0OiAocGluKSA9PiB0aGlzLlVBUlQud3JpdGUocGluICsgJy5yZXNldCgpO1xcbicpLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIHBpbiB0aGUgcGluIHRvIGdhdGhlciBpbmZvcm1hdGlvbiBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyBhIHByb21pc2UgY29udGFpbmluZyBwaW4gaW5mb1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXRJbmZvOiAocGluKSA9PiB0aGlzLmV2YWwocGluICsgJy5nZXRJbmZvKCknKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyAgcHJvbWlzZSBjb250YWluaW5nIGFsbCBjb2RlIHN0b3JlZCBvbiBkZXZpY2VcbiAgICAgKi9cbiAgICBkdW1wKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuZXZhbCgnRS5kdW1wU3RyKCknKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMgZGV2aWNlIHR5cGUgb2YgY29ubmVjdGVkIGRldmljZVxuICAgICAqL1xuICAgIGdldERldmljZVR5cGUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5ldmFsKGBwcm9jZXNzLmVudi5CT0FSRGApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBiYXR0ZXJ5IHBlcmNlbnRhZ2Ugb2YgdGhlIGNvbm5lY3RlZCBkZXZpY2VcbiAgICAgKi9cbiAgICBnZXRCYXR0ZXJ5KCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgcmV0dXJuIHlpZWxkIHRoaXMuZXZhbChgRS5nZXRCYXR0ZXJ5KClgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvZGUgY29kZSB0byBiZSBldmFsdWF0ZWRcbiAgICAgKiBAcmV0dXJucyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZGV2aWNlIGluIGEgUHJvbWlzZVxuICAgICAqL1xuICAgIGV2YWwoY29kZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gKGRhdGEsIGxvZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWxvZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHsgZGF0YSwgbG9nIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULmV2YWwoY29kZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBmdW5jdGlvbiB0byBiZSBydW4gYWZ0ZXIgY29ubmVjdFxuICAgICAqL1xuICAgIGNvbm5lY3QoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZXZhbCgne30nKS50aGVuKCh7IGRhdGEsIGxvZyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGxvZyA9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUoJ2RpZ2l0YWxQdWxzZShMRUQyLDEsMTAwKTtcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREZXZpY2VGdW5jdGlvbnMoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBmdW5jdGlvbiB0byBiZSBydW4gYWZ0ZXIgZGlzY29ubmVjdFxuICAgICAqL1xuICAgIGRpc2Nvbm5lY3QoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuZXZhbCgnZGlnaXRhbFB1bHNlKExFRDEsMSwxMDApO1xcbicpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLlVBUlQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5kZXZpY2VUeXBlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYW55IHNhdmVkIGRhdGEgb24gZGV2aWNlLlxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLlVBUlQud3JpdGUoJ3Jlc2V0KHRydWUpO1xcbicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqID4gKipXQVJOSU5HKiogIFRISVMgQ09ERSBET0VTIE5PIENIRUNLUyBBTkQgSVMgT05MWSBBVkFJTEFCTEUgRk9SIFNQRUVEXG4gICAgICogICAgICAgICAgICAgICAgUFVSUE9TRVMuXG4gICAgICpcbiAgICAgKiAgICAgICAgICAgICAgICBUSElTIFNIT1VMRCBCRSBVU0VEIEVYQ0xVU0lWRUxZIEZPUiBXSEVOIENPREUgRE9FU05UIE5FRURcbiAgICAgKiAgICAgICAgICAgICAgICBUTyBCRSBTQVZFRCBPUiBZT1UgQUxSRUFEWSBLTk9XIFRIRSBNRVRIT0RTIEFWQUlMQUJMRVxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgY29kZSB3cml0dGVuIGluIGVzcHJ1aW5vIG5hdGl2ZSBjb2RlIE5PVCBJTiBUSElTIExJQlJBUklFUyBDT0RFXG4gICAgICovXG4gICAgcXVpY2tXcml0ZShkYXRhKSB7XG4gICAgICAgIHRoaXMuVUFSVC53cml0ZShkYXRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZSBjb2RlIHdyaXR0ZW4gaW4gZXNwcnVpbm8gbmF0aXZlIGNvZGUsIE5PVCBJTiBUSElTIExJQlJBUklFUyBDT0RFXG4gICAgICogQHBhcmFtIGZsYXNoXG4gICAgICovXG4gICAgbG9hZENvZGUoY29kZSwgZmxhc2ggPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgbGV0IGRldmljZVR5cGUgPSB5aWVsZCB0aGlzLmdldERldmljZVR5cGUoKTtcbiAgICAgICAgICAgIGlmIChkZXZpY2VUeXBlID09PSAnQkFOR0xFSlMnKSB7XG4gICAgICAgICAgICAgICAgZmxhc2ggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAoIWZsYXNoICYmICFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKGNvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXN1Y2Nlc3MgJiYgZGV2aWNlVHlwZSAhPT0gJ1BJWExKUycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUoYEUuc2V0Qm9vdENvZGUoXFxgJHtjb2RlfVxcYCx0cnVlKTtcXG5gKTtcbiAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUoJ2xvYWQoKTtcXG4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKGNvZGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgnc2F2ZSgpO1xcbicpO1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgnbG9hZCgpO1xcbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5nZXREZXZpY2VGdW5jdGlvbnMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHNldEludGVydmFsKGZ1bmMsIG1zID0gMjAwMCkge1xuICAgICAgICBsZXQgdHJhbnNwaWxlZF9jb2RlID0gKDAsIHRyYW5zcGlsZXJfMS50cmFuc3BpbGUpKGBEZXZpY2VDb250cm9sbGVyLnNldEludGVydmFsKCR7ZnVuYy50b1N0cmluZygpfSwgJHttc30pYCwge1xuICAgICAgICAgICAgYWRkaXRpb25hbF9jYWxsZWVzOiBbJ3AnXSxcbiAgICAgICAgICAgIHBhcnNlX3R5cGU6ICdtb2R1bGUnLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5VQVJULndyaXRlKHRyYW5zcGlsZWRfY29kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHVybCB0aGUgdXJsIHRvIGdyYWIgZGF0YSBmcm9tXG4gICAgICogQHBhcmFtIGZsYXNoXG4gICAgICovXG4gICAgdXBsb2FkKHVybCwgZmxhc2ggPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgeWllbGQgKDAsIGZldGNoSGVscGVyXzEuZmV0Y2hUb1RleHQpKHVybCkudGhlbigocmF3Q29kZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZENvZGUocmF3Q29kZSwgZmxhc2gpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogaGVscGVyIGZ1bmN0aW9uIHRvIGdyYWIgZnVuY3Rpb25zIGZyb20gZGV2aWNlXG4gICAgICovXG4gICAgZ2V0RGV2aWNlRnVuY3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdGhpcy5DYWxsID0geWllbGQgdGhpcy5kdW1wKCkudGhlbigoZHVtcGVkU3RyKSA9PiB7XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfRGV2aWNlQ29udHJvbGxlcl9pbnN0YW5jZXMsIFwibVwiLCBfRGV2aWNlQ29udHJvbGxlcl9tYXBTdHJpbmdGdW5jdGlvblRvQ2FsbCkuY2FsbCh0aGlzLCBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9EZXZpY2VDb250cm9sbGVyX2luc3RhbmNlcywgXCJtXCIsIF9EZXZpY2VDb250cm9sbGVyX2dldEZ1bmN0aW9uTmFtZXNGcm9tU3RyaW5nKS5jYWxsKHRoaXMsIGR1bXBlZFN0ci5kYXRhKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5EZXZpY2VDb250cm9sbGVyID0gRGV2aWNlQ29udHJvbGxlcjtcbl9EZXZpY2VDb250cm9sbGVyX2luc3RhbmNlcyA9IG5ldyBXZWFrU2V0KCksIF9EZXZpY2VDb250cm9sbGVyX21hcFN0cmluZ0Z1bmN0aW9uVG9DYWxsID0gZnVuY3Rpb24gX0RldmljZUNvbnRyb2xsZXJfbWFwU3RyaW5nRnVuY3Rpb25Ub0NhbGwoZnVuY0Fycikge1xuICAgIGZ1bmNBcnIubWFwKChmdW5jKSA9PiB7XG4gICAgICAgIC8qXG4gICAgICAgICAgVGhpcyBhbm9ueW1vdXMgZnVuY3Rpb24gY29udmVydHMgdGhlIGFycmF5IG9mIGZ1bmN0aW9uIGRhdGEgaW50byBhIGRpZ2VzdGlibGUgY2FsbGFibGUgamF2YXNjcmlwdCBvYmplY3RcbiAgICAgICAgICBpbiBub3RhdGlvbiBmdW5jdGlvbl9uYW1lIDogZnVuY3Rpb24ocGFyYW0xLC4uLil7fVxuICAgICAgICAgIEl0IHRoZW5cbiAgICAgICAgKi9cbiAgICAgICAgdGhpcy5DYWxsID0gT2JqZWN0LmFzc2lnbih7IFtmdW5jLm5hbWVdOiAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZShgJHtmdW5jLm5hbWV9KCR7SlNPTi5zdHJpbmdpZnkoYXJncy5qb2luKCcsJykpfSk7XFxuYCk7XG4gICAgICAgICAgICB9IH0sIHRoaXMuQ2FsbCk7XG4gICAgfSk7XG59LCBfRGV2aWNlQ29udHJvbGxlcl9nZXRGdW5jdGlvbk5hbWVzRnJvbVN0cmluZyA9IGZ1bmN0aW9uIF9EZXZpY2VDb250cm9sbGVyX2dldEZ1bmN0aW9uTmFtZXNGcm9tU3RyaW5nKHN0cikge1xuICAgIGxldCBzdHJfYXJyID0gc3RyLnNwbGl0KCdcXG4nKTtcbiAgICBsZXQgbmV3X2FyciA9IHN0cl9hcnIubWFwKCh4KSA9PiB7XG4gICAgICAgIGlmICh4LnN0YXJ0c1dpdGgoJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgIHJldHVybiB4LnNwbGl0KCd7JylbMF0ucmVwbGFjZSgnZnVuY3Rpb24nLCAnJykuc3BsaXQoJyAnKS5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh4LnN0YXJ0c1dpdGgoJ2xldCcpIHx8IHguc3RhcnRzV2l0aCgnY29uc3QnKSkge1xuICAgICAgICAgICAgaWYgKHguaW5jbHVkZXMoJ2Z1bmN0aW9uKCcpIHx8IHguaW5jbHVkZXMoJz0+JykpIHtcbiAgICAgICAgICAgICAgICBpZiAoeC5pbmNsdWRlcygnPT4nKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCc9PicpWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnbGV0JywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnY29uc3QnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCc9JywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHhcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgneycpWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnbGV0JywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnY29uc3QnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCc9JywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnZnVuY3Rpb24nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbignJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGZpbHRlcmVkX2FyciA9IG5ld19hcnIuZmlsdGVyKEJvb2xlYW4pO1xuICAgIHJldHVybiBmaWx0ZXJlZF9hcnIubWFwKChmdW5jKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBmdW5jLnNwbGl0KCcoJylbMF0sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBmdW5jLnNwbGl0KCcoJylbMV0ucmVwbGFjZSgnKScsICcnKS5zcGxpdCgnLCcpWzBdICE9PSAnJ1xuICAgICAgICAgICAgICAgID8gZnVuYy5zcGxpdCgnKCcpWzFdLnJlcGxhY2UoJyknLCAnJykuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgIDogW10sXG4gICAgICAgIH07XG4gICAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmV0Y2hUb1RleHQgPSB2b2lkIDA7XG5mdW5jdGlvbiBmZXRjaFRvVGV4dCh1cmwpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgZGF0YSA9IHlpZWxkIGZldGNoKHVybCkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMuc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmV0Y2ggb24gOiR7dXJsfSBmYWlsZWRgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWllbGQgZGF0YS50ZXh0KCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZldGNoVG9UZXh0ID0gZmV0Y2hUb1RleHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGl4bCA9IHZvaWQgMDtcbmNvbnN0IGRldmljZV9jb250cm9sbGVyXzEgPSByZXF1aXJlKFwiLi9kZXZpY2UtY29udHJvbGxlclwiKTtcbmNsYXNzIFBpeGwgZXh0ZW5kcyBkZXZpY2VfY29udHJvbGxlcl8xLkRldmljZUNvbnRyb2xsZXIge1xufVxuZXhwb3J0cy5QaXhsID0gUGl4bDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlB1Y2sgPSB2b2lkIDA7XG5jb25zdCB0cmFuc3BpbGVyXzEgPSByZXF1aXJlKFwiQGVzcHJ1aW5vLXRvb2xzL3RyYW5zcGlsZXJcIik7XG5jb25zdCBkZXZpY2VfY29udHJvbGxlcl8xID0gcmVxdWlyZShcIi4vZGV2aWNlLWNvbnRyb2xsZXJcIik7XG5jb25zdCBwdWNrX3R5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlcy9wdWNrLXR5cGVzXCIpO1xuY2xhc3MgUHVjayBleHRlbmRzIGRldmljZV9jb250cm9sbGVyXzEuRGV2aWNlQ29udHJvbGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMubWFnID0ge1xuICAgICAgICAgICAgZW5hYmxlTWFnOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKCdQdWNrLm1hZ09uKCk7XFxuJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5hYmxlRmllbGQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUoJ3JlcXVpcmUoXCJwdWNranN2Mi1tYWctbGV2ZWxcIikub24oKTtcXG4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNhYmxlTWFnOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKCdQdWNrLm1hZ09mZigpO1xcbicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVGaWVsZDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgncmVxdWlyZShcInB1Y2tqc3YyLW1hZy1sZXZlbFwiKS5vZmYoKTtcXG4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1hZzogKGZ1bmMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHJhbnNwaWxlZF9jb2RlID0gKDAsIHRyYW5zcGlsZXJfMS50cmFuc3BpbGUpKGBwLm1hZy5vbk1hZygke2Z1bmMudG9TdHJpbmcoKX0pYCwge1xuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsX2NhbGxlZXM6IFsncCddLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZV90eXBlOiAnbW9kdWxlJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUodHJhbnNwaWxlZF9jb2RlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkZpZWxkOiAoZnVuYykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0cmFuc3BpbGVkX2NvZGUgPSAoMCwgdHJhbnNwaWxlcl8xLnRyYW5zcGlsZSkoYHAubWFnLm9uRmllbGQoJHtmdW5jLnRvU3RyaW5nKCl9KWAsIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbF9jYWxsZWVzOiBbJ3AnXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VfdHlwZTogJ21vZHVsZScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKHRyYW5zcGlsZWRfY29kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFjY2VsID0ge1xuICAgICAgICAgICAgZW5hYmxlQWNjZWxNb3ZlbWVudDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgncmVxdWlyZShcInB1Y2tqc3YyLWFjY2VsLW1vdmVtZW50XCIpLm9uKCk7XFxuJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5hYmxlQWNjZWxCaWdNb3ZlbWVudDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgncmVxdWlyZShcInB1Y2tqc3YyLWFjY2VsLWJpZ21vdmVtZW50XCIpLm9uKCk7XFxuJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW5hYmxlQWNjZWxUaWx0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKCdyZXF1aXJlKFwicHVja2pzdjItYWNjZWwtdGlsdFwiKS5vbigpO1xcbicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc2FibGVBY2NlbE1vdmVtZW50OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKCdyZXF1aXJlKFwicHVja2pzdjItYWNjZWwtbW92ZW1lbnRcIikub2ZmKCk7XFxuJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlzYWJsZUFjY2VsQmlnTW92ZW1lbnQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLlVBUlQud3JpdGUoJ3JlcXVpcmUoXCJwdWNranN2Mi1hY2NlbC1iaWdtb3ZlbWVudFwiKS5vZmYoKTtcXG4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkaXNhYmxlQWNjZWxUaWx0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKCdyZXF1aXJlKFwicHVja2pzdjItYWNjZWwtdGlsdFwiKS5vZmYoKTtcXG4nKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldmFsKCdQdWNrLmFjY2VsKCknKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk1vdmU6IChmdW5jKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zcGlsZWRfY29kZSA9ICgwLCB0cmFuc3BpbGVyXzEudHJhbnNwaWxlKShgcC5hY2NlbC5vbk1vdmUoJHtmdW5jLnRvU3RyaW5nKCl9KWAsIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbF9jYWxsZWVzOiBbJ3AnXSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VfdHlwZTogJ21vZHVsZScsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5VQVJULndyaXRlKHRyYW5zcGlsZWRfY29kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25UaWx0OiAoZnVuYykgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0cmFuc3BpbGVkX2NvZGUgPSAoMCwgdHJhbnNwaWxlcl8xLnRyYW5zcGlsZSkoYHAuYWNjZWwub25UaWx0KCR7ZnVuYy50b1N0cmluZygpfSlgLCB7XG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxfY2FsbGVlczogWydwJ10sXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlX3R5cGU6ICdtb2R1bGUnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSh0cmFuc3BpbGVkX2NvZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5JUiA9IHtcbiAgICAgICAgICAgIHRyYW5zbWl0OiAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZSgnUHVjay5JUihbJyArIGRhdGEuam9pbignLCcpICsgJ10pO1xcbicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5MRUQgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gY29sb3IgTEVEIENvbG91ciB0byBiZSB0dXJuZWQgb25cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgb246IChjb2xvcikgPT4ge1xuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoY29sb3IpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5VQVJULndyaXRlKGBkaWdpdGFsV3JpdGUoJHtjb2xvcn0sIDEpYClcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLlVBUlQud3JpdGUoYExFRCR7cHVja190eXBlc18xLkxFRENvbG91cnMuaW5kZXhPZihjb2xvcikgKyAxfS5zZXQoKTtcXG5gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gY29sb3IgTEVEIENvbG91ciB0byBiZSB0dXJuZWQgb2ZmXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIG9mZjogKGNvbG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShjb2xvcilcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLlVBUlQud3JpdGUoYGRpZ2l0YWxXcml0ZSgke2NvbG9yfSwgMClgKVxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuVUFSVC53cml0ZShgTEVEJHtwdWNrX3R5cGVzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9LnJlc2V0KCk7XFxuYCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtIGNvbG9yIExFRCBDb2xvdXIgdG8gYmUgdG9nZ2xlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0b2dnbGU6IChjb2xvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZShgTEVEJHtwdWNrX3R5cGVzXzEuTEVEQ29sb3Vycy5pbmRleE9mKGNvbG9yKSArIDF9LnRvZ2dsZSgpO1xcbmApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSBjb2xvciBMRUQgQ29sb3VyIHRvIGJlIGZsYXNoZWRcbiAgICAgICAgICAgICAqIEBwYXJhbSBtcyB0aW1lIGZvciBMRUQgdG8gYmUgZmxhc2hlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmbGFzaDogKGNvbG9yLCBtcykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuVUFSVC53cml0ZShgZGlnaXRhbFB1bHNlKExFRCR7cHVja190eXBlc18xLkxFRENvbG91cnMuaW5kZXhPZihjb2xvcikgKyAxfSwxLCR7bXN9KTtcXG5gKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gY29sb3IgTEVEIGNvbG91ciB0byBncmFiIGluZm8gZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMgYSBib29sZWFuIHJlZ2FyZGluZyBpZiB0aGUgTEVEIGlzIG9uIG9yIG9mZlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YWw6IChjb2xvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV2YWwoYGRpZ2l0YWxSZWFkKExFRCR7cHVja190eXBlc18xLkxFRENvbG91cnMuaW5kZXhPZihjb2xvcikgKyAxfSkgPT0gMWApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ORkMgPSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gdXJsIHRoZSB1cmwgdG8gYmUgdXNlZCBhcyB0aGUgbmV3IE5GQyB2YWx1ZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBzZXRVcmw6ICh1cmwpID0+IHRoaXMuVUFSVC53cml0ZSgnTlJGLm5mY1VSTChcIicgKyB1cmwgKyAnXCIpO1xcbicpLFxuICAgICAgICAgICAgcmVzZXQ6ICgpID0+IHRoaXMuVUFSVC53cml0ZSgnTlJGLm5mY1VSTCgpO1xcbicpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBsaWdodCB2YWx1ZSBkZXRlY3RlZCBieSB0aGUgcHVjayBkZXZpY2UuXG4gICAgICovXG4gICAgZ2V0TGlnaHRWYWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV2YWwoJ1B1Y2subGlnaHQoKScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHRlbXBlcmF0dXJlIGZyb20gZGV2aWNlXG4gICAgICovXG4gICAgZ2V0VGVtcGVyYXR1cmUoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4geWllbGQgdGhpcy5ldmFsKGBFLmdldFRlbXBlcmF0dXJlKClgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmMgQSBmdW5jdGlvbiB0byBiZSBydW4gb2YgcHJlc3Mgb2YgcHVja3MgYnV0dG9uXG4gICAgICovXG4gICAgb25QcmVzcyhmdW5jKSB7XG4gICAgICAgIGxldCB0cmFuc3BpbGVkX2NvZGUgPSAoMCwgdHJhbnNwaWxlcl8xLnRyYW5zcGlsZSkoYHAub25UaW1lZFByZXNzKCR7ZnVuYy50b1N0cmluZygpfSlgLCB7XG4gICAgICAgICAgICBhZGRpdGlvbmFsX2NhbGxlZXM6IFsncCddLFxuICAgICAgICAgICAgcGFyc2VfdHlwZTogJ21vZHVsZScsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLlVBUlQud3JpdGUodHJhbnNwaWxlZF9jb2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbG9uZyBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGEgbG9uZyBwcmVzc1xuICAgICAqIEBwYXJhbSBzaG9ydCBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGEgc2hvcnQgcHJlc3NcbiAgICAgKiBAcGFyYW0gbXMgdGhlIHRpbWUgcmVxdWlyZWQgdG8gY29uc2lkZXIgYSBwcmVzcyBhIGxvbmcgcHJlc3NcbiAgICAgKi9cbiAgICBvblRpbWVkUHJlc3MobG9uZywgc2hvcnQsIG1zID0gMC4zKSB7XG4gICAgICAgIGxldCB0cmFuc3BpbGVkX2NvZGUgPSAoMCwgdHJhbnNwaWxlcl8xLnRyYW5zcGlsZSkoYHAub25UaW1lZFByZXNzKCR7bG9uZy50b1N0cmluZygpfSwke3Nob3J0LnRvU3RyaW5nKCl9LCR7bXN9KWAsIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxfY2FsbGVlczogWydwJ10sXG4gICAgICAgICAgICBwYXJzZV90eXBlOiAnbW9kdWxlJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuVUFSVC53cml0ZSh0cmFuc3BpbGVkX2NvZGUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHVjayA9IFB1Y2s7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTEVEQ29sb3VycyA9IHZvaWQgMDtcbmV4cG9ydHMuTEVEQ29sb3VycyA9IFsncmVkJywgJ2dyZWVuJywgJ2JsdWUnXTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHtcbiAgICBhcnIyW2ldID0gYXJyW2ldO1xuICB9XG4gIHJldHVybiBhcnIyO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgYXJyYXlXaXRob3V0SG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRob3V0SG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vaXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkgZnJvbSBcIi4vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCBub25JdGVyYWJsZVNwcmVhZCBmcm9tIFwiLi9ub25JdGVyYWJsZVNwcmVhZC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZXZpY2VDb250cm9sbGVyID0gZXhwb3J0cy5CYW5nbGUgPSBleHBvcnRzLlBpeGwgPSBleHBvcnRzLlB1Y2sgPSB2b2lkIDA7XG5jb25zdCBwdWNrXzEgPSByZXF1aXJlKFwiLi9wdWNrXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHVja1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVja18xLlB1Y2s7IH0gfSk7XG5jb25zdCBwaXhsXzEgPSByZXF1aXJlKFwiLi9waXhsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGl4bFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGl4bF8xLlBpeGw7IH0gfSk7XG5jb25zdCBiYW5nbGVfMSA9IHJlcXVpcmUoXCIuL2JhbmdsZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJhbmdsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYmFuZ2xlXzEuQmFuZ2xlOyB9IH0pO1xuY29uc3QgZGV2aWNlX2NvbnRyb2xsZXJfMSA9IHJlcXVpcmUoXCIuL2RldmljZS1jb250cm9sbGVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGV2aWNlQ29udHJvbGxlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGV2aWNlX2NvbnRyb2xsZXJfMS5EZXZpY2VDb250cm9sbGVyOyB9IH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGV2aWNlX2NvbnRyb2xsZXJfMS5EZXZpY2VDb250cm9sbGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdF90cmFuc3BpbGVfb3B0aW9ucyIsInBhcnNlX3R5cGUiLCJhZGRpdGlvbmFsX2NhbGxlZXMiLCJnZW5lcmF0b3IiLCJlc2NvZGVnZW4iLCJhc3QiLCJvcHRpb25zIiwiYm9keSIsIm1hcCIsImV4cHIiLCJnZW5lcmF0ZSIsImpvaW4iLCJyZXBsYWNlQWxsIiwidHJhbnNmb3JtZXIiLCJ0cmFuc3BpbGUiLCJ0cmFuc3BpbGVfMSIsImVudW1lcmFibGUiLCJnZXQiLCJnZW5lcmF0b3JfMSIsInRyYW5zZm9ybWVyXzEiLCJtYXBwaW5ncyIsIm1hcHBpbmdzXzEiLCJQdWNrIiwiTkZDIiwic2V0VXJsIiwidXJsIiwicmVzZXQiLCJtYWciLCJlbmFibGVNYWciLCJlbmFibGVGaWVsZCIsImRpc2FibGVNYWciLCJkaXNhYmxlRmllbGQiLCJvbk1hZyIsImZ1bmMiLCJvbkZpZWxkIiwiYWNjZWwiLCJlbmFibGVBY2NlbE1vdmVtZW50IiwiZW5hYmxlQWNjZWxCaWdNb3ZlbWVudCIsImVuYWJsZUFjY2VsVGlsdCIsImRpc2FibGVBY2NlbE1vdmVtZW50IiwiZGlzYWJsZUFjY2VsQmlnTW92ZW1lbnQiLCJkaXNhYmxlQWNjZWxUaWx0IiwidmFsIiwib25Nb3ZlIiwib25UaWx0IiwiSVIiLCJ0cmFuc21pdCIsImRhdGEiLCJMRUQiLCJvbiIsImNvbG9yIiwiQXJyYXkiLCJpc0FycmF5IiwiTEVEQ29sb3VycyIsImluZGV4T2YiLCJvZmYiLCJ0b2dnbGUiLCJmbGFzaCIsIm1zIiwib25QcmVzcyIsIm9uVGltZWRQcmVzcyIsImxvbmciLCJzaG9ydCIsImdldFRlbXBlcmF0dXJlIiwiZ2V0TGlnaHRWYWwiLCJEZXZpY2VDb250cm9sbGVyIiwiY29ubmVjdCIsImR1bXAiLCJnZXREZXZpY2VUeXBlIiwiZ2V0QmF0dGVyeSIsInNldEludGVydmFsIiwiUGluIiwicGluIiwiYW5hbG9nT24iLCJkaWdpdGFsT24iLCJkaWdpdGFsVG9nZ2xlIiwiZ2V0SW5mbyIsIlBpeGwiLCJCYW5nbGUiLCJlc3ByaW1hIiwiY2FsbGVlX25hbWVzIiwiYWRkaXRpb25hbF9pbml0aWFsaXNlcnMiLCJnZXRJbnN0YW5jZUluaXRpYWxpc2luZyIsImZpbHRlciIsIngiLCJ0eXBlIiwiX2EiLCJpbmNsdWRlcyIsImRlY2xhcmF0aW9ucyIsImluaXQiLCJjYWxsZWUiLCJuYW1lIiwiaWQiLCJpbml0aWFsaXNlciIsImNvbnZlcnRUb0FTVCIsImNvZGUiLCJwYXJhbXMiLCJleHByZXNzaW9uX2Z1bmMiLCJzcGxpdCIsInJlZHVjZSIsInByZXYiLCJjdXJyIiwicGFyc2VTY3JpcHQiLCJyZXBsYWNlUmV0dXJuZWRFeHByZXNzaW9uIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsImVzcF9pbml0aWFsaXNpbmdfdmFycyIsImRldmljZV92YXJpYWJsZSIsIm9iamVjdCIsImRldmljZV9pbml0IiwiZmluZCIsInBocmFzZSIsInByb3BlcnR5IiwiYXJndW1lbnRzIiwieSIsImhhc093blByb3BlcnR5IiwidHJhbnNmb3JtZXJfb3V0IiwicmVwbGFjZUV4cHJlc3Npb24iLCJfZyIsIl9oIiwiX2oiLCJfayIsIl9sIiwiX20iLCJfbyIsInJlcGxhY2VJZlN0YXRlbWVudCIsInJlcGxhY2VDbGFzcyIsInJlcGxhY2VMb29wU3RhdGVtZW50IiwicmVwbGFjZVN3aXRjaFN0YXRlbWVudCIsInByb3BlcnRpZXMiLCJhcmd1bWVudCIsImV4cHJlc3Npb24iLCJyaWdodCIsImxlZnQiLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIiwieiIsInJlcGxhY2VJZkV4cHJlc3Npb25zIiwieF9jb3B5IiwiYXNzaWduIiwiaWZfY29weSIsImxvb3BfY29weSIsInN3aXRjaF9jb3B5IiwiY2FzZXMiLCJjbGFzc19jb3B5IiwiYXN0X2NvcHkiLCJibG9jayIsImhhbmRsZXIiLCJyZXBsYWNlVHJ5Q2F0Y2giLCJzb3VyY2UiLCJyZW1vdmVJbml0c0FuZEltcG9ydHMiLCJnZXRFeHByZXNzaW9ucyIsImVzcHJpbWFfMSIsInRyYW5zcGlsZV9kZWZhdWx0XzEiLCJwYXJzZU1vZHVsZSIsInRyYW5zZm9ybWVkX2FzdCIsIm9iamVjdF9uYW1lIiwiZXJyIiwiaXNJT1MiLCJhdWRpbyIsInRlc3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0FwcGxlRGV2aWNlIiwiaXNUb3VjaFNjcmVlbiIsIm1heFRvdWNoUG9pbnRzIiwiQXVkaW8iLCJ2b2x1bWUiLCJzdHIyYWIiLCJhYjJzdHIiLCJidWYiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsIlVpbnQ4QXJyYXkiLCJzdHIiLCJBcnJheUJ1ZmZlciIsImxlbmd0aCIsImJ1ZlZpZXciLCJpIiwic3RyTGVuIiwiY2hhckNvZGVBdCIsImNsYXNzZXMiLCJqc3NfMSIsImpzc19wcmVzZXRfZGVmYXVsdF8xIiwiZGVmYXVsdCIsInNldHVwIiwiY3JlYXRlU3R5bGVTaGVldCIsIm1lbnUiLCJiYWNrZ3JvdW5kIiwicGFkZGluZyIsImZvbnRXZWlnaHQiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXIiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwibWFyZ2luIiwiY3Vyc29yIiwiYm9yZGVyUmFkaXVzIiwiaXRlbXMiLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwiZ3JpZFRlbXBsYXRlUm93cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlclRvcCIsImNvbnRlbnQiLCJncmlkQXJlYSIsImZvbnRTaXplIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwiZW5kcG9pbnRzIiwid2lkdGgiLCJoZWlnaHQiLCJwYWRkaW5nUmlnaHQiLCJmbGV4RGlyZWN0aW9uIiwidGV4dEFsaWduIiwicGFkZGluZ0JvdHRvbSIsImF0dGFjaCIsIl9VQVJUQ2xhc3NfaW5zdGFuY2VzIiwiX1VBUlRDbGFzc19kZWJ1ZyIsIl9VQVJUQ2xhc3NfZmxvd0NvbnRyb2wiLCJfVUFSVENsYXNzX3F1ZXVlIiwiX1VBUlRDbGFzc19zZW50Q2h1bmtzIiwiX1VBUlRDbGFzc19jb25uZWN0aW9uIiwiX1VBUlRDbGFzc19lbmRwb2ludHMiLCJfVUFSVENsYXNzX2hhbmRsZVF1ZXVlIiwiX1VBUlRDbGFzc19sb2ciLCJfVUFSVENsYXNzX2NoZWNrSWZTdXBwb3J0ZWQiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwidGhpcyIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwidWFydCIsInN0cmluZ0FycmF5QnVmZmVyXzEiLCJtb2RhbF8xIiwiaXNJT1NfMSIsIldlYWtNYXAiLCJXZWFrU2V0IiwicSIsInNoaWZ0IiwiSlNPTiIsInN0cmluZ2lmeSIsImV2YWwiLCJjYiIsIndyaXRlIiwiY2FsbGJhY2siLCJjYWxsYmFja05ld2xpbmUiLCJsZXZlbCIsInMiLCJjb25zb2xlIiwibG9nIiwiYW55U3VwcG9ydGVkIiwiZm9yRWFjaCIsImVuZHBvaW50Iiwic3VwcG9ydGVkIiwiaXNTdXBwb3J0ZWQiLCJjb25zdHJ1Y3RvciIsImFkZCIsImlzQnVzeSIsImRlc2NyaXB0aW9uIiwic3ZnIiwicGxhdGZvcm0iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJibHVldG9vdGgiLCJjb25uZWN0aW9uIiwiYnRTZXJ2aWNlIiwidHhDaGFyYWN0ZXJpc3RpYyIsInJ4Q2hhcmFjdGVyaXN0aWMiLCJOT1JESUNfU0VSVklDRSIsImJ0U2VydmVyIiwidW5kZWZpbmVkIiwidHhEYXRhUXVldWUiLCJmbG93Q29udHJvbFhPRkYiLCJjaHVua1NpemUiLCJjbG9zZSIsImlzT3BlbmluZyIsImlzT3BlbiIsImVtaXQiLCJkaXNjb25uZWN0IiwicHVzaCIsIm1heExlbmd0aCIsIndyaXRlQ2h1bmsiLCJjaHVuayIsInNldFRpbWVvdXQiLCJ0eEl0ZW0iLCJzdWJzdHIiLCJ0eEluUHJvZ3Jlc3MiLCJ3cml0ZVZhbHVlIiwidGhlbiIsImNhdGNoIiwiZXJyb3IiLCJyZXF1ZXN0RGV2aWNlIiwiZmlsdGVycyIsIm5hbWVQcmVmaXgiLCJzZXJ2aWNlcyIsIm9wdGlvbmFsU2VydmljZXMiLCJkZXZpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2F0dCIsInNlcnZlciIsImdldFByaW1hcnlTZXJ2aWNlIiwic2VydmljZSIsImdldENoYXJhY3RlcmlzdGljIiwiY2hhcmFjdGVyaXN0aWMiLCJldmVudCIsImRhdGF2aWV3IiwidGFyZ2V0IiwiYnl0ZUxlbmd0aCIsImNoIiwiZ2V0VWludDgiLCJidWZmZXIiLCJzdGFydE5vdGlmaWNhdGlvbnMiLCJzZXJpYWwiLCJzZXJpYWxQb3J0IiwiZGlzY29ubmVjdGVkIiwicmVxdWVzdFBvcnQiLCJwb3J0Iiwib3BlbiIsImJhdWRSYXRlIiwicmVhZExvb3AiLCJyZWFkZXIiLCJyZWFkYWJsZSIsImdldFJlYWRlciIsInJlYWQiLCJkb25lIiwicmVsZWFzZUxvY2siLCJ3cml0ZXIiLCJ3cml0YWJsZSIsImdldFdyaXRlciIsIkRBVEFfV0FJVF9USU1FIiwiZGF0YVdhaXRUaW1lIiwiZXZ0IiwiZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm1lbnV0aXRsZSIsImNsYXNzTGlzdCIsIm1lbnVDb250ZW50IiwibWVudVRpdGxlIiwiaW5uZXJUZXh0IiwiYXBwZW5kQ2hpbGQiLCJtZW51Q2xvc2UiLCJpbm5lckhUTUwiLCJwIiwiZXAiLCJvbmNsaWNrIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVDaGlsZCIsImdldFdyaXR0ZW5EYXRhIiwic3RyX2NodW5rcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2JUaW1lb3V0Iiwib25Xcml0dGVuIiwibmV3TGluZUlkeCIsInJlY2VpdmVkIiwibCIsImNsZWFyVGltZW91dCIsIm1heFRpbWUiLCJtYXhEYXRhVGltZSIsInRpbWVvdXQiLCJoYWREYXRhIiwiZCIsImpzb24iLCJwYXJzZSIsInRyaW0iLCJ0b1N0cmluZyIsInNldFRpbWUiLCJEYXRlIiwiY21kIiwiZ2V0VGltZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiaXNDb25uZWN0ZWQiLCJnZXRDb25uZWN0aW9uIiwianMiLCJjc3MiLCJ2ZW5kb3IiLCJicm93c2VyIiwiaXNUb3VjaCIsImRvY3VtZW50RWxlbWVudCIsImpzQ3NzTWFwIiwiTW96IiwiTyIsIldlYmtpdCIsInN0eWxlIiwia2V5IiwicHJlZml4Iiwic3VwcG9ydGVkS2V5ZnJhbWVzIiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwicHJvcCIsImNvbG9yQWRqdXN0IiwicmVnRXhwIiwidG9VcHBlciIsIm1hdGNoIiwiYyIsInRvVXBwZXJDYXNlIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwicGFzY2FsaXplIiwiZWwiLCJtYXNrIiwibG9uZ2hhbmQiLCJ0ZXh0T3JpZW50YXRpb24iLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwid3JpdGluZ01vZGUiLCJ1c2VyU2VsZWN0IiwiYnJlYWtQcm9wc09sZCIsImlubGluZUxvZ2ljYWxPbGQiLCJuZXdQcm9wIiwidW5wcmVmaXhlZCIsInByZWZpeGVkIiwicGFzY2FsaXplZCIsInNjcm9sbFNuYXAiLCJzdWJzdHJpbmciLCJvdmVyc2Nyb2xsQmVoYXZpb3IiLCJwcm9wTWFwIiwib3JkZXIiLCJmbGV4MjAxMiIsInByb3BNYXAkMSIsImZsZXgiLCJwcm9wS2V5cyIsImtleXMiLCJwcmVmaXhDc3MiLCJmbGV4MjAwOSIsIl9yZWYiLCJtdWx0aXBsZSIsInBsdWdpbnMiLCJwcm9wZXJ0eURldGVjdG9ycyIsImEiLCJjYWNoZSIsImNvbXB1dGVkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImtleSQxIiwiaXNOYU4iLCJlbCQxIiwiY2FjaGUkMSIsInRyYW5zaXRpb25Qcm9wZXJ0aWVzIiwidHJhbnNQcm9wc1JlZ0V4cCIsInByZWZpeFRyYW5zaXRpb25DYWxsYmFjayIsInAxIiwicDIiLCJwcmVmaXhlZFZhbHVlIiwic3VwcG9ydGVkVmFsdWUiLCJwYXJzZUludCIsImNhY2hlS2V5IiwiU3ludGF4IiwiUHJlY2VkZW5jZSIsIkJpbmFyeVByZWNlZGVuY2UiLCJTb3VyY2VOb2RlIiwiZXN0cmF2ZXJzZSIsImVzdXRpbHMiLCJiYXNlIiwiaW5kZW50IiwicmVudW1iZXIiLCJoZXhhZGVjaW1hbCIsInF1b3RlcyIsImVzY2FwZWxlc3MiLCJuZXdsaW5lIiwic3BhY2UiLCJwYXJlbnRoZXNlcyIsInNlbWljb2xvbnMiLCJzYWZlQ29uY2F0ZW5hdGlvbiIsImRpcmVjdGl2ZSIsImV4dHJhIiwic291cmNlTWFwIiwic291cmNlQ29kZSIsInByZXNlcnZlQmxhbmtMaW5lcyIsIkZPUk1BVF9NSU5JRlkiLCJGT1JNQVRfREVGQVVMVFMiLCJpc1N0YXRlbWVudCIsIm5vZGUiLCJDb2RlR2VuZXJhdG9yIiwiU3RhdGVtZW50IiwiU2VxdWVuY2UiLCJZaWVsZCIsIkFzc2lnbm1lbnQiLCJDb25kaXRpb25hbCIsIkFycm93RnVuY3Rpb24iLCJMb2dpY2FsT1IiLCJMb2dpY2FsQU5EIiwiQml0d2lzZU9SIiwiQml0d2lzZVhPUiIsIkJpdHdpc2VBTkQiLCJFcXVhbGl0eSIsIlJlbGF0aW9uYWwiLCJCaXR3aXNlU0hJRlQiLCJBZGRpdGl2ZSIsIk11bHRpcGxpY2F0aXZlIiwiRXhwb25lbnRpYXRpb24iLCJBd2FpdCIsIlVuYXJ5IiwiUG9zdGZpeCIsIk9wdGlvbmFsQ2hhaW5pbmciLCJDYWxsIiwiTmV3IiwiVGFnZ2VkVGVtcGxhdGUiLCJNZW1iZXIiLCJQcmltYXJ5IiwiRl9TRU1JQ09MT05fT1BUIiwiU19URkZUIiwiRl9BTExPV19JTiIsInN0cmluZ1JlcGVhdCIsIm51bSIsInJlc3VsdCIsImVuZHNXaXRoTGluZVRlcm1pbmF0b3IiLCJsZW4iLCJpc0xpbmVUZXJtaW5hdG9yIiwibWVyZ2UiLCJvdmVycmlkZSIsInVwZGF0ZURlZXBseSIsImlzSGFzaE9iamVjdCIsIlJlZ0V4cCIsImVzY2FwZVJlZ0V4cENoYXJhY3RlciIsInByZXZpb3VzSXNCYWNrc2xhc2giLCJlc2NhcGVBbGxvd2VkQ2hhcmFjdGVyIiwibmV4dCIsImhleCIsInNsaWNlIiwiaXNEZWNpbWFsRGlnaXQiLCJlc2NhcGVEaXNhbGxvd2VkQ2hhcmFjdGVyIiwiRXJyb3IiLCJmbGF0dGVuVG9TdHJpbmciLCJhcnIiLCJpeiIsImVsZW0iLCJ0b1NvdXJjZU5vZGVXaGVuTmVlZGVkIiwiZ2VuZXJhdGVkIiwibG9jIiwic3RhcnQiLCJsaW5lIiwiY29sdW1uIiwibm9FbXB0eVNwYWNlIiwibGVmdFNvdXJjZSIsInJpZ2h0U291cmNlIiwibGVmdENoYXJDb2RlIiwicmlnaHRDaGFyQ29kZSIsImlzSWRlbnRpZmllclBhcnRFUzUiLCJpc1doaXRlU3BhY2UiLCJhZGRJbmRlbnQiLCJzdG10Iiwid2l0aEluZGVudCIsImZuIiwicHJldmlvdXNCYXNlIiwiZ2VuZXJhdGVDb21tZW50IiwiY29tbWVudCIsInNwZWNpYWxCYXNlIiwiZm9ybWF0IiwiYWRqdXN0TXVsdGlsaW5lQ29tbWVudCIsImFycmF5IiwiaiIsInNwYWNlcyIsInNuIiwiTnVtYmVyIiwiTUFYX1ZBTFVFIiwiYWRkQ29tbWVudHMiLCJzYXZlIiwidGFpbGluZ1RvU3RhdGVtZW50IiwiZnJhZ21lbnQiLCJleHRSYW5nZSIsInJhbmdlIiwicHJldlJhbmdlIiwiY291bnQiLCJsZWFkaW5nQ29tbWVudHMiLCJleHRlbmRlZFJhbmdlIiwiUHJvZ3JhbSIsInRyYWlsaW5nQ29tbWVudHMiLCJjYWxjdWxhdGVTcGFjZXMiLCJnZW5lcmF0ZUJsYW5rTGluZXMiLCJlbmQiLCJuZXdsaW5lQ291bnQiLCJwYXJlbnRoZXNpemUiLCJ0ZXh0IiwiY3VycmVudCIsInNob3VsZCIsImdlbmVyYXRlVmVyYmF0aW1TdHJpbmciLCJzdHJpbmciLCJnZW5lcmF0ZUlkZW50aWZpZXIiLCJnZW5lcmF0ZUFzeW5jUHJlZml4Iiwic3BhY2VSZXF1aXJlZCIsImFzeW5jIiwiZ2VuZXJhdGVTdGFyU3VmZml4IiwibW96Iiwic3Rhcmxlc3NHZW5lcmF0b3IiLCJnZW5lcmF0ZU1ldGhvZFByZWZpeCIsImdlbmVyYXRlSW50ZXJuYWwiLCJjb2RlZ2VuIiwiZ2VuZXJhdGVTdGF0ZW1lbnQiLCJFeHByZXNzaW9uIiwiaXNFeHByZXNzaW9uIiwiZ2VuZXJhdGVFeHByZXNzaW9uIiwicHJvdG90eXBlIiwibWF5YmVCbG9jayIsImZsYWdzIiwibm9MZWFkaW5nQ29tbWVudCIsInRoYXQiLCJCbG9ja1N0YXRlbWVudCIsIkVtcHR5U3RhdGVtZW50IiwibWF5YmVCbG9ja1N1ZmZpeCIsImVuZHMiLCJnZW5lcmF0ZVBhdHRlcm4iLCJwcmVjZWRlbmNlIiwiSWRlbnRpZmllciIsImdlbmVyYXRlRnVuY3Rpb25QYXJhbXMiLCJoYXNEZWZhdWx0IiwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24iLCJyZXN0IiwiZGVmYXVsdHMiLCJnZW5lcmF0ZUFzc2lnbm1lbnQiLCJnZW5lcmF0ZUZ1bmN0aW9uQm9keSIsImNoYXJBdCIsImdlbmVyYXRlSXRlcmF0aW9uRm9yU3RhdGVtZW50Iiwib3BlcmF0b3IiLCJhd2FpdCIsIlZhcmlhYmxlRGVjbGFyYXRpb24iLCJnZW5lcmF0ZVByb3BlcnR5S2V5Iiwic2VtaWNvbG9uIiwiYm9keUZsYWdzIiwiQnJlYWtTdGF0ZW1lbnQiLCJsYWJlbCIsIkNvbnRpbnVlU3RhdGVtZW50IiwiQ2xhc3NCb2R5IiwiQ2xhc3NEZWNsYXJhdGlvbiIsInN1cGVyQ2xhc3MiLCJEaXJlY3RpdmVTdGF0ZW1lbnQiLCJyYXciLCJxdW90ZSIsImVzY2FwZURpcmVjdGl2ZSIsIkRvV2hpbGVTdGF0ZW1lbnQiLCJDYXRjaENsYXVzZSIsImd1YXJkIiwicGFyYW0iLCJzcGxpY2UiLCJEZWJ1Z2dlclN0YXRlbWVudCIsIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvbiIsImRlY2xhcmF0aW9uIiwiRXhwb3J0TmFtZWREZWNsYXJhdGlvbiIsInNwZWNpZmllcnMiLCJFeHBvcnRCYXRjaFNwZWNpZmllciIsIkV4cG9ydEFsbERlY2xhcmF0aW9uIiwiRXhwcmVzc2lvblN0YXRlbWVudCIsImlzQ2xhc3NQcmVmaXhlZCIsImlzRnVuY3Rpb25QcmVmaXhlZCIsImlzQXN5bmNQcmVmaXhlZCIsIkxpdGVyYWwiLCJJbXBvcnREZWNsYXJhdGlvbiIsIkltcG9ydERlZmF1bHRTcGVjaWZpZXIiLCJJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIiLCJWYXJpYWJsZURlY2xhcmF0b3IiLCJpdGVtRmxhZ3MiLCJGX0FMTE9XX0NBTEwiLCJUaHJvd1N0YXRlbWVudCIsIlRyeVN0YXRlbWVudCIsImd1YXJkZWRIYW5kbGVycyIsImhhbmRsZXJzIiwiZmluYWxpemVyIiwiU3dpdGNoU3RhdGVtZW50IiwiZGlzY3JpbWluYW50IiwiU3dpdGNoQ2FzZSIsIklmU3RhdGVtZW50IiwiRm9yU3RhdGVtZW50IiwidXBkYXRlIiwiRm9ySW5TdGF0ZW1lbnQiLCJGb3JPZlN0YXRlbWVudCIsIkxhYmVsZWRTdGF0ZW1lbnQiLCJGdW5jdGlvbkRlY2xhcmF0aW9uIiwiUmV0dXJuU3RhdGVtZW50IiwiV2hpbGVTdGF0ZW1lbnQiLCJXaXRoU3RhdGVtZW50IiwiU2VxdWVuY2VFeHByZXNzaW9uIiwiZXhwcmVzc2lvbnMiLCJBc3NpZ25tZW50RXhwcmVzc2lvbiIsIkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsIkxvZ2ljYWxFeHByZXNzaW9uIiwiQmluYXJ5RXhwcmVzc2lvbiIsImxlZnRQcmVjZWRlbmNlIiwicmlnaHRQcmVjZWRlbmNlIiwiY3VycmVudFByZWNlZGVuY2UiLCJDYWxsRXhwcmVzc2lvbiIsIm9wdGlvbmFsIiwiQ2hhaW5FeHByZXNzaW9uIiwiTmV3RXhwcmVzc2lvbiIsIk1lbWJlckV4cHJlc3Npb24iLCJNZXRhUHJvcGVydHkiLCJtZXRhIiwiVW5hcnlFeHByZXNzaW9uIiwiWWllbGRFeHByZXNzaW9uIiwiZGVsZWdhdGUiLCJBd2FpdEV4cHJlc3Npb24iLCJhbGwiLCJVcGRhdGVFeHByZXNzaW9uIiwiRnVuY3Rpb25FeHByZXNzaW9uIiwiQXJyYXlQYXR0ZXJuIiwiQXJyYXlFeHByZXNzaW9uIiwiaXNQYXR0ZXJuIiwibXVsdGlsaW5lIiwiZWxlbWVudHMiLCJSZXN0RWxlbWVudCIsIkNsYXNzRXhwcmVzc2lvbiIsIk1ldGhvZERlZmluaXRpb24iLCJQcm9wZXJ0eSIsInNob3J0aGFuZCIsIkFzc2lnbm1lbnRQYXR0ZXJuIiwibWV0aG9kIiwiT2JqZWN0RXhwcmVzc2lvbiIsIk9iamVjdFBhdHRlcm4iLCJUaGlzRXhwcmVzc2lvbiIsIlN1cGVyIiwibG9jYWwiLCJJbXBvcnRTcGVjaWZpZXIiLCJpbXBvcnRlZCIsIkV4cG9ydFNwZWNpZmllciIsImV4cG9ydGVkIiwicmVnZXgiLCJwYXR0ZXJuIiwic2luZ2xlIiwic2luZ2xlUXVvdGVzIiwiZG91YmxlUXVvdGVzIiwiZXNjYXBlU3RyaW5nIiwicG9pbnQiLCJ0ZW1wIiwiZXhwb25lbnQiLCJwb3MiLCJNYXRoIiwiZmxvb3IiLCJnZW5lcmF0ZU51bWJlciIsInJlZyIsImNoYXJhY3RlckluQnJhY2siLCJnZW5lcmF0ZVJlZ0V4cCIsIkdlbmVyYXRvckV4cHJlc3Npb24iLCJDb21wcmVoZW5zaW9uRXhwcmVzc2lvbiIsImNvbXByZWhlbnNpb25FeHByZXNzaW9uU3RhcnRzV2l0aEFzc2lnbm1lbnQiLCJibG9ja3MiLCJDb21wcmVoZW5zaW9uQmxvY2siLCJvZiIsIlNwcmVhZEVsZW1lbnQiLCJUYWdnZWRUZW1wbGF0ZUV4cHJlc3Npb24iLCJ0YWciLCJxdWFzaSIsIlRlbXBsYXRlRWxlbWVudCIsIlRlbXBsYXRlTGl0ZXJhbCIsInF1YXNpcyIsIk1vZHVsZVNwZWNpZmllciIsIkltcG9ydEV4cHJlc3Npb24iLCJmbGFnIiwidmVyYmF0aW0iLCJnZW5lcmF0ZVZlcmJhdGltIiwicmVwbGFjZVJpZ2h0IiwiY29tcGFjdCIsInZlcnNpb24iLCJwYWlyIiwiZGVmYXVsdE9wdGlvbnMiLCJzb3VyY2VNYXBSb290Iiwic291cmNlTWFwV2l0aENvZGUiLCJnIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwiZmlsZSIsInNvdXJjZVJvb3QiLCJzb3VyY2VDb250ZW50Iiwic2V0U291cmNlQ29udGVudCIsImF0dGFjaENvbW1lbnRzIiwiY2xvbmUiLCJWaXNpdG9yT3B0aW9uIiwiVmlzaXRvcktleXMiLCJCUkVBSyIsIlNLSVAiLCJSRU1PVkUiLCJkZWVwQ29weSIsIm9iaiIsInJldCIsIlJlZmVyZW5jZSIsInBhcmVudCIsIkVsZW1lbnQiLCJwYXRoIiwid3JhcCIsInJlZiIsIkNvbnRyb2xsZXIiLCJpc05vZGUiLCJpc1Byb3BlcnR5Iiwibm9kZVR5cGUiLCJjYW5kaWRhdGVFeGlzdHNJbkxlYXZlTGlzdCIsImxlYXZlbGlzdCIsImNhbmRpZGF0ZSIsInRyYXZlcnNlIiwicm9vdCIsInZpc2l0b3IiLCJleHRlbmRDb21tZW50UmFuZ2UiLCJ0b2tlbnMiLCJkaWZmIiwidXBwZXJCb3VuZCIsInRva2VuIiwiUHJpdmF0ZUlkZW50aWZpZXIiLCJQcm9wZXJ0eURlZmluaXRpb24iLCJCcmVhayIsIlNraXAiLCJSZW1vdmUiLCJyZW1vdmUiLCJqeiIsImFkZFRvUGF0aCIsIl9fY3VycmVudCIsIl9fbGVhdmVsaXN0IiwicGFyZW50cyIsIl9fZXhlY3V0ZSIsImVsZW1lbnQiLCJwcmV2aW91cyIsIl9fc3RhdGUiLCJub3RpZnkiLCJza2lwIiwiX19pbml0aWFsaXplIiwiX193b3JrbGlzdCIsIl9fZmFsbGJhY2siLCJmYWxsYmFjayIsIl9fa2V5cyIsImNyZWF0ZSIsIndvcmtsaXN0IiwiY3VycmVudDIiLCJjYW5kaWRhdGVzIiwic2VudGluZWwiLCJwb3AiLCJlbnRlciIsImxlYXZlIiwib3V0ZXIiLCJyZW1vdmVFbGVtIiwibmV4dEVsZW0iLCJ0cmVlIiwicHJvdmlkZWRDb21tZW50cyIsImNvbW1lbnRzIiwiY2xvbmVFbnZpcm9ubWVudCIsImZhY3RvcnkiLCJtb2R1bGVzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZUlkIiwibW9kdWxlIiwibG9hZGVkIiwibSIsImNvbW1lbnRfaGFuZGxlcl8xIiwianN4X3BhcnNlcl8xIiwicGFyc2VyXzEiLCJ0b2tlbml6ZXJfMSIsImNvbW1lbnRIYW5kbGVyIiwicHJveHlEZWxlZ2F0ZSIsIm1ldGFkYXRhIiwidmlzaXQiLCJwYXJzZXJEZWxlZ2F0ZSIsImNvbGxlY3RDb21tZW50IiwiYXR0YWNoQ29tbWVudCIsIkNvbW1lbnRIYW5kbGVyIiwicGFyc2VyIiwiaXNNb2R1bGUiLCJzb3VyY2VUeXBlIiwianN4IiwiSlNYUGFyc2VyIiwiUGFyc2VyIiwiY29uZmlnIiwidG9sZXJhbnQiLCJlcnJvcnMiLCJlcnJvckhhbmRsZXIiLCJwYXJzaW5nT3B0aW9ucyIsInRva2VuaXplIiwidG9rZW5pemVyIiwiVG9rZW5pemVyIiwiZ2V0TmV4dFRva2VuIiwidG9sZXJhdGUiLCJzeW50YXhfMSIsInN0YWNrIiwibGVhZGluZyIsInRyYWlsaW5nIiwiaW5zZXJ0SW5uZXJDb21tZW50cyIsImlubmVyQ29tbWVudHMiLCJlbnRyeSIsIm9mZnNldCIsInVuc2hpZnQiLCJmaW5kVHJhaWxpbmdDb21tZW50cyIsImVudHJ5XzEiLCJmaXJzdENvbW1lbnQiLCJmaW5kTGVhZGluZ0NvbW1lbnRzIiwidmlzaXROb2RlIiwidmlzaXRDb21tZW50IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYiIsIl9fIiwiY2hhcmFjdGVyXzEiLCJKU1hOb2RlIiwianN4X3N5bnRheF8xIiwiTm9kZSIsInRva2VuXzEiLCJ4aHRtbF9lbnRpdGllc18xIiwiZ2V0UXVhbGlmaWVkRWxlbWVudE5hbWUiLCJlbGVtZW50TmFtZSIsInF1YWxpZmllZE5hbWUiLCJKU1hTeW50YXgiLCJKU1hJZGVudGlmaWVyIiwiSlNYTmFtZXNwYWNlZE5hbWUiLCJucyIsIm5hbWVzcGFjZSIsIkpTWE1lbWJlckV4cHJlc3Npb24iLCJUb2tlbk5hbWUiLCJfc3VwZXIiLCJwYXJzZVByaW1hcnlFeHByZXNzaW9uIiwicGFyc2VKU1hSb290Iiwic3RhcnRKU1giLCJzY2FubmVyIiwiaW5kZXgiLCJzdGFydE1hcmtlciIsImxpbmVOdW1iZXIiLCJsaW5lU3RhcnQiLCJmaW5pc2hKU1giLCJuZXh0VG9rZW4iLCJyZWVudGVySlNYIiwiZXhwZWN0SlNYIiwiY3JlYXRlSlNYTm9kZSIsImNvbGxlY3RDb21tZW50cyIsImNyZWF0ZUpTWENoaWxkTm9kZSIsInNjYW5YSFRNTEVudGl0eSIsInZhbGlkIiwidGVybWluYXRlZCIsIm51bWVyaWMiLCJlb2YiLCJDaGFyYWN0ZXIiLCJpc0hleERpZ2l0IiwiWEhUTUxFbnRpdGllcyIsImxleEpTWCIsImNwIiwibjEiLCJuMiIsImlzSWRlbnRpZmllclN0YXJ0IiwiaXNJZGVudGlmaWVyUGFydCIsImxleCIsIm5leHRKU1hUb2tlbiIsImxhc3RNYXJrZXIiLCJjb252ZXJ0VG9rZW4iLCJuZXh0SlNYVGV4dCIsInBlZWtKU1hUb2tlbiIsInNhdmVTdGF0ZSIsInNjYW5Db21tZW50cyIsInJlc3RvcmVTdGF0ZSIsInRocm93VW5leHBlY3RlZFRva2VuIiwibWF0Y2hKU1giLCJwYXJzZUpTWElkZW50aWZpZXIiLCJmaW5hbGl6ZSIsInBhcnNlSlNYRWxlbWVudE5hbWUiLCJuYW1lXzEiLCJwYXJzZUpTWEF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lIiwiaWRlbnRpZmllciIsIm5hbWVfMiIsInBhcnNlSlNYU3RyaW5nTGl0ZXJhbEF0dHJpYnV0ZSIsImdldFRva2VuUmF3IiwicGFyc2VKU1hFeHByZXNzaW9uQXR0cmlidXRlIiwidG9sZXJhdGVFcnJvciIsInBhcnNlQXNzaWdubWVudEV4cHJlc3Npb24iLCJKU1hFeHByZXNzaW9uQ29udGFpbmVyIiwicGFyc2VKU1hBdHRyaWJ1dGVWYWx1ZSIsInBhcnNlSlNYRWxlbWVudCIsInBhcnNlSlNYTmFtZVZhbHVlQXR0cmlidXRlIiwiSlNYQXR0cmlidXRlIiwicGFyc2VKU1hTcHJlYWRBdHRyaWJ1dGUiLCJKU1hTcHJlYWRBdHRyaWJ1dGUiLCJwYXJzZUpTWEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwicGFyc2VKU1hPcGVuaW5nRWxlbWVudCIsInNlbGZDbG9zaW5nIiwiSlNYT3BlbmluZ0VsZW1lbnQiLCJwYXJzZUpTWEJvdW5kYXJ5RWxlbWVudCIsIm5hbWVfMyIsIkpTWENsb3NpbmdFbGVtZW50IiwicGFyc2VKU1hFbXB0eUV4cHJlc3Npb24iLCJKU1hFbXB0eUV4cHJlc3Npb24iLCJwYXJzZUpTWEV4cHJlc3Npb25Db250YWluZXIiLCJwYXJzZUpTWENoaWxkcmVuIiwiY2hpbGRyZW4iLCJjaGlsZCIsIkpTWFRleHQiLCJjb250YWluZXIiLCJwYXJzZUNvbXBsZXhKU1hFbGVtZW50IiwiY29uY2F0Iiwib3BlbmluZyIsIkpTWEVsZW1lbnQiLCJjbG9zaW5nIiwib3Blbl8xIiwiaXNTdGFydE9mRXhwcmVzc2lvbiIsIlJlZ2V4IiwiTm9uQXNjaWlJZGVudGlmaWVyU3RhcnQiLCJOb25Bc2NpaUlkZW50aWZpZXJQYXJ0IiwiZnJvbUNvZGVQb2ludCIsImlzT2N0YWxEaWdpdCIsIm9wZW5pbmdFbGVtZW50IiwiY2xvc2luZ0VsZW1lbnQiLCJBc3luY0Fycm93RnVuY3Rpb25FeHByZXNzaW9uIiwiQXN5bmNGdW5jdGlvbkRlY2xhcmF0aW9uIiwiQXN5bmNGdW5jdGlvbkV4cHJlc3Npb24iLCJsb2dpY2FsIiwiYXJncyIsIkNvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbiIsIkRpcmVjdGl2ZSIsImVhY2giLCJpc1N0YXRpYyIsInN0YXRpYyIsIk1vZHVsZSIsIlJlZ2V4TGl0ZXJhbCIsIlNjcmlwdCIsIlN0YXRpY01lbWJlckV4cHJlc3Npb24iLCJ0YWlsIiwiYXNzZXJ0XzEiLCJlcnJvcl9oYW5kbGVyXzEiLCJtZXNzYWdlc18xIiwic2Nhbm5lcl8xIiwiQXJyb3dQYXJhbWV0ZXJQbGFjZUhvbGRlciIsIkVycm9ySGFuZGxlciIsIlNjYW5uZXIiLCJ0cmFja0NvbW1lbnQiLCJvcGVyYXRvclByZWNlZGVuY2UiLCJsb29rYWhlYWQiLCJoYXNMaW5lVGVybWluYXRvciIsImNvbnRleHQiLCJhbGxvd0luIiwiYWxsb3dTdHJpY3REaXJlY3RpdmUiLCJhbGxvd1lpZWxkIiwiZmlyc3RDb3ZlckluaXRpYWxpemVkTmFtZUVycm9yIiwiaXNBc3NpZ25tZW50VGFyZ2V0IiwiaXNCaW5kaW5nRWxlbWVudCIsImluRnVuY3Rpb25Cb2R5IiwiaW5JdGVyYXRpb24iLCJpblN3aXRjaCIsImxhYmVsU2V0Iiwic3RyaWN0IiwidGhyb3dFcnJvciIsIm1lc3NhZ2VGb3JtYXQiLCJ2YWx1ZXMiLCJfaSIsIm1zZyIsIndob2xlIiwiaWR4IiwiYXNzZXJ0IiwiY3JlYXRlRXJyb3IiLCJ1bmV4cGVjdGVkVG9rZW5FcnJvciIsIm1lc3NhZ2UiLCJNZXNzYWdlcyIsIlVuZXhwZWN0ZWRUb2tlbiIsIlVuZXhwZWN0ZWRFT1MiLCJVbmV4cGVjdGVkSWRlbnRpZmllciIsIlVuZXhwZWN0ZWROdW1iZXIiLCJVbmV4cGVjdGVkU3RyaW5nIiwiVW5leHBlY3RlZFRlbXBsYXRlIiwiaXNGdXR1cmVSZXNlcnZlZFdvcmQiLCJVbmV4cGVjdGVkUmVzZXJ2ZWQiLCJpc1N0cmljdE1vZGVSZXNlcnZlZFdvcmQiLCJTdHJpY3RSZXNlcnZlZFdvcmQiLCJsYXN0TWFya2VyTGluZVN0YXJ0IiwidG9sZXJhdGVVbmV4cGVjdGVkVG9rZW4iLCJtdWx0aUxpbmUiLCJ0IiwibmV4dFJlZ2V4VG9rZW4iLCJzY2FuUmVnRXhwIiwiY3JlYXRlTm9kZSIsInN0YXJ0Tm9kZSIsImxhc3RMaW5lU3RhcnQiLCJtYXJrZXIiLCJleHBlY3QiLCJleHBlY3RDb21tYVNlcGFyYXRvciIsImV4cGVjdEtleXdvcmQiLCJrZXl3b3JkIiwibWF0Y2hLZXl3b3JkIiwibWF0Y2hDb250ZXh0dWFsS2V5d29yZCIsIm1hdGNoQXNzaWduIiwib3AiLCJpc29sYXRlQ292ZXJHcmFtbWFyIiwicGFyc2VGdW5jdGlvbiIsInByZXZpb3VzSXNCaW5kaW5nRWxlbWVudCIsInByZXZpb3VzSXNBc3NpZ25tZW50VGFyZ2V0IiwicHJldmlvdXNGaXJzdENvdmVySW5pdGlhbGl6ZWROYW1lRXJyb3IiLCJpbmhlcml0Q292ZXJHcmFtbWFyIiwiY29uc3VtZVNlbWljb2xvbiIsIm1hdGNoQXN5bmNGdW5jdGlvbiIsInBhcnNlRnVuY3Rpb25FeHByZXNzaW9uIiwib2N0YWwiLCJTdHJpY3RPY3RhbExpdGVyYWwiLCJwYXJzZVRlbXBsYXRlTGl0ZXJhbCIsInBhcnNlR3JvdXBFeHByZXNzaW9uIiwicGFyc2VBcnJheUluaXRpYWxpemVyIiwicGFyc2VPYmplY3RJbml0aWFsaXplciIsInBhcnNlSWRlbnRpZmllck5hbWUiLCJwYXJzZUNsYXNzRXhwcmVzc2lvbiIsInBhcnNlU3ByZWFkRWxlbWVudCIsImFyZyIsInBhcnNlUHJvcGVydHlNZXRob2QiLCJwcmV2aW91c1N0cmljdCIsInByZXZpb3VzQWxsb3dTdHJpY3REaXJlY3RpdmUiLCJzaW1wbGUiLCJwYXJzZUZ1bmN0aW9uU291cmNlRWxlbWVudHMiLCJmaXJzdFJlc3RyaWN0ZWQiLCJzdHJpY3RlZCIsInBhcnNlUHJvcGVydHlNZXRob2RGdW5jdGlvbiIsInByZXZpb3VzQWxsb3dZaWVsZCIsInBhcnNlRm9ybWFsUGFyYW1ldGVycyIsInBhcnNlUHJvcGVydHlNZXRob2RBc3luY0Z1bmN0aW9uIiwicHJldmlvdXNBd2FpdCIsInBhcnNlT2JqZWN0UHJvcGVydHlLZXkiLCJpc1Byb3BlcnR5S2V5IiwicGFyc2VPYmplY3RQcm9wZXJ0eSIsImhhc1Byb3RvIiwiaXNBc3luYyIsImxvb2thaGVhZFByb3BlcnR5S2V5IiwicXVhbGlmaWVkUHJvcGVydHlOYW1lIiwicGFyc2VHZXR0ZXJNZXRob2QiLCJwYXJzZVNldHRlck1ldGhvZCIsInBhcnNlR2VuZXJhdG9yTWV0aG9kIiwiRHVwbGljYXRlUHJvdG9Qcm9wZXJ0eSIsInBhcnNlVGVtcGxhdGVIZWFkIiwiaGVhZCIsImNvb2tlZCIsInBhcnNlVGVtcGxhdGVFbGVtZW50IiwicGFyc2VFeHByZXNzaW9uIiwicmVpbnRlcnByZXRFeHByZXNzaW9uQXNQYXR0ZXJuIiwic3RhcnRUb2tlbiIsInBhcnNlUmVzdEVsZW1lbnQiLCJhcnJvdyIsInBhcmFtZXRlcnMiLCJwYXJzZUFyZ3VtZW50cyIsImlzSWRlbnRpZmllck5hbWUiLCJwYXJzZU5ld0V4cHJlc3Npb24iLCJwYXJzZUxlZnRIYW5kU2lkZUV4cHJlc3Npb24iLCJwYXJzZUFzeW5jQXJndW1lbnQiLCJwYXJzZUFzeW5jQXJndW1lbnRzIiwicGFyc2VMZWZ0SGFuZFNpZGVFeHByZXNzaW9uQWxsb3dDYWxsIiwibWF5YmVBc3luYyIsInByZXZpb3VzQWxsb3dJbiIsImFzeW5jQXJyb3ciLCJwYXJzZVN1cGVyIiwicGFyc2VVcGRhdGVFeHByZXNzaW9uIiwicGFyc2VVbmFyeUV4cHJlc3Npb24iLCJpc1Jlc3RyaWN0ZWRXb3JkIiwiU3RyaWN0TEhTUHJlZml4IiwiSW52YWxpZExIU0luQXNzaWdubWVudCIsIlN0cmljdExIU1Bvc3RmaXgiLCJwYXJzZUF3YWl0RXhwcmVzc2lvbiIsIlN0cmljdERlbGV0ZSIsInBhcnNlRXhwb25lbnRpYXRpb25FeHByZXNzaW9uIiwiYmluYXJ5UHJlY2VkZW5jZSIsInBhcnNlQmluYXJ5RXhwcmVzc2lvbiIsInByZWMiLCJtYXJrZXJzIiwicHJlY2VkZW5jZXMiLCJwYXJzZUNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImNoZWNrUGF0dGVyblBhcmFtIiwidmFsaWRhdGVQYXJhbSIsInJlaW50ZXJwcmV0QXNDb3ZlckZvcm1hbHNMaXN0IiwicGFyYW1TZXQiLCJTdHJpY3RQYXJhbUR1cGUiLCJwYXJzZVlpZWxkRXhwcmVzc2lvbiIsImxpc3QiLCJTdHJpY3RMSFNBc3NpZ25tZW50IiwicGFyc2VTdGF0ZW1lbnRMaXN0SXRlbSIsInN0YXRlbWVudCIsIklsbGVnYWxFeHBvcnREZWNsYXJhdGlvbiIsInBhcnNlRXhwb3J0RGVjbGFyYXRpb24iLCJJbGxlZ2FsSW1wb3J0RGVjbGFyYXRpb24iLCJwYXJzZUltcG9ydERlY2xhcmF0aW9uIiwicGFyc2VMZXhpY2FsRGVjbGFyYXRpb24iLCJpbkZvciIsInBhcnNlRnVuY3Rpb25EZWNsYXJhdGlvbiIsInBhcnNlQ2xhc3NEZWNsYXJhdGlvbiIsImlzTGV4aWNhbERlY2xhcmF0aW9uIiwicGFyc2VTdGF0ZW1lbnQiLCJwYXJzZUJsb2NrIiwicGFyc2VMZXhpY2FsQmluZGluZyIsInBhcnNlUGF0dGVybiIsIlN0cmljdFZhck5hbWUiLCJEZWNsYXJhdGlvbk1pc3NpbmdJbml0aWFsaXplciIsInBhcnNlQmluZGluZ0xpc3QiLCJwYXJzZUJpbmRpbmdSZXN0RWxlbWVudCIsInBhcnNlQXJyYXlQYXR0ZXJuIiwicGFyc2VQYXR0ZXJuV2l0aERlZmF1bHQiLCJwYXJzZVByb3BlcnR5UGF0dGVybiIsImtleVRva2VuIiwicGFyc2VWYXJpYWJsZUlkZW50aWZpZXIiLCJwYXJzZU9iamVjdFBhdHRlcm4iLCJMZXRJbkxleGljYWxCaW5kaW5nIiwicGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uIiwicGFyc2VWYXJpYWJsZURlY2xhcmF0aW9uTGlzdCIsIm9wdCIsInBhcnNlVmFyaWFibGVTdGF0ZW1lbnQiLCJwYXJzZUVtcHR5U3RhdGVtZW50IiwicGFyc2VFeHByZXNzaW9uU3RhdGVtZW50IiwicGFyc2VJZkNsYXVzZSIsIlN0cmljdEZ1bmN0aW9uIiwicGFyc2VJZlN0YXRlbWVudCIsInBhcnNlRG9XaGlsZVN0YXRlbWVudCIsInByZXZpb3VzSW5JdGVyYXRpb24iLCJwYXJzZVdoaWxlU3RhdGVtZW50IiwicGFyc2VGb3JTdGF0ZW1lbnQiLCJmb3JJbiIsImRlY2wiLCJGb3JJbk9mTG9vcEluaXRpYWxpemVyIiwiaW5pdFN0YXJ0VG9rZW4iLCJJbnZhbGlkTEhTSW5Gb3JJbiIsIkludmFsaWRMSFNJbkZvckxvb3AiLCJpbml0U2VxIiwicGFyc2VDb250aW51ZVN0YXRlbWVudCIsIlVua25vd25MYWJlbCIsIklsbGVnYWxDb250aW51ZSIsInBhcnNlQnJlYWtTdGF0ZW1lbnQiLCJJbGxlZ2FsQnJlYWsiLCJwYXJzZVJldHVyblN0YXRlbWVudCIsIklsbGVnYWxSZXR1cm4iLCJwYXJzZVdpdGhTdGF0ZW1lbnQiLCJTdHJpY3RNb2RlV2l0aCIsInBhcnNlU3dpdGNoQ2FzZSIsInBhcnNlU3dpdGNoU3RhdGVtZW50IiwicHJldmlvdXNJblN3aXRjaCIsImRlZmF1bHRGb3VuZCIsImNsYXVzZSIsIk11bHRpcGxlRGVmYXVsdHNJblN3aXRjaCIsInBhcnNlTGFiZWxsZWRTdGF0ZW1lbnQiLCJSZWRlY2xhcmF0aW9uIiwiR2VuZXJhdG9ySW5MZWdhY3lDb250ZXh0IiwicGFyc2VUaHJvd1N0YXRlbWVudCIsIk5ld2xpbmVBZnRlclRocm93IiwicGFyc2VDYXRjaENsYXVzZSIsInBhcmFtTWFwIiwiRHVwbGljYXRlQmluZGluZyIsIlN0cmljdENhdGNoVmFyaWFibGUiLCJwYXJzZUZpbmFsbHlDbGF1c2UiLCJwYXJzZVRyeVN0YXRlbWVudCIsIk5vQ2F0Y2hPckZpbmFsbHkiLCJwYXJzZURlYnVnZ2VyU3RhdGVtZW50IiwicGFyc2VEaXJlY3RpdmVQcm9sb2d1ZXMiLCJwcmV2aW91c0xhYmVsU2V0IiwicHJldmlvdXNJbkZ1bmN0aW9uQm9keSIsIlN0cmljdFBhcmFtTmFtZSIsImNvbmZpZ3VyYWJsZSIsIkRlZmF1bHRSZXN0UGFyYW1ldGVyIiwiUGFyYW1ldGVyQWZ0ZXJSZXN0UGFyYW1ldGVyIiwicGFyc2VGb3JtYWxQYXJhbWV0ZXIiLCJpZGVudGlmaWVySXNPcHRpb25hbCIsImlzR2VuZXJhdG9yIiwiU3RyaWN0RnVuY3Rpb25OYW1lIiwicHJldmlvdXNBbGxvd0F3YWl0IiwiZm9ybWFsUGFyYW1ldGVycyIsInBhcnNlRGlyZWN0aXZlIiwiSWxsZWdhbExhbmd1YWdlTW9kZURpcmVjdGl2ZSIsIkJhZEdldHRlckFyaXR5IiwiQmFkU2V0dGVyQXJpdHkiLCJCYWRTZXR0ZXJSZXN0UGFyYW1ldGVyIiwicGFyc2VDbGFzc0VsZW1lbnQiLCJoYXNDb25zdHJ1Y3RvciIsInB1bmN0dWF0b3IiLCJDb25zdHJ1Y3RvcklzQXN5bmMiLCJTdGF0aWNQcm90b3R5cGUiLCJDb25zdHJ1Y3RvclNwZWNpYWxNZXRob2QiLCJEdXBsaWNhdGVDb25zdHJ1Y3RvciIsInBhcnNlQ2xhc3NFbGVtZW50TGlzdCIsInBhcnNlQ2xhc3NCb2R5IiwiZWxlbWVudExpc3QiLCJjbGFzc0JvZHkiLCJwYXJzZU1vZHVsZVNwZWNpZmllciIsIkludmFsaWRNb2R1bGVTcGVjaWZpZXIiLCJwYXJzZUltcG9ydFNwZWNpZmllciIsInBhcnNlTmFtZWRJbXBvcnRzIiwicGFyc2VJbXBvcnREZWZhdWx0U3BlY2lmaWVyIiwicGFyc2VJbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIiLCJOb0FzQWZ0ZXJJbXBvcnROYW1lc3BhY2UiLCJzcmMiLCJNaXNzaW5nRnJvbUNsYXVzZSIsInBhcnNlRXhwb3J0U3BlY2lmaWVyIiwiZXhwb3J0RGVjbGFyYXRpb24iLCJpc0V4cG9ydEZyb21JZGVudGlmaWVyIiwiY29uZGl0aW9uIiwicmVjb3JkRXJyb3IiLCJjb25zdHJ1Y3RFcnJvciIsImNvbCIsIkludmFsaWRFc2NhcGVkUmVzZXJ2ZWRXb3JkIiwiSW52YWxpZEhleEVzY2FwZVNlcXVlbmNlIiwiSW52YWxpZFJlZ0V4cCIsIlRlbXBsYXRlT2N0YWxMaXRlcmFsIiwiVW5leHBlY3RlZFRva2VuSWxsZWdhbCIsIlVudGVybWluYXRlZFJlZ0V4cCIsImhleFZhbHVlIiwidG9Mb3dlckNhc2UiLCJvY3RhbFZhbHVlIiwiY3VybHlTdGFjayIsInNraXBTaW5nbGVMaW5lQ29tbWVudCIsInNraXBNdWx0aUxpbmVDb21tZW50IiwiaXNLZXl3b3JkIiwiY29kZVBvaW50QXQiLCJzZWNvbmQiLCJzY2FuSGV4RXNjYXBlIiwic2NhblVuaWNvZGVDb2RlUG9pbnRFc2NhcGUiLCJnZXRJZGVudGlmaWVyIiwiZ2V0Q29tcGxleElkZW50aWZpZXIiLCJvY3RhbFRvRGVjaW1hbCIsInNjYW5JZGVudGlmaWVyIiwicmVzdG9yZSIsInNjYW5QdW5jdHVhdG9yIiwic2NhbkhleExpdGVyYWwiLCJzY2FuQmluYXJ5TGl0ZXJhbCIsInNjYW5PY3RhbExpdGVyYWwiLCJpc0ltcGxpY2l0T2N0YWxMaXRlcmFsIiwic2Nhbk51bWVyaWNMaXRlcmFsIiwicGFyc2VGbG9hdCIsInNjYW5TdHJpbmdMaXRlcmFsIiwidW5lc2NhcGVkXzEiLCJ1bmVzY2FwZWQiLCJvY3RUb0RlYyIsInNjYW5UZW1wbGF0ZSIsInJhd09mZnNldCIsInVuZXNjYXBlZF8yIiwidGVzdFJlZ0V4cCIsInRtcCIsInNlbGYiLCIkMCIsIiQxIiwiJDIiLCJjb2RlUG9pbnQiLCJleGNlcHRpb24iLCJzY2FuUmVnRXhwQm9keSIsImNsYXNzTWFya2VyIiwic2NhblJlZ0V4cEZsYWdzIiwiY2hhciIsInF1b3QiLCJhbXAiLCJhcG9zIiwiZ3QiLCJuYnNwIiwiaWV4Y2wiLCJjZW50IiwicG91bmQiLCJjdXJyZW4iLCJ5ZW4iLCJicnZiYXIiLCJzZWN0IiwidW1sIiwiY29weSIsIm9yZGYiLCJsYXF1byIsIm5vdCIsInNoeSIsIm1hY3IiLCJkZWciLCJwbHVzbW4iLCJzdXAyIiwic3VwMyIsImFjdXRlIiwibWljcm8iLCJwYXJhIiwibWlkZG90IiwiY2VkaWwiLCJzdXAxIiwib3JkbSIsInJhcXVvIiwiZnJhYzE0IiwiZnJhYzEyIiwiZnJhYzM0IiwiaXF1ZXN0IiwiQWdyYXZlIiwiQWFjdXRlIiwiQWNpcmMiLCJBdGlsZGUiLCJBdW1sIiwiQXJpbmciLCJBRWxpZyIsIkNjZWRpbCIsIkVncmF2ZSIsIkVhY3V0ZSIsIkVjaXJjIiwiRXVtbCIsIklncmF2ZSIsIklhY3V0ZSIsIkljaXJjIiwiSXVtbCIsIkVUSCIsIk50aWxkZSIsIk9ncmF2ZSIsIk9hY3V0ZSIsIk9jaXJjIiwiT3RpbGRlIiwiT3VtbCIsInRpbWVzIiwiT3NsYXNoIiwiVWdyYXZlIiwiVWFjdXRlIiwiVWNpcmMiLCJVdW1sIiwiWWFjdXRlIiwiVEhPUk4iLCJzemxpZyIsImFncmF2ZSIsImFhY3V0ZSIsImFjaXJjIiwiYXRpbGRlIiwiYXVtbCIsImFyaW5nIiwiYWVsaWciLCJjY2VkaWwiLCJlZ3JhdmUiLCJlYWN1dGUiLCJlY2lyYyIsImV1bWwiLCJpZ3JhdmUiLCJpYWN1dGUiLCJpY2lyYyIsIml1bWwiLCJldGgiLCJudGlsZGUiLCJvZ3JhdmUiLCJvYWN1dGUiLCJvY2lyYyIsIm90aWxkZSIsIm91bWwiLCJkaXZpZGUiLCJvc2xhc2giLCJ1Z3JhdmUiLCJ1YWN1dGUiLCJ1Y2lyYyIsInV1bWwiLCJ5YWN1dGUiLCJ0aG9ybiIsInl1bWwiLCJPRWxpZyIsIm9lbGlnIiwiU2Nhcm9uIiwic2Nhcm9uIiwiWXVtbCIsImZub2YiLCJjaXJjIiwidGlsZGUiLCJBbHBoYSIsIkJldGEiLCJHYW1tYSIsIkRlbHRhIiwiRXBzaWxvbiIsIlpldGEiLCJFdGEiLCJUaGV0YSIsIklvdGEiLCJLYXBwYSIsIkxhbWJkYSIsIk11IiwiTnUiLCJYaSIsIk9taWNyb24iLCJQaSIsIlJobyIsIlNpZ21hIiwiVGF1IiwiVXBzaWxvbiIsIlBoaSIsIkNoaSIsIlBzaSIsIk9tZWdhIiwiYWxwaGEiLCJiZXRhIiwiZ2FtbWEiLCJkZWx0YSIsImVwc2lsb24iLCJ6ZXRhIiwiZXRhIiwidGhldGEiLCJpb3RhIiwia2FwcGEiLCJsYW1iZGEiLCJtdSIsIm51IiwieGkiLCJvbWljcm9uIiwicGkiLCJyaG8iLCJzaWdtYWYiLCJzaWdtYSIsInRhdSIsInVwc2lsb24iLCJwaGkiLCJjaGkiLCJwc2kiLCJvbWVnYSIsInRoZXRhc3ltIiwidXBzaWgiLCJwaXYiLCJlbnNwIiwiZW1zcCIsInRoaW5zcCIsInp3bmoiLCJ6d2oiLCJscm0iLCJybG0iLCJuZGFzaCIsIm1kYXNoIiwibHNxdW8iLCJyc3F1byIsInNicXVvIiwibGRxdW8iLCJyZHF1byIsImJkcXVvIiwiZGFnZ2VyIiwiRGFnZ2VyIiwiYnVsbCIsImhlbGxpcCIsInBlcm1pbCIsInByaW1lIiwiUHJpbWUiLCJsc2FxdW8iLCJyc2FxdW8iLCJvbGluZSIsImZyYXNsIiwiZXVybyIsImltYWdlIiwid2VpZXJwIiwicmVhbCIsInRyYWRlIiwiYWxlZnN5bSIsImxhcnIiLCJ1YXJyIiwicmFyciIsImRhcnIiLCJoYXJyIiwiY3JhcnIiLCJsQXJyIiwidUFyciIsInJBcnIiLCJkQXJyIiwiaEFyciIsImZvcmFsbCIsInBhcnQiLCJleGlzdCIsImVtcHR5IiwibmFibGEiLCJpc2luIiwibm90aW4iLCJuaSIsInByb2QiLCJzdW0iLCJtaW51cyIsImxvd2FzdCIsInJhZGljIiwiaW5maW4iLCJhbmciLCJhbmQiLCJvciIsImNhcCIsImN1cCIsImludCIsInRoZXJlNCIsInNpbSIsImNvbmciLCJhc3ltcCIsIm5lIiwiZXF1aXYiLCJsZSIsImdlIiwic3ViIiwic3VwIiwibnN1YiIsInN1YmUiLCJzdXBlIiwib3BsdXMiLCJvdGltZXMiLCJwZXJwIiwic2RvdCIsImxjZWlsIiwicmNlaWwiLCJsZmxvb3IiLCJyZmxvb3IiLCJsb3oiLCJzcGFkZXMiLCJjbHVicyIsImhlYXJ0cyIsImRpYW1zIiwibGFuZyIsInJhbmciLCJSZWFkZXIiLCJjdXJseSIsInBhcmVuIiwiYmVmb3JlRnVuY3Rpb25FeHByZXNzaW9uIiwiaXNSZWdleFN0YXJ0IiwiY2hlY2siLCJ0cmFja1JhbmdlIiwidHJhY2tMb2MiLCJ0cmFpbGluZ1N0YXRlbWVudCIsImlzSXRlcmF0aW9uU3RhdGVtZW50IiwiaXNTb3VyY2VFbGVtZW50IiwiaXNQcm9ibGVtYXRpY0lmU3RhdGVtZW50IiwiRVM2UmVnZXgiLCJFUzVSZWdleCIsIk5PTl9BU0NJSV9XSElURVNQQUNFUyIsIklERU5USUZJRVJfU1RBUlQiLCJJREVOVElGSUVSX1BBUlQiLCJpc0lkZW50aWZpZXJTdGFydEVTNSIsImlzSWRlbnRpZmllclN0YXJ0RVM2IiwiaXNJZGVudGlmaWVyUGFydEVTNiIsImlzS2V5d29yZEVTNSIsImlzS2V5d29yZEVTNiIsImlzU3RyaWN0TW9kZVJlc2VydmVkV29yZEVTNiIsImlzUmVzZXJ2ZWRXb3JkRVM1IiwiaXNSZXNlcnZlZFdvcmRFUzYiLCJpc0lkZW50aWZpZXJOYW1lRVM1IiwiaXNJZGVudGlmaWVyTmFtZUVTNiIsImxvd0NoIiwiaXNJZGVudGlmaWVyRVM1IiwiaXNJZGVudGlmaWVyRVM2IiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJoTmFtZSIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImlzQnJvd3NlciIsImNvbnZlcnRDYXNlIiwiY29udmVydGVkIiwiZmFsbGJhY2tzIiwib25Qcm9jZXNzU3R5bGUiLCJvbkNoYW5nZVZhbHVlIiwicnVsZSIsImh5cGhlbmF0ZWRQcm9wIiwicmVnaXN0ZXJDbGFzcyIsImNsYXNzTmFtZSIsInJlZlJ1bGUiLCJnZXRSdWxlIiwiY29tcG9zZXMiLCJweCIsImhhc0NTU1RPTVN1cHBvcnQiLCJDU1MiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJuZXdPYmoiLCJ1bml0cyIsImJvdHRvbSIsInRvcCIsImluc2V0IiwibW90aW9uIiwib3V0bGluZSIsInBlcnNwZWN0aXZlIiwic2l6ZSIsImdhcCIsImdyaWQiLCJpdGVyYXRlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsInVuaXQiLCJjYW1lbENhc2VkT3B0aW9ucyIsInByb3BBcnJheSIsInByb3BBcnJheUluT2JqIiwicG9zaXRpb24iLCJwcm9wT2JqIiwiYXR0YWNobWVudCIsInJlcGVhdCIsImR1cmF0aW9uIiwidGltaW5nRnVuY3Rpb24iLCJkZWxheSIsImFuaW1hdGlvbiIsIml0ZXJhdGlvbkNvdW50IiwiZGlyZWN0aW9uIiwiZmlsbE1vZGUiLCJwbGF5U3RhdGUiLCJibHVyIiwic3ByZWFkIiwiY3VzdG9tUHJvcE9iaiIsInJhZGl1cyIsImZvbnQiLCJ2YXJpYW50Iiwid2VpZ2h0Iiwic3RyZXRjaCIsImZhbWlseSIsImxpbmVIZWlnaHQiLCJncm93IiwiYmFzaXMiLCJmbG93Iiwic2hyaW5rIiwiYWxpZ24iLCJ0ZW1wbGF0ZUNvbHVtbnMiLCJ0ZW1wbGF0ZVJvd3MiLCJ0ZW1wbGF0ZUFyZWFzIiwidGVtcGxhdGUiLCJhdXRvQ29sdW1ucyIsImF1dG9Sb3dzIiwiYXV0b0Zsb3ciLCJyb3ciLCJyb3dTdGFydCIsInJvd0VuZCIsImNvbHVtblN0YXJ0IiwiY29sdW1uRW5kIiwiYXJlYSIsInJvd0dhcCIsImNvbHVtbkdhcCIsInByb2Nlc3NBcnJheSIsInNjaGVtZSIsIml0ZW0iLCJvYmplY3RUb0FycmF5IiwibWFwVmFsdWVzQnlQcm9wIiwiaXNGYWxsYmFjayIsImlzSW5BcnJheSIsImN1c3RvbVByb3BzIiwicHJvcE5hbWUiLCJfc3R5bGVEZXRlY3RvciIsImFwcGVuZGVkVmFsdWUiLCJzdHlsZURldGVjdG9yIiwiY3VzdG9tUHJvcHNUb1N0eWxlIiwiYmFzZVByb3AiLCJpc09iamVjdCIsInZhbHVlTnMiLCJub3ciLCJleHRlbmQiLCJzaGVldCIsIm5ld1N0eWxlIiwic2luZ2xlRXh0ZW5kIiwicnVsZXMiLCJtZXJnZUV4dGVuZCIsIm1lcmdlUmVzdCIsIl9rZXkiLCJhdCIsImF0UHJlZml4IiwiR2xvYmFsQ29udGFpbmVyUnVsZSIsInN0eWxlcyIsInNlbGVjdG9yIiwiaXNQcm9jZXNzZWQiLCJSdWxlTGlzdCIsInByb2Nlc3MiLCJfcHJvdG8iLCJhZGRSdWxlIiwianNzIiwib25Qcm9jZXNzUnVsZSIsInJlcGxhY2VSdWxlIiwibmV3UnVsZSIsIkdsb2JhbFByZWZpeGVkUnVsZSIsImNyZWF0ZVJ1bGUiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInNjb3BlIiwicGFydHMiLCJzY29wZWQiLCJvbkNyZWF0ZVJ1bGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwicmVmUmVnRXhwIiwiZ2V0UmVwbGFjZVJlZiIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJuZXN0ZWQiLCJnZXRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJuZXN0aW5nTGV2ZWwiLCJyZXBsYWNlUmVmIiwic3R5bGVSdWxlIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJwcm9wcyIsImZuVmFsdWVzTnMiLCJmblJ1bGVOcyIsImZuVmFsdWVzIiwib25VcGRhdGUiLCJmblJ1bGUiLCJfcHJvcCIsImlzT2JzZXJ2YWJsZSIsInVwZGF0ZU9wdGlvbnMiLCJzdHlsZSQiLCJzdWJzY3JpYmUiLCJfbG9vcCIsIm5leHRWYWx1ZSIsInNlbWlXaXRoTmwiLCJjc3NUZXh0IiwiY29sb25JbmRleCIsInByZWZpeFN0eWxlIiwiY2hhbmdlUHJvcCIsInN1cHBvcnRlZFByb3AiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlJDEiLCJ0b0Nzc1ZhbHVlIiwiYXRSdWxlIiwib2JzZXJ2YWJsZSIsImRlZmF1bHRVbml0IiwicGxhaW5PYmplY3RDb25zdHJ1cmN0b3IiLCJjbG9uZVN0eWxlIiwiZGVjbENvcHkiLCJieSIsImNzc1ZhbHVlIiwiZ2V0V2hpdGVzcGFjZVN5bWJvbHMiLCJsaW5lYnJlYWsiLCJpbmRlbnRTdHIiLCJ0b0NzcyIsIl9vcHRpb25zJGluZGVudCIsIkluZmluaXR5IiwiX2dldFdoaXRlc3BhY2VTeW1ib2xzIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsImVzY2FwZSIsIkJhc2VTdHlsZVJ1bGUiLCJSZW5kZXJlciIsInJlbmRlcmVyIiwiZm9yY2UiLCJuZXdWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW5kZXJhYmxlIiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImF0dGFjaGVkIiwiU3R5bGVSdWxlIiwiX0Jhc2VTdHlsZVJ1bGUiLCJfdGhpcyIsImdlbmVyYXRlSWQiLCJzZWxlY3RvclRleHQiLCJfcHJvdG8yIiwiYXBwbHlUbyIsInRvSlNPTiIsIm9wdHMiLCJsaW5rIiwic2V0U2VsZWN0b3IiLCJwbHVnaW5TdHlsZVJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zIiwiYXRSZWdFeHAiLCJDb25kaXRpb25hbFJ1bGUiLCJhdE1hdGNoIiwicXVlcnkiLCJrZXlSZWdFeHAiLCJwbHVnaW5Db25kaXRpb25hbFJ1bGUiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlZktleWZyYW1lIiwicGx1Z2luS2V5ZnJhbWVzUnVsZSIsIktleWZyYW1lUnVsZSIsInBsdWdpbktleWZyYW1lUnVsZSIsIkZvbnRGYWNlUnVsZSIsImtleVJlZ0V4cCQyIiwicGx1Z2luRm9udEZhY2VSdWxlIiwiVmlld3BvcnRSdWxlIiwicGx1Z2luVmlld3BvcnRSdWxlIiwiU2ltcGxlUnVsZSIsImtleXNNYXAiLCJkZWZhdWx0VXBkYXRlT3B0aW9ucyIsImZvcmNlVXBkYXRlT3B0aW9ucyIsImNvdW50ZXIiLCJydWxlT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMiLCJyZWdpc3RlciIsIm9sZFJ1bGUiLCJvbGRJbmRleCIsIm5hbWVPclNlbGVjdG9yIiwidW5yZWdpc3RlciIsInVwZGF0ZU9uZSIsIl90aGlzJG9wdGlvbnMyIiwiX25leHRWYWx1ZSIsIl9wcmV2VmFsdWUiLCJTdHlsZVNoZWV0IiwiZGVwbG95ZWQiLCJkZXBsb3kiLCJkZXRhY2giLCJxdWV1ZSIsImluc2VydFJ1bGUiLCJkZWxldGVSdWxlIiwiYWRkUnVsZXMiLCJhZGRlZCIsIl90aGlzJHJ1bGVzIiwiUGx1Z2luc1JlZ2lzdHJ5IiwiaW50ZXJuYWwiLCJleHRlcm5hbCIsInJlZ2lzdHJ5Iiwib25Qcm9jZXNzU2hlZXQiLCJwcm9jZXNzZWRWYWx1ZSIsInVzZSIsIm5ld1BsdWdpbiIsInBsdWdpbiIsIlNoZWV0c1JlZ2lzdHJ5IiwiX3RlbXAiLCJzaGVldHMiLCJnbG9iYWxUaGlzJDEiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJjcmVhdGVHZW5lcmF0ZUlkIiwicnVsZUNvdW50ZXIiLCJqc3NJZCIsImNsYXNzTmFtZVByZWZpeCIsIm1pbmlmeSIsIm1lbW9pemUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiY3NzUnVsZSIsImF0dHJpYnV0ZVN0eWxlTWFwIiwiaW5kZXhPZkltcG9ydGFudEZsYWciLCJjc3NWYWx1ZVdpdGhvdXRJbXBvcnRhbnRGbGFnIiwiZGVsZXRlIiwiZ2V0SGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJmaW5kUHJldk5vZGUiLCJpbnNlcnRpb25Qb2ludCIsImZpbmRIaWdoZXJTaGVldCIsInBhcmVudE5vZGUiLCJmaW5kSGlnaGVzdFNoZWV0IiwibmV4dFNpYmxpbmciLCJjaGlsZE5vZGVzIiwibm9kZVZhbHVlIiwiZmluZENvbW1lbnROb2RlIiwiZ2V0Tm9uY2UiLCJnZXRBdHRyaWJ1dGUiLCJfaW5zZXJ0UnVsZSIsImFwcGVuZFJ1bGUiLCJjc3NSdWxlcyIsImdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4IiwibWF4SW5kZXgiLCJEb21SZW5kZXJlciIsImhhc0luc2VydGVkUnVsZXMiLCJtZWRpYSIsInRleHRDb250ZW50Iiwibm9uY2UiLCJuZXh0Tm9kZSIsImluc2VydEJlZm9yZSIsImluc2VydGlvblBvaW50RWxlbWVudCIsImluc2VydFN0eWxlIiwiQm9vbGVhbiIsImluc2VydFJ1bGVzIiwibmF0aXZlUGFyZW50IiwibGF0ZXN0TmF0aXZlUGFyZW50IiwiX2luc2VydGlvbkluZGV4IiwicmVmQ3NzUnVsZSIsInJ1bGVTdHIiLCJpbnNlcnRpb25JbmRleCIsIm5hdGl2ZVJ1bGUiLCJnZXRSdWxlcyIsImluc3RhbmNlQ291bnRlciIsIkpzcyIsInJlbW92ZVN0eWxlU2hlZXQiLCJfbGVuIiwiY3JlYXRlSnNzIiwiU2hlZXRzTWFuYWdlciIsInJlZnMiLCJtYW5hZ2UiLCJ1bm1hbmFnZSIsImdldER5bmFtaWNTdHlsZXMiLCJ0byIsImV4dHJhY3RlZCIsInV0aWwiLCJoYXNOYXRpdmVNYXAiLCJNYXAiLCJBcnJheVNldCIsIl9hcnJheSIsIl9zZXQiLCJmcm9tQXJyYXkiLCJhQXJyYXkiLCJhQWxsb3dEdXBsaWNhdGVzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImFTdHIiLCJzU3RyIiwidG9TZXRTdHJpbmciLCJpc0R1cGxpY2F0ZSIsImFJZHgiLCJ0b0FycmF5IiwiYmFzZTY0IiwiZW5jb2RlIiwiYVZhbHVlIiwiZGlnaXQiLCJlbmNvZGVkIiwidmxxIiwidG9WTFFTaWduZWQiLCJWTFFfQkFTRSIsImRlY29kZSIsImFJbmRleCIsImFPdXRQYXJhbSIsImNvbnRpbnVhdGlvbiIsInNoaWZ0ZWQiLCJpbnRUb0NoYXJNYXAiLCJudW1iZXIiLCJjaGFyQ29kZSIsInJlY3Vyc2l2ZVNlYXJjaCIsImFMb3ciLCJhSGlnaCIsImFOZWVkbGUiLCJhSGF5c3RhY2siLCJhQ29tcGFyZSIsImFCaWFzIiwibWlkIiwiY21wIiwiTEVBU1RfVVBQRVJfQk9VTkQiLCJHUkVBVEVTVF9MT1dFUl9CT1VORCIsInNlYXJjaCIsIk1hcHBpbmdMaXN0IiwiX3NvcnRlZCIsIl9sYXN0IiwiZ2VuZXJhdGVkTGluZSIsImdlbmVyYXRlZENvbHVtbiIsInVuc29ydGVkRm9yRWFjaCIsImFDYWxsYmFjayIsImFUaGlzQXJnIiwiYU1hcHBpbmciLCJtYXBwaW5nQSIsIm1hcHBpbmdCIiwibGluZUEiLCJsaW5lQiIsImNvbHVtbkEiLCJjb2x1bW5CIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJzd2FwIiwiYXJ5IiwiZG9RdWlja1NvcnQiLCJjb21wYXJhdG9yIiwiciIsImxvdyIsImhpZ2giLCJyb3VuZCIsInJhbmRvbSIsInBpdm90IiwicXVpY2tTb3J0IiwiYmluYXJ5U2VhcmNoIiwiYmFzZTY0VkxRIiwiU291cmNlTWFwQ29uc3VtZXIiLCJhU291cmNlTWFwIiwiYVNvdXJjZU1hcFVSTCIsInBhcnNlU291cmNlTWFwSW5wdXQiLCJzZWN0aW9ucyIsIkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciIsIkJhc2ljU291cmNlTWFwQ29uc3VtZXIiLCJnZXRBcmciLCJzb3VyY2VzIiwibmFtZXMiLCJzb3VyY2VzQ29udGVudCIsIl92ZXJzaW9uIiwibm9ybWFsaXplIiwiaXNBYnNvbHV0ZSIsInJlbGF0aXZlIiwiX25hbWVzIiwiX3NvdXJjZXMiLCJfYWJzb2x1dGVTb3VyY2VzIiwiY29tcHV0ZVNvdXJjZVVSTCIsIl9tYXBwaW5ncyIsIl9zb3VyY2VNYXBVUkwiLCJNYXBwaW5nIiwib3JpZ2luYWxMaW5lIiwib3JpZ2luYWxDb2x1bW4iLCJsYXN0T2Zmc2V0IiwiX3NlY3Rpb25zIiwib2Zmc2V0TGluZSIsIm9mZnNldENvbHVtbiIsImdlbmVyYXRlZE9mZnNldCIsImNvbnN1bWVyIiwiZnJvbVNvdXJjZU1hcCIsIl9fZ2VuZXJhdGVkTWFwcGluZ3MiLCJfcGFyc2VNYXBwaW5ncyIsIl9fb3JpZ2luYWxNYXBwaW5ncyIsIl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yIiwiYVNvdXJjZVJvb3QiLCJHRU5FUkFURURfT1JERVIiLCJPUklHSU5BTF9PUkRFUiIsImVhY2hNYXBwaW5nIiwiYUNvbnRleHQiLCJhT3JkZXIiLCJfZ2VuZXJhdGVkTWFwcGluZ3MiLCJfb3JpZ2luYWxNYXBwaW5ncyIsIm1hcHBpbmciLCJhbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IiLCJhQXJncyIsIm5lZWRsZSIsIl9maW5kU291cmNlSW5kZXgiLCJfZmluZE1hcHBpbmciLCJjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyIsImxhc3RDb2x1bW4iLCJhU291cmNlIiwicmVsYXRpdmVTb3VyY2UiLCJzbWMiLCJfc291cmNlUm9vdCIsIl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50IiwiX2ZpbGUiLCJnZW5lcmF0ZWRNYXBwaW5ncyIsImRlc3RHZW5lcmF0ZWRNYXBwaW5ncyIsImRlc3RPcmlnaW5hbE1hcHBpbmdzIiwic3JjTWFwcGluZyIsImRlc3RNYXBwaW5nIiwic2VnbWVudCIsInByZXZpb3VzR2VuZXJhdGVkQ29sdW1uIiwicHJldmlvdXNPcmlnaW5hbExpbmUiLCJwcmV2aW91c09yaWdpbmFsQ29sdW1uIiwicHJldmlvdXNTb3VyY2UiLCJwcmV2aW91c05hbWUiLCJjYWNoZWRTZWdtZW50cyIsIm9yaWdpbmFsTWFwcGluZ3MiLCJjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCIsImFNYXBwaW5ncyIsImFMaW5lTmFtZSIsImFDb2x1bW5OYW1lIiwiYUNvbXBhcmF0b3IiLCJjb21wdXRlQ29sdW1uU3BhbnMiLCJuZXh0TWFwcGluZyIsImxhc3RHZW5lcmF0ZWRDb2x1bW4iLCJvcmlnaW5hbFBvc2l0aW9uRm9yIiwiaGFzQ29udGVudHNPZkFsbFNvdXJjZXMiLCJzb21lIiwic2MiLCJzb3VyY2VDb250ZW50Rm9yIiwibnVsbE9uTWlzc2luZyIsInVybFBhcnNlIiwiZmlsZVVyaUFic1BhdGgiLCJnZW5lcmF0ZWRQb3NpdGlvbkZvciIsInNlY3Rpb25JbmRleCIsInNlY3Rpb24iLCJiaWFzIiwiZXZlcnkiLCJnZW5lcmF0ZWRQb3NpdGlvbiIsInNlY3Rpb25NYXBwaW5ncyIsImFkanVzdGVkTWFwcGluZyIsIlNvdXJjZU1hcEdlbmVyYXRvciIsIl9za2lwVmFsaWRhdGlvbiIsIl9zb3VyY2VzQ29udGVudHMiLCJhU291cmNlTWFwQ29uc3VtZXIiLCJuZXdNYXBwaW5nIiwib3JpZ2luYWwiLCJhZGRNYXBwaW5nIiwic291cmNlRmlsZSIsInNvdXJjZVJlbGF0aXZlIiwiX3ZhbGlkYXRlTWFwcGluZyIsImFTb3VyY2VGaWxlIiwiYVNvdXJjZUNvbnRlbnQiLCJhcHBseVNvdXJjZU1hcCIsImFTb3VyY2VNYXBQYXRoIiwibmV3U291cmNlcyIsIm5ld05hbWVzIiwiYUdlbmVyYXRlZCIsImFPcmlnaW5hbCIsImFOYW1lIiwiX3NlcmlhbGl6ZU1hcHBpbmdzIiwibmFtZUlkeCIsInNvdXJjZUlkeCIsInByZXZpb3VzR2VuZXJhdGVkTGluZSIsImFTb3VyY2VzIiwiUkVHRVhfTkVXTElORSIsImlzU291cmNlTm9kZSIsImFMaW5lIiwiYUNvbHVtbiIsImFDaHVua3MiLCJzb3VyY2VDb250ZW50cyIsImZyb21TdHJpbmdXaXRoU291cmNlTWFwIiwiYUdlbmVyYXRlZENvZGUiLCJhUmVsYXRpdmVQYXRoIiwicmVtYWluaW5nTGluZXMiLCJyZW1haW5pbmdMaW5lc0luZGV4Iiwic2hpZnROZXh0TGluZSIsImdldE5leHRMaW5lIiwibGFzdEdlbmVyYXRlZExpbmUiLCJsYXN0TWFwcGluZyIsIm5leHRMaW5lIiwiYWRkTWFwcGluZ1dpdGhDb2RlIiwiYUNodW5rIiwicHJlcGVuZCIsIndhbGsiLCJhRm4iLCJhU2VwIiwibmV3Q2hpbGRyZW4iLCJhUGF0dGVybiIsImFSZXBsYWNlbWVudCIsImxhc3RDaGlsZCIsIndhbGtTb3VyY2VDb250ZW50cyIsImZyb21TZXRTdHJpbmciLCJzb3VyY2VNYXBwaW5nQWN0aXZlIiwibGFzdE9yaWdpbmFsU291cmNlIiwibGFzdE9yaWdpbmFsTGluZSIsImxhc3RPcmlnaW5hbENvbHVtbiIsImxhc3RPcmlnaW5hbE5hbWUiLCJhRGVmYXVsdFZhbHVlIiwidXJsUmVnZXhwIiwiZGF0YVVybFJlZ2V4cCIsImFVcmwiLCJhdXRoIiwiaG9zdCIsInVybEdlbmVyYXRlIiwiYVBhcnNlZFVybCIsImFQYXRoIiwidXAiLCJhUm9vdCIsImFQYXRoVXJsIiwiYVJvb3RVcmwiLCJqb2luZWQiLCJsYXN0SW5kZXhPZiIsInN1cHBvcnRzTnVsbFByb3RvIiwiaWRlbnRpdHkiLCJpc1Byb3RvU3RyaW5nIiwic3RyY21wIiwiYVN0cjEiLCJhU3RyMiIsIm9ubHlDb21wYXJlT3JpZ2luYWwiLCJvbmx5Q29tcGFyZUdlbmVyYXRlZCIsInNvdXJjZVVSTCIsInNvdXJjZU1hcFVSTCIsInBhcnNlZCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIndhcm4iLCJkZXZpY2VfY29udHJvbGxlcl8xIiwiX0RldmljZUNvbnRyb2xsZXJfaW5zdGFuY2VzIiwiX0RldmljZUNvbnRyb2xsZXJfbWFwU3RyaW5nRnVuY3Rpb25Ub0NhbGwiLCJfRGV2aWNlQ29udHJvbGxlcl9nZXRGdW5jdGlvbk5hbWVzRnJvbVN0cmluZyIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsInRyYW5zcGlsZXJfMSIsInVhcnRfMSIsImZldGNoSGVscGVyXzEiLCJjb25uZWN0ZWQiLCJVQVJUIiwiZGV2aWNlVHlwZSIsImdldERldmljZUZ1bmN0aW9ucyIsInF1aWNrV3JpdGUiLCJsb2FkQ29kZSIsInRyYW5zcGlsZWRfY29kZSIsInVwbG9hZCIsImZldGNoVG9UZXh0IiwicmF3Q29kZSIsImR1bXBlZFN0ciIsImZ1bmNBcnIiLCJzdGFydHNXaXRoIiwiZmV0Y2giLCJyZXMiLCJvayIsInN0YXR1cyIsInB1Y2tfdHlwZXNfMSIsInN1cGVyIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZXh0ZW5kcyIsImJpbmQiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIml0ZXIiLCJmcm9tIiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJfc2V0UHJvdG90eXBlT2YiLCJvIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwibWluTGVuIiwibiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImhtZCIsInRvU3RyaW5nVGFnIiwicHVja18xIiwicGl4bF8xIiwiYmFuZ2xlXzEiXSwic291cmNlUm9vdCI6IiJ9