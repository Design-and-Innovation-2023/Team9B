import { uart } from '@espruino-tools/uart';
import { IDeviceController, Pin } from './types/device-controller-types';
declare type UART = typeof uart;
export declare class DeviceController implements IDeviceController {
    #private;
    connected: boolean;
    UART: UART;
    deviceType: string | undefined;
    /**
     * An object holding any functions on the device
     */
    Call: any;
    /**
     * An Object containing all pin methods
     */
    Pin: Pin;
    /**
     *
     * @returns  promise containing all code stored on device
     */
    dump(): Promise<string>;
    /**
     *
     * @returns device type of connected device
     */
    getDeviceType(): Promise<string>;
    /**
     *
     * @returns battery percentage of the connected device
     */
    getBattery(): Promise<number>;
    /**
     *
     * @param code code to be evaluated
     * @returns the response from the device in a Promise
     */
    eval<T>(code: string): Promise<T>;
    /**
     *
     * @param callback the function to be run after connect
     */
    connect(callback?: Function): Promise<void>;
    /**
     *
     * @param callback the function to be run after disconnect
     */
    disconnect(callback?: Function): Promise<void>;
    /**
     * Clears any saved data on device.
     */
    reset(): void;
    /**
     *
     * > **WARNING**  THIS CODE DOES NO CHECKS AND IS ONLY AVAILABLE FOR SPEED
     *                PURPOSES.
     *
     *                THIS SHOULD BE USED EXCLUSIVELY FOR WHEN CODE DOESNT NEED
     *                TO BE SAVED OR YOU ALREADY KNOW THE METHODS AVAILABLE
     *
     * @param data code written in espruino native code NOT IN THIS LIBRARIES CODE
     */
    quickWrite(data: string): void;
    /**
     *
     * @param code code written in espruino native code, NOT IN THIS LIBRARIES CODE
     * @param flash
     */
    loadCode(code: string, flash?: boolean): Promise<void>;
    setInterval(func: Function, ms?: number): void;
    /**
     *
     * @param url the url to grab data from
     * @param flash
     */
    upload(url: string, flash?: boolean): Promise<void>;
    /**
     * helper function to grab functions from device
     */
    getDeviceFunctions(): Promise<void>;
}
export {};
