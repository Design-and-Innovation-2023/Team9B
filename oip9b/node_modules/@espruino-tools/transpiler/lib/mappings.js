"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mappings = void 0;
const mappings_1 = require("./types/mappings");
exports.mappings = {
    Puck: {
        NFC: {
            setUrl: (url) => `NRF.nfcURL(${url})`,
            reset: () => 'NRF.nfcURL()',
        },
        mag: {
            enableMag: () => `Puck.magOn()`,
            enableField: () => `require("puckjsv2-mag-level").on()`,
            disableMag: () => `Puck.magOff()`,
            disableField: () => `require("puckjsv2-mag-level").off()`,
            onMag: (func) => `Puck.on('mag', function(){
        ${func}
      })`,
            onField: (func) => `Puck.on('field', function(){
        ${func}
      })`,
        },
        accel: {
            enableAccelMovement: () => `require("puckjsv2-accel-movement").on()`,
            enableAccelBigMovement: () => `require("puckjsv2-accel-bigmovement").on()`,
            enableAccelTilt: () => `require("puckjsv2-accel-tilt").on()`,
            disableAccelMovement: () => `require("puckjsv2-accel-movement").off()`,
            disableAccelBigMovement: () => `require("puckjsv2-accel-bigmovement").off()`,
            disableAccelTilt: () => `require("puckjsv2-accel-tilt").off()`,
            val: () => 'Puck.accel()',
            onMove: (func) => `Puck.on('accel', function(acc){
        ${func}
      })`,
            onTilt: (func) => `Puck.on('accel', function(acc){
        ${func}
      })`,
        },
        IR: {
            transmit: (data) => `Puck.IR([${data.join(',')}])`,
        },
        LED: {
            on: (color) => Array.isArray(color)
                ? `digitalWrite(${color},1)`
                : `LED${mappings_1.LEDColours.indexOf(color) + 1}.set()`,
            off: (color) => Array.isArray(color)
                ? `digitalWrite(${color},0)`
                : `LED${mappings_1.LEDColours.indexOf(color) + 1}.reset()`,
            toggle: (color) => `LED${mappings_1.LEDColours.indexOf(color) + 1}.toggle()`,
            flash: (color, ms) => `digitalPulse(LED${mappings_1.LEDColours.indexOf(color) + 1},1,${ms})`,
            val: (color) => `digitalRead(LED${mappings_1.LEDColours.indexOf(color) + 1}) == 1`,
        },
        onPress: (func) => {
            return `setWatch(function(){
            ${func}
        }, BTN, {edge:"rising", repeat:true, debounce:50})`;
        },
        onTimedPress: (long, short, ms = 0.3) => `setWatch(function(){
      var ms = (e.time - e.lastTime);

      if(ms > ${ms}){
        ${long}
      } else {
        ${short}
      }
    }, BTN, {edge:'falling', repeat:true, debounce:50})`,
        getTemperature: () => 'E.getTemperature()',
        getLightVal: () => 'Puck.light()',
    },
    DeviceController: {
        connect: () => `0`,
        reset: () => `reset(true)`,
        dump: () => `E.dumpStr()`,
        getDeviceType: () => `process.env.BOARD`,
        getBattery: () => `E.getBattery()`,
        setInterval: (func, ms) => `setInterval(function(){
      ${func};
    }, ${ms})`,
        Pin: {
            val: (pin) => `${pin}.read()`,
            analogOn: (pin, val) => `analogWrite(${pin},${val})`,
            digitalOn: (pin, val) => `digitalWrite(${pin},${val})`,
            digitalToggle: (pin) => `${pin}.toggle()`,
            reset: (pin) => `${pin}.reset()`,
            getInfo: (pin) => `${pin}.getInfo()`,
        },
    },
    Pixl: {},
    Bangle: {},
};
