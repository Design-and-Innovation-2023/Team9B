{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Puck = void 0;\nconst transpiler_1 = require(\"@espruino-tools/transpiler\");\nconst device_controller_1 = require(\"./device-controller\");\nconst puck_types_1 = require(\"./types/puck-types\");\nclass Puck extends device_controller_1.DeviceController {\n  constructor() {\n    super(...arguments);\n    this.mag = {\n      enableMag: () => {\n        this.UART.write('Puck.magOn();\\n');\n      },\n      enableField: () => {\n        this.UART.write('require(\"puckjsv2-mag-level\").on();\\n');\n      },\n      disableMag: () => {\n        this.UART.write('Puck.magOff();\\n');\n      },\n      disableField: () => {\n        this.UART.write('require(\"puckjsv2-mag-level\").off();\\n');\n      },\n      onMag: func => {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.mag.onMag(${func.toString()})`, {\n          additional_callees: ['p'],\n          parse_type: 'module'\n        });\n        this.UART.write(transpiled_code);\n      },\n      onField: func => {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.mag.onField(${func.toString()})`, {\n          additional_callees: ['p'],\n          parse_type: 'module'\n        });\n        this.UART.write(transpiled_code);\n      }\n    };\n    this.accel = {\n      enableAccelMovement: () => {\n        this.UART.write('require(\"puckjsv2-accel-movement\").on();\\n');\n      },\n      enableAccelBigMovement: () => {\n        this.UART.write('require(\"puckjsv2-accel-bigmovement\").on();\\n');\n      },\n      enableAccelTilt: () => {\n        this.UART.write('require(\"puckjsv2-accel-tilt\").on();\\n');\n      },\n      disableAccelMovement: () => {\n        this.UART.write('require(\"puckjsv2-accel-movement\").off();\\n');\n      },\n      disableAccelBigMovement: () => {\n        this.UART.write('require(\"puckjsv2-accel-bigmovement\").off();\\n');\n      },\n      disableAccelTilt: () => {\n        this.UART.write('require(\"puckjsv2-accel-tilt\").off();\\n');\n      },\n      val: () => {\n        return this.eval('Puck.accel()');\n      },\n      onMove: func => {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.accel.onMove(${func.toString()})`, {\n          additional_callees: ['p'],\n          parse_type: 'module'\n        });\n        this.UART.write(transpiled_code);\n      },\n      onTilt: func => {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.accel.onTilt(${func.toString()})`, {\n          additional_callees: ['p'],\n          parse_type: 'module'\n        });\n        this.UART.write(transpiled_code);\n      }\n    };\n    this.IR = {\n      transmit: data => {\n        this.UART.write('Puck.IR([' + data.join(',') + ']);\\n');\n      }\n    };\n    this.LED = {\n      /**\n       *\n       * @param color LED Colour to be turned on\n       */\n      on: color => {\n        Array.isArray(color) ? this.UART.write(`digitalWrite(${color}, 1)`) : this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.set();\\n`);\n      },\n      /**\n       *\n       * @param color LED Colour to be turned off\n       */\n      off: color => {\n        Array.isArray(color) ? this.UART.write(`digitalWrite(${color}, 0)`) : this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.reset();\\n`);\n      },\n      /**\n       *\n       * @param color LED Colour to be toggled\n       */\n      toggle: color => {\n        this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.toggle();\\n`);\n      },\n      /**\n       *\n       * @param color LED Colour to be flashed\n       * @param ms time for LED to be flashed\n       */\n      flash: (color, ms) => {\n        this.UART.write(`digitalPulse(LED${puck_types_1.LEDColours.indexOf(color) + 1},1,${ms});\\n`);\n      },\n      /**\n       *\n       * @param color LED colour to grab info from\n       * @returns a boolean regarding if the LED is on or off\n       */\n      val: color => {\n        return this.eval(`digitalRead(LED${puck_types_1.LEDColours.indexOf(color) + 1}) == 1`);\n      }\n    };\n    this.NFC = {\n      /**\n       *\n       * @param url the url to be used as the new NFC value\n       */\n      setUrl: url => this.UART.write('NRF.nfcURL(\"' + url + '\");\\n'),\n      reset: () => this.UART.write('NRF.nfcURL();\\n')\n    };\n  }\n  /**\n   *\n   * @returns a promise containing the light value detected by the puck device.\n   */\n  getLightVal() {\n    return this.eval('Puck.light()');\n  }\n  /**\n   *\n   * @returns temperature from device\n   */\n  getTemperature() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.eval(`E.getTemperature()`);\n    });\n  }\n  /**\n   *\n   * @param func A function to be run of press of pucks button\n   */\n  onPress(func) {\n    let transpiled_code = (0, transpiler_1.transpile)(`p.onTimedPress(${func.toString()})`, {\n      additional_callees: ['p'],\n      parse_type: 'module'\n    });\n    this.UART.write(transpiled_code);\n  }\n  /**\n   *\n   * @param long The function to be called on a long press\n   * @param short The function to be called on a short press\n   * @param ms the time required to consider a press a long press\n   */\n  onTimedPress(long, short, ms = 0.3) {\n    let transpiled_code = (0, transpiler_1.transpile)(`p.onTimedPress(${long.toString()},${short.toString()},${ms})`, {\n      additional_callees: ['p'],\n      parse_type: 'module'\n    });\n    this.UART.write(transpiled_code);\n  }\n}\nexports.Puck = Puck;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","Puck","transpiler_1","require","device_controller_1","puck_types_1","DeviceController","constructor","arguments","mag","enableMag","UART","write","enableField","disableMag","disableField","onMag","func","transpiled_code","transpile","toString","additional_callees","parse_type","onField","accel","enableAccelMovement","enableAccelBigMovement","enableAccelTilt","disableAccelMovement","disableAccelBigMovement","disableAccelTilt","val","eval","onMove","onTilt","IR","transmit","data","join","LED","on","color","Array","isArray","LEDColours","indexOf","off","toggle","flash","ms","NFC","setUrl","url","reset","getLightVal","getTemperature","onPress","onTimedPress","long","short"],"sources":["C:/Users/Ting Xian Hao/OneDrive/Documents/GitHub/Team9B/oip9b/node_modules/@espruino-tools/core/lib/puck.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Puck = void 0;\nconst transpiler_1 = require(\"@espruino-tools/transpiler\");\nconst device_controller_1 = require(\"./device-controller\");\nconst puck_types_1 = require(\"./types/puck-types\");\nclass Puck extends device_controller_1.DeviceController {\n    constructor() {\n        super(...arguments);\n        this.mag = {\n            enableMag: () => {\n                this.UART.write('Puck.magOn();\\n');\n            },\n            enableField: () => {\n                this.UART.write('require(\"puckjsv2-mag-level\").on();\\n');\n            },\n            disableMag: () => {\n                this.UART.write('Puck.magOff();\\n');\n            },\n            disableField: () => {\n                this.UART.write('require(\"puckjsv2-mag-level\").off();\\n');\n            },\n            onMag: (func) => {\n                let transpiled_code = (0, transpiler_1.transpile)(`p.mag.onMag(${func.toString()})`, {\n                    additional_callees: ['p'],\n                    parse_type: 'module',\n                });\n                this.UART.write(transpiled_code);\n            },\n            onField: (func) => {\n                let transpiled_code = (0, transpiler_1.transpile)(`p.mag.onField(${func.toString()})`, {\n                    additional_callees: ['p'],\n                    parse_type: 'module',\n                });\n                this.UART.write(transpiled_code);\n            },\n        };\n        this.accel = {\n            enableAccelMovement: () => {\n                this.UART.write('require(\"puckjsv2-accel-movement\").on();\\n');\n            },\n            enableAccelBigMovement: () => {\n                this.UART.write('require(\"puckjsv2-accel-bigmovement\").on();\\n');\n            },\n            enableAccelTilt: () => {\n                this.UART.write('require(\"puckjsv2-accel-tilt\").on();\\n');\n            },\n            disableAccelMovement: () => {\n                this.UART.write('require(\"puckjsv2-accel-movement\").off();\\n');\n            },\n            disableAccelBigMovement: () => {\n                this.UART.write('require(\"puckjsv2-accel-bigmovement\").off();\\n');\n            },\n            disableAccelTilt: () => {\n                this.UART.write('require(\"puckjsv2-accel-tilt\").off();\\n');\n            },\n            val: () => {\n                return this.eval('Puck.accel()');\n            },\n            onMove: (func) => {\n                let transpiled_code = (0, transpiler_1.transpile)(`p.accel.onMove(${func.toString()})`, {\n                    additional_callees: ['p'],\n                    parse_type: 'module',\n                });\n                this.UART.write(transpiled_code);\n            },\n            onTilt: (func) => {\n                let transpiled_code = (0, transpiler_1.transpile)(`p.accel.onTilt(${func.toString()})`, {\n                    additional_callees: ['p'],\n                    parse_type: 'module',\n                });\n                this.UART.write(transpiled_code);\n            },\n        };\n        this.IR = {\n            transmit: (data) => {\n                this.UART.write('Puck.IR([' + data.join(',') + ']);\\n');\n            },\n        };\n        this.LED = {\n            /**\n             *\n             * @param color LED Colour to be turned on\n             */\n            on: (color) => {\n                Array.isArray(color)\n                    ? this.UART.write(`digitalWrite(${color}, 1)`)\n                    : this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.set();\\n`);\n            },\n            /**\n             *\n             * @param color LED Colour to be turned off\n             */\n            off: (color) => {\n                Array.isArray(color)\n                    ? this.UART.write(`digitalWrite(${color}, 0)`)\n                    : this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.reset();\\n`);\n            },\n            /**\n             *\n             * @param color LED Colour to be toggled\n             */\n            toggle: (color) => {\n                this.UART.write(`LED${puck_types_1.LEDColours.indexOf(color) + 1}.toggle();\\n`);\n            },\n            /**\n             *\n             * @param color LED Colour to be flashed\n             * @param ms time for LED to be flashed\n             */\n            flash: (color, ms) => {\n                this.UART.write(`digitalPulse(LED${puck_types_1.LEDColours.indexOf(color) + 1},1,${ms});\\n`);\n            },\n            /**\n             *\n             * @param color LED colour to grab info from\n             * @returns a boolean regarding if the LED is on or off\n             */\n            val: (color) => {\n                return this.eval(`digitalRead(LED${puck_types_1.LEDColours.indexOf(color) + 1}) == 1`);\n            },\n        };\n        this.NFC = {\n            /**\n             *\n             * @param url the url to be used as the new NFC value\n             */\n            setUrl: (url) => this.UART.write('NRF.nfcURL(\"' + url + '\");\\n'),\n            reset: () => this.UART.write('NRF.nfcURL();\\n'),\n        };\n    }\n    /**\n     *\n     * @returns a promise containing the light value detected by the puck device.\n     */\n    getLightVal() {\n        return this.eval('Puck.light()');\n    }\n    /**\n     *\n     * @returns temperature from device\n     */\n    getTemperature() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.eval(`E.getTemperature()`);\n        });\n    }\n    /**\n     *\n     * @param func A function to be run of press of pucks button\n     */\n    onPress(func) {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.onTimedPress(${func.toString()})`, {\n            additional_callees: ['p'],\n            parse_type: 'module',\n        });\n        this.UART.write(transpiled_code);\n    }\n    /**\n     *\n     * @param long The function to be called on a long press\n     * @param short The function to be called on a short press\n     * @param ms the time required to consider a press a long press\n     */\n    onTimedPress(long, short, ms = 0.3) {\n        let transpiled_code = (0, transpiler_1.transpile)(`p.onTimedPress(${long.toString()},${short.toString()},${ms})`, {\n            additional_callees: ['p'],\n            parse_type: 'module',\n        });\n        this.UART.write(transpiled_code);\n    }\n}\nexports.Puck = Puck;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}