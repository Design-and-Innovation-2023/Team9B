{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DeviceController_instances, _DeviceController_mapStringFunctionToCall, _DeviceController_getFunctionNamesFromString;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeviceController = void 0;\nconst transpiler_1 = require(\"@espruino-tools/transpiler\");\nconst uart_1 = require(\"@espruino-tools/uart\");\nconst fetchHelper_1 = require(\"./helpers/fetchHelper\");\nclass DeviceController {\n  constructor() {\n    _DeviceController_instances.add(this);\n    this.connected = false;\n    this.UART = uart_1.uart;\n    this.deviceType = undefined;\n    /**\n     * An object holding any functions on the device\n     */\n    this.Call = {};\n    /**\n     * An Object containing all pin methods\n     */\n    this.Pin = {\n      /**\n       *\n       * @param pin the pin to have its value returned\n       * @returns current value of chosen pin\n       */\n      val: pin => this.eval(pin + '.read()'),\n      /**\n       *\n       * @param pin the pin to have its analog value changed\n       * @param val should be between 0 and 1, e.g. 0.5\n       */\n      analogOn: (pin, val) => this.UART.write('analogWrite(' + pin + ',' + val + ');\\n'),\n      /**\n       *\n       * @param pin the pin to have its digital value changed\n       * @param val can be either 0 or 1 for off or on\n       */\n      digitalOn: (pin, val) => this.UART.write('digitalWrite(' + pin + ',' + val + ');\\n'),\n      /**\n       *\n       * @param pin the pin to be toggled\n       */\n      digitalToggle: pin => this.UART.write(pin + '.toggle();\\n'),\n      /**\n       *\n       * @param pin the pin to be reset\n       */\n      reset: pin => this.UART.write(pin + '.reset();\\n'),\n      /**\n       *\n       * @param pin the pin to gather information from\n       * @returns a promise containing pin info\n       */\n      getInfo: pin => this.eval(pin + '.getInfo()')\n    };\n  }\n  /**\n   *\n   * @returns  promise containing all code stored on device\n   */\n  dump() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.eval('E.dumpStr()');\n    });\n  }\n  /**\n   *\n   * @returns device type of connected device\n   */\n  getDeviceType() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.eval(`process.env.BOARD`);\n    });\n  }\n  /**\n   *\n   * @returns battery percentage of the connected device\n   */\n  getBattery() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return yield this.eval(`E.getBattery()`);\n    });\n  }\n  /**\n   *\n   * @param code code to be evaluated\n   * @returns the response from the device in a Promise\n   */\n  eval(code) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const p = new Promise(resolve => {\n        let callback = (data, log) => {\n          if (!log) log = '';\n          resolve({\n            data,\n            log\n          });\n        };\n        this.UART.eval(code, callback);\n      }).catch(err => {\n        throw new Error(err);\n      });\n      return p;\n    });\n  }\n  /**\n   *\n   * @param callback the function to be run after connect\n   */\n  connect(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.eval('{}').then(({\n        data,\n        log\n      }) => {\n        if (log == 'success') {\n          this.connected = true;\n          this.UART.write('digitalPulse(LED2,1,100);\\n');\n          this.getDeviceFunctions().then(() => {\n            callback === null || callback === void 0 ? void 0 : callback();\n          });\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param callback the function to be run after disconnect\n   */\n  disconnect(callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.eval('digitalPulse(LED1,1,100);\\n').then(() => {\n        var _a;\n        (_a = this.UART) === null || _a === void 0 ? void 0 : _a.close();\n        this.connected = false;\n        this.deviceType = undefined;\n        callback === null || callback === void 0 ? void 0 : callback();\n      });\n    });\n  }\n  /**\n   * Clears any saved data on device.\n   */\n  reset() {\n    this.UART.write('reset(true);\\n');\n  }\n  /**\n   *\n   * > **WARNING**  THIS CODE DOES NO CHECKS AND IS ONLY AVAILABLE FOR SPEED\n   *                PURPOSES.\n   *\n   *                THIS SHOULD BE USED EXCLUSIVELY FOR WHEN CODE DOESNT NEED\n   *                TO BE SAVED OR YOU ALREADY KNOW THE METHODS AVAILABLE\n   *\n   * @param data code written in espruino native code NOT IN THIS LIBRARIES CODE\n   */\n  quickWrite(data) {\n    this.UART.write(data);\n  }\n  /**\n   *\n   * @param code code written in espruino native code, NOT IN THIS LIBRARIES CODE\n   * @param flash\n   */\n  loadCode(code, flash = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let deviceType = yield this.getDeviceType();\n      if (deviceType === 'BANGLEJS') {\n        flash = false;\n      }\n      let success = false;\n      this.reset();\n      if (!flash && !success) {\n        this.UART.write(code);\n      } else if (!success && deviceType !== 'PIXLJS') {\n        this.UART.write(`E.setBootCode(\\`${code}\\`,true);\\n`);\n        this.UART.write('load();\\n');\n      } else if (!success) {\n        this.UART.write(code);\n        this.UART.write('save();\\n');\n        this.UART.write('load();\\n');\n      }\n      this.getDeviceFunctions();\n    });\n  }\n  setInterval(func, ms = 2000) {\n    let transpiled_code = (0, transpiler_1.transpile)(`DeviceController.setInterval(${func.toString()}, ${ms})`, {\n      additional_callees: ['p'],\n      parse_type: 'module'\n    });\n    this.UART.write(transpiled_code);\n  }\n  /**\n   *\n   * @param url the url to grab data from\n   * @param flash\n   */\n  upload(url, flash = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield (0, fetchHelper_1.fetchToText)(url).then(rawCode => __awaiter(this, void 0, void 0, function* () {\n        this.loadCode(rawCode, flash);\n      }));\n    });\n  }\n  /**\n   * helper function to grab functions from device\n   */\n  getDeviceFunctions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.Call = yield this.dump().then(dumpedStr => {\n        __classPrivateFieldGet(this, _DeviceController_instances, \"m\", _DeviceController_mapStringFunctionToCall).call(this, __classPrivateFieldGet(this, _DeviceController_instances, \"m\", _DeviceController_getFunctionNamesFromString).call(this, dumpedStr.data));\n      });\n    });\n  }\n}\nexports.DeviceController = DeviceController;\n_DeviceController_instances = new WeakSet(), _DeviceController_mapStringFunctionToCall = function _DeviceController_mapStringFunctionToCall(funcArr) {\n  funcArr.map(func => {\n    /*\n      This anonymous function converts the array of function data into a digestible callable javascript object\n      in notation function_name : function(param1,...){}\n      It then\n    */\n    this.Call = Object.assign({\n      [func.name]: (...args) => {\n        this.UART.write(`${func.name}(${JSON.stringify(args.join(','))});\\n`);\n      }\n    }, this.Call);\n  });\n}, _DeviceController_getFunctionNamesFromString = function _DeviceController_getFunctionNamesFromString(str) {\n  let str_arr = str.split('\\n');\n  let new_arr = str_arr.map(x => {\n    if (x.startsWith('function')) {\n      return x.split('{')[0].replace('function', '').split(' ').join('');\n    } else if (x.startsWith('let') || x.startsWith('const')) {\n      if (x.includes('function(') || x.includes('=>')) {\n        if (x.includes('=>')) {\n          return x.split('=>')[0].replace('let', '').replace('const', '').replace('=', '').split(' ').join('');\n        } else {\n          return x.split('{')[0].replace('let', '').replace('const', '').replace('=', '').replace('function', '').split(' ').join('');\n        }\n      }\n    }\n  });\n  let filtered_arr = new_arr.filter(Boolean);\n  return filtered_arr.map(func => {\n    return {\n      name: func.split('(')[0],\n      parameters: func.split('(')[1].replace(')', '').split(',')[0] !== '' ? func.split('(')[1].replace(')', '').split(',') : []\n    };\n  });\n};","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","get","_DeviceController_instances","_DeviceController_mapStringFunctionToCall","_DeviceController_getFunctionNamesFromString","Object","defineProperty","exports","DeviceController","transpiler_1","require","uart_1","fetchHelper_1","constructor","add","connected","UART","uart","deviceType","undefined","Call","Pin","val","pin","eval","analogOn","write","digitalOn","digitalToggle","reset","getInfo","dump","getDeviceType","getBattery","code","p","callback","data","log","catch","err","Error","connect","getDeviceFunctions","disconnect","_a","close","quickWrite","loadCode","flash","success","setInterval","func","ms","transpiled_code","transpile","toString","additional_callees","parse_type","upload","url","fetchToText","rawCode","dumpedStr","WeakSet","funcArr","map","assign","name","args","JSON","stringify","join","str","str_arr","split","new_arr","x","startsWith","replace","includes","filtered_arr","filter","Boolean","parameters"],"sources":["C:/Users/Ting Xian Hao/OneDrive/Documents/GitHub/Team9B/oip9b/node_modules/@espruino-tools/core/lib/device-controller.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DeviceController_instances, _DeviceController_mapStringFunctionToCall, _DeviceController_getFunctionNamesFromString;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DeviceController = void 0;\nconst transpiler_1 = require(\"@espruino-tools/transpiler\");\nconst uart_1 = require(\"@espruino-tools/uart\");\nconst fetchHelper_1 = require(\"./helpers/fetchHelper\");\nclass DeviceController {\n    constructor() {\n        _DeviceController_instances.add(this);\n        this.connected = false;\n        this.UART = uart_1.uart;\n        this.deviceType = undefined;\n        /**\n         * An object holding any functions on the device\n         */\n        this.Call = {};\n        /**\n         * An Object containing all pin methods\n         */\n        this.Pin = {\n            /**\n             *\n             * @param pin the pin to have its value returned\n             * @returns current value of chosen pin\n             */\n            val: (pin) => this.eval(pin + '.read()'),\n            /**\n             *\n             * @param pin the pin to have its analog value changed\n             * @param val should be between 0 and 1, e.g. 0.5\n             */\n            analogOn: (pin, val) => this.UART.write('analogWrite(' + pin + ',' + val + ');\\n'),\n            /**\n             *\n             * @param pin the pin to have its digital value changed\n             * @param val can be either 0 or 1 for off or on\n             */\n            digitalOn: (pin, val) => this.UART.write('digitalWrite(' + pin + ',' + val + ');\\n'),\n            /**\n             *\n             * @param pin the pin to be toggled\n             */\n            digitalToggle: (pin) => this.UART.write(pin + '.toggle();\\n'),\n            /**\n             *\n             * @param pin the pin to be reset\n             */\n            reset: (pin) => this.UART.write(pin + '.reset();\\n'),\n            /**\n             *\n             * @param pin the pin to gather information from\n             * @returns a promise containing pin info\n             */\n            getInfo: (pin) => this.eval(pin + '.getInfo()'),\n        };\n    }\n    /**\n     *\n     * @returns  promise containing all code stored on device\n     */\n    dump() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.eval('E.dumpStr()');\n        });\n    }\n    /**\n     *\n     * @returns device type of connected device\n     */\n    getDeviceType() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.eval(`process.env.BOARD`);\n        });\n    }\n    /**\n     *\n     * @returns battery percentage of the connected device\n     */\n    getBattery() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.eval(`E.getBattery()`);\n        });\n    }\n    /**\n     *\n     * @param code code to be evaluated\n     * @returns the response from the device in a Promise\n     */\n    eval(code) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const p = new Promise((resolve) => {\n                let callback = (data, log) => {\n                    if (!log)\n                        log = '';\n                    resolve({ data, log });\n                };\n                this.UART.eval(code, callback);\n            }).catch((err) => {\n                throw new Error(err);\n            });\n            return p;\n        });\n    }\n    /**\n     *\n     * @param callback the function to be run after connect\n     */\n    connect(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.eval('{}').then(({ data, log }) => {\n                if (log == 'success') {\n                    this.connected = true;\n                    this.UART.write('digitalPulse(LED2,1,100);\\n');\n                    this.getDeviceFunctions().then(() => {\n                        callback === null || callback === void 0 ? void 0 : callback();\n                    });\n                }\n            });\n        });\n    }\n    /**\n     *\n     * @param callback the function to be run after disconnect\n     */\n    disconnect(callback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.eval('digitalPulse(LED1,1,100);\\n').then(() => {\n                var _a;\n                (_a = this.UART) === null || _a === void 0 ? void 0 : _a.close();\n                this.connected = false;\n                this.deviceType = undefined;\n                callback === null || callback === void 0 ? void 0 : callback();\n            });\n        });\n    }\n    /**\n     * Clears any saved data on device.\n     */\n    reset() {\n        this.UART.write('reset(true);\\n');\n    }\n    /**\n     *\n     * > **WARNING**  THIS CODE DOES NO CHECKS AND IS ONLY AVAILABLE FOR SPEED\n     *                PURPOSES.\n     *\n     *                THIS SHOULD BE USED EXCLUSIVELY FOR WHEN CODE DOESNT NEED\n     *                TO BE SAVED OR YOU ALREADY KNOW THE METHODS AVAILABLE\n     *\n     * @param data code written in espruino native code NOT IN THIS LIBRARIES CODE\n     */\n    quickWrite(data) {\n        this.UART.write(data);\n    }\n    /**\n     *\n     * @param code code written in espruino native code, NOT IN THIS LIBRARIES CODE\n     * @param flash\n     */\n    loadCode(code, flash = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let deviceType = yield this.getDeviceType();\n            if (deviceType === 'BANGLEJS') {\n                flash = false;\n            }\n            let success = false;\n            this.reset();\n            if (!flash && !success) {\n                this.UART.write(code);\n            }\n            else if (!success && deviceType !== 'PIXLJS') {\n                this.UART.write(`E.setBootCode(\\`${code}\\`,true);\\n`);\n                this.UART.write('load();\\n');\n            }\n            else if (!success) {\n                this.UART.write(code);\n                this.UART.write('save();\\n');\n                this.UART.write('load();\\n');\n            }\n            this.getDeviceFunctions();\n        });\n    }\n    setInterval(func, ms = 2000) {\n        let transpiled_code = (0, transpiler_1.transpile)(`DeviceController.setInterval(${func.toString()}, ${ms})`, {\n            additional_callees: ['p'],\n            parse_type: 'module',\n        });\n        this.UART.write(transpiled_code);\n    }\n    /**\n     *\n     * @param url the url to grab data from\n     * @param flash\n     */\n    upload(url, flash = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield (0, fetchHelper_1.fetchToText)(url).then((rawCode) => __awaiter(this, void 0, void 0, function* () {\n                this.loadCode(rawCode, flash);\n            }));\n        });\n    }\n    /**\n     * helper function to grab functions from device\n     */\n    getDeviceFunctions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.Call = yield this.dump().then((dumpedStr) => {\n                __classPrivateFieldGet(this, _DeviceController_instances, \"m\", _DeviceController_mapStringFunctionToCall).call(this, __classPrivateFieldGet(this, _DeviceController_instances, \"m\", _DeviceController_getFunctionNamesFromString).call(this, dumpedStr.data));\n            });\n        });\n    }\n}\nexports.DeviceController = DeviceController;\n_DeviceController_instances = new WeakSet(), _DeviceController_mapStringFunctionToCall = function _DeviceController_mapStringFunctionToCall(funcArr) {\n    funcArr.map((func) => {\n        /*\n          This anonymous function converts the array of function data into a digestible callable javascript object\n          in notation function_name : function(param1,...){}\n          It then\n        */\n        this.Call = Object.assign({ [func.name]: (...args) => {\n                this.UART.write(`${func.name}(${JSON.stringify(args.join(','))});\\n`);\n            } }, this.Call);\n    });\n}, _DeviceController_getFunctionNamesFromString = function _DeviceController_getFunctionNamesFromString(str) {\n    let str_arr = str.split('\\n');\n    let new_arr = str_arr.map((x) => {\n        if (x.startsWith('function')) {\n            return x.split('{')[0].replace('function', '').split(' ').join('');\n        }\n        else if (x.startsWith('let') || x.startsWith('const')) {\n            if (x.includes('function(') || x.includes('=>')) {\n                if (x.includes('=>')) {\n                    return x\n                        .split('=>')[0]\n                        .replace('let', '')\n                        .replace('const', '')\n                        .replace('=', '')\n                        .split(' ')\n                        .join('');\n                }\n                else {\n                    return x\n                        .split('{')[0]\n                        .replace('let', '')\n                        .replace('const', '')\n                        .replace('=', '')\n                        .replace('function', '')\n                        .split(' ')\n                        .join('');\n                }\n            }\n        }\n    });\n    let filtered_arr = new_arr.filter(Boolean);\n    return filtered_arr.map((func) => {\n        return {\n            name: func.split('(')[0],\n            parameters: func.split('(')[1].replace(')', '').split(',')[0] !== ''\n                ? func.split('(')[1].replace(')', '').split(',')\n                : [],\n        };\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}