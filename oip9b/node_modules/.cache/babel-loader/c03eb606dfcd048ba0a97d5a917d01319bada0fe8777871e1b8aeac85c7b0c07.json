{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _UARTClass_instances, _UARTClass_debug, _UARTClass_flowControl, _UARTClass_queue, _UARTClass_sentChunks, _UARTClass_connection, _UARTClass_endpoints, _UARTClass_handleQueue, _UARTClass_log, _UARTClass_checkIfSupported;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uart = void 0;\nconst stringArrayBuffer_1 = require(\"./helpers/stringArrayBuffer\");\nconst modal_1 = require(\"./styles/modal\");\nconst isIOS_1 = require(\"./helpers/isIOS\");\nclass UARTClass {\n  constructor(options) {\n    _UARTClass_instances.add(this);\n    _UARTClass_debug.set(this, 3);\n    this.isBusy = false;\n    _UARTClass_flowControl.set(this, true);\n    _UARTClass_queue.set(this, []);\n    _UARTClass_sentChunks.set(this, []);\n    _UARTClass_connection.set(this, void 0);\n    _UARTClass_endpoints.set(this, [{\n      name: \"Web Bluetooth\",\n      description: \"Bluetooth LE devices\",\n      svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17.71 7.71L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z\" fill=\"#d2d2d2\"/></svg>',\n      isSupported: () => {\n        if (navigator.platform.indexOf(\"Win\") >= 0 && (navigator.userAgent.indexOf(\"Chrome/54\") >= 0 || navigator.userAgent.indexOf(\"Chrome/55\") >= 0 || navigator.userAgent.indexOf(\"Chrome/56\") >= 0)) return \"Chrome <56 in Windows has navigator.bluetooth but it's not implemented properly\";\n        if (window && window.location && window.location.protocol == \"http:\" && window.location.hostname != \"localhost\") return \"Serving off HTTP (not HTTPS) - Web Bluetooth not enabled\";\n        if (navigator.bluetooth) return true;\n        var iOS = (0, isIOS_1.isIOS)();\n        if (iOS) {\n          return \"To use Web Bluetooth on iOS you'll need the WebBLE App.\\nPlease go to https://itunes.apple.com/us/app/webble/id1193531073 to download it.\";\n        } else {\n          return \"This Web Browser doesn't support Web Bluetooth.\\nPlease see https://www.espruino.com/Puck.js+Quick+Start\";\n        }\n      },\n      connect: (connection, callback) => {\n        var NORDIC_SERVICE = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\n        var NORDIC_TX = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\";\n        var NORDIC_RX = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";\n        var DEFAULT_CHUNKSIZE = 20;\n        // FIND OUT CORRECT TYPES FOR THIS\n        var btServer = undefined;\n        var btService;\n        var txCharacteristic;\n        var rxCharacteristic;\n        var txDataQueue = [];\n        var flowControlXOFF = false;\n        var chunkSize = DEFAULT_CHUNKSIZE;\n        connection.close = callback => {\n          connection.isOpening = false;\n          if (connection.isOpen) {\n            connection.isOpen = false;\n            connection.emit(\"close\");\n          } else {\n            if (callback) callback(null);\n          }\n          if (btServer) {\n            btServer.disconnect();\n            btServer = undefined;\n            txCharacteristic = undefined;\n            rxCharacteristic = undefined;\n          }\n        };\n        connection.write = (data, callback) => {\n          if (data) txDataQueue.push({\n            data: data,\n            callback: callback,\n            maxLength: data.length\n          });\n          const writeChunk = () => {\n            if (flowControlXOFF) {\n              // flow control - try again later\n              setTimeout(writeChunk, 50);\n              return;\n            }\n            var chunk;\n            if (!txDataQueue.length) {\n              return;\n            }\n            var txItem = txDataQueue[0];\n            if (txItem.data.length <= chunkSize) {\n              chunk = txItem.data;\n              txItem.data = undefined;\n            } else {\n              chunk = txItem.data.substr(0, chunkSize);\n              txItem.data = txItem.data.substr(chunkSize);\n            }\n            connection.txInProgress = true;\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Sending \" + JSON.stringify(chunk));\n            __classPrivateFieldGet(this, _UARTClass_sentChunks, \"f\").push(JSON.stringify(chunk));\n            txCharacteristic.writeValue((0, stringArrayBuffer_1.str2ab)(chunk)).then(() => {\n              __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Sent\");\n              if (!txItem.data) {\n                txDataQueue.shift(); // remove this element\n                if (txItem.callback) txItem.callback();\n              }\n              connection.txInProgress = false;\n              writeChunk();\n            }).catch(error => {\n              __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"SEND ERROR: \" + error);\n              txDataQueue = [];\n              connection.close();\n            });\n          };\n          if (connection.isOpen && !connection.txInProgress) writeChunk();\n        };\n        navigator.bluetooth.requestDevice({\n          filters: [{\n            namePrefix: \"Puck.js\"\n          }, {\n            namePrefix: \"Pixl.js\"\n          }, {\n            namePrefix: \"MDBT42Q\"\n          }, {\n            namePrefix: \"Bangle\"\n          }, {\n            namePrefix: \"RuuviTag\"\n          }, {\n            namePrefix: \"iTracker\"\n          }, {\n            namePrefix: \"Thingy\"\n          }, {\n            namePrefix: \"Espruino\"\n          }, {\n            services: [NORDIC_SERVICE]\n          }],\n          optionalServices: [NORDIC_SERVICE]\n        }).then(device => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Device Name:       \" + device.name);\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Device ID:         \" + device.id);\n          // Was deprecated: Should use getPrimaryServices for this in future\n          //log('BT>  Device UUIDs:      ' + device.uuids.join('\\n' + ' '.repeat(21)));\n          device.addEventListener(\"gattserverdisconnected\", () => {\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Disconnected (gattserverdisconnected)\");\n            connection.close();\n          });\n          return device.gatt.connect();\n        }).then(server => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Connected\");\n          btServer = server;\n          return server.getPrimaryService(NORDIC_SERVICE);\n        }).then(service => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Got service\");\n          btService = service;\n          return btService.getCharacteristic(NORDIC_RX);\n        }).then(characteristic => {\n          rxCharacteristic = characteristic;\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"RX characteristic:\" + JSON.stringify(rxCharacteristic));\n          rxCharacteristic.addEventListener(\"characteristicvaluechanged\", event => {\n            var dataview = event.target.value;\n            if (dataview.byteLength > chunkSize) {\n              __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Received packet of length \" + dataview.byteLength + \", increasing chunk size\");\n              chunkSize = dataview.byteLength;\n            }\n            if (__classPrivateFieldGet(this, _UARTClass_flowControl, \"f\")) {\n              for (var i = 0; i < dataview.byteLength; i++) {\n                var ch = dataview.getUint8(i);\n                if (ch == 17) {\n                  // XON\n                  __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"XON received => resume upload\");\n                  flowControlXOFF = false;\n                }\n                if (ch == 19) {\n                  // XOFF\n                  __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"XOFF received => pause upload\");\n                  flowControlXOFF = true;\n                }\n              }\n            }\n            var str = (0, stringArrayBuffer_1.ab2str)(dataview.buffer);\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Received \" + JSON.stringify(str));\n            connection.emit(\"data\", str);\n          });\n          return rxCharacteristic.startNotifications();\n        }).then(function () {\n          return btService.getCharacteristic(NORDIC_TX);\n        }).then(characteristic => {\n          txCharacteristic = characteristic;\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"TX characteristic:\" + JSON.stringify(txCharacteristic));\n        }).then(() => {\n          connection.txInProgress = false;\n          connection.isOpen = true;\n          connection.isOpening = false;\n          this.isBusy = false;\n          __classPrivateFieldSet(this, _UARTClass_queue, [], \"f\");\n          callback(connection);\n          connection.emit(\"open\");\n          // if we had any writes queued, do them now\n          connection.write();\n        }).catch(error => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"ERROR: \" + error);\n          connection.close();\n        });\n        return connection;\n      }\n    }, {\n      name: \"Web Serial\",\n      description: \"USB connected devices\",\n      svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z\" fill=\"#d2d2d2\"/></svg>',\n      isSupported: function () {\n        if (!navigator.serial) return \"No navigator.serial - Web Serial not enabled\";\n        if (window && window.location && window.location.protocol == \"http:\" && window.location.hostname != \"localhost\") return \"Serving off HTTP (not HTTPS) - Web Serial not enabled\";\n        return true;\n      },\n      connect: (connection, callback) => {\n        var serialPort;\n        const disconnected = () => {\n          connection.isOpening = false;\n          if (connection.isOpen) {\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Disconnected\");\n            connection.isOpen = false;\n            connection.emit(\"close\");\n          }\n        };\n        // TODO: Pass USB vendor and product ID filter when supported by Chrome.\n        navigator.serial.requestPort().then(port => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Connecting to serial port\");\n          serialPort = port;\n          return port.open({\n            baudRate: 115200\n          });\n        }).then(() => {\n          const readLoop = () => {\n            var reader = serialPort.readable.getReader();\n            // FIND OUT CORRECT TYPES FOR THIS\n            reader.read().then(({\n              value,\n              done\n            }) => {\n              reader.releaseLock();\n              if (value) {\n                var str = (0, stringArrayBuffer_1.ab2str)(value.buffer);\n                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Received \" + JSON.stringify(str));\n                connection.emit(\"data\", str);\n              }\n              if (done) {\n                disconnected();\n              } else {\n                readLoop();\n              }\n            });\n          };\n          readLoop();\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Serial connected. Receiving data...\");\n          connection.txInProgress = false;\n          connection.isOpen = true;\n          connection.isOpening = false;\n          callback(connection);\n        }).catch(error => {\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, \"ERROR: \" + error);\n          disconnected();\n        });\n        connection.close = function (callback) {\n          if (serialPort) {\n            serialPort.close();\n            serialPort = undefined;\n          }\n          disconnected();\n        };\n        connection.write = (data, callback) => {\n          var writer = serialPort.writable.getWriter();\n          // TODO: progress?\n          writer.write((0, stringArrayBuffer_1.str2ab)(data)).then(() => {\n            callback === null || callback === void 0 ? void 0 : callback(data);\n          }).catch(error => {\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, \"SEND ERROR: \" + error);\n          });\n          writer.releaseLock();\n        };\n        return connection;\n      }\n    }]);\n    this.DATA_WAIT_TIME = options === null || options === void 0 ? void 0 : options.dataWaitTime;\n  }\n  connect(callback) {\n    __classPrivateFieldSet(this, _UARTClass_connection, {\n      on: function (evt, cb) {\n        this[\"on\" + evt] = cb;\n      },\n      emit: function (evt, data) {\n        if (this[\"on\" + evt]) this[\"on\" + evt](data);\n      },\n      isOpen: false,\n      isOpening: true,\n      txInProgress: false\n    }, \"f\");\n    // modal\n    var e = document.createElement(\"div\");\n    e.setAttribute(\"style\", \"position:absolute;top:0px;left:0px;right:0px;bottom:0px;opacity:0.5;z-index:100;background:black;\");\n    // menu\n    var menu = document.createElement(\"div\");\n    menu.setAttribute(\"style\", \"position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-family: Sans-Serif;z-index:101;\");\n    var menutitle = document.createElement(\"div\");\n    menutitle.classList.add(modal_1.classes.menu);\n    var menuContent = document.createElement(\"div\");\n    menuContent.classList.add(\"esp-tools-header-bar\");\n    let menuTitle = document.createElement(\"p\");\n    menuTitle.innerText = \"Connect\";\n    menuContent.appendChild(menuTitle);\n    let menuClose = document.createElement(\"div\");\n    menuClose.innerHTML = '<svg id=\"esp-tools-close-modal\" stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M7,7 L17,17 M7,17 L17,7\"></path></svg>';\n    menuContent.appendChild(menuClose);\n    menutitle.appendChild(menuContent);\n    menu.appendChild(menutitle);\n    var items = document.createElement(\"div\");\n    items.classList.add(modal_1.classes.items);\n    let p = document.createElement(\"p\");\n    p.innerText = \"Select a connection method to pair your device\";\n    items.appendChild(p);\n    menu.appendChild(items);\n    __classPrivateFieldGet(this, _UARTClass_endpoints, \"f\").forEach(endpoint => {\n      var supported = endpoint.isSupported();\n      if (supported !== true) __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, endpoint.name + \" not supported, \" + supported);\n      var ep = document.createElement(\"div\");\n      ep.classList.add(modal_1.classes.endpoints);\n      ep.innerHTML = '<div class=\"esp-tools-icons\">' + endpoint.svg + \"</div>\" + '<div class=\"esp-tools-name\">' + endpoint.name + \"</div>\" + '<div class=\"esp-tools-description\">' + endpoint.description + \"</div>\";\n      ep.onclick = evt => {\n        __classPrivateFieldSet(this, _UARTClass_connection, endpoint.connect(__classPrivateFieldGet(this, _UARTClass_connection, \"f\"), callback), \"f\");\n        evt.preventDefault();\n        document.body.removeChild(menu);\n        document.body.removeChild(e);\n      };\n      items.appendChild(ep);\n    });\n    menuClose.onclick = () => {\n      document.body.removeChild(menu);\n      document.body.removeChild(e);\n      __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpening = false;\n      if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen) {\n        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen = false;\n      } else {\n        if (callback) callback(null);\n      }\n    };\n    document.body.appendChild(e);\n    document.body.appendChild(menu);\n    return __classPrivateFieldGet(this, _UARTClass_connection, \"f\");\n  }\n  getWrittenData() {\n    let str_chunks = __classPrivateFieldGet(this, _UARTClass_sentChunks, \"f\").join(\"\");\n    return new Promise(resolve => resolve(str_chunks));\n  }\n  write(data, callback, callbackNewline) {\n    if (!__classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_checkIfSupported).call(this)) return;\n    if (this.isBusy) {\n      __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Busy - adding write to queue\");\n      __classPrivateFieldGet(this, _UARTClass_queue, \"f\").push({\n        type: \"write\",\n        data: data,\n        callback: callback,\n        callbackNewline: callbackNewline\n      });\n      return;\n    }\n    var cbTimeout;\n    const onWritten = () => {\n      if (callbackNewline) {\n        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = () => {\n          var newLineIdx = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.indexOf(\"\\n\");\n          if (newLineIdx >= 0) {\n            var l = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.substr(0, newLineIdx);\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.substr(newLineIdx + 1);\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = undefined;\n            if (cbTimeout) clearTimeout(cbTimeout);\n            cbTimeout = undefined;\n            if (callback) callback(l);\n            this.isBusy = false;\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_handleQueue).call(this);\n          }\n        };\n      }\n      // wait for any received data if we have a callback...\n      var maxTime = 300; // 30 sec - Max time we wait in total, even if getting data\n      var dataWaitTime = callbackNewline ? 100 /*10 sec  if waiting for newline*/ : 0; /*300ms*/\n      var maxDataTime = dataWaitTime; // max time we wait after having received data\n      const timeout = () => {\n        cbTimeout = undefined;\n        if (maxTime) maxTime--;\n        if (maxDataTime) maxDataTime--;\n        if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData) maxDataTime = dataWaitTime;\n        if (maxDataTime && maxTime) {\n          cbTimeout = setTimeout(timeout, 100);\n        } else {\n          __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = undefined;\n          if (callbackNewline) __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"write waiting for newline timed out\");\n          if (callback) callback(__classPrivateFieldGet(this, _UARTClass_connection, \"f\").received);\n          this.isBusy = false;\n          __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_handleQueue).call(this);\n          __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n        }\n        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData = false;\n      };\n      cbTimeout = setTimeout(timeout, 100);\n    };\n    if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\") && (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen || __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpening)) {\n      if (!__classPrivateFieldGet(this, _UARTClass_connection, \"f\").txInProgress) __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n      this.isBusy = true;\n      return __classPrivateFieldGet(this, _UARTClass_connection, \"f\").write(data, onWritten);\n    }\n    __classPrivateFieldSet(this, _UARTClass_connection, this.connect(uart => {\n      if (!uart) {\n        __classPrivateFieldSet(this, _UARTClass_connection, undefined, \"f\");\n        if (callback) callback(null);\n        return;\n      }\n      __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n      __classPrivateFieldGet(this, _UARTClass_connection, \"f\").on(\"data\", d => {\n        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received += d;\n        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData = true;\n        if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb) __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb(d);\n      });\n      __classPrivateFieldGet(this, _UARTClass_connection, \"f\").on(\"close\", d => {\n        __classPrivateFieldSet(this, _UARTClass_connection, undefined, \"f\");\n      });\n      this.isBusy = true;\n      __classPrivateFieldGet(this, _UARTClass_connection, \"f\").write(data, onWritten);\n    }), \"f\");\n  }\n  eval(expr, cb) {\n    if (!__classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_checkIfSupported).call(this)) return false;\n    if (this.isBusy) {\n      __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Busy - adding eval to queue\");\n      __classPrivateFieldGet(this, _UARTClass_queue, \"f\").push({\n        type: \"eval\",\n        expr: expr,\n        cb: cb\n      });\n      return false;\n    }\n    this.write(\"\\x10eval(process.env.CONSOLE).println(JSON.stringify(\" + expr + \"))\\n\", d => {\n      try {\n        var json = JSON.parse(d.trim());\n        cb(json, \"success\");\n      } catch (e) {\n        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Unable to decode \" + JSON.stringify(d) + \", got \" + e.toString());\n        cb(null, \"failed\");\n      }\n    }, true /*callbackNewline*/);\n    return true;\n  }\n  setTime(cb) {\n    let d = new Date();\n    let cmd = \"setTime(\" + d.getTime() / 1000 + \");\";\n    cmd += \"if (E.setTimeZone) E.setTimeZone(\" + d.getTimezoneOffset() / -60 + \");\\n\";\n    this.write(cmd, cb);\n  }\n  isConnected() {\n    return __classPrivateFieldGet(this, _UARTClass_connection, \"f\") !== undefined;\n  }\n  getConnection() {\n    return __classPrivateFieldGet(this, _UARTClass_connection, \"f\");\n  }\n  close() {\n    if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\")) __classPrivateFieldGet(this, _UARTClass_connection, \"f\").close();\n  }\n}\n_UARTClass_debug = new WeakMap(), _UARTClass_flowControl = new WeakMap(), _UARTClass_queue = new WeakMap(), _UARTClass_sentChunks = new WeakMap(), _UARTClass_connection = new WeakMap(), _UARTClass_endpoints = new WeakMap(), _UARTClass_instances = new WeakSet(), _UARTClass_handleQueue = function _UARTClass_handleQueue() {\n  if (!__classPrivateFieldGet(this, _UARTClass_queue, \"f\").length) return;\n  var q = __classPrivateFieldGet(this, _UARTClass_queue, \"f\").shift();\n  __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Executing \" + JSON.stringify(q) + \" from queue\");\n  if (q.type == \"eval\") this.eval(q.expr, q.cb);else if (q.type == \"write\") this.write(q.data, q.callback, q.callbackNewline);else __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Unknown queue item \" + JSON.stringify(q));\n}, _UARTClass_log = function _UARTClass_log(level, s) {\n  level <= __classPrivateFieldGet(this, _UARTClass_debug, \"f\") && console.log(\"<UART> \" + s);\n}, _UARTClass_checkIfSupported = function _UARTClass_checkIfSupported() {\n  var anySupported = false;\n  __classPrivateFieldGet(this, _UARTClass_endpoints, \"f\").forEach(endpoint => {\n    var supported = endpoint.isSupported();\n    if (supported === true) anySupported = true;else __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, endpoint.name + \" not supported, \" + supported);\n  });\n  return anySupported;\n};\nlet uart = new UARTClass();\nexports.uart = uart;","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_UARTClass_instances","_UARTClass_debug","_UARTClass_flowControl","_UARTClass_queue","_UARTClass_sentChunks","_UARTClass_connection","_UARTClass_endpoints","_UARTClass_handleQueue","_UARTClass_log","_UARTClass_checkIfSupported","Object","defineProperty","exports","uart","stringArrayBuffer_1","require","modal_1","isIOS_1","UARTClass","constructor","options","add","isBusy","name","description","svg","isSupported","navigator","platform","indexOf","userAgent","window","location","protocol","hostname","bluetooth","iOS","isIOS","connect","connection","callback","NORDIC_SERVICE","NORDIC_TX","NORDIC_RX","DEFAULT_CHUNKSIZE","btServer","undefined","btService","txCharacteristic","rxCharacteristic","txDataQueue","flowControlXOFF","chunkSize","close","isOpening","isOpen","emit","disconnect","write","data","push","maxLength","length","writeChunk","setTimeout","chunk","txItem","substr","txInProgress","JSON","stringify","writeValue","str2ab","then","shift","catch","error","requestDevice","filters","namePrefix","services","optionalServices","device","id","addEventListener","gatt","server","getPrimaryService","service","getCharacteristic","characteristic","event","dataview","target","byteLength","i","ch","getUint8","str","ab2str","buffer","startNotifications","serial","serialPort","disconnected","requestPort","port","open","baudRate","readLoop","reader","readable","getReader","read","done","releaseLock","writer","writable","getWriter","DATA_WAIT_TIME","dataWaitTime","on","evt","cb","e","document","createElement","setAttribute","menu","menutitle","classList","classes","menuContent","menuTitle","innerText","appendChild","menuClose","innerHTML","items","p","forEach","endpoint","supported","ep","endpoints","onclick","preventDefault","body","removeChild","getWrittenData","str_chunks","join","Promise","resolve","callbackNewline","type","cbTimeout","onWritten","newLineIdx","received","l","clearTimeout","maxTime","maxDataTime","timeout","hadData","d","eval","expr","json","parse","trim","toString","setTime","Date","cmd","getTime","getTimezoneOffset","isConnected","getConnection","WeakMap","WeakSet","q","level","s","console","log","anySupported"],"sources":["C:/Users/Ting Xian Hao/OneDrive/Documents/GitHub/Team9B/oip9b/node_modules/@espruino-tools/uart/lib/uart.js"],"sourcesContent":["\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _UARTClass_instances, _UARTClass_debug, _UARTClass_flowControl, _UARTClass_queue, _UARTClass_sentChunks, _UARTClass_connection, _UARTClass_endpoints, _UARTClass_handleQueue, _UARTClass_log, _UARTClass_checkIfSupported;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uart = void 0;\nconst stringArrayBuffer_1 = require(\"./helpers/stringArrayBuffer\");\nconst modal_1 = require(\"./styles/modal\");\nconst isIOS_1 = require(\"./helpers/isIOS\");\nclass UARTClass {\n    constructor(options) {\n        _UARTClass_instances.add(this);\n        _UARTClass_debug.set(this, 3);\n        this.isBusy = false;\n        _UARTClass_flowControl.set(this, true);\n        _UARTClass_queue.set(this, []);\n        _UARTClass_sentChunks.set(this, []);\n        _UARTClass_connection.set(this, void 0);\n        _UARTClass_endpoints.set(this, [\n            {\n                name: \"Web Bluetooth\",\n                description: \"Bluetooth LE devices\",\n                svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M17.71 7.71L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z\" fill=\"#d2d2d2\"/></svg>',\n                isSupported: () => {\n                    if (navigator.platform.indexOf(\"Win\") >= 0 &&\n                        (navigator.userAgent.indexOf(\"Chrome/54\") >= 0 ||\n                            navigator.userAgent.indexOf(\"Chrome/55\") >= 0 ||\n                            navigator.userAgent.indexOf(\"Chrome/56\") >= 0))\n                        return \"Chrome <56 in Windows has navigator.bluetooth but it's not implemented properly\";\n                    if (window &&\n                        window.location &&\n                        window.location.protocol == \"http:\" &&\n                        window.location.hostname != \"localhost\")\n                        return \"Serving off HTTP (not HTTPS) - Web Bluetooth not enabled\";\n                    if (navigator.bluetooth)\n                        return true;\n                    var iOS = (0, isIOS_1.isIOS)();\n                    if (iOS) {\n                        return \"To use Web Bluetooth on iOS you'll need the WebBLE App.\\nPlease go to https://itunes.apple.com/us/app/webble/id1193531073 to download it.\";\n                    }\n                    else {\n                        return \"This Web Browser doesn't support Web Bluetooth.\\nPlease see https://www.espruino.com/Puck.js+Quick+Start\";\n                    }\n                },\n                connect: (connection, callback) => {\n                    var NORDIC_SERVICE = \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\";\n                    var NORDIC_TX = \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\";\n                    var NORDIC_RX = \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\";\n                    var DEFAULT_CHUNKSIZE = 20;\n                    // FIND OUT CORRECT TYPES FOR THIS\n                    var btServer = undefined;\n                    var btService;\n                    var txCharacteristic;\n                    var rxCharacteristic;\n                    var txDataQueue = [];\n                    var flowControlXOFF = false;\n                    var chunkSize = DEFAULT_CHUNKSIZE;\n                    connection.close = (callback) => {\n                        connection.isOpening = false;\n                        if (connection.isOpen) {\n                            connection.isOpen = false;\n                            connection.emit(\"close\");\n                        }\n                        else {\n                            if (callback)\n                                callback(null);\n                        }\n                        if (btServer) {\n                            btServer.disconnect();\n                            btServer = undefined;\n                            txCharacteristic = undefined;\n                            rxCharacteristic = undefined;\n                        }\n                    };\n                    connection.write = (data, callback) => {\n                        if (data)\n                            txDataQueue.push({\n                                data: data,\n                                callback: callback,\n                                maxLength: data.length,\n                            });\n                        const writeChunk = () => {\n                            if (flowControlXOFF) {\n                                // flow control - try again later\n                                setTimeout(writeChunk, 50);\n                                return;\n                            }\n                            var chunk;\n                            if (!txDataQueue.length) {\n                                return;\n                            }\n                            var txItem = txDataQueue[0];\n                            if (txItem.data.length <= chunkSize) {\n                                chunk = txItem.data;\n                                txItem.data = undefined;\n                            }\n                            else {\n                                chunk = txItem.data.substr(0, chunkSize);\n                                txItem.data = txItem.data.substr(chunkSize);\n                            }\n                            connection.txInProgress = true;\n                            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Sending \" + JSON.stringify(chunk));\n                            __classPrivateFieldGet(this, _UARTClass_sentChunks, \"f\").push(JSON.stringify(chunk));\n                            txCharacteristic\n                                .writeValue((0, stringArrayBuffer_1.str2ab)(chunk))\n                                .then(() => {\n                                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Sent\");\n                                if (!txItem.data) {\n                                    txDataQueue.shift(); // remove this element\n                                    if (txItem.callback)\n                                        txItem.callback();\n                                }\n                                connection.txInProgress = false;\n                                writeChunk();\n                            })\n                                .catch((error) => {\n                                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"SEND ERROR: \" + error);\n                                txDataQueue = [];\n                                connection.close();\n                            });\n                        };\n                        if (connection.isOpen && !connection.txInProgress)\n                            writeChunk();\n                    };\n                    navigator.bluetooth\n                        .requestDevice({\n                        filters: [\n                            { namePrefix: \"Puck.js\" },\n                            { namePrefix: \"Pixl.js\" },\n                            { namePrefix: \"MDBT42Q\" },\n                            { namePrefix: \"Bangle\" },\n                            { namePrefix: \"RuuviTag\" },\n                            { namePrefix: \"iTracker\" },\n                            { namePrefix: \"Thingy\" },\n                            { namePrefix: \"Espruino\" },\n                            { services: [NORDIC_SERVICE] },\n                        ],\n                        optionalServices: [NORDIC_SERVICE],\n                    })\n                        .then((device) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Device Name:       \" + device.name);\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Device ID:         \" + device.id);\n                        // Was deprecated: Should use getPrimaryServices for this in future\n                        //log('BT>  Device UUIDs:      ' + device.uuids.join('\\n' + ' '.repeat(21)));\n                        device.addEventListener(\"gattserverdisconnected\", () => {\n                            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Disconnected (gattserverdisconnected)\");\n                            connection.close();\n                        });\n                        return device.gatt.connect();\n                    })\n                        .then((server) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Connected\");\n                        btServer = server;\n                        return server.getPrimaryService(NORDIC_SERVICE);\n                    })\n                        .then((service) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Got service\");\n                        btService = service;\n                        return btService.getCharacteristic(NORDIC_RX);\n                    })\n                        .then((characteristic) => {\n                        rxCharacteristic = characteristic;\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"RX characteristic:\" + JSON.stringify(rxCharacteristic));\n                        rxCharacteristic.addEventListener(\"characteristicvaluechanged\", (event) => {\n                            var dataview = event.target.value;\n                            if (dataview.byteLength > chunkSize) {\n                                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"Received packet of length \" +\n                                    dataview.byteLength +\n                                    \", increasing chunk size\");\n                                chunkSize = dataview.byteLength;\n                            }\n                            if (__classPrivateFieldGet(this, _UARTClass_flowControl, \"f\")) {\n                                for (var i = 0; i < dataview.byteLength; i++) {\n                                    var ch = dataview.getUint8(i);\n                                    if (ch == 17) {\n                                        // XON\n                                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"XON received => resume upload\");\n                                        flowControlXOFF = false;\n                                    }\n                                    if (ch == 19) {\n                                        // XOFF\n                                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"XOFF received => pause upload\");\n                                        flowControlXOFF = true;\n                                    }\n                                }\n                            }\n                            var str = (0, stringArrayBuffer_1.ab2str)(dataview.buffer);\n                            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Received \" + JSON.stringify(str));\n                            connection.emit(\"data\", str);\n                        });\n                        return rxCharacteristic.startNotifications();\n                    })\n                        .then(function () {\n                        return btService.getCharacteristic(NORDIC_TX);\n                    })\n                        .then((characteristic) => {\n                        txCharacteristic = characteristic;\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"TX characteristic:\" + JSON.stringify(txCharacteristic));\n                    })\n                        .then(() => {\n                        connection.txInProgress = false;\n                        connection.isOpen = true;\n                        connection.isOpening = false;\n                        this.isBusy = false;\n                        __classPrivateFieldSet(this, _UARTClass_queue, [], \"f\");\n                        callback(connection);\n                        connection.emit(\"open\");\n                        // if we had any writes queued, do them now\n                        connection.write();\n                    })\n                        .catch((error) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"ERROR: \" + error);\n                        connection.close();\n                    });\n                    return connection;\n                },\n            },\n            {\n                name: \"Web Serial\",\n                description: \"USB connected devices\",\n                svg: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z\" fill=\"#d2d2d2\"/></svg>',\n                isSupported: function () {\n                    if (!navigator.serial)\n                        return \"No navigator.serial - Web Serial not enabled\";\n                    if (window &&\n                        window.location &&\n                        window.location.protocol == \"http:\" &&\n                        window.location.hostname != \"localhost\")\n                        return \"Serving off HTTP (not HTTPS) - Web Serial not enabled\";\n                    return true;\n                },\n                connect: (connection, callback) => {\n                    var serialPort;\n                    const disconnected = () => {\n                        connection.isOpening = false;\n                        if (connection.isOpen) {\n                            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Disconnected\");\n                            connection.isOpen = false;\n                            connection.emit(\"close\");\n                        }\n                    };\n                    // TODO: Pass USB vendor and product ID filter when supported by Chrome.\n                    navigator.serial\n                        .requestPort()\n                        .then((port) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Connecting to serial port\");\n                        serialPort = port;\n                        return port.open({ baudRate: 115200 });\n                    })\n                        .then(() => {\n                        const readLoop = () => {\n                            var reader = serialPort.readable.getReader();\n                            // FIND OUT CORRECT TYPES FOR THIS\n                            reader.read().then(({ value, done }) => {\n                                reader.releaseLock();\n                                if (value) {\n                                    var str = (0, stringArrayBuffer_1.ab2str)(value.buffer);\n                                    __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Received \" + JSON.stringify(str));\n                                    connection.emit(\"data\", str);\n                                }\n                                if (done) {\n                                    disconnected();\n                                }\n                                else {\n                                    readLoop();\n                                }\n                            });\n                        };\n                        readLoop();\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Serial connected. Receiving data...\");\n                        connection.txInProgress = false;\n                        connection.isOpen = true;\n                        connection.isOpening = false;\n                        callback(connection);\n                    })\n                        .catch((error) => {\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, \"ERROR: \" + error);\n                        disconnected();\n                    });\n                    connection.close = function (callback) {\n                        if (serialPort) {\n                            serialPort.close();\n                            serialPort = undefined;\n                        }\n                        disconnected();\n                    };\n                    connection.write = (data, callback) => {\n                        var writer = serialPort.writable.getWriter();\n                        // TODO: progress?\n                        writer\n                            .write((0, stringArrayBuffer_1.str2ab)(data))\n                            .then(() => {\n                            callback === null || callback === void 0 ? void 0 : callback(data);\n                        })\n                            .catch((error) => {\n                            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, \"SEND ERROR: \" + error);\n                        });\n                        writer.releaseLock();\n                    };\n                    return connection;\n                },\n            },\n        ]);\n        this.DATA_WAIT_TIME = options === null || options === void 0 ? void 0 : options.dataWaitTime;\n    }\n    connect(callback) {\n        __classPrivateFieldSet(this, _UARTClass_connection, {\n            on: function (evt, cb) {\n                this[\"on\" + evt] = cb;\n            },\n            emit: function (evt, data) {\n                if (this[\"on\" + evt])\n                    this[\"on\" + evt](data);\n            },\n            isOpen: false,\n            isOpening: true,\n            txInProgress: false,\n        }, \"f\");\n        // modal\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"style\", \"position:absolute;top:0px;left:0px;right:0px;bottom:0px;opacity:0.5;z-index:100;background:black;\");\n        // menu\n        var menu = document.createElement(\"div\");\n        menu.setAttribute(\"style\", \"position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-family: Sans-Serif;z-index:101;\");\n        var menutitle = document.createElement(\"div\");\n        menutitle.classList.add(modal_1.classes.menu);\n        var menuContent = document.createElement(\"div\");\n        menuContent.classList.add(\"esp-tools-header-bar\");\n        let menuTitle = document.createElement(\"p\");\n        menuTitle.innerText = \"Connect\";\n        menuContent.appendChild(menuTitle);\n        let menuClose = document.createElement(\"div\");\n        menuClose.innerHTML =\n            '<svg id=\"esp-tools-close-modal\" stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 24 24\" height=\"1em\" width=\"1em\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"none\" stroke=\"#000\" stroke-width=\"2\" d=\"M7,7 L17,17 M7,17 L17,7\"></path></svg>';\n        menuContent.appendChild(menuClose);\n        menutitle.appendChild(menuContent);\n        menu.appendChild(menutitle);\n        var items = document.createElement(\"div\");\n        items.classList.add(modal_1.classes.items);\n        let p = document.createElement(\"p\");\n        p.innerText = \"Select a connection method to pair your device\";\n        items.appendChild(p);\n        menu.appendChild(items);\n        __classPrivateFieldGet(this, _UARTClass_endpoints, \"f\").forEach((endpoint) => {\n            var supported = endpoint.isSupported();\n            if (supported !== true)\n                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, endpoint.name + \" not supported, \" + supported);\n            var ep = document.createElement(\"div\");\n            ep.classList.add(modal_1.classes.endpoints);\n            ep.innerHTML =\n                '<div class=\"esp-tools-icons\">' +\n                    endpoint.svg +\n                    \"</div>\" +\n                    '<div class=\"esp-tools-name\">' +\n                    endpoint.name +\n                    \"</div>\" +\n                    '<div class=\"esp-tools-description\">' +\n                    endpoint.description +\n                    \"</div>\";\n            ep.onclick = (evt) => {\n                __classPrivateFieldSet(this, _UARTClass_connection, endpoint.connect(__classPrivateFieldGet(this, _UARTClass_connection, \"f\"), callback), \"f\");\n                evt.preventDefault();\n                document.body.removeChild(menu);\n                document.body.removeChild(e);\n            };\n            items.appendChild(ep);\n        });\n        menuClose.onclick = () => {\n            document.body.removeChild(menu);\n            document.body.removeChild(e);\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpening = false;\n            if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen) {\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen = false;\n            }\n            else {\n                if (callback)\n                    callback(null);\n            }\n        };\n        document.body.appendChild(e);\n        document.body.appendChild(menu);\n        return __classPrivateFieldGet(this, _UARTClass_connection, \"f\");\n    }\n    getWrittenData() {\n        let str_chunks = __classPrivateFieldGet(this, _UARTClass_sentChunks, \"f\").join(\"\");\n        return new Promise((resolve) => resolve(str_chunks));\n    }\n    write(data, callback, callbackNewline) {\n        if (!__classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_checkIfSupported).call(this))\n            return;\n        if (this.isBusy) {\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Busy - adding write to queue\");\n            __classPrivateFieldGet(this, _UARTClass_queue, \"f\").push({\n                type: \"write\",\n                data: data,\n                callback: callback,\n                callbackNewline: callbackNewline,\n            });\n            return;\n        }\n        var cbTimeout;\n        const onWritten = () => {\n            if (callbackNewline) {\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = () => {\n                    var newLineIdx = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.indexOf(\"\\n\");\n                    if (newLineIdx >= 0) {\n                        var l = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.substr(0, newLineIdx);\n                        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received.substr(newLineIdx + 1);\n                        __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = undefined;\n                        if (cbTimeout)\n                            clearTimeout(cbTimeout);\n                        cbTimeout = undefined;\n                        if (callback)\n                            callback(l);\n                        this.isBusy = false;\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_handleQueue).call(this);\n                    }\n                };\n            }\n            // wait for any received data if we have a callback...\n            var maxTime = 300; // 30 sec - Max time we wait in total, even if getting data\n            var dataWaitTime = callbackNewline\n                ? 100 /*10 sec  if waiting for newline*/\n                : 0; /*300ms*/\n            var maxDataTime = dataWaitTime; // max time we wait after having received data\n            const timeout = () => {\n                cbTimeout = undefined;\n                if (maxTime)\n                    maxTime--;\n                if (maxDataTime)\n                    maxDataTime--;\n                if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData)\n                    maxDataTime = dataWaitTime;\n                if (maxDataTime && maxTime) {\n                    cbTimeout = setTimeout(timeout, 100);\n                }\n                else {\n                    __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb = undefined;\n                    if (callbackNewline)\n                        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 2, \"write waiting for newline timed out\");\n                    if (callback)\n                        callback(__classPrivateFieldGet(this, _UARTClass_connection, \"f\").received);\n                    this.isBusy = false;\n                    __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_handleQueue).call(this);\n                    __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n                }\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData = false;\n            };\n            cbTimeout = setTimeout(timeout, 100);\n        };\n        if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\") &&\n            (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpen || __classPrivateFieldGet(this, _UARTClass_connection, \"f\").isOpening)) {\n            if (!__classPrivateFieldGet(this, _UARTClass_connection, \"f\").txInProgress)\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n            this.isBusy = true;\n            return __classPrivateFieldGet(this, _UARTClass_connection, \"f\").write(data, onWritten);\n        }\n        __classPrivateFieldSet(this, _UARTClass_connection, this.connect((uart) => {\n            if (!uart) {\n                __classPrivateFieldSet(this, _UARTClass_connection, undefined, \"f\");\n                if (callback)\n                    callback(null);\n                return;\n            }\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received = \"\";\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").on(\"data\", (d) => {\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").received += d;\n                __classPrivateFieldGet(this, _UARTClass_connection, \"f\").hadData = true;\n                if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb)\n                    __classPrivateFieldGet(this, _UARTClass_connection, \"f\").cb(d);\n            });\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").on(\"close\", (d) => {\n                __classPrivateFieldSet(this, _UARTClass_connection, undefined, \"f\");\n            });\n            this.isBusy = true;\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").write(data, onWritten);\n        }), \"f\");\n    }\n    eval(expr, cb) {\n        if (!__classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_checkIfSupported).call(this))\n            return false;\n        if (this.isBusy) {\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Busy - adding eval to queue\");\n            __classPrivateFieldGet(this, _UARTClass_queue, \"f\").push({ type: \"eval\", expr: expr, cb: cb });\n            return false;\n        }\n        this.write(\"\\x10eval(process.env.CONSOLE).println(JSON.stringify(\" + expr + \"))\\n\", (d) => {\n            try {\n                var json = JSON.parse(d.trim());\n                cb(json, \"success\");\n            }\n            catch (e) {\n                __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Unable to decode \" + JSON.stringify(d) + \", got \" + e.toString());\n                cb(null, \"failed\");\n            }\n        }, true /*callbackNewline*/);\n        return true;\n    }\n    setTime(cb) {\n        let d = new Date();\n        let cmd = \"setTime(\" + d.getTime() / 1000 + \");\";\n        cmd +=\n            \"if (E.setTimeZone) E.setTimeZone(\" +\n                d.getTimezoneOffset() / -60 +\n                \");\\n\";\n        this.write(cmd, cb);\n    }\n    isConnected() {\n        return __classPrivateFieldGet(this, _UARTClass_connection, \"f\") !== undefined;\n    }\n    getConnection() {\n        return __classPrivateFieldGet(this, _UARTClass_connection, \"f\");\n    }\n    close() {\n        if (__classPrivateFieldGet(this, _UARTClass_connection, \"f\"))\n            __classPrivateFieldGet(this, _UARTClass_connection, \"f\").close();\n    }\n}\n_UARTClass_debug = new WeakMap(), _UARTClass_flowControl = new WeakMap(), _UARTClass_queue = new WeakMap(), _UARTClass_sentChunks = new WeakMap(), _UARTClass_connection = new WeakMap(), _UARTClass_endpoints = new WeakMap(), _UARTClass_instances = new WeakSet(), _UARTClass_handleQueue = function _UARTClass_handleQueue() {\n    if (!__classPrivateFieldGet(this, _UARTClass_queue, \"f\").length)\n        return;\n    var q = __classPrivateFieldGet(this, _UARTClass_queue, \"f\").shift();\n    __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 3, \"Executing \" + JSON.stringify(q) + \" from queue\");\n    if (q.type == \"eval\")\n        this.eval(q.expr, q.cb);\n    else if (q.type == \"write\")\n        this.write(q.data, q.callback, q.callbackNewline);\n    else\n        __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 1, \"Unknown queue item \" + JSON.stringify(q));\n}, _UARTClass_log = function _UARTClass_log(level, s) {\n    level <= __classPrivateFieldGet(this, _UARTClass_debug, \"f\") && console.log(\"<UART> \" + s);\n}, _UARTClass_checkIfSupported = function _UARTClass_checkIfSupported() {\n    var anySupported = false;\n    __classPrivateFieldGet(this, _UARTClass_endpoints, \"f\").forEach((endpoint) => {\n        var supported = endpoint.isSupported();\n        if (supported === true)\n            anySupported = true;\n        else\n            __classPrivateFieldGet(this, _UARTClass_instances, \"m\", _UARTClass_log).call(this, 0, endpoint.name + \" not supported, \" + supported);\n    });\n    return anySupported;\n};\nlet uart = new UARTClass();\nexports.uart = uart;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}